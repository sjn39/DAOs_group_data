{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/create-a-new-opcode-for-muldiv/8574",
            "title": "Create a new opcode for muldiv ",
            "index": 8574,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm",
                "opcodes"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/moodysalem",
                    "index": "1",
                    "likes": "5",
                    "time": "11/03/2022-16:16:31",
                    "content": "In Uniswap V3, we make heavy use of a FullMath#mulDiv, which allows you to multiply two numbers x and y then divide by a third number d, when x * y > type(uint256).max but x * y / d <= type(uint256).max This function is extremely useful to smart contract developers working with fixed point math. Hari (@_hrkrshnn) suggested that we write an EIP to add a muldiv opcode. Is there any reason this shouldn\u2019t be built into the EVM? Should it be a precompile since the result can overflow? ",
                    "links": [
                        "https://twitter.com/_hrkrshnn"
                    ],
                    "GPT-summary": "The author is proposing the creation of a new opcode for muldiv in Uniswap V3, which is useful for smart contract developers working with fixed point math. The author is asking for feedback on whether this should be built into the EVM or be a precompile, and if there are any reasons why it shouldn't be implemented. A third party is giving constructive criticism and asking questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Interoperability and Scalability",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.393320964749536
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lukasz-glen",
                    "index": "2",
                    "likes": "0",
                    "time": "12/03/2022-20:34:36",
                    "content": "What about signed int256? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "3",
                    "likes": "0",
                    "time": "14/03/2022-11:40:03",
                    "content": "So this suppose to work like MULMOD except it should return quotient instead of remainder? You also need to specify what happens when divisor is zero and when quotient is bigger than type(uint256).max. But fundamentally, I don\u2019t see technical reasons not to have it if useful. The division algorithm in MULMOD and other instructions computes both quotient and remainder in general case. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.225
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hrkrshnn",
                    "index": "4",
                    "likes": "0",
                    "time": "14/03/2022-13:46:14",
                    "content": "Yes. It should be the quotient for from the mulmod algorithm. If the quotient is bigger, I was thinking maybe it should truncate to 256 bits. Just and(2**256 - 1, 512-bit-quotient). The zero divisor case can be the same as that for mulmod. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/moodysalem",
                    "index": "5",
                    "likes": "0",
                    "time": "14/03/2022-14:01:50",
                    "content": "Maybe this is obvious, but how do you detect the calculation overflowed if it just returns the lower 256 bits on overflow? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/BoringCrypto",
                    "index": "6",
                    "likes": "0",
                    "time": "16/03/2022-08:06:54",
                    "content": "This would indeed be very useful. I use this ALL THE TIME! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "7",
                    "likes": "0",
                    "time": "16/03/2022-08:28:05",
                    "content": "Truncating to 256-bit is straight-forward from implementation perspective. But this probably should be checked with formal verification. IIRC returning 0 for division by 0 causes some troubles in verification. To be clear, this very much make sense as an EIP draft. Someone should start writing it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.8999999999999995
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PaulRBerg",
                    "index": "8",
                    "likes": "0",
                    "time": "12/04/2022-15:05:08",
                    "content": "    BoringCrypto:  This would indeed be very useful. I use this ALL THE TIME!   Seconded. A native muldiv opcode would allow me to do away with my monster implementation in PRBMath. And I guess a precompile would be faster than any implementation available today? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.21875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/moodysalem",
                    "index": "9",
                    "likes": "1",
                    "time": "18/04/2022-13:57:04",
                    "content": "@hrkrshnn et al started an EIP here! MULDIV instruction by hrkrshnn \u00b7 Pull Request #5000 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/moodysalem",
                    "index": "10",
                    "likes": "0",
                    "time": "02/06/2022-15:53:17",
                    "content": "@hrkrshnn Why did you opt for special casing z = 0 instead of returning two stack items, from the EIP?   Returning two stack items, higher and lower order bits   ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.517857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "11",
                    "likes": "0",
                    "time": "13/07/2022-16:27:01",
                    "content": "Yup! It was merged today: EIP-5000: MULDIV instruction ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1647"
}