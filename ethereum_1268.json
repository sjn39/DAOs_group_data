{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1138-human-readable-transaction-requests/565",
            "title": "EIP-1138: Human-Readable Transaction Requests ",
            "index": 565,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "1",
                    "likes": "2",
                    "time": "18/06/2018-17:37:42",
                    "content": "I wanted to bring up here the discussion for Human-Readable Transaction Requests that Witek Radomski proposed   github.com/ethereum/EIPs      Issue: ERC: Human-Readable Transaction Requests  \t \topened by coinfork \ton 2018-06-07 \t \t \t  --- eip: 1138 title: Human-Readable Transaction Requests author: Witek Radomski <witek@enjin.com> type: Standards Track category: ERC status: WIP created: 2018-06-06 discussions-to: https://github.com/ethereum/EIPs/issues/1138 requires: 681, 831 --- Simple Summary A standard format for providing...        On WalletConnect we have a method to relay a transaction request from the desktop Dapp to the mobile Wallet but currently this simply provides a raw transaction that the Wallet needs to parse in order to display to the user what\u2019s being requested to be signed With this EIP it would enable not only to share this information between the Dapp and the Wallet to display to the user but also to generate a raw transaction to be signed and broadcasted. ",
                    "links": [
                        "https://github.com/coinfork",
                        "https://github.com/ethereum/EIPs/issues/1138",
                        "https://github.com/coinfork",
                        "https://github.com/ethereum/EIPs/issues/1138",
                        "https://ethereum-magicians.org/t/human-readable-machine-verifiable-transaction-requests/750"
                    ],
                    "GPT-summary": "The post discusses a proposal for a standard format for providing human-readable transaction requests in Ethereum. The author explains the proposal and its benefits, while a third party provides constructive criticism and asks questions about the proposal. There is no indication of collaboration or advertising.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None"
                    ],
                    "Sentiment": 4.670329670329671
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "2",
                    "likes": "0",
                    "time": "18/06/2018-17:41:30",
                    "content": "This proposal includes parameters for sharing a summary, a description and an icon in the transaction request to display information that may not be available on the wallet. However this still needs to be machine verifiable otherwise it opens up vulnerabilities for phishing ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/alexvandesande",
                    "index": "3",
                    "likes": "2",
                    "time": "18/06/2018-20:36:33",
                    "content": " ethereum:makerdai.eth/transfer&address=notascammer.eth&uint256=100000e18&param=_to&param=_value&description=Buys a cute innocent little kitten. Pay no attention to the DAI transfer call, I swear all this does is buy a super cute kitten!  I think this is the wrong approach. We should not trust the app to describe to us what the transactions does. Instead, we should rely on a Radspec description of the contract functions which is provided by either the contract itself or given by the client/wallet. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 6.059027777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "4",
                    "likes": "0",
                    "time": "18/06/2018-22:09:33",
                    "content": "Amazing, exactly what I was looking for allowing the description to be verifiable  I\u2019ve commented on the github issue for this EIP ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "2",
                    "time": "19/06/2018-03:23:59",
                    "content": "@pedrouid I recommend checking out https://github.com/ethereum/EIPs/issues/719.  It is in dire need of a champion, I drafted up the issue hoping someone would get excited enough about it to take it to the finish line but no such luck so far.  If you are really interested in informed signing requests, that is where I recommend you start. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "6",
                    "likes": "0",
                    "time": "19/06/2018-14:06:43",
                    "content": "Thanks for sharing this @MicahZoltu! There is definitely a lot of candidates for tackling machine-verifiable human-readable transaction requests. So far we have the 681, 831, 719, 1138 and also radspec I think the key aspects that will make or break from all of these is the one that is able to tick the following:  Fully machine verifiable Can be easily read as single sentence Doesn\u2019t focus solely on token transfers (thus covering all smart contract functions) Could also be used interchangeably between normal transactions & smart contract calls (ideally even for signing messages)  And optionally I think it could even be designed in a way that it can be easily used between different protocols like the 681, 831 and 1138 have the uri format starting with ethereum: ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 6.041269841269841
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "7",
                    "likes": "1",
                    "time": "19/06/2018-14:35:55",
                    "content": "Of course don\u2019t be specific to ETH/Token transfers, but I think some sort of common flag that denotes \u201ctransfers or handles valuable assets\u201d like tokens but also ownership and such would be useful to call out. I sort of see three different levels of risk in a function: 1) no state changes, 2) internal state changes, or 3) transfers or handles valuable assets internally or through an external call A change in UX feedback such as a different color or something would be very handy I think. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.354545454545454
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "8",
                    "likes": "0",
                    "time": "19/06/2018-14:41:23",
                    "content": "That\u2019s a great point @fubuloubu, however Ethereum smart contracts could be anything, how would you distinguish the level 2 from 3? Technically they both constitute internal state changes and it\u2019s the Dapp developer who will be determining this level of risk when requesting the transaction. Thus how could we make this distinction machine verifiable? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 6.267857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "9",
                    "likes": "1",
                    "time": "19/06/2018-14:42:48",
                    "content": "Well, you can\u2019t. Humans ascribe value to whatever trinkets make sense to them. That isn\u2019t really machine validateable. I would suggest it becomes part of the discipline of writing into Natspec-style comments. EDIT: I mean, you could probably try all the functions and tell the human that the function executed wrong but the state change is final, and then judge the degree of violence the human perpetuates against the machine, but that probably isn\u2019t a scalable method for measuring value. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.489583333333334
                }
            ]
        },
        {
            "thread_link": "https://ethereum-magicians.org/t/human-readable-machine-verifiable-transaction-requests/750",
            "title": "Human-readable Machine-verifiable Transaction requests ",
            "index": 750,
            "category": [
                "Happenings",
                "Council Sessions"
            ],
            "tags": [
                "eip-681",
                "eip-1138"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "1",
                    "likes": "1",
                    "time": "16/07/2018-11:01:09",
                    "content": "This is a follow up to the discussions about Human-readable Machine-verifiable Transaction requests from FEM Berlin Council from last weekend which are related to the EIP-1138 and ERC-681 and also Radspec implementation. EIP-1138: Human-Readable Transaction Requests     EIP-1138: Human-Readable Transaction Requests EIPs       I wanted to bring up here the discussion for Human-Readable Transaction Requests that Witek Radomski proposed    On WalletConnect we have a method to relay a transaction request from the desktop Dapp to the mobile Wallet but currently this simply provides a raw transaction that the Wallet needs to parse in order to display to the user what\u2019s being requested to be signed  With this EIP it would enable not only to share this information between the Dapp and the Wallet to display to the user but al\u2026      ERC-681: Representing various transactions as URLs     ERC-681: Representing various transactions as URLs EIPs       This is a very useful proposal by @nagydani  that should be getting more attention now that UX (and what I would call \u201cdeveloper UX\u201d) is such a high priority in the community.  Simple Summary  A standard way of representing various transactions, especially payment requests in Ethers and ERC #20 tokens as URLs.  Abstract  URLs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely coupled applications. A standardi\u2026      Radspec is a safe alternative to Ethereum\u2019s natspec    GitHub    aragon/radspec \ud83e\udd18 Radspec is a safe interpreter for Ethereum's NatSpec - aragon/radspec       The people present at the discussion were: Pedro Gomes @pedrouid Mikhail Dobrokhvalov @Dobrokhvalov Johann Barbie @johba Remco Bloemen @Recmo We discussed the use-case for transaction requests describing in more detail what were functions being called without prior knowledge from the wallet of the smart contract. A lot of the assumptions of the current implementation is for wallets to know the ABI and source code of the Dapp the user is interacting or simply ignoring this all together and not providing any details about the transaction data. Right now, you simply approve transactions (for example with Metamask) without knowing the exact intent of transaction that is signed. The proposal for Human-readable Machine-verifiable Transactions requests has the goal to provide enough information to the user to make sure what they are signing is intended but at the same time it has to be machine-verifiable so that it can\u2019t spoofed by a malicious Dapp. We explored ERC-681 where you are able to use a URI format to explicitly declare the function called and its parameters to best describe the intent of the transaction. Consequently we looked into Radspec to verify that the function and parameters described were correct and would produce the intented state change. However we concluded that the ABI isn\u2019t safe enough to verify that it matches the deployed contract and it could be spoofed to mistake the user into approving an unintended state change. Because despite the ABI describes the name and type of the parameters, it\u2019s possible to lie about the name of a parameter because only the type is necessary to execute the transaction hash. Using the Radspec README example for providing human-readable transaction requests const call = {   abi: [{     name: 'multiply',     constant: false,     type: 'function',     inputs: [{       name: 'a',       type: 'uint256'     }],     outputs: [{       name: 'd',       type: 'uint256'     }]   }],   transaction: {     to: '0x8521742d3f456bd237e312d6e30724960f72517a',     data: '0xc6888fa1000000000000000000000000000000000000000000000000000000000000007a'   } }  We have a function called multiply which takes two parameters a and b which are both of type uint256. Allowing us to describe a function that the transaction request intends to multiply a and b but the execution for this function only requires us to call it by hashing multiply(uint256, uint256) thus a malicious app could spoof the parameters names to deceive the actual intent of the function without compromising its execution. So it could call the parameters b and c instead deceiving the user from the real execution of these parameters. The proposed solution for this problem involves building an infrastructure that allows the comparison of the ABI against the source code of the smart contract. This was described as registry on-chain that would link to an IPFS address that would include the data to re-compile the smart-contract and verify the metadata hash with the deployed smart contract. The data required to store on IPFS would be the source code, compiler version and optimisation settings. This compilation would have to be run off-chain for example using TrueBit protocol. This would allow to verify the ABI provided by the Dapp matches the deployed smart contract using the metadata hash comparison. This was as far as the discussion evolved. The consesus was clear that exisiting infrastructure wouldn\u2019t allow to make Human-Readable machine-veriable transactions requests without the access to the source code. Etherscan is currently the biggest source for source code for smart contracts but in order to make it decentralized we chose IPFS for hosing this data. A proposed incentive for smart contracts to upload their source code to IPFS for allowing this verification was that it provide a \u201cseal of approval\u201d or \u201cverified\u201d badge at a Wallet level, giving a bigger assurance to users that this Dapp is confirmed to execute as intended. This was compared to the HTTPS green secure badge used by websites and would be not only a UX feature but a security feature. ",
                    "links": [
                        "https://ethereum-magicians.org/t/erc-681-representing-various-transactions-as-urls/650",
                        "https://github.com/aragon/radspec",
                        "https://github.com/aragon/radspec",
                        "https://ethereum-magicians.org/t/erc-1357-address-metadata-json-schema/1491/3"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.320687249258677
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "2",
                    "likes": "0",
                    "time": "16/07/2018-11:18:21",
                    "content": "Feels like this could learn from / interact with ERC-1066: Ethereum Status Codes (ESC), ping @expede ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "3",
                    "likes": "0",
                    "time": "16/07/2018-23:18:56",
                    "content": "Hi @pedrouid. I\u2019m not sure if you\u2019re aware of this or if it\u2019s of any use: http://solidity.readthedocs.io/en/v0.4.24/metadata.html.  I\u2019m pretty sure it\u2019s related to what you\u2019re talking about above (but I might be missing something). The trouble, of course, is that the developer has to publish the files (but that\u2019s also true elsewhere). Perhaps we can avoid duplication of effort. I\u2019d have two suggestions: (1) it might be good to promote knowledge of this meta data as it seems it would be helpful in many way, and (2) it would be great if Solidity generated an IPFS hash (in addition? instead of?). Perhaps there\u2019s a feature request for Solidity there. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "4",
                    "likes": "0",
                    "time": "17/07/2018-09:15:10",
                    "content": "This is interesting, it\u2019s definitely directely related but using Swarm instead. It\u2019s cool that this was already thought-out as limitation of Solidity. Would be cool to test this and share the proccess. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.2
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "5",
                    "likes": "0",
                    "time": "17/07/2018-10:34:12",
                    "content": "It does seem Swarm centric. This brings up two points to me: (1) if you move forward with an IPFS centric design (you should), try to keep the data you put on IFPS in sync with this data, and (2) perhaps we can convince the Solidity devs to output an IPFS location as part of this metadata. If the data can be built from the Solidity compiler and an IPFS hash is made available, won\u2019t that solve part of the problem? I don\u2019t know if I\u2019m missing something. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.45
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "6",
                    "likes": "0",
                    "time": "17/07/2018-10:59:22",
                    "content": "Regardless if it is Swarm or IPFS, it still requires the Dapp developer to upload their source code to a respective location. The core idea is thatboth Wallet and Dapp developers to benefit from both sides. Wallet developers can access to source code verification to provider better user experience and we can facilitate this verification to be seamless. And Dapp developers can gain a larger user traction since users are assured their code is verified. Given that Swarm implementation is already there I think this is a good way to start. I\u2019m not aware of any significant advantages to IPFS other than it\u2019s more widely used compared to Swarm. So my proposal is that we use ERC681 as a starting point for Dapp developers to provide better transaction requests. Wallet developers can get the metadata hash from the deployed contract and use it to query Swarm for the source code. If there is no source code available then it\u2019s not verified but if there is then the source code is recompiled it using a protocol like Truebit. Then the metadata hash and ABI can be compared with the transaction request to verify the intent of the transaction request. The biggest question is the recompilation part that is not clear who is responsible for it and how expensive is it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.7421875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "7",
                    "likes": "1",
                    "time": "17/07/2018-11:07:16",
                    "content": "The one thing I like about IPFS is that I can run it forever, and if I never ask for a file, no additional hard drive space is taken on my machine (small hard drive space is of high importance to me). With Swarm, I believe that if I run Swarm, some part of my hard drive is devoted to storing Swarm files even if I don\u2019t ask for them. The main point, I guess, is that the \u2018meta-data\u2019 is consistent and created automatically by the compilers (Solidity and others) and the hash locations provided. If the developer chooses to store the ABI and/or code is up to them. (I wish that could be changed, but I doubt that will happen.) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.608333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "8",
                    "likes": "1",
                    "time": "10/09/2018-18:32:12",
                    "content": "Just learned from @danfinlay that Metamask uses Parity on-chain registry for looking up methods from the data payload on a transaction request. https://www.bokconsulting.com.au/blog/a-quick-look-at-paritys-signature-registry-contract/ There is a javascript library on Github to make this super simple to use.    github.com    MetaMask/eth-method-registry A JS library for getting Solidity method data from a four-byte method signature      This still doesn\u2019t solve the full scope of this issue but is definitely a significant step forward in the right direction!  ",
                    "links": [
                        "https://github.com/MetaMask/eth-method-registry",
                        "https://github.com/MetaMask/eth-method-registry",
                        "https://ethereum-magicians.org/t/must-read-leaning-from-rss-ux-failures/1282/2"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.41547619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "9",
                    "likes": "0",
                    "time": "27/09/2018-17:31:36",
                    "content": "Don\u2019t know if this is useful, but my friend, Max Galka, from Elementus scraped this database of ABI function definitions. I feel like this data is self-validating (the function interface leads directly to the four-byte codes, so you don\u2019t have to trust anything). I asked him if I could share this and put it into the public domain for anyone to use. He agreed. https://github.com/Great-Hill-Corporation/quickBlocks/tree/develop/src/other/abis ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "10",
                    "likes": "0",
                    "time": "26/11/2019-10:52:15",
                    "content": "After a transaction request is fulfilled, a transaction hash is given to a user. In a scenario of a chat, where one user request transaction to other, the response should be also standardized. For that I\u2019ve specified the Transaction Receipt URI.     EIP-2400 - Transaction Receipt URI EIPs       Latest version: https://github.com/status-im/EIPs/blob/tx-hash-uri/EIPS/eip-2400.md    ",
                    "links": [
                        "https://github.com/status-im/EIPs/blob/tx-hash-uri/EIPS/eip-2400.md"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.9375
                }
            ]
        }
    ],
    "group_index": "1268"
}