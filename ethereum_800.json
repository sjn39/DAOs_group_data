{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-1948-non-fungible-data-token/3139",
            "title": "ERC-1948: Non-fungible Data Token ",
            "index": 3139,
            "category": [
                "EIPs"
            ],
            "tags": [
                "nft",
                "erc-1948"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/johba",
                    "index": "1",
                    "likes": "4",
                    "time": "15/04/2019-17:58:23",
                    "content": "tl;dr; Some use-cases require to have dynamic data associated with a non-fungible token that can change during its live-time. Examples for dynamic data:  cryptokitties that can change color intellectual property tokens that encode rights holders tokens that store data to transport them across chains  The existing meta-data standard does not suffice as data can only be set at minting time and not modified later. Abstract Non-fungible tokens (NFTs) are extended with the ability to store dynamic data. A 32 bytes data field is added and a read function allows to access it. The write function allows to update it, if the caller is the owner of the token. An event is emitted every time the data updates and the previous and new value is emitted in it.   github.com/ethereum/EIPs       ERC-1948: Non-fungible Data Token     by johannbarbie   on 09:40AM - 18 Apr 19 UTC   10 commits   changed 1 files   with 127 additions   and 0 deletions.       ",
                    "links": [
                        "https://github.com/johannbarbie",
                        "https://github.com/ethereum/EIPs/pull/1948",
                        "https://github.com/johannbarbie",
                        "https://github.com/ethereum/EIPs/pull/1948",
                        "https://ethereum-magicians.org/t/is-there-a-dynamic-nft-eip-in-the-work/7687/2"
                    ],
                    "GPT-summary": "The post explains a new proposal called ERC-1948, which extends non-fungible tokens (NFTs) with the ability to store dynamic data. The proposal adds a 32-byte data field and read/write functions to access and update it. The post provides examples of use-cases that require dynamic data associated with NFTs. The post does not advertise or collaborate on the proposal, nor does it contain any feedback from third parties.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Interoperability and Scalability",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.14983164983165
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "2",
                    "likes": "3",
                    "time": "17/05/2019-14:56:03",
                    "content": "Copied from the draft:  Non-fungible tokens (NFTs) are extended with the ability to store dynamic data. A 32 bytes data field is added and a read function allows to access it. The write function allows to update it, if the caller is the owner of the token. An event is emitted every time the data updates and the previous and new value is emitted in it.  pragma solidity ^0.5.2; interface IERC1948 {   event DataUpdated(uint256 indexed tokenId, bytes32 oldData, bytes32 newData);   function readData(uint256 _tokenId) public view returns (bytes32);   function writeData(uint256 _tokenId, bytes32 _newData) public; }  Interesting, this is very similar to what we (@decanus @lrettig @amyjung & me) did with Radical Bodies: https://github.com/RadicalBodies/protocol/blob/master/contracts/IERC721VariableMetadata.sol We called it \u201cvariable metadata\u201d, another hash URL to variable data: pragma solidity ^0.5.0; interface IERC721VariableMetadata {   // Retrieve the currently set variable metadata.   function variableMetadataURI(uint256 tokenId) external view returns (string);   // Replace the variable metadata.   function replaceVariableMetadataURI(uint256 tokenId, string metadataURI) external; }  I wonder if it would be possible to reconcile the two proposals by introducing a \u201cdata type\u201d field? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.2134986225895315
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/johba",
                    "index": "3",
                    "likes": "0",
                    "time": "22/05/2019-16:45:58",
                    "content": "good to see that there are more use-cases for variable data. I think that is a great idea to merge these. i\u2019m not particularly keen about the string data type, as it is not represented efficiently, and i don\u2019t want to use the chain to store data. how about this proposal: interface IERC721VariableData {   event DataUpdated(uint256 indexed tokenId, bytes32 oldData, bytes32 newData, uint256 dataType);   function getDataType(uint256 _tokenId) external view returns (uint256);   // Retrieve the currently set variable data.   function readData(uint256 _tokenId) external view returns (uint256 type, bytes32 data);   // Replace the variable data.   function writeData(uint256 _tokenId, bytes32 _newData) external; }  Here I assume:  data type is set at token minting, and does not change after. I see 3 types we could use right away:   type 0 - pure data, the token stores a single uint256, or sha256 hash  type 1 - the token stores a hash of a string (to implement the URI). string needs to be provided in msg.Data and verified against hash  type 2 - the token stores the root of a merkle tree, proofs need to be provided with msg.data    ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.066017316017316
                }
            ]
        }
    ],
    "group_index": "800"
}