{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/adding-rpcurl-to-chainchanged-event/9012",
            "title": "Adding rpcURL to `chainChanged` event ",
            "index": 9012,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "json-rpc"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/jamierumbelow",
                    "index": "1",
                    "likes": "2",
                    "time": "22/04/2022-13:40:52",
                    "content": "I\u2019d like to discuss drafting a new EIP to extend the JavaScript provider API, adding the current RPC URL in use by the user\u2019s wallet to the JavaScript provider.  Context I\u2019m currently building a local staging environment for product-level manual and automated testing of dapp frontends. One important piece of this environment is running tests on a forked version of mainnet, hosted internally for internal use. EIP-1193 defines a chainChanged event to be emitted when connecting to a new chain. This event is emitted with exactly one parameter, the chainId of the corresponding chain. One limitation with the existing provider API is that there is currently no way for a frontend to detect which RPC URL is in use relative to some chainId. Frontends are expected to map chain IDs to appropriate RPC nodes by listing them explicitly, for example: type ChainId = number;  type NodeURL = `https://${string}`;  const nodes: Record<ChainId, NodeURL> = {     1: \"https://eth-mainnet.alchemyapi.io/v2/[KEY]\",     137: \"https://polygon-rpc.com\",     42161: \"https://arb1.arbitrum.io/rpc\",     31337: \"http://localhost:8000\", }  \u2026and so on. In some, but not all cases, chainId implicitly encodes information about what the URL might be. In particular, chain ID 31337 indicates this is a local network, and is likely to be hosted on localhost. In all cases, however, there is no ability to deduce the RPC URL from the chainId directly (except in some cases in extremis, where, e.g. there is only one hosted node for some nascent network.) There is therefore no connection between a frontend application (hereafter \u2018Frontend\u2019) and the node (hereafter \u2018Node\u2019) \u2013 and therefore, in some cases, chain \u2013 to which the user is connected via her wallet (hereafter \u2018Wallet\u2019).  Problem This independence of Node between Frontend and Wallet allows the user potentially to break Frontend by switching Wallet to a new Node connected to a different network but the same chainId. For many production use-cases, this doesn\u2019t cause a problem, since the state is synchronised via the EVM. Frontend talks to Alchemy, Wallet talks to Infura, and any state changes effected by Wallet get propagated through the network and read by Frontend A. However, for local environments, this lack of RPC URL synchronisation between Frontend and Wallet means that when switching to a locally-hosted Node \u2013 hosted through, for instance, a call to hardhat node --fork \u2013 Wallet and Frontend can execute code in different, isolated environments. Not only is breaking Frontend for reasons independent of Frontend\u2019s code bad per se, but if a developer wishes to allow switching to new node URLs she needs to:  add some scaffoldable network-switching UI to her application, and force the user to update the URL in two places, for both Frontend and Wallet.  This feels like an excellent opportunity to standardise a small piece of Frontend\u2019s UI through a simple technical change.  Potential Solution An attractive solution might be to allow Wallet to emit the current RPC URL used when switching between networks. Technically, this would involve changing the event signature of chainChanged defined in EIP-1193 to include the URL: Provider.on('chainChanged', listener: (chainId: string, rpcURL?: string) => void): Provider;  rpcURL is typed as string | undefined for two reasons:  Backward-compatibility with existing the JS Provider API described in EIP-1193; a new function argument is an accretive change Offer a privacy off-ramp to Wallet, allowing the user to hide Node from Frontend\u2019s execution environment if she wishes  Frontend can then parameterise the URL it uses to connect to Node, subscribe to chainChanged as before, and update the RPC URL when the wallet changes.  Discussion Points I\u2019m not confident that this doesn\u2019t introduce new attack vectors, nor that it will be useful beyond the sort of use case highlighted above. But it strikes me as a small, backward-compatible change to the existing JS provider API that would improve the user experience and operations of testing environments like mine. It would also allow further decoupling of frontends from centralised node providers such as Alchemy and Infura, allowing users to opt-out of sending their transactions through such providers and instead offer a standardised way for users to connect to their own hosted nodes, or some other preferred node provider. (This might, inter alia, partially address the sorts of concerns around infrastructure centralisation made in the recent Moxie Marlinspike post.) ",
                    "links": [
                        "https://moxie.org/2022/01/07/web3-first-impressions.html",
                        "https://ethereum-magicians.org/t/eip-wallet-switchactiverpcprovider/9142/11",
                        "https://ethereum-magicians.org/t/eip-wallet-switchactiverpcprovider-rpc-method-for-supporting-aa-custom-rpc-methods-more/9142/2"
                    ],
                    "GPT-summary": "The author proposes a new EIP to extend the JavaScript provider API, adding the current RPC URL in use by the user\u2019s wallet to the JavaScript provider. The proposal aims to solve the problem of the lack of RPC URL synchronization between Frontend and Wallet, which can cause issues when switching to a locally-hosted Node. The proposal suggests changing the event signature of chainChanged defined in EIP-1193 to include the URL. The author discusses potential solutions and offers discussion points, including concerns about new attack vectors and usefulness beyond the proposed use case.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None"
                    ],
                    "Sentiment": 5.285279263220439
                }
            ]
        }
    ],
    "group_index": "1709"
}