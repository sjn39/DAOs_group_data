{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2831-transaction-replacement-message-type/4448",
            "title": "EIP-2831: Transaction Replacement Message Type ",
            "index": 4448,
            "category": [
                "EIPs"
            ],
            "tags": [
                "eth1x",
                "eip-2831"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "1",
                    "likes": "0",
                    "time": "26/07/2020-16:07:01",
                    "content": "Discussion for EIP-2831 Transaction Replacement Message Type. ",
                    "links": [],
                    "GPT-summary": "The post is a discussion about the EIP-2831 Transaction Replacement Message Type proposal. The author is seeking feedback and explaining the proposal, while third parties are providing constructive criticism, asking questions, and potentially auditing and reviewing the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Privacy, Security and risk management",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "2",
                    "likes": "0",
                    "time": "30/07/2020-22:07:13",
                    "content": "Here is @greg\u2019s overview thread and call for feedback from Twitter.   twitter.com    Gregory (gregthegreek)  I just created \"EIP-2831 Transaction Replacement Message Type\"  This is a first attempt at solving a fundamental disconnect between providers and clients (eg: dapps), I'm looking for feedback, and also have other ideas surrounding the topic.   Thread \ud83d\udc47  https://t.co/6nNrkoMTpJ  8:45 AM - 29 Jul 2020     25          18            ",
                    "links": [
                        "https://twitter.com/gregthegreek/status/1288500914081484811",
                        "https://twitter.com/gregthegreek/status/1288500914081484811"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.3125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "3",
                    "likes": "0",
                    "time": "31/07/2020-19:04:46",
                    "content": "Thanks @jpitts!  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "4",
                    "likes": "0",
                    "time": "10/08/2020-17:40:30",
                    "content": "Noting here (for others who may arrive) that there are a number of relevant comments posted in the PR starting with this one: https://github.com/ethereum/EIPs/pull/2831#issuecomment-665253875 @MicahZoltu and @greg helpfully keep pointing out that the comments should go to this thread on the Forum   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "5",
                    "likes": "1",
                    "time": "10/08/2020-18:31:42",
                    "content": "This is a great proposal @greg  IMO we should break it down into two standards however to enforce stricter rules It will improve both developer and user experience. My feedback is that tx_replacement is just too flexible even if it enforces the same nonce My suggestion would be to replace tx_replacement with tx_cancel and tx_speedup tx_cancel  same nonce equivalent from and to zero value no data  tx_speedup  same nonce same to same value same data higher gasPrice  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.496913580246914
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/miohtama",
                    "index": "6",
                    "likes": "0",
                    "time": "20/08/2020-08:35:17",
                    "content": "Here are my 10 gweis - (also was the Github PR discussion) I have built a dApp where the transaction tracking was a problem as well. While tracking transaction is a larger problem and probably will need a complete revisit in the future, I feel that this spec would address some shortcomings in dApp UX in the next 2-3 years. Have a hook when a wallet uses to speed up or cancel transaction feature: The current spec look sufficient enough for this minor feature. What can still break or is missing - loosely related to the functionality, but not to the spec itself   The replacement transaction is a different smart contract call what dApp originally intended (possible, though not sure why anyone would do this, so maybe not even worthy of discussion)   Tracking transactions with wallet specific ids instead of transaction hashes: e.g. the user interface can associate the transaction in the notification menu easily as the same transaction regardless of how many times speed up feature is used with ever changing transaction hash   Requesting transaction speed up (gas top up) from the dApp user interface itself   Having a developer friendly events transactioncomplete (for some specified statistical criteria) and transactionfailed (completed, but was rejected by revert) - this would especially boost productivity of newcomer developers of Ethereum world   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.529761904761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/miohtama",
                    "index": "7",
                    "likes": "0",
                    "time": "20/08/2020-08:40:02",
                    "content": " My suggestion would be to replace tx_replacement with tx_cancel and tx_speedup  This is super simple and semantics are clear  Would (address, nonce) tuple to be sufficient for dApps to track the transactions in this case? I know most of the apps now track by hash and then find hard way this is not immutable. If we feel this is the case then web3.js tutorials such be rewritten using (address, nonce) as logical transaction identifiers and maybe even modify web3.js APIs to make supporting this easier. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.713541666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "8",
                    "likes": "0",
                    "time": "21/08/2020-11:16:26",
                    "content": "    pedrouid:  My suggestion would be to replace  tx_replacement  with  tx_cancel  and  tx_speedup   Thanks for the feedback, I think this suggestion is huge. I also believe making them their own message type is probably the best way to move forward, instead of wrapping it into .on('message', () => {}) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 7.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "9",
                    "likes": "0",
                    "time": "21/08/2020-11:25:42",
                    "content": "    miohtama:  The replacement transaction is a different smart contract call what dApp originally intended (possible, though not sure why anyone would do this, so maybe not even worthy of discussion)   I\u2019m not sure if i follow, ultimately every on chain action requires an off-chain signing to occur. Thus if the speed/cancel occurs then all on-chain events would not take place. Perhaps I\u2019m misunderstanding something?     miohtama:   Tracking transactions with wallet specific ids instead of transaction hashes: e.g. the user interface can associate the transaction in the notification menu easily as the same transaction regardless of how many times speed up feature is used with ever changing transaction hash    If I\u2019m understanding this correctly, you\u2019re describing a situation that arises when a user has \u201cclicked\u201d speedup or cancel a numerous amount of times, and now the dapp has no idea what has occured? If so, the nonce is your unique ID theres no need to bake extra logic into this. The dapp should be required to track the nonce and its not up to the provider to do much more.     miohtama:   Requesting transaction speed up (gas top up) from the dApp user interface itself    Hmm - this is novel, but I wonder if it adds bloat, a DAPP could self initialise this for the user without the provider needing to bake it in. Would love to hear feedback on this, I can see how this could make for better security though\u2026     miohtama:   Having a developer friendly events transactioncomplete (for some specified statistical criteria) and transactionfailed (completed, but was rejected by revert) - this would especially boost productivity of newcomer developers of Ethereum world    I think this is out of scope. I believe theres a few EIPs that exist for this, namely the STATUS_CODES EIP aimed to solve this. It should be up to the dapp or wallet to make user friendly error codes. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.912698412698413
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "10",
                    "likes": "0",
                    "time": "28/08/2020-11:06:26",
                    "content": "I\u2019ve made a pr to update the EIP - would love feedback  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ldub",
                    "index": "11",
                    "likes": "0",
                    "time": "30/08/2020-18:02:37",
                    "content": "@pedrouid \u2018s suggestion to isolate tx_speedup and tx_cancel is excellent and will help dapp devs a lot. However I believe a third tx_replacement message should still be implemented for transactions that are not speedups or cancellations. It\u2019s true that MetaMask only lets users send speedups or cancellations but I think this EIP should cover other kinds of replacements that can be sent by other providers/wallets. The list would look like: tx_cancel  same nonce equivalent from and to zero value no data  tx_speedup  same nonce same to same value same data higher gasPrice  tx_replacement  same nonce different to, value, data, or gasPrice  Also, @greg, it appears that you\u2019ve left some references to tx_replacement in the Rationale and Backwards Compatibility sections. EDIT: To be clear, I propose that exactly one of tx_replacement, tx_speedup, and tx_cancellation should be fired for any replacement transaction. In the case of cancellation technically both tx_replacement and tx_cancellation apply but I don\u2019t think it makes sense to fire both events. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.472222222222223
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "12",
                    "likes": "0",
                    "time": "31/08/2020-17:37:49",
                    "content": "Hmmm, this is actually an interesting edge case. I think you\u2019re right, replacement should exist since there is an option that the transaction itself was totally changed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.309523809523809
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "13",
                    "likes": "0",
                    "time": "07/09/2020-17:31:35",
                    "content": "I\u2019ve update the EIP! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "14",
                    "likes": "0",
                    "time": "21/01/2021-11:58:42",
                    "content": "Hey all, that\u2019s a great idea! I have some comment on the proposal but wanted to first mention about the current state of affairs. I have read various discussions about this and noticed that there was no mention that it is actually relatively easy to detect that a tx was replaced, even today. I do it in my library : https://github.com/wighawag/web3w You can even play with it on https://jolly-roger.eth.link/ (rinkeby)  where user can submit greetings: Do as follow:  Send a greeting message and get ready to cancel or speed up right away. if the tx get replaced (once mined and final) a notification will come, mentioning it.  Then there are 3 cases :  if that was a \u201ccancel\u201d tx or a completely different tx, then nothing apart from the \u201creplacement notification\u201d will happen. (the spinning wheel for the pending new greeting will also disappear) if it is a speedup tx, the notification will show up later, after the new greeting will show up, potentially confusing the user as it comes a bit later (as it wait for finality). if the tx was a similar tx with different greeting, then the new greeting would have shown by then (as the UI is optimistic and do not wait for finality). In that case too, the resulting notification might confuse user as it comes a bit later (as it wait for finality)\u2026  The way it detects is simply fetching the nonce at block height - finality ( ~12 on mainnet,)  and if that nonce is equal or higher than the tx being checked and that tx receipt is still null, then you know the tx was cancelled This is I guess the best we can do right now and what is missing is being able to get the new tx once it is broadcasted so we can let the user know that a competing transaction is in progress too and what the new transaction will be performing (if it is cancelling or speeding up for example). As such EIP-2831 proposal would be a great addition. I just though it was a good idea to mention what is possible today and what is missing. Few comment regarding the current proposal: While others have mentioned to break it up in separate message, I think to have a single \u201ctx_replacement\u201d is simpler and let apps deal with cancel, replacement or speedup themselves. Library can make it easier if they want. the data could simply be the rawTransaction or its params, like in eth_sendTransaction. Also I would like to discuss the possibility of a different more generic proposal, that if I remember was advocated a while ago (can\u2019t find reference): that of a transaction event for every transaction broadcasted triggered by the app (and so speedup and cancelation should be considered). This would allow application to handle tx replacement themselves by simply looking a the nonce of new transaction and be more generic. One question is whether the oldTx field is necessary in EIP-2831. I think it should not be as application can track transaction per nonce too. But we could definitely add an extra field when a transaction is actually replaced explicitly. This is not always the case as the tx could come from another wallet instance, not aware of the potentially multitude tx with same nonce. Such event could also be used for transaction emitted through other app so your app can deal with replacement transaction with completely different data. Such event is also useful in general so apps can easily track transaction, even the one triggered by metamask itself. ",
                    "links": [
                        "https://jolly-roger.eth.link/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.621477937267411
                }
            ]
        }
    ],
    "group_index": "1100"
}