{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/slp-v2-wbtc-eth-collateral-onboarding-oracle-assessment-mip10c3-sp35/8407",
            "title": "[SLP-V2-WBTC-ETH] Collateral Onboarding Oracle Assessment (MIP10c3-SP35) ",
            "index": 8407,
            "category": [
                "Collateral Onboarding",
                "Domain Work"
            ],
            "tags": [
                "oracle-domain-work",
                "sushiswap-v2",
                "sushi-lp"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/NikKunkel",
                    "index": "#1",
                    "likes": "5",
                    "time": "28/05/2021-04:06:53",
                    "content": " Preamble MIP10c3-SP#: 35 Author(s): Niklas Kunkel (@NiklasKunkel) Contributors: Type: Process Component Oracle Team Name: Green Status: RFC Date Proposed: 2020-05-27 Date Ratified: <yyyy-mm-dd>   Specification  Introduction This Oracle would provide the SLP-V2-WBTC-ETH/USD price as part of the collateral onboarding process for the SLP-V2-WBTC-ETH LP token.  Oracle Data Model A smart contract utilizes SushiSwap primitives and liquidity reserves to calculate the price of a Uniswap Liquidity Provider (LP) token. The reserves of the SushiSwap pool, and the supply of the SushiSwap LP token are used as inputs to the model. This model utilizes MakerDAO Oracles to price the underlying assets. This model utilizes the following base assumptions: (1) Invariant k = reserve_x * reserve_y (2) reserve_x * price_x = reserve_y * price_y (only holds true at steady-state) Combining (1) and (2) allows us to derive the formulas for calculating the \u201cnormalized\u201d reserve balances of the underlying assets given the invariant k and prices of the underlying assets. (3) reserve_x = sqrt(k * price_y / price_x) (4) reserve_y = sqrt*(k  * price_x / price_y) Alternatively given one calculated normalized reserve, one can calculate the other using a mutation of (1). This is useful for optimizing gas since calculating the square root is an expensive operation. (5) reserve_x = k / reserve_y (6) reserve_y = k / reserve_x Once the normalized reserve balances have been calculated, the price of the LP token can be derived: (7) price_lp = ( (reserve_x * price_x) + (reserve_y * price_y) ) / supply_lp Substitution of (3), (4) and (7) gives us the following model for calculating the price of a SushiSwap LP token: (8) price_lp = ( (sqrt(k * price_y / price_x) * price_x) + (sqrt(k * price_x / price_y) * price_y) ) / supply_lp This can be simplified to: (9) price_lp = 2 * sqrt(k * price_x * price_y) / supply_lp k can be re-expressed in terms of the current pool reserves reserve_x and reserve_y: (10) price_lp = 2 * sqrt(reserve_x * price_x * reserve_1 * price_1) / supply_lp  Oracle Supporting Data Model(s) WBTC/USD (canonical) |    Source     |  Asset Pair   |  Feed Model  | | :------------ | :------------ | :----------: |  |   Bitstamp    |    BTC/USD    |    Median    | |   Bittrex     |    BTC/USD    |              | |   Coinbase    |    BTC/USD    |              | |   Gemini      |    BTC/USD    |              | |   Kraken      |    BTC/USD    |              |  ETH/USD (canonical) |    Source     |  Asset Pair   |  Feed Model  | | :------------ | :------------ | :----------: |  |   Binance     |    ETH/USD    |    Median    | |   Bitfinex    |    ETH/USDT   |              | |   Bitstamp    |    ETH/USD    |              | |   Coinbase    |    ETH/USD    |              | |   Gemini      |    ETH/USD    |              | |   Kraken      |    ETH/USD    |              |   Oracle Address  Mainnet - SushiV2LpOracle - TBD   Supported Tools UniV2LpOracle - Source Code UniV2LpOracle - Tests UniV2LpOracle - ABDK Audit  Remaining Work  Deploy Oracle from Factory Contract Update OmegaPoker to poke SushiV2LpOracle instance   Summary The SushiSwap V2 WBTC-ETH pair is one of the most liquid SushiSwap pairs with over $450 million of liquidity at time of publishing. The Uniswap V2 LP Oracle was architected from the outset to be generalizable to both Uniswap V2 and Sushiswap V2 LP tokens. Since their introduction into the Maker Protocol 5 months ago, the LP Oracles have proven themselves to be both resilient and secure. The smart contracts have also completed a final audit by ABDK, who to their credit were also selected to audit Uniswap V3. That said, significant smart contract changes were recently introduced as a result of the audit and further gas-optimizations. Therefore the Oracle Domain Team is recommending that the debt ceiling starts low and be raised iteratively over time. This conservative strategy is further supported by the introduction of acropJoin adapter contract which needs to prove itself in a production capacity. This Oracle utilizes the existing ETH/USD Oracle Medianizer for the ETH component of the Oracle and the WBTC/USD Oracle Medianizer for the WBTC component. This protects against flash-loan attacks which attempt to manipulate the reserve ratios of the pool. ",
                    "links": [
                        "https://github.com/makerdao/univ2-lp-oracle/blob/master/src/Univ2LpOracle.t.sol",
                        "https://github.com/makerdao",
                        "https://forum.makerdao.com/t/collateral-status-index/2231",
                        "https://forum.makerdao.com/t/maker-relay-ep-47/8491"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.4071428571428575
                }
            ]
        }
    ]
}