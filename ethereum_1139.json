{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/about-677-and-other-functions-on-top-of-erc20/4589",
            "title": "About #677 and other functions on top of ERC20 ",
            "index": 4589,
            "category": [
                "EIPs"
            ],
            "tags": [
                "token",
                "erc20"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "1",
                    "likes": "0",
                    "time": "09/09/2020-14:07:48",
                    "content": "It seems that the as been a recent regain of interest issue for #677 (that is NOT an ERC has it doesn\u2019t have the proper documentation) both on the EIP repo and on youtube, with ChicoCrypto making a video about it. While I love the underlying idea, I have to emphasize that there are many ways to achieve the same results. I know at least 2:  Chainlink\u2019s (and Dai\u2019s ?) transferAndCall:  the function transferAndCall(address receiver, uint amount, bytes data) transfers some tokens and calls the function onTokenTransfer(address from, uint256 amount, bytes data) on the receiving side to notified the tranfered happened.  iExec\u2019s approveAndCall  the function approveAndCall(address _spender, uint256 _value, bytes _extraData) only approves the transfer, and call the function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) on the receiving side to notifity it can transferFrom I personnaly prefer the second pattern, because despite it using a little bit more gas, it doesn\u2019t break the approve-transferFrom workflow dapps are used to. Also receiver are less likelly to have bugs due to poor implementation of the onTokenTransfer function. I\u2019m sure people will have other views: lets discuss that, and eventually make up a standard for futur tokens (even though ERC20 are not that hyped anymore) ",
                    "links": [],
                    "GPT-summary": "The author of the post discusses the recent interest in issue #677 and other functions on top of ERC20. They explain two ways to achieve the same results and express their preference for the second pattern. The author invites discussion and suggests making up a standard for future tokens. A third party could give constructive criticism or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Interoperability and Scalability",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.297453703703704
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "2",
                    "likes": "0",
                    "time": "09/09/2020-14:08:33",
                    "content": "@MicahZoltu & @se3000,   you might have many things to say ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "3",
                    "likes": "2",
                    "time": "09/09/2020-18:41:42",
                    "content": "The long term solution to this problem is Rich Transactions, which I have been trying to work on.  It would allow a single signed transaction to do multiple operations in a row such as approve and then call. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.253571428571428
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "4",
                    "likes": "0",
                    "time": "09/09/2020-19:44:04",
                    "content": "@amxx thanks for bringing that up here. I also prefers the approveAndCall approach. it is also the approach we choose at Sandbox except that as notification, we simply ensure the first param of the call data being forwarded is equal to the msg.sender. This is unconventional and I would instead now use something like EIP-2771 to pass the notification data (the address should be sufficient though) The nice thing about is that it retain the freedom of the receiver to choose the function signatures it wish. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.05
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "5",
                    "likes": "0",
                    "time": "09/09/2020-19:44:28",
                    "content": "I have another proposition : https://github.com/wighawag/transfer-gateway There are quire few variant of these \u201ctransfer gateway\u201d The simplest is the \u201cTrusted gateway\u201d shown in the repo, where we only need one deployed per network. One benefit for it is that it works with existing ERC20 contract. The gateway need to be user approved once per erc20 and then it work with every gateway recipient. For new ERC20 contract they can make the gateway a pre-approved operator for all owner to not require further approval The gateway could also support EIP-2612 permit message so it handle all approval automatically as part of the tx. For recipient, the logic is quite simple with a trusted gateway, they simply extract msg.data (a la EIP-2771 metatx _msgSender trick) : https://github.com/wighawag/transfer-gateway/blob/c09d33ca6e116b9e65ca1d6ce46fe90e39b0f14f/src/ERC20Consumer.sol#L27-L41 This way there is no need for specific receive function, simplifying the receiver code ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-2612",
                        "http://msg.data/",
                        "https://eips.ethereum.org/EIPS/eip-2771",
                        "https://github.com/wighawag/transfer-gateway/blob/c09d33ca6e116b9e65ca1d6ce46fe90e39b0f14f/src/ERC20Consumer.sol#L27-L41"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.954545454545455
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "6",
                    "likes": "0",
                    "time": "06/03/2021-22:38:25",
                    "content": "Since I openned this topic, I learned about ERC1363 which is actually marked as final.   transferAndCall \u2192 onTransferReceived   transferFromAndCall \u2192 onTransferReceived   approveAndCall \u2192 onApprovalReceived   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.25
                }
            ]
        }
    ],
    "group_index": "1139"
}