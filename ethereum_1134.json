{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2937-set-indestructible-opcode/4571",
            "title": "EIP-2937: SET_INDESTRUCTIBLE opcode ",
            "index": 4571,
            "category": [
                "EIPs"
            ],
            "tags": [
                "opcodes"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "1",
                    "likes": "2",
                    "time": "04/09/2020-05:30:08",
                    "content": "Add a SET_INDESTRUCTIBLE (0xA8) opcode that prevents the contract from calling SELFDESTRUCT (0xff).   github.com/ethereum/EIPs         SET_INDESTRUCTIBLE opcode   ethereum:master \u2190 ethereum:vbuterin-patch-2            opened 05:25AM - 04 Sep 20 UTC               vbuterin             +35 -0           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/2937",
                        "https://github.com/vbuterin",
                        "https://github.com/ethereum/EIPs/pull/2937/files",
                        "https://ethereum-magicians.org/t/eip-for-disabling-selfdestruct-opcode/4382/18",
                        "https://ethereum-magicians.org/t/wand-aka-dsproxy-2-0/7221"
                    ],
                    "GPT-summary": "The post introduces a new opcode, SET_INDESTRUCTIBLE, which is proposed to be added to the Ethereum Improvement Proposals (EIPs). The author explains that this opcode would prevent a contract from calling SELFDESTRUCT, and provides a link to the relevant GitHub page. A third party could provide constructive criticism or audit the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ytrezq",
                    "index": "2",
                    "likes": "0",
                    "time": "04/09/2020-18:58:25",
                    "content": "Should it be permanent or should there be a way to rollback? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "3",
                    "likes": "0",
                    "time": "05/09/2020-02:23:59",
                    "content": "The flag set by the opcode would last for the duration of the transaction, so it is temporary (though if the first byte of a contract is the opcode then of course it will trigger every time and be unavoidable, which is the intention). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axe",
                    "index": "4",
                    "likes": "0",
                    "time": "07/09/2020-09:19:33",
                    "content": "Can this new OPCODE be used to signal if the contract implement or not self destruct? If is set to false, then you can\u2019t destroy that specific contract. Cheers ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.420454545454545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "5",
                    "likes": "1",
                    "time": "08/09/2020-03:13:29",
                    "content": "If the first byte of the code of a contract is this opcode, then that contract cannot selfdestruct. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axe",
                    "index": "6",
                    "likes": "0",
                    "time": "08/09/2020-07:20:25",
                    "content": "I\u2019m thinking more into if you have implement the self destruct function the opcode is \u201ctrue\u201d. Is not if is possible to remove the contract, but more this contract can everything is place to be removed. Cheers ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axe",
                    "index": "7",
                    "likes": "0",
                    "time": "08/09/2020-07:22:36",
                    "content": "Basically can we inside a smart contract know that other smart contract can be removed. Is important in the case when a dev want to whitelist smart contracts on chain. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.917857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "8",
                    "likes": "1",
                    "time": "13/09/2020-15:03:35",
                    "content": "I like this EIP. It makes contracts and libraries safer. It makes proxy contracts and diamonds safer because they rely on delegatecall which can pull in code from other contracts. This EIP prevents delegatecall from accidentally or maliciously destroying proxy contracts and diamonds and prevents the contracts/libraries that proxy contracts and diamonds rely on from disappearing. This is good. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "9",
                    "likes": "0",
                    "time": "08/01/2021-14:23:58",
                    "content": " The intended use case would be for contracts to make their first byte of code be the SET_INDESTRUCTIBLE opcode if they wish\u2026  However, the spec doesn\u2019t say what should happen if SET_INDESTRUCTIBLE is encountered on PC!=0 Some other questions.  Let\u2019s say we have C with SET_INDESTRUCTIBLE at 0. Contract X does delegatecall(c) && selfdestruct. Does C successfully selfdestruct? Same scenarion with C. What about callcode(c)?  In general, is the globals.indestructible scoped? I assume it is (by which I mean it\u2019s journalled, and scope-revertals removes stuff from it) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.510416666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/alu",
                    "index": "10",
                    "likes": "0",
                    "time": "10/01/2021-18:50:44",
                    "content": " I think that if SET_INDESTRUCTIBLE is encountered on PC!=0, it should be treated as a no-op to avoid any weird edge cases. However, forcing it to be the first byte does make its use case less flexible and I\u2019m open to lifting this restriction. C should not successfully self destruct when using delegatecall if it is set as indestructible. C should also not successfully self destruct when using callcode if it is set as indestructible.  I also believe SET_INDESTRUCTIBLE should be implemented as a variable local to each execution frame. I think it is unnecessary to make it a global variable, as the delegatecall/callcode edge case can still be resolved with a local boolean variable implementation. Proposed update to EIP-2937 spec: https://github.com/ethereum/EIPs/pull/3186 Local variable implementation in geth client: https://github.com/lightclient/go-ethereum/pull/7 ",
                    "links": [
                        "https://github.com/lightclient/go-ethereum/pull/7"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.287878787878788
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dror",
                    "index": "11",
                    "likes": "0",
                    "time": "30/03/2021-21:58:19",
                    "content": "I think this EIP is great, as it sets optional restriction/extension rules on the EVM context of future-deployed contracts. But I think its scope should be extended: There might be other features we would like to enable/restrict in the future. So I would suggest to add it as \u201cRULES\u201d opcode, which receives a single bitmask param. the first bit is SET_INDESTRUCTIBLE, with the semantics defined by this EIP. all other bits are REQUIRED to be zero, and the opcode should REVERT in case any is set. In a future EIP (and fork), more semantics can be given to those bits, without requiring a new opcode for each. The downside is that the prefix this new opcode generates is 3 bytes instead of 1: \"PUSH1 1 RULES\" ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.750649350649351
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/nikolai",
                    "index": "12",
                    "likes": "0",
                    "time": "06/10/2021-12:47:46",
                    "content": "This doesn\u2019t just make proxies / \u2018diamonds\u2019 safer, it makes them so much safer that it enables a categorically different mode of interaction where proxy actions / scripts can be properly sandboxed and so trustlessly composed within a single proxy script     `Wand` aka `DSProxy 2.0` Primordial Soup       This is a grab bag of proxy contract R&D. I\u2019m publishing this to help bump priority for SET_INDESTRICTUBLE.  Code sketch and README at time of publishing are copied below:   interface WandAuth {   function canCast(address witch, address spell, bytes4 sigil)     external returns (bool); }  contract Wand {   address public root;   address public auth;   address public code;   address public lock;    function cast(address spell, bytes calldata data)     payable public       returns (bool bit, byt\u2026     ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-2937-set-indestructible-opcode/4571",
                        "https://ethereum-magicians.org/t/add-freeze-opcode/7231"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.064285714285715
                }
            ]
        }
    ],
    "group_index": "1134"
}