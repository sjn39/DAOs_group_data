{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2681-limit-account-nonce-to-2-64-1/4324",
            "title": "EIP-2681: Limit account nonce to 2^64-1 ",
            "index": 4324,
            "category": [
                "EIPs"
            ],
            "tags": [
                "validation",
                "core-eips"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "0",
                    "time": "29/05/2020-21:57:36",
                    "content": "Discussion topic for Add EIP for limiting account nonce by axic \u00b7 Pull Request #2681 \u00b7 ethereum/EIPs \u00b7 GitHub  @jpitts: adding some background from the EIP here. This is motivated by Eth1.x / Stateless Ethereum discussions, more specifically discussion around the \u201cwitness format\u201d. Introducing a restriction would allow storing the nonce in a more optimised way. Additionally it could prove beneficial to transaction formats, where some improvements are potentially sought by at least three other proposals. Lastly this facilitates a minor optimisation in clients, because the nonce no longer needs to be kept as a 256-bit number. ",
                    "links": [
                        "https://github.com/ethereum/stateless-ethereum-specs",
                        "https://ethereum-magicians.org/t/eip-1985-sane-limits-for-certain-evm-parameters/3224/41",
                        "https://ethereum-magicians.org/t/eip-1985-sane-limits-for-certain-evm-parameters/3224/40"
                    ],
                    "GPT-summary": "The post is a discussion topic for an Ethereum Improvement Proposal (EIP) that proposes to limit account nonce to 2^64-1. The author of the proposal explains the motivation behind it, which is to optimize the storage of nonce and improve transaction formats. A third party provides constructive criticism and asks questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Privacy, Security and risk management",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "2",
                    "likes": "0",
                    "time": "30/05/2020-07:13:08",
                    "content": "I think the EIP should be officially finalized (not requiring a hardfork) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "3",
                    "likes": "0",
                    "time": "01/06/2020-13:16:02",
                    "content": "Do you mean to remove the \u201cif hard fork\u201d and replace it with \u201cthese rules apply from the genesis on mainnet\u201d ? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.489583333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "4",
                    "likes": "2",
                    "time": "01/06/2020-15:11:25",
                    "content": "Yup, that\u2019s what I mean. That we\u2019ll just retroactively say \u201cThis was always so\u201d and bob\u2019s your uncle. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "0",
                    "time": "06/09/2020-13:50:01",
                    "content": "I\u2019m with @holiman on this, can we just remove the mention of the hardfork and merge this as a retroactive specification?  Is it even possible for any nonce to be greater than 2^61 right now?  Worst case napkin math scenario, someone was able to increment a nonce for 1 gas, for 10M blocks, at 12.5M gas per block.  That would only get you to about 2^46, nowhere near 2^64. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.275510204081632
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "6",
                    "likes": "0",
                    "time": "06/09/2020-23:08:59",
                    "content": "    MicahZoltu:  I\u2019m with @holiman on this, can we just remove the mention of the hardfork and merge this as a retroactive specification? Is it even possible for any nonce to be greater than 2^61 right now?   Totally share the same sentiment.  The EIP has this in backwards compatibility:  There is no account in the state currently which would have a nonce exceeding that value.  Need to double check, but would be very surprised.  I do not have access to a full client right now, less to an archival one, but it would be nice to check if by some freak accident there was any such account at any point of time. If geth always had that limitation of 64-bit then the answer is no. @holiman? ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.763369963369963
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "7",
                    "likes": "0",
                    "time": "06/09/2020-23:34:31",
                    "content": "Could we consider limiting this further to 2^32-1? That would require a change in go-ethereum and possibly other clients, but it is also unreachable in practice (would cost 90.014 Eth with 10 gwei gas price via external transactions). Though I could potentially see some exchange account reaching that if they started in 2015  The benefit reducing this limit further could show with transaction formats: it would be possible to serialise the nonce as a fixed-size field, because 4 bytes with zeroes likely would be worth the reduced complexity of having some more complicated encoding scheme (such as RLP). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.079545454545454
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "8",
                    "likes": "0",
                    "time": "07/09/2020-07:40:36",
                    "content": "    axic:  If geth always had that limitation of 64-bit then the answer is no. @holiman?   That is correct. There is no such account In total, there are somwhere around 600M transactions in the history of ethereum. 2^32-1 means that there\u2019s a max nonce of 4300M. Meaning that if one single account made all transactions from genesis to somewhere around block 50M, then it could potentially reach it. However, changing it to to a fixed-size field is a massive change, since it affects the rlp-encoding of every account in the trie, aswel as the rlp-encoding of all transactions. Unless I misunderstand what you mean\u2026? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.928571428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "9",
                    "likes": "0",
                    "time": "07/09/2020-08:16:40",
                    "content": "    holiman:  However, changing it to to a fixed-size field is a massive change, since it affects the rlp-encoding of every account in the trie, aswel as the rlp-encoding of all transactions. Unless I misunderstand what you mean\u2026?   This EIP does not propose to change the merklization rule (\u201cRLP encoding of the accounts in trie\u201d) or the transactions encoding. However future EIPs proposing changes in those could benefit from the limit to 2^32-1. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "10",
                    "likes": "0",
                    "time": "07/09/2020-08:49:49",
                    "content": "Yeah ok\u2026 I think 2^32-1 is within the theoretically reachable segments, whereas limiting to full 64-bit is on the like \u201cmillions of years\u201d - unreachable segment. So the original suggestion makes definite sense, the latter suggestions seems to me to be not as clear-cut. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "11",
                    "likes": "0",
                    "time": "09/09/2020-05:49:39",
                    "content": "I weakly support 64-bit if we don\u2019t really care about the size. If we do care about the size, then I weakly support 32-bit as I don\u2019t think we are realistically going to run out anytime soon and we can change the size later if it ever becomes a real problem. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.6499999999999995
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "12",
                    "likes": "1",
                    "time": "02/12/2020-06:54:40",
                    "content": "I propose we limit to 2^52.  As mentioned, 2^32 is within the theoretically reachable range while both 2^64 and 2^52 are both in the \u201cnot actually possible\u201d range. 2^52 is special because unsigned integers up to 2^52 can fit into a 64 bit floating point number with exact precision.  This is meaningful in JavaScript especially where integers are not available.  While this argument in favor of 2^52 is fairly weak, I see no viable counter-argument in favor of 2^64, so I think even a weak argument should sway us here.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.2785714285714285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "13",
                    "likes": "0",
                    "time": "05/12/2020-07:09:52",
                    "content": "I\u2019m not sure why js libraries can\u2019t simply use unsigned integers? We\u2019re a long ways from 2^52 - hopefully those language specific things will be sorted out by then! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "14",
                    "likes": "0",
                    "time": "05/12/2020-08:15:06",
                    "content": "    matt:  I\u2019m not sure why js libraries can\u2019t simply use unsigned integers?   JavaScript doesn\u2019t have native integers (until very recent versions).  Historically, JS has only had doubles.     matt:  We\u2019re a long ways from 2^52 - hopefully those language specific things will be sorted out by then!   These arguments all seem to support 2^52, not 2^64.  Generally speaking, if there is no need to specify a larger limit then the smaller should be chosen as it is MUCH easier to increase the limit than to decrease the limit later.  If we do manage to get to 2^52 we can trivially increase it to 2^64 with a spec change (like this one) at that time. Is there any argument in favor of 2^64 as the limit?  So far everything seems to be along the lines of \u201c2^52 is just about the same\u201d not \u201c2^52 will cause problems/difficulty/complexity\u201d ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.019230769230769
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "15",
                    "likes": "0",
                    "time": "06/12/2020-03:45:52",
                    "content": "    MicahZoltu:  Is there any argument in favor of 2^64 as the limit? So far everything seems to be along the lines of \u201c2^52 is just about the same\u201d not \u201c2^52 will cause problems/difficulty/complexity\u201d   My main argument is that uint64 is a basic type in the languages that the most popular clients are written in. It\u2019s also just generally a much more widely accepted basic type. We\u2019re a long ways from both 2^52 and 2^64 - so it\u2019s a matter of which party needs to use a native type that is \u201cout-of-spec\u201d. I believe we should cater towards client developers / languages rather than javascript applications. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.953703703703703
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "16",
                    "likes": "0",
                    "time": "06/12/2020-05:48:24",
                    "content": "    matt:  My main argument is that uint64 is a basic type in the languages that the most popular clients are written in.   This change doesn\u2019t assert the width of the nonce for serialization or anything, it merely asserts that the value is invalid if it is greater than 2^x.  In either case, every client will need to write something like assert(nonce <= 2^x) so I don\u2019t see the advantage to client developers to choose a native integer width. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.055555555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "17",
                    "likes": "0",
                    "time": "06/12/2020-05:49:30",
                    "content": "    matt:  I believe we should cater towards client developers / languages rather than javascript applications.   While I don\u2019t think it matters for this discussion, I believe there are far more Ethereum JavaScript developers out there than other language developers so I\u2019m not sure that catering toward core devs is necessarily the right choice for the ecosystem.  It may be in some cases, but I don\u2019t think necessarily all cases. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.364795918367347
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "18",
                    "likes": "0",
                    "time": "09/12/2020-17:16:54",
                    "content": "    MicahZoltu:  This change doesn\u2019t assert the width of the nonce for serialization or anything, it merely asserts that the value is invalid if it is greater than 2^x. In either case, every client will need to write something like assert(nonce <= 2^x) so I don\u2019t see the advantage to client developers to choose a native integer width.   You\u2019re not wrong, however, my belief is that it is more natural for core developers to think about things in terms of overflows than arbitrary limits. As we\u2019ve both pointed out, we\u2019re a long ways from both 2^52 and 2^64. It\u2019s unlikely that any client will put an assert in for either in the near future, so my preference is to choose the constant that is more inline with their current implementations and generally more ubiquitous. The precision of floating point in javascript is something that shouldn\u2019t be an issue in ~10 years. In the meantime, I would prefer that javascript applications ensure that the nonce is less than 2^52 and use native floating points. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.377777777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "19",
                    "likes": "0",
                    "time": "10/12/2020-12:13:06",
                    "content": "    matt:  In the meantime, I would prefer that javascript applications ensure that the nonce is less than 2^52   We agree entirely on this point.  The best way to ensure that is to standardize it.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.388888888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "20",
                    "likes": "0",
                    "time": "21/03/2021-14:55:50",
                    "content": " The max value should be 2^52-1 so only 52 bits of the binary representation are ever used. From the current wording in the spec it looks the 2^52 is also valid nonce value. Only the 2^52+1 causes a failure. The rationale section still mentions 2^64.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.604166666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "21",
                    "likes": "0",
                    "time": "21/03/2021-22:09:22",
                    "content": "@chfast do you have a preference on limiting to 2^64-1 vs 2^52-1? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "22",
                    "likes": "0",
                    "time": "22/03/2021-16:33:19",
                    "content": "I usually prefer 2^63-1 over 2^64-1, but here I see little difference between 2^64-1 and 2^52-1. Therefore, 2^52-1 looks better as it makes JavaScript happy and is the smaller one. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.862500000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/esaulpaugh",
                    "index": "23",
                    "likes": "0",
                    "time": "22/03/2021-17:16:54",
                    "content": "aside from char (16-bit), all Java primitives, including long (max 2^63 - 1), are signed, which can be annoying ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 2.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "24",
                    "likes": "0",
                    "time": "14/05/2021-19:54:38",
                    "content": " Can this please be implemented in two or more competing implementations before this is published as final status?  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "25",
                    "likes": "0",
                    "time": "15/05/2021-07:38:52",
                    "content": "Implementations are not required for an EIP.  It is generally a good idea when building a complex EIP to actually implement it before moving to final, but that is up to author discretion. In this case, the EIP is just adding an assertion, so an \u201cimplementation\u201d would be one line of code like assert(x <= 2^52), so I\u2019m not concerned that additional complexity will pop up when implementing it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "26",
                    "likes": "1",
                    "time": "15/11/2021-16:17:32",
                    "content": "This EIP was approved on ACD#120 and implemented by @gumb0 in geth. ",
                    "links": [
                        "https://github.com/ethereum/go-ethereum/pull/23853"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1072"
}