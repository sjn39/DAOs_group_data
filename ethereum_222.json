{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5982-role-based-access-control/11759",
            "title": "EIP-5982 Role-based Access Control ",
            "index": 11759,
            "category": [
                "EIPs"
            ],
            "tags": [
                "erc"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "1",
                    "likes": "1",
                    "time": "16/11/2022-06:52:47",
                    "content": "Hi all, we are proposing a Role-based ACL EIP  Github PR for draft: Add EIP-5982: Role-based Access Control Interface by xinbenlv \u00b7 Pull Request #5982 \u00b7 ethereum/EIPs \u00b7 GitHub   After draft PR merged: https://eips.ethereum.org/EIPS/eip-5982 (currently doesn\u2019t exist yet)  ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5982"
                    ],
                    "GPT-summary": "The post is a proposal for a Role-based Access Control EIP on Github. The author is explaining the proposal and providing links to the draft PR and the EIP. There is no feedback or collaboration mentioned in the post.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Law and regulations",
                        "Privacy, Security and risk management",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ThunderDeliverer",
                    "index": "2",
                    "likes": "0",
                    "time": "16/11/2022-23:01:55",
                    "content": "Hi, the link that you included points to a page that doesn\u2019t exist. Would you mind updating it (if your PR hasn\u2019t been merged yet, I think that a link to it might be ok)? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "3",
                    "likes": "0",
                    "time": "16/11/2022-23:38:01",
                    "content": "Good point. I updated the links ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "4",
                    "likes": "0",
                    "time": "28/11/2022-14:36:42",
                    "content": "There is a \u201ccore\u201d interface that is compatible with OpenZeppelin\u2019s AccessControl, but then the events are incompatible. Why is that? What is the motivation to add bytes data arguments to each function? This isn\u2019t explained. The behavior of functions isn\u2019t specified. In my opinion this EIP is in a state where it shouldn\u2019t even be accepted as a Draft. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "5",
                    "likes": "0",
                    "time": "28/11/2022-16:04:54",
                    "content": "GM @frangio thank you for the comment  1. Why \u201cincompatible\u201d events?  There is a \u201ccore\u201d interface that is compatible with OpenZeppelin\u2019s AccessControl , but then the events are incompatible. Why is that?  I assue you are referring to the ones in IERC_ACL_GENERAL     event RoleGranted(address indexed grantor, bytes32 indexed role, address indexed grantee, bytes _data);     event RoleRevoked(address indexed revoker, bytes32 indexed role, address indexed revokee, bytes _data);  These events helps indexers and off-chain users to get information about change of Roles. Please note that the mandate in the specification is   Compliant contracts MUST implement IERC_ACL_CORE  It is RECOMMENDED for compliant contracts to implement the optional extension IERC_ACL_GENERAL.   Which means OZ\u2019s AccessControl.sol is considered compliant to this EIP (it complies with the MUST interfaces). It\u2019s ok that a compliant ignore specs that\u2019s marked as \u201cRECOMMENDATION\u201d. The recommendations are left there so that future clients, e.g. MetaMask and future contracts, and start to implement better features provided by this new EIP  2. Why \u201cbytes\u201d field in methods?  What is the motivation to add bytes data arguments to each function? This isn\u2019t explained.  Thanks for the comment, I tried to explained that but maybe that\u2019s not obvious enough. These extra bytes are meant to support EIP-5750 General Extensibility, EIP-5982 Role-based Access Control  Rationale \u2026 2. The methods in IERC_ACL_GENERAL conform to EIP-5750 to allow extension.  So they could support future expansions, for example:  Compared to GovernerAlpha, The new GovernerBravo adds new methods castVoteWithReason and castVoteWithSig which can be supported without change of method if they have an extra bytes. Compared to ERC-20\u2019s transferm, ERC-721 and ERC-1155\u2019s transferFrom has an extra bytes to support future extensions.  Example of of possible future extension include:  Commit-Reveal scheme, using bytes to supply a salt, see EIP-5732 and an Reference Implementation of CommitableERC721  Endorsement to supply signatures, replacing the need for creating GovernerBravo.castVoteWithSig or EIP-2612: Permit Extension for EIP-20 Signed Approvals   function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external  And since you () are the author of EIP-1271 and EIP-2612, I am hoping to put these examples hopefully resonate with these areas of your great efforts:  with GovernerBravo.castVoteWithSig and ERC2612.permit, imaging in the future we need multi-sig to do threshold signing, they will need to create new methods. Using EIP-5750, we get the benefit of not needing to create new methods.   Why are behavior of functions not specified?  The behavior of functions isn\u2019t specified. In my opinion this EIP is in a state where it shouldn\u2019t even be accepted as a Draft.  I agree with you we shall provide more details about behavior of functions as an EIP.  I will add more details soon. That said, this snapshot is to go for DRAFT status which is before REVIEW status. Hence we are putting here for early feedback, hopefully the name of these functions are largely self-explanatory. But I think based on the definition of DRAFT status in EIP-1 EIP Process Section, it should be ok for publication as Draft status, @frangio, I greatly appreciate your feedback and looking for your advices in this EIP draft.  ",
                    "links": [
                        "https://github.com/compound-finance/compound-protocol/blob/a3214f67b73310d547e00fc578e8355911c9d376/contracts/Governance/GovernorAlpha.sol#L4",
                        "https://github.com/compound-finance/compound-protocol/blob/a3214f67b73310d547e00fc578e8355911c9d376/contracts/Governance/GovernorBravoDelegate.sol#L246",
                        "https://eips.ethereum.org/EIPS/eip-5732",
                        "https://github.com/ercref/ercref-contracts/blob/e833633a65de5910ed34e98681278b931993d1b8/ERCs/eip-5732/contracts/CommitableERC721.sol#L41",
                        "https://eips.ethereum.org/EIPS/eip-2612",
                        "https://eips.ethereum.org/EIPS/eip-1#eip-process"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.878403854210306
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "6",
                    "likes": "0",
                    "time": "28/11/2022-16:18:00",
                    "content": "If there is a goal of compatibility with OpenZeppelin, compatible events should be part of IERC_ACL_CORE. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "7",
                    "likes": "0",
                    "time": "28/11/2022-16:45:34",
                    "content": "We are definitely happy to add these events into IERC_ACL_CORE if getting your support, but if I may take sometime to clarify and make sure we are on the same page about the implications. We want this new EIP to be compatible to OpenZeppelin, more specifically we are looking at IAccessControl.sol between OZ v4.4.1 - v.4.8.0 Therefore the methods and events of IERC_ACL_CORE needs to be a subset of AccessControl.sol $$ S_{IERC_ACL_CORE} \\subset S_{OZAcessControl.sol} $$ The events of question are similar and inspired by openzeppelin-contracts/IAccessControl.sol at 8f8fd84f1e60426a5e785d6b5b2524938271bb05 \u00b7 OpenZeppelin/openzeppelin-contracts \u00b7 GitHub But not entirely the same such as bytes and grantor to allow off-chain approval and extending behavior. If OZ find these events critical and is interested in committing to support these new version of event definition and commit to change to new version, we are happy to consider moving such events to IERC_ACL_CORE to make them a mandatory. ",
                    "links": [
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8f8fd84f1e60426a5e785d6b5b2524938271bb05/contracts/access/IAccessControl.sol#L26-35",
                        "https://ethereum-magicians.org/t/installed-discourse-math-plugin-for-using-latex-in-comments/6523/2"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.086363636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "8",
                    "likes": "0",
                    "time": "28/11/2022-17:44:38",
                    "content": "My point is that if there is an interest in making this compatible with AccessControl from OpenZeppelin the event definitions should be changed to match that contract and moved into the core interface. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "9",
                    "likes": "0",
                    "time": "28/11/2022-18:07:09",
                    "content": "That is the purpose of this draft: to start early discussion of design choices like this. OZ IAccessControl.sol v4.4.1-4.8.0 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);  EIP-5982 Draft I_ERC_GERNERAL event RoleGranted(address indexed grantor, bytes32 indexed role, address indexed grantee, bytes _data);  The current snapshot EIP demonstrated a technical opinionated view that OZ\u2019s current IAcessControl.sol 's events are not sufficiently designed to cover future cases, and hence, until other-wised convinced, this EIP made a design choice to go for different event definitions as demonstrated in its IERC_GENERAL. Let me know which is the case:  You think there is editorial unclarity that EIP-5982 wants to comply with OZ\u2019s IAccessControl but creates events with different name / parameters than what\u2019s already in OZ IAccessControl.sol v4.4.1 and you thought the EIP Author is not conscious that such different parameters will cause OZ\u2019s IAccessControl event to be non-compliant with EIP-5982\u2019s optional interface IERC_GENERAL at current snapshot, You understand the EIP is consciously making a design choice to propose a different event definition debating the design choices made in EIP-5982 to use different name and parameters for these events and is choose not to mandate it so OZ IAccessControl.sol v4.4.1 can remain compatible with EIP.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.116666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "10",
                    "likes": "1",
                    "time": "28/11/2022-19:26:40",
                    "content": "I understand this might be a choice but I am questioning that choice: I believe function-only compatibility is too reduced a form of compatibility. Event compatibility is also important, otherwise the functions might as well be entirely different. Additionally, I don\u2019t think forgoing event compatibility is justified in this case: personally, I doubt the usefulness of EIP-5750, but even if we take it as a given to be a good idea, I don\u2019t see strong reasons for including it in the events, in fact that EIP doesn\u2019t mention events. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.611111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "11",
                    "likes": "0",
                    "time": "28/11/2022-19:31:08",
                    "content": "Per private discussion with @frangio, we are align on the terminology of compliance. Going to (2), we are debating design choicesof  Design Choice A: what shall event signature of RoleGranted be?  Option 1. same as of OZv4.4.1-OZv.4.8.0 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);   Pros: simple, backward compatible with OZv.4.41-v4.8.0 which is widely adopted Cons: didn\u2019t indicate who granted the role, and didn\u2019t add bytes for future extension.  Option 2. use new events event RoleGranted(address indexed grantor, bytes32 indexed role, address indexed grantee, bytes _data);   Pros:  indicate who granted the role, allowing use cases e.g. off-chain approval signatures add bytes for future extension, allowing use cases .e.g reasoning, commit-reveal, endorsement-approval   Cons: aren\u2019t the same as OZv.4.41-v4.8.0. Will require OZ to change IAccessControl if they want to also conform to IERC_ACL_GENERAL   Is this a good summary of our diverging preferences and pros and cons? @frangio ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.409090909090909
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "12",
                    "likes": "1",
                    "time": "04/01/2023-19:50:28",
                    "content": "Something looks odd about that. In Option 1 you list \u201cCons: didn\u2019t indicate who granted the role\u201d, but the event includes a sender parameter which is in fact who granted the role, isn\u2019t it? You also say \u201cdidn\u2019t add bytes for future extension\u201d, but as I\u2019ve expressed in the discussion for EIP-5750 I still don\u2019t see any compelling reasons to include bytes data. I\u2019m biased but I don\u2019t think these are strong enough reasons to break compatibility. If the concern about the sender parameter is that it doesn\u2019t account for the case where the grant was made via a signature instead of via a transaction (so msg.sender is some other account who just has a signed approval), I\u2019d be open to repurpose the sender parameter and extend its meaning so that it isn\u2019t necessarily the msg.sender and is whoever allowed the role grant through whatever means. I think that was the original intended meaning for the parameter anyway. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.453703703703704
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "13",
                    "likes": "0",
                    "time": "04/01/2023-23:22:17",
                    "content": "@frangio appreciate your comment.     frangio:  Something looks odd about that. In Option 1 you list \u201cCons: didn\u2019t indicate who granted the role\u201d, but the event includes a sender parameter which is in fact who granted the role, isn\u2019t it?   With the trend of account abstraction / smart contract wallet, or permit-based actions, it will be more and more the case when sender is not the grantor. Just like ERC20 first start off with transfer(to, amount) assuming the transferer is always the sender, and then later shift to a model with approve + transferFrom(from, to, amount). I believe this is going to be a general trend. Therefore, I specifically propose this design choice of specifying a grantor. \u2013     frangio:  If the concern about the sender parameter is that it doesn\u2019t account for the case where the grant was made via a signature instead of via a transaction (so msg.sender is some other account who just has a signed approval), I\u2019d be open to repurpose the sender parameter and extend its meaning so that it isn\u2019t necessarily the msg.sender and is whoever allowed the role grant through whatever means. I think that was the original intended meaning for the parameter anyway.   I think we are on the same page: we both think sender is going to not aways be grantor.  I propose to call it grantor, and I am also open to use the same format with existing OZ 4.4.1\u2019s RoleGranted  but repurpose sender to grantor.      frangio:  You also say \u201cdidn\u2019t add bytes for future extension\u201d, but as I\u2019ve expressed in the discussion for EIP-5750 I still don\u2019t see any compelling reasons to include bytes data. I\u2019m biased but I don\u2019t think these are strong enough reasons to break compatibility.   EIP-5750 opens up all sorts of extensionability, e.g.  Supplying secret salt with EIP-5732 Commit Service for Commit-Reveal scheme Supplying endorsement for same-TX permit using EIP-5453, or aviding what needs a separate TX as in ERC-2612 or ERC-4494. Avoid the limitation of EIP-1271 which is being solved by Add EIP-6066: Signature Validation Method for NFTs by boyuanx \u00b7 Pull Request #6066 \u00b7 ethereum/EIPs \u00b7 GitHub  Avoid the limitation of original domain separator lacking \u201cextensions\u201d in EIP-712 being addressed by EIP-5267: Retrieval of EIP-712 domain which is proposing an uint256[] extensions   Let\u2019s continue the discussion on EIP-5750. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/6066",
                        "https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator",
                        "https://eips.ethereum.org/EIPS/eip-5267"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.576488095238096
                }
            ]
        }
    ],
    "group_index": "222"
}