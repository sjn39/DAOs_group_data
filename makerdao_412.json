{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/b-protocol-v2-integration-technical-review/12019",
            "title": "B.Protocol v2 Integration : technical review ",
            "index": 12019,
            "category": [
                "Core Units",
                "Protocol Engineering"
            ],
            "tags": [
                "collateral-onboard",
                "liquidation-system",
                "bprotocol",
                "pe-001"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/julienmartinlevrai",
                    "index": "#1",
                    "likes": "13",
                    "time": "06/12/2021-13:08:51",
                    "content": "The B.Protocol introduces a novel way of handling liquidations. Instead of auctioning collateral in the open market, which exposes keepers to high fees and MEV, the B.Protocol settles the liquidation immediately using liquidity from a liquidity pool. This way, keepers become liquidity providers, which lowers their costs and risks, increases their profits, lowers the barrier of entry for new players, and improves the overall efficiency for liquidations.  About this document This document was prepared by the Protocol Engineering Core Unit. It provides a technical review of B.Protocol v2 as it was in commit 477b5001d35d351ed8a5acd993341981480048a0 from the mip branch of the following Git repository: GitHub - backstop-protocol/Maker-Backstop. It is intended for all audiences who have a technical understanding of how Maker works. Since the code reviewed is more of a \u201creference for possible B.Protocol functionality\u201d than an actual final implementation, this review focuses on the conceptual aspect of the code and provides high-level recommendations. A code audit of the final implementation will still be needed.  About the B.Protocol The B.Protocol team is composed of Yaron Velner, CEO & Protocol Architect, Eitan Katchka, Head of Ecosystem Development, and Shmuel Disraeli, Full Stack Engineer. A year ago they released the first version of the B.Protocol which went live on October 27th, 2020. One month after going live, Yaron Velner wrote a post on this forum proposing an integration with Maker. Although it had a good reception, Yaron decided to withdraw his declaration of intent a few months later as the team was working on a new version of their product. B.Protocol v2, also known as B.AMM, was introduced last june and a few weeks later it went live as a component of the Liquity protocol. This integration with Liquity was audited and is currently the object of a bounty program on bug bounty platform ImmuneFi. Three days after introducing B.AMM, Yaron resubmitted his declaration of intent on this forum. Last August, Yaron presented it as part of Maker\u2019s G&R call 153, and soon afterwards it passed a ratification poll. Finally, on October 17th, Yaron submitted a proof-of-concept implementation of B.AMM\u2019s integration with Maker.  How it works Before addressing the specific mechanics of the B.AMM, let us recall the way Maker liquidations are currently triggered.  How Maker vaults get liquidated Anybody can trigger a liquidation by calling bark in the Dog contract and specifying a vault. If that vault is unsafe, the Dog removes it from the system by transferring its collateral to a Clipper contract. There are many Clippers, one per collateral type. Then, the Dog calls the Clipper\u2019s kick function, which sets an initial price for the collateral, and starts the public auction. The B.AMM\u2019s proposal is to change some of our Clippers into their Blippers, leaving the Dog\u2019s functionality intact.  How Blippers work Once connected to the system, Blippers receive collateral from the Dog. Instead of starting a public auction like the Clippers do, Blippers attempt to settle the liquidation immediately by using an Automated Market Maker (AMM). AMMs are smart contracts that hold two or more assets and specify a trading strategy between them. In this case, these assets are Dai and the collateral being liquidated. Thus, there is one liquidity pool per collateral. In order to determine the price of the collateral being liquidated, Blippers use the Medianizer instead of the OSM. This allows them to mimic the behavior of keepers by being able to obtain the price in real time. It comes, however, at the expense of being more vulnerable to oracle attacks, which is why Blippers revert if their execution results in bad debt. If a Blipper fails to liquidate a vault for lack of liquidity or some other reason, it will fall back to the Clipper functionality and start a public auction. That is why liquidity pools are at the heart of B.AMM.  B.AMM\u2019s liquidity pools B.AMM\u2019s liquidity pools\u2019 incentivization mechanisms differ slightly from other liquidity pools\u2019. They need to have a lot of DAI liquidity to account for sudden and unexpected liquidations of large amounts of Maker collateral. So in order to achieve such large amounts of DAI liquidity, they need to incentivize liquidity providers to deposit it. Liquidity providers can deposit and withdraw liquidity from the pool. When they withdraw, they get a balanced amount of both Dai and collateral ; when depositing, however, they can only provide DAI. Since the pool charges a fee every time it receives collateral from Maker, liquidity providers obtain a benefit when they withdraw, proportional to the amount of liquidated collateral they helped providing liquidity for.  Using Compound to store the pool\u2019s DAI These pools maintain their assets in two differet places. For their collateral side where they store Maker\u2019s liquidated assets, they store it as internal gem. In other words, they keep it inside of Maker. Not so for the DAI side of the pool, which is stored in Compound. Although this undoubtedly helps motivate liquidity providers, it also adds systemic risk to Maker. Yaron is open to using the DSR instead, which is a far safer alternative.  Buying collateral tokens from a pool Pools have a swap function that allows users to exchange DAI for collateral. This functionality is somewhat similar to what Maker auctions currently do, in the sense that they allow the general public to buy tokens at a certain discount and then sell them in the open market for a marginal profit. This swap function plays an essential role in rebalancing the pool. It uses Maker\u2019s oracles to obtain the price of the pool\u2019s collateral tokens and then a StableSwap algorithm measures how far the pool is from a balance. The farther it is, the higher the discount it provides. This means that B.AMM acts as a buffer between Maker\u2019s liquidations and keepers. This is highly advanteageous to both Maker and keepers. Maker obtains instant liquidations and diminishes its solvency risk during sharp market declines ; keepers benefit by not having to participate in highly competitive and time-sensitive auctions, which reduces their risks, makes their business more predictable, and lowers their infrastructure costs. The B.Protocol charges a fee for every swap made through their AMM.  How much DAI does Maker get back While a regular Clipper uses auctions to determine the price of the collateral it is liquidating, B.AMM settles liquidations instantly by transferring a certain amount of DAI back to the protocol. How is this amount obtained ? First, let us recall how Maker vaults get liquidated. When the Dog removes an unsafe vault from the system, it registers the vault\u2019s debt as bad debt owed by the Vow contract. That is why Clippers move the DAI raised back to the Vow. With Blippers, then, the question is : how much DAI do they move back to the Vow after a successful liquidation ? This is very important because it allows us to examine Maker\u2019s profitability from this new system.  Obtaining owe  In the context of a Blipper contract, owe is the amount of DAI the Blipper moves to the Vow when it liquidates collateral. The following Solidity code shows how it is obtained. It was slightly simplified from the original in order to abstract away safe math operations and fixed-point arithmetic: 1    uint256 ask = tab / (mid / bee); 2    uint256 bid = lot * mid * bee; 3    if(ask <= lot) { 4        owe = tab; 5    } 6    else { 7        owe = bid; 8        require(owe * chop >= tab, \"Blipper/low-ink\"); 9    }  Here is the meaning of each variable:   lot: amount of collateral available  tab: amount of DAI the system expects (vault\u2019s debt + penalty)  owe: amount of DAI the system will get  mid: real-time price of collateral  bee: B.AMM discount  chop: liquidation penalty  Under normal circumstances, line 4 above will be executed and the system will get back the amount of DAI it expects. Under stressful conditions, however, the system might get less. In a really bad scenario, B.AMM will not liquidate the vault at all and it will fall back to a Clipper auction instead. What are these scenarios ? It depends on wether a mistake was made in the bid calculation above.  A potential mistake in the bid calculation Line 2 above might make more sense as uint256 bid = lot * mid / bee. Otherwise, bid will be higher than tab on some stressful scenarios. The explanation is that lot * mid is the value of the collateral at current prices ; if it is multiplied by bee, it will become higher, since bee is of the form 1 + fraction.  Response from the B.Protocol The B.Protocol acknowledged this and fixed it in a pull request against the branch that we reviewed.  Plotting owe as a function of mid  In order to understand the behavior of owe under different market conditions, we plotted it against mid, the real-time price of collateral:  owe as a function of mid599\u00d7745 22 KB  The X axis represents the price of collateral, while the Y axis represents the amount the system gets in return. The blue line represents how the system behaves under normal conditions, and the other two lines represent its behavior under market pressure. The red line is how it is currently implemented [this was fixed], and the green line is our proposal for fixing the bid calculation. You can see the formulas and constants, and play with them here. Note that, under a certain price threshold, the line stops. This represents the moment at which B.AMM no longer liquidates the collateral due to its low price and reverts back to a Clipper auction.  Should Blippers revert if the price is too low ? If we remove the low-ink require from line 8 above, Blippers would not revert if the price is too low. Instead, they would move an insufficient amount of DAI to the Vow, creating bad debt in the process as they would be unable to fully repay the liquidated Vault\u2019s debt.  owe obtained without the low-ink require611\u00d7615 17.5 KB  However, an auction under these circumstances would probably not yield better results if the price is correct. As auctions take much longer, the resulting DAI could be significantly lower. On the other hand, if the price is wrong, an auction could be more beneficial to the system. If, for instance, oracles are under attack, an auction would benefit from the extra layer of safety offered by the OSM. The Risk team can provide very valuable input on this decision.  Is there any risk of auction grinding ? Auction grinding is a type of attack on Maker liquidations. It takes place when the owner of a vault that is being liquidated participates in the auction. Under some circumstances, the owner can make a profit out of the liquidation and end up with a more valuable portfolio than if they had paid their debt back. For the case of a B.AMM-backed collateral type, there is no auction that the vault owner can participate in, but they can swap the liquidated collateral to Dai for a discount. Are there any circumstances under which this can be profitable to a vault owner who liquidates their vault on purpose ? B.AMM uses the StableSwap algorithm to determine the discount offered on the swap trade. This means that the discount will increment in an inversely proportional way to the amount of DAI liquidity available in the pool. Assuming an attacker has the means to create an arbitrarily large vault, they can operate as follows : If they create a vault that costs more to liquidate than the available liquidity in the pool, B.AMM will refuse to liquidate it so it will fallback to a regular auction. However, the attacker can craft a vault big enough to be barely liquidatable through B.AMM, using all its available liquidity. This means that the B.AMM pool will be left with a large amount of collateral and no DAI liquidity. Then, the attacker can buy the collateral using the swap function. Since the available liquidity affects the price calculation, and B.AMM is in a state where it desperately needs liquidity, the attacker can get the collateral for a very low DAI price. In order to prevent this, however, B.AMM has a maxDiscount parameter that allows it to control the maximum discount a buyer of collateral can obtain. As long as this parameter is set correctly, a grinding attack is impossible. What values are safe for this parameter ?  Obtaining safe values for maxDiscount  Let us assume an attacker sets up a vault such that its liquidation will drain all the liquidity from the B.AMM. They then trigger a liquidation, and immediately thereafter buy all the collateral that was liquidated, such that they end up with the exact same amount of collateral they started with. We need to compute the profit the attacker obtains from this operation. Since their amount of collateral does not change and they started with zero DAI, their profit consists of the amount of DAI they have at the end of the attack. The attacker has two DAI flows : first, get DAI from vault debt, and then pay DAI to purchase the liquidated collateral : profit = debt - purchase  Since we are assuming all the collateral is bought in a liquidity worst-case scenario, the purchase amount will be the lowest possible, and it will be constrained by maxDiscount : profit = debt - (collateral * price / maxDiscount)  What is the amount of collateral that was liquidated ? Assuming normal market conditions, it is computed in the Blipper as the expected liquidation amount with the B.AMM fee, divided by the price of the collateral : profit = debt - (tab * bee / price) * price / maxDiscount profit = debt - tab * bee / maxDiscount  Now, the expected liquidation amount tab is calculated in the Dog as the vault\u2019s debt with the liquidation penalty : profit = debt - (debt * chop) * bee / maxDiscount  Since we want the attacker to lose money, we need profit < 0 : debt - debt * chop * bee / maxDiscount < 0  Solving for maxDiscount : debt < debt * chop * bee / maxDiscount debt * maxDiscount < debt * chop * bee maxDiscount < chop * bee  Thus, in order to prevent a grinding attack, Governance must ensure that the B.AMM\u2019s maximum discount on swap operations never exceeds the product of the liquidation penalty and B.AMM\u2019s liquidation fee. The B.Protocol is planning to always have maxDiscount < bee in order to prevent these attacks.  Interacting with the B.Protocol  At a technical level As it is still in an early stage, the B.AMM cannot yet operate on its own and needs to be tightly integrated with each protocol it interacts with. This means that, for every protocol integration, the B.Protocol team needs to create a new version of B.AMM, tailored specifically for each project\u2019s needs. This means that its code has not been tested in production. The Maker version of B.AMM consists mainly of two contracts: Blipper and bammJoin. The former inherits from Maker\u2019s Clipper contract and needs to be relied in the Vat ; the latter implements a B.AMM liquidity pool and does not need any special permissions. Both contracts are per-collateral and will need to be deployed multiple times if Maker intends to integrate more than one collateral with B.Protocol. For a B.AMM-backed collateral, we think it is better to deploy a Blipper and a Clipper as separate contracts. This will make it easier to update either one of them. Thus, instead of inheriting from a Clipper, Blipper contracts should store their associated Clipper address. As they still need to access some of the Clipper parameters, they can use a synchronization mechanism to save gas. If they need to fall back to the Clipper, they should transfer the collateral to it and then make an external call to its kick function.  Response from the B.Protocol The B.Protocol addressed this in a pull request against the branch we reviewed.  At a human level It should be made clear from the beginning what party is responsible for maintaining the Maker version of B.AMM at the smart contract level. Since the Blipper contracts need to be relied in the Vat, we propose that they should be considered as core contracts and thus be maintained, audited and deployed by the PECU or other MakerDAO Core Unit. We also propose that the Blipper source code should be stored in MakerDAO\u2019s DSS repository along with other core contracts. bammJoin contracts, on the other hand, don\u2019t need to be relied in the Vat and can be onboarded and offboarded by setting their addresses in the Blippers. Thus, we propose that the responsiblity for maintaining, auditing and deploying them belong to the B.Protocol. A conversation between both technical teams should take place in order to reach an agreement on these responsibilities.  Summary of recommendations  Consider using Maker\u2019s DSR instead of Compound. Review the calculation of bid. Assess whether the low-ink require should be removed. Make Blipper contracts call Clippers externally instead of inheriting from them. Come to an agreement between the technical teams on responsibilities for maintaining, auditing and deploying the Maker version of B.AMM at the smart contract level.  ",
                    "links": [
                        "https://medium.com/b-protocol/b-amm-efficient-automated-market-maker-for-defi-liquidations-fea7b0fdc0c5",
                        "https://github.com/backstop-protocol/Maker-Backstop",
                        "https://forum.makerdao.com/t/blipper-extending-the-clipper-to-support-b-protocol-liquidation-mechanism/11057#bprotocol-functionality-11",
                        "https://www.bprotocol.org/about-us/",
                        "https://twitter.com/yaron_velner",
                        "https://twitter.com/EKatchka",
                        "https://twitter.com/ShmuelDisraeli",
                        "https://twitter.com/bprotocoleth/status/1321000634804506624",
                        "https://forum.makerdao.com/t/discussion-wbtc-b-collateral-type-backed-by-b-protocol-with-x10-leverage/5409",
                        "https://forum.makerdao.com/t/mip13c3-sp9-onboarding-a-new-collateral-type-backed-by-b-protocol-declaration-of-intent/5920",
                        "https://medium.com/b-protocol/b-amm-efficient-automated-market-maker-for-defi-liquidations-fea7b0fdc0c5",
                        "https://medium.com/b-protocol/b-protocol-liquity-integration-is-live-1342605e7cfb",
                        "https://www.liquity.org/",
                        "https://github.com/Fixed-Point-Solutions/published-work/blob/master/SmartContractAudits/FPS_B.AMM_Liquity_Assessment_FINAL.pdf",
                        "https://immunefi.com/bounty/bprotocol/",
                        "https://immunefi.com/",
                        "https://forum.makerdao.com/t/mip13c3-sp11-onboarding-a-new-collateral-type-backed-by-b-protocol-v2-declaration-of-intent/8802",
                        "https://www.youtube.com/watch?v=t63sZrRNlEY&t=4202s",
                        "https://forum.makerdao.com/t/agenda-discussion-scientific-governance-and-risk-153-thursday-august-5-17-00-utc/9671",
                        "https://vote.makerdao.com/polling/QmYzt3ub",
                        "https://forum.makerdao.com/t/blipper-extending-the-clipper-to-support-b-protocol-liquidation-mechanism/11057",
                        "https://github.com/backstop-protocol/Maker-Backstop",
                        "https://docs.makerdao.com/smart-contract-modules/dog-and-clipper-detailed-documentation",
                        "https://github.com/makerdao/dss/blob/c666ab1fdac4cb3dd8a8b4223f951a9773a64c55/src/dog.sol#L170",
                        "https://etherscan.io/address/0x135954d155898d42c90d2a57824c690e0c7bef1b#writeContract",
                        "https://github.com/makerdao/dss/blob/c666ab1fdac4cb3dd8a8b4223f951a9773a64c55/src/dog.sol#L215",
                        "https://github.com/makerdao/dss/blob/c666ab1fdac4cb3dd8a8b4223f951a9773a64c55/src/clip.sol",
                        "https://github.com/makerdao/dss/blob/c666ab1fdac4cb3dd8a8b4223f951a9773a64c55/src/clip.sol#L229",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol",
                        "https://github.com/makerdao/dss/blob/c666ab1fdac4cb3dd8a8b4223f951a9773a64c55/src/dog.sol#L215",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol#L90",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/bammJoin.sol",
                        "https://docs.makerdao.com/smart-contract-modules/oracle-module/median-detailed-documentation",
                        "https://docs.makerdao.com/smart-contract-modules/oracle-module/oracle-security-module-osm-detailed-documentation",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol#L118",
                        "https://medium.com/b-protocol/b-amm-efficient-automated-market-maker-for-defi-liquidations-fea7b0fdc0c5",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/bammJoin.sol#L145",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol#L18",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol#L91",
                        "https://docs.makerdao.com/other-documentation/system-glossary#vat-vault-engine",
                        "https://compound.finance/",
                        "https://forum.makerdao.com/t/mip13c3-sp11-onboarding-a-new-collateral-type-backed-by-b-protocol-v2-declaration-of-intent/8802#committed-backstop-design-using-bprotocol-v2-4",
                        "https://makerdao.world/en/learn/Dai/dsr",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/bammJoin.sol#L207",
                        "https://makerdao.world/en/learn/Oracles",
                        "https://github.com/Fixed-Point-Solutions/published-work/blob/master/SmartContractAudits/FPS_B.AMM_Liquity_Assessment_FINAL.pdf",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/bammJoin.sol#L215",
                        "https://docs.makerdao.com/smart-contract-modules/core-module/vat-detailed-documentation#vault-management",
                        "https://github.com/makerdao/dss/blob/master/src/clip.sol#L399",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol#L72-L85",
                        "https://github.com/backstop-protocol/Maker-Backstop/pull/4",
                        "https://www.desmos.com/calculator/gseubebyeg?lang=fr",
                        "https://www.desmos.com/calculator/gseubebyeg?lang=fr",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol#L84",
                        "https://blog.makerdao.com/the-liquidations-2-0-upgrade-executive-vote-is-live",
                        "https://forum.makerdao.com/t/mip45-liquidations-2-0-liq-2-0-liquidation-system-redesign/6352#mip45c23-osm-risk-for-start-price",
                        "https://docs.makerdao.com/smart-contract-modules/oracle-module/oracle-security-module-osm-detailed-documentation",
                        "https://lev.liv.nev.org.uk/content/grinding.pdf",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/bammJoin.sol#L191",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/bammJoin.sol#L191",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol#L72",
                        "https://github.com/makerdao/dss/blob/c666ab1fdac4cb3dd8a8b4223f951a9773a64c55/src/dog.sol#L224",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/blip.sol",
                        "https://github.com/backstop-protocol/Maker-Backstop/blob/477b5001d35d351ed8a5acd993341981480048a0/src/bammJoin.sol",
                        "https://github.com/makerdao/dss/blob/c666ab1fdac4cb3dd8a8b4223f951a9773a64c55/src/clip.sol",
                        "https://docs.makerdao.com/smart-contract-modules/core-module/vat-detailed-documentation",
                        "https://github.com/backstop-protocol/Maker-Backstop/pull/4",
                        "https://forum.makerdao.com/t/maker-relay-ep-74/12035",
                        "https://forum.makerdao.com/t/maker-relay-ep-74-en-espanol/12071",
                        "https://forum.makerdao.com/t/forum-at-a-glance-december-2-9-2021/12119",
                        "https://forum.makerdao.com/t/maker-relay-ep-75/12187",
                        "https://forum.makerdao.com/t/maker-relay-ep-75-en-espanol/12214"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.338376283402462
                },
                {
                    "author_link": "https://forum.makerdao.com/u/psychonaut",
                    "index": "#2",
                    "likes": "1",
                    "time": "06/12/2021-22:34:38",
                    "content": "I\u2019m happy to see B.Protocol\u2019s contribution and believe that they should be compensated, but what service, going forward, does B.Protocol provide? I mean, besides basic respect, what prevents Maker from taking the code, removing the extra fee sent to B.Protocol, and deploying it? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.609375
                },
                {
                    "author_link": "https://forum.makerdao.com/u/yaronvel",
                    "index": "#3",
                    "likes": "2",
                    "time": "07/12/2021-07:40:19",
                    "content": "This is a great question. The proposed system is more than just code, and heavily relies on sufficient user deposits. Obtaining user deposits requires both community effort and development effort. From the community side we are building backstops for other projects as well, which can make it easier to target the right audience and to produce educational material to help users make a decision. From the development side, as the backstop deposits become bigger and more widely adopted inside the MakerDAO protocol additional development could help it grow, for example:  Collateral specific implementation that help optimizing the process. Risk/Reward adjustment for the idle deposits. E.g., put some of the backstop funds in a riskier yield bearing platform (e.g., yearn instead of compound or the DSR). Building the right incentive scheme for backstop contributors.  To summarize, the proposed system can work as is and already brings an improvement over the current liquidation system. However, after it proves useful with one collateral and certain level of deposits, continues work will be needed to further improve it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.940848214285714
                },
                {
                    "author_link": "https://forum.makerdao.com/u/psychonaut",
                    "index": "#4",
                    "likes": "1",
                    "time": "07/12/2021-20:41:47",
                    "content": "Could the B.Protocol ETH AMM be configured to keep most of the ETH purchased as a way to address Proposal Idea - Purchase ETH for Strategic Reserves [Poll]? It seems likely that ETH purchased as part of the liquidation process would usually be acquired relatively cheap compared to the market price. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.8125
                },
                {
                    "author_link": "https://forum.makerdao.com/u/yaronvel",
                    "index": "#5",
                    "likes": "1",
                    "time": "07/12/2021-20:49:58",
                    "content": "Technically it could, but it would make sense to do it only for funds that are supplied by Maker and for a bounded duration of time. I don\u2019t think that for handling liquidations it is a viable long term strategy. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.916666666666666
                },
                {
                    "author_link": "https://forum.makerdao.com/u/Commiek.ll-r",
                    "index": "#6",
                    "likes": "2",
                    "time": "08/12/2021-07:25:32",
                    "content": "Theoretically that is possible but by copying the code you won\u2019t get access to the liquidity which Bprotocol has available. Maker could copy the code and source its own liquidity but this would also cost money. At the end if the day its a question if Maker should become a big monolithic dApp or if they should just use the money lego which is available. I believe that it is in Maker\u2019s interest to implement Bprotocol and focus on its core business instead of trying to do everything and losing focus. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.166666666666667
                },
                {
                    "author_link": "https://forum.makerdao.com/u/system",
                    "index": "#7",
                    "likes": "0",
                    "time": "08/03/2022-07:26:00",
                    "content": "This topic was automatically closed 90 days after the last reply. New replies are no longer allowed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0606060606060606
                }
            ]
        }
    ]
}