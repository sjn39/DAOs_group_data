{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/meta-we-should-value-privacy-more/2475",
            "title": "Meta: we should value privacy more ",
            "index": 2475,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "privacy"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "1",
                    "likes": "20",
                    "time": "18/01/2019-10:19:31",
                    "content": "Right now, Ethereum privacy is quite lacking. There are two reasons why. First, all of your activity is by default done through a single account, so it is all linkable on-chain. Second, and more insidiously, even if you have multiple accounts that you split your activity between (ideally, the default would be to use a different account for each application), the fact that you need to transfer ETH between accounts to pay for gas on all of them is itself a privacy leak. This is a situation that could use improvement. Two areas come to mind. Mixers We can encourage the development of easy-to-use, and importantly decentralized (ie. not just \u201ctrustless\u201d, completely serverless) mixers targeting privacy-preserving transfer of small amounts of ETH, so if you want to send gas payment to another account you can do so without linking the two. Note that here, one major challenge with (eg. ringsig or zk snark based) smart contract mixers is that if you want to send funds from A to B, B still needs to have ETH to pay gas to submit the proof to receive their funds, and sending that gas would be a privacy leak; this can be solved with a layer-2 protocol where a user can broadcast their proof (including a commitment to what address they want to receive to and what fee they are willing to pay) over something like Whisper, and a specialized set of nodes could accept these proofs, include them into a transaction and pay for the gas, and collect the fee from the recipient. But this protocol needs to be specced out, standardized and implemented\u2026 UX If we make a default that for every dapp, a user uses a separate account, we have to overcome a few challenges:   Address generation: It would be nice to keep wallet software stateless, so users can easily export and import their keys between wallets; this implies using some deterministic scheme like privkey_for_dapp = hash(master_key + dapp_id). But then what is the dapp_id? How would that work for multi-contract dapps?  Dapp interaction: The most common category here is using ERC20 tokens inside another dapp. What is the workflow by which they would do that? To use KNC on Uniswap, would you first transfer KNC from their \u201cKyber account\u201d to your \u201cUniswap account\u201d and then do whatever you wanted to do with Uniswap? Something else? Ideally from a UX point of view, it would still feel like the user makes one operation; the UX of dapps that requires users to sign three transactions in a row to do something honestly really sucks.  Have people here thought about these issues more deeply? ",
                    "links": [
                        "https://ethereum-magicians.org/t/issue-zkerc20-confidential-token-standard/2541",
                        "https://ethereum-magicians.org/t/eip-erc-app-keys-application-specific-wallet-accounts/2742/2"
                    ],
                    "GPT-summary": "The author of the post is explaining the current lack of privacy in Ethereum and proposing two areas of improvement: the development of decentralized mixers and the use of separate accounts for each dapp. The post also raises questions about the challenges of implementing these improvements and asks for feedback and deeper consideration of the issues.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.104880952380952
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AtLeastSignificant",
                    "index": "2",
                    "likes": "5",
                    "time": "18/01/2019-16:25:50",
                    "content": "To be clear, the issue with using one account - or transacting between multiple accounts you own, effectively making it a single \u201cprofile\u201d - makes it easier to identify people in meaningful ways. For example, I can look at things like where addresses are getting their ETH/tokens from, which leads to eventually to an exchange.  Exchanges help identify potential attack vectors for spear phishing, but it also reveals some geographic information.  The times that these transactions occur also helps to narrow locale. I can see what Dapps an entity is using, which helps point me towards where these users may be reachable on social media. You can even profile what kind of wallet scheme their using.  Whether they have a cold storage address, are just using MetaMask or some other hot wallet, etc.  This helps to know how difficult it would be to attack the user. There\u2019s a ton of meta information on top of the obvious X sent Y to Z. This problem becomes exponentially worse when you add it to things like airdrops or giveaways where many people are associating their social media identity with their address.  Anything that can be used to tie an address down to any other identifiable information makes this blockchain meta-information very powerful to attackers. There\u2019s also the concern for big data mining operations / government conspiracies that may not be so far fetched that are applying deep learning algorithms to all of this to pain a bigger picture.  The problem with mixers/privacy layers/Dapp support is that they aren\u2019t usually trustless and easy.  If possible, I\u2019d rather see privacy built into the base protocol and not be an option for users.  They should have to explicitly prove a transaction, not explicitly hide them. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.244034818228367
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "3",
                    "likes": "0",
                    "time": "18/01/2019-16:54:37",
                    "content": "Dapp interaction This is an idea for CREATE2 which can be applied in some situations. We use the fact that we can precalculate the CREATE2 address - which means we can transfer tokens here and we can even supply a salt! It is applied to ERC20 tokens where we try to semi-interact with contracts in a single TX. The idea is that an user transfers tokens to the address which is precalculated by seeding the address of the user together with the calldata. Knowing these values proves that the user wants to \u201cdeposit\u201d the value which is currently the balance of the precalculated address together with the calldata. Hence the seeded data in CREATE2 is the address of the user and the calldata. Now let\u2019s say we have an useless dummy contract to show the usage. An user A wants to transfer tokens to B but not directly. This useless SplitContract is deployed and we can now calculate the CREATE2 address where A should deposit: the salt is simply the address of A and B and the init_code simply transfers all tokens at the CREATE2 address to SplitContract. When we created the contract at the address where A deposited to in the SplitContract we hence knew the seed so at this point we also know address B. We can calculate how many tokens were transferred and now transfer all tokens to B. Note that the CREATE2 contract can be selfdestructed immediately after we transferred tokens (hence yielding extra used gas of about 11k (~32k contract deployment, 22k refund, ~1k execution cost). This is of course rather stupid but it can be expanded. Think of a DDEX: here you can match someones trade by transferring tokens to a certain address. The only thing the user now needs to do is to broadcast that these tokens are deposited and either the maker of this order can now take them or the user includes a fee for someone else to \u201c\u201cmine\u201d\u201d this token on-chain which gives them incentive to pay for this gas. (This fee is hence in the calldata / salt). If the order is not matched the user can go on-chain to withdraw their tokens by simply providing the supplied calldata and showing that the user wants to cancel the order (to prevent the contract to try to match the order again). (Or the order is fulfilled already). Notice that in the DDEX cases the contract is also only created and selfdestructed so no code is deposited, yielding a low amount of extra gas. The only downside in the implementation-side is that you can\u2019t selfdestruct, create2 it again, and selfdestruct it again in the same tx which means you have to deposit code if you want to call back into this contract for some reason. When thinking about this I can also see why it would be really nice to have some kind of memory between call frames, something EIP 1283 tries to accomplish. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.152472527472528
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "4",
                    "likes": "0",
                    "time": "18/01/2019-20:02:56",
                    "content": "I\u2019m interested also in how this applies to \u201caccount contracts\u201d, which are essentially multisigs for a single person but with private keys on different devices + a recovery mechanism. Account contracts make Ethereum more usable and help safeguard against loss of access to someone\u2019s most important dapps, but they make privacy more challenging due to encouraging users to have a single point of entry to many dapps. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.108516483516484
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/burrrata",
                    "index": "5",
                    "likes": "2",
                    "time": "18/01/2019-20:35:58",
                    "content": "@AtLeastSignificant I agree that privacy by default is the only real solution. If it\u2019s a choice, there\u2019s always going to be incentives to trade information for access. Trading data for services is the default for major applications on the web today, and it\u2019s what users are accustomed to, so they won\u2019t even question it. Also, if it takes extra effort for developers or users to create privacy, and there are no economic incentives for doing so, then it\u2019s an just an inconvenience at best and a sub optimal game theoretic business decision at worst. Better to have options for privacy than not, but like we see with 2FA and password managers today, they\u2019re the exception and not the norm. An idea that could help with geographic analysis via IPs and such might be dandelion routing. From what I understand it routes a tx between peers a certain number of times before having that tx broadcast to the network. This way you can\u2019t tell where a tx originated from, but you would still be able to see which address is sending what to whom.  https://github.com/mimblewimble/grin/blob/master/doc/dandelion/dandelion.md  edit: realized danelion routing would help with network analysis, but not tx analysis. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.406994047619048
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "6",
                    "likes": "3",
                    "time": "18/01/2019-22:59:14",
                    "content": "    vbuterin:  mixers targeting privacy-preserving transfer of small amounts of ETH, so if you want to send gas payment to another account you can do so without linking the two.   This seems like a doable first task. The second part about Whisper etc. etc. seems like there are a lot of rabbit holes to go down. If we get these simple mixers, one can start by having users actually generate multiple accounts and not immediately link them. Still relies on OPSEC of the user, but a good start for simple dApp usage. On the UX front, this is mainly a middleware and best practices issue. Can we help out wallets / web3 providers succeed at making this easier to set / generate accounts per dapp? Do we use URL or IPFS hash as dapp identifiers? (think middleware) \u2013 or, of course, as you say, the contract address of the dapp. I think starting with multiple accounts and multiple keys may not be ideal, but all of our single account solutions for securing / generating keys still work. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.793650793650793
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "7",
                    "likes": "4",
                    "time": "19/01/2019-01:33:25",
                    "content": "Privacy by default for everything a la ZEXE would be really nice, but it\u2019s still far away, and not something that could be easily done technologically. What I\u2019m proposing here is some low hanging fruit that can reduce the extent to which users\u2019 activities are all immediately linked to each other. It\u2019s nowhere close to total privacy, but it\u2019s a very significant improvement.  This seems like a doable first task. The second part about Whisper etc. etc. seems like there are a lot of rabbit holes to go down.  True, but making a mixer that doesn\u2019t have the \u201cdeanonymize yourself by paying for gas\u201d issue requires a layer 2 messaging protocol for things other than transactions (unless the way we want to solve this is by adding some limited form of base-layer abstraction\u2026) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.670711233211233
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "8",
                    "likes": "2",
                    "time": "21/01/2019-12:26:48",
                    "content": "Great initiative!     vbuterin:  deterministic scheme like privkey_for_dapp = hash(master_key + dapp_id) .   wonder if we could also use a scheme like @bitgamma was once proposing in another context (Non-wallet usage of keys derived from BIP-32 trees) - so we would use different BIP-32 paths for each dApp. This would have the advantage that  we could directly use it with existing hardware wallets. In the above scheme hardware wallets would need to implement a new function to be compatible. The disadvantage would be that the chance of collisions between dapps is higher. But it would still be better than the status quo. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.418831168831169
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/juniset",
                    "index": "9",
                    "likes": "1",
                    "time": "23/01/2019-08:46:33",
                    "content": "Hey! This is something that we have started investigating for our smart-contract based wallet Argent. We are working on the mixer but have not yet started tackling the \u201cdeanonymize yourself by paying for gas\u201d issue. We were planning on looking at some form or meta-transactions for that which is essentially what you @vbuterin are suggesting. Will let you know if we find something even partly satisfactory. @jpitts  I agree that \u201caccount contracts\u201d pose a challenge for privacy but I also think they are nicely positioned to bring solutions to users. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "10",
                    "likes": "3",
                    "time": "23/01/2019-13:18:16",
                    "content": "    ligi:  wonder if we could also use a scheme like @bitgamma was once proposing in another context (Non-wallet usage of keys derived from BIP-32 trees) - so we would use different BIP-32 paths for each dApp.   Yeah, I would definitely support reusing BIP32 for this.  We were planning on looking at some form or meta-transactions for that which is essentially what you @vbuterin are suggesting  I personally hope there could be a coordinated effort to get meta-transactions or whatever other scheme figured out and made in a way that anyone can use. It\u2019s just too useful. Maybe it requires finally getting something like whisper working well; would be good to have more discussion\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.763888888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitgamma",
                    "index": "11",
                    "likes": "2",
                    "time": "23/01/2019-16:37:38",
                    "content": "We got a step further with the EIP proposal and it is now a draft They way it is currently written would already allow this use case by defining a \u201cdApp\u201d key type (the document defining all key types is still WIP) and then each dApp gets an identifier. If it is desired to keep a register of dApps, then simply using the key_index already defined would make the job. Otherwise, for each dApp a 128-bit GUID can be generated and split in 4 32-bit integers which would be used as sublevels of key_type (hierarchy having no specific meaning, but just being used to get longer IDs). 4 bits of this identifier would probably need to be set to a fixed value since they are interpreted as hardened/unhardened derivation, but we would still have enough bits to avoid collisions. What do you think? Does this cover the use case? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "12",
                    "likes": "0",
                    "time": "23/01/2019-16:46:11",
                    "content": "I think a dapp registry would be nice anyway. But think the GUID version is more practical and we can start without waiting for dApp support. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gravityblast",
                    "index": "13",
                    "likes": "0",
                    "time": "28/01/2019-22:09:16",
                    "content": "Could we derive the GUID from the hostname? if a dapp has its own .eth domain it should be ok I think. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "14",
                    "likes": "0",
                    "time": "29/01/2019-00:13:32",
                    "content": "not all dApps have an URL/hostname ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gravityblast",
                    "index": "15",
                    "likes": "0",
                    "time": "29/01/2019-08:25:08",
                    "content": "yeah it might be a requirement or we can use the swarm/ipfs hash but upgrades would be more  difficult ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "16",
                    "likes": "0",
                    "time": "29/01/2019-09:34:01",
                    "content": "    gravityblast:  yeah it might be a requirement   I would signal we not make this a requirement ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitgamma",
                    "index": "17",
                    "likes": "2",
                    "time": "30/01/2019-08:04:58",
                    "content": "I have updated the draft to allow the key_index field to encode larger identifiers, spanning across several derivation levels. It is quite generic to allow any kind of identifier to be used. Additional EIPs can define specific use cases, remaining compatible to the EIP-1581 specs. The changes are already here: https://eips.ethereum.org/EIPS/eip-1581 Of course further changes can be discussed as needed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "18",
                    "likes": "1",
                    "time": "26/02/2019-07:44:16",
                    "content": "@vbuterin and others in this thread, this \u201cApp Keys\u201d proposal from @danfinlay and @Bunjin addresses some of your concerns here.     EIP ERC App Keys: application specific wallet accounts EIPs       Hi everyone,  Our research at MetaMask has lead us to propose the following EIP and we would very much appreciate if the community to gave us feedback such that we can come to an agreement on a standard that would be appropriate both for wallets and applications developers to guarantee cross-compatibility.    Simple Summary:  Among others cryptographic applications, scalability and privacy solutions for ethereum blockchain require that an user performs a significant amount of signing operations.\u2026       github.com   ethereum/EIPs/blob/c0608fbcfa9c541431e6ed2efd1c3160ded49c1a/EIPS/eip-draft-app-keys.md --- eip: <to be assigned> title: App Keys: application specific wallet accounts author:  Vincent Eli [Bunjin](https://github.com/Bunjin) Dan Finlay [DanFinlay](https://github.com/DanFinlay) discussions-to: <URL> status: Draft type: Standards Track category: ERC created: 2019-02-20 requires (*optional): BIP32, BIP43, EIP137, EIP165,  replaces (*optional): EIP 1581 ---  <!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.--> ## Simple Summary <!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->  Among others cryptographic applications, scalability and privacy solutions for ethereum blockchain require that an user performs a significant amount of signing operations. It may also require her to watch some state and be ready to sign data automatically (e.g. sign a state or contest a withdraw). The way wallets currently implement accounts poses several obstacles to the development of a complete web3.0 experience both in terms of UX, security and privacy.     This file has been truncated. show original      ",
                    "links": [
                        "https://github.com/ethereum/EIPs/blob/c0608fbcfa9c541431e6ed2efd1c3160ded49c1a/EIPS/eip-draft-app-keys.md",
                        "https://github.com/ethereum/EIPs/blob/c0608fbcfa9c541431e6ed2efd1c3160ded49c1a/EIPS/eip-draft-app-keys.md",
                        "https://github.com/ethereum/EIPs/blob/c0608fbcfa9c541431e6ed2efd1c3160ded49c1a/EIPS/eip-draft-app-keys.md"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.567840909090909
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "19",
                    "likes": "2",
                    "time": "26/02/2019-17:25:57",
                    "content": "Thanks for drawing my attention here, @jpitts! Hadn\u2019t seen this one yet. A couple of my answers to the questions by @vbuterin that are not addressed in the linked EIP:  How would that work for multi-contract dapps?  Our current EIP assigns a unique domain string to whatever app it connects to, this should be the most secure string we can attribute to the loading site, so public key, site hash, or ideally ENS address is presented as our preferred initial solution. This allows many keys to be assigned in many ways, and all that is needed to allow multiple domains to then seamlessly integrate is a delegation system for these app keys, which can/will be part of a later proposal.  Ideally from a UX point of view, it would still feel like the user makes one operation; the UX of dapps that requires users to sign three transactions in a row to do something honestly really sucks.  I totally agree. We are definitely building towards making the initial sign-in increasingly look like a coherent contract that sets terms that allow the app to accomplish the user\u2019s goal with minimal subsequent approvals, while enforcing hard restrictions under the hood based on those terms. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.920289855072464
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/virgil",
                    "index": "20",
                    "likes": "2",
                    "time": "26/02/2019-22:24:03",
                    "content": "I suggest back-burning all but the simplest privacy initiatives until we\u2019ve solved our problems.  Ethereum is already such disruptive technology.  And private disruptive tech is even more dangerous.  We want someone else to take the brunt of the privacy.  I suggest we work on other issues (scaling, UX, DevX, economic efficiency, etc.) while letting Zcash et al. lead the privacy charge.  We can look at what they did right/wrong and then play fast follower and not make as many social mistakes as we would if we moved first. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.479166666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "21",
                    "likes": "3",
                    "time": "05/03/2019-01:56:08",
                    "content": " I suggest back-burning all but the simplest privacy initiatives until we\u2019ve solved our problems. Ethereum is already such disruptive technology. And private disruptive tech is even more dangerous.  I can see where you\u2019re coming from, though OTOH non-private disruptive tech is also dangerous (see: recent Facebook scandals etc etc). What we\u2019re suggesting here isn\u2019t full-scale ZEXE, it\u2019s just the minimal simplest level of unlinking needed to ensure that all of a user\u2019s activities, particularly non-financial ones, can\u2019t be trivially publicly linked to each other. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.620833333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/virgil",
                    "index": "22",
                    "likes": "1",
                    "time": "05/03/2019-07:49:16",
                    "content": "We can travel these roads, but we should tread lightly.  In the privacy game, let Zcash and Monero run out ahead.  After seeing what false steps they make (and I\u2019m confident there will be at least one), we will then be able to step much more artfully in those pro-privacy directions. However, my advice is not to frame Ethereum as \u201cprivacy technology\u201d, but as \u201ctransparency technology\u201d.  And then only afterwards start nudging toward privacy technology. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Secret_Ethery",
                    "index": "23",
                    "likes": "1",
                    "time": "20/03/2019-00:49:12",
                    "content": "I don\u2019t think we should lose focus on privacy. At least go for the low hanging fruit as @vbuterin said. Has anyone considered building a separate WASM with cryptographic technologies from the ground up? These could be delegated special nodes forming a layer 2 MPC style protocol. Thoughts? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.095238095238095
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Secret_Ethery",
                    "index": "24",
                    "likes": "0",
                    "time": "03/04/2019-00:07:28",
                    "content": "Enigma have actually done it. https://github.com/enigmampc/enigma-p2p/blob/master/docs/ARCHITECTURE.md ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SCBuergel",
                    "index": "25",
                    "likes": "0",
                    "time": "18/05/2019-14:36:33",
                    "content": "    vbuterin:  Right now, Ethereum privacy is quite lacking. There are two reasons why.   Actually I think there\u2019s more aspects that are very important to privacy than the on-chain considerations. One additional area that I find interesting and we\u2019re working on with HOPR is network-level metadata privacy. A specific example is that you\u2019re in my co-working space and connected to my wifi. Now you make an on-chain txs with mixers, change of address separate account for each dapp and everything that has been discussed in the thread above. There are now at least two angles from which I can identify you:  As your wifi operator, I know that you are using Ethereum, I know that you just connected to some node (like Metamask / Infura) or that you\u2019re using some wallet (like MyCrypto). With minimal additional meta data info (e.g. I know you\u2019re into crypto kitties from your Twitter profile or I have some additional timing information or I know what gas price you commonly use) I should be able to guess fairly reliably which txs has been broadcasted by you. Even without making you connect through my wifi, a global passive adversary (someone who smartly connects to Ethereum nodes in order to get a global overview of the topology) could probably find out which tx is known to which node at what time. That should allow for a triangulation of where the tx originated (which node knew it first) and from there it should be possible to identify or attack the sender (get their IP address etc).  Bottom line: Ethereum relies on broadcasting which (in contrast to mix nets) is not designed to be privacy-preserving and does not have as strong privacy guarantees. We need some bottom-layer privacy-preserving networking and that\u2019s what we\u2019re working on. Ideally to be implemented as a libp2p transport module at some point to reduce switching costs. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.079824561403509
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MadeofTin",
                    "index": "26",
                    "likes": "2",
                    "time": "19/05/2019-22:32:03",
                    "content": "    ligi:  wonder if we could also use a scheme like @bitgamma was once proposing in another context (Non-wallet usage of keys derived from BIP-32 trees ) - so we would use different BIP-32 paths for each dApp.   Just reading through the thread and it sounds like there are two low hanging fruit.  using BIP-32 as stated above A mixer targeted at small amounts of eth used for paying gas  Is that fair to say? Or am I missing some? Focusing on simple composable parts over a complete privacy solution proposal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.21875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "27",
                    "likes": "2",
                    "time": "03/07/2019-08:03:11",
                    "content": "Yep! Those are definitely the two parts I am advocating. Though for the privacy reasons mentioned above you probably want to build a relayer market that could then work for all mixer designs. One third part that seems really valuable is some standardized anon network over which to send transactions. This could be Tor, some kind of customized onion-routing network, or something else. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.8
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rumkin",
                    "index": "28",
                    "likes": "0",
                    "time": "13/09/2019-12:02:09",
                    "content": "I\u2019m working on a web browser which solve transport issue. Currently I\u2019ve finished enhancing the SSL to use Ethereum blockchain as a Certificate Authority and ENS as primary DNS. It allows to connect to nodes and even classic sites to work with it. It\u2019s required to start decent transformation and make it seamless for users and business. Browser has pluggable structure for network interfaces so it could be upgraded to use some onion-like solution. But I haven\u2019t worked with onion yet. And it would be nice to hear what is the best implementation to educate on. And to decide is it reasonable to create own implementation. The question I have now:  What encryption has it use? How encryption keys are distributing over network? Would it work with HTTP/3?  Another group of questions is a transport layer security protocol working over the onion. It could be SSL or Noise. Also I have an idea on timing alignment to reduce traffic analysis: different software generates different packets pattern and it could be traced as well. For example messengers generate a bunch of tiny packets with high but irregular frequency, while video streaming creates more solid pattern. It could be used to understand kind of victim activity. Browser is required to cover all users\u2019 needs in daily task. Users should have a tool to discover the decentralized web without creating unwanted artifacts in centralized. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.2273148148148145
                }
            ]
        }
    ],
    "group_index": "653"
}