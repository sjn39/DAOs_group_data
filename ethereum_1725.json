{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5065-instruction-for-transferring-ether/9107",
            "title": "EIP-5065 Instruction for transferring ether ",
            "index": 9107,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm",
                "opcodes",
                "core-eips"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/maxsam4",
                    "index": "1",
                    "likes": "16",
                    "time": "01/05/2022-10:32:31",
                    "content": " Abstract Add a new instruction that transfers ether to a destination address without handing over the flow of execution to it. It should work similarly to how SELFDESTRUCT transfers ether to the destination without making a call to it.  Motivation From an architectural point of view, execution flow should never be handed over to an untrusted contract. Ethereum currently does not have any ideal way to transfer ether without transferring the flow of execution. People have come up with reentrancy guards and similar solutions to prevent some types of attacks but it\u2019s not an ideal solution. The only way to transfer ether from smart contracts without triggering a call is to create a dummy contract, send the precise amount of ether to it and then call SELFDESTRUCT from it.  Specification Introduce a new instruction, AIRDROP that transfers ether to the destination without making a call to it.  Stack input address: the account to send ether to. value: value in wei to send to the account.  Gas The total gas cost should be the sum of a static cost + address_access_cost + value_to_empty_account_cost.  Static cost: 6700 Dynamic cost:  address_access_cost: If the target is not in accessed_addresses, charge COLD_ACCOUNT_ACCESS_COST gas, and add the address to accessed_addresses. Otherwise, charge WARM_STORAGE_READ_COST gas. Currently, COLD_ACCOUNT_ACCESS_COST is 2600 while WARM_STORAGE_READ_COST is 100. value_to_empty_account_cost: If value is not 0 and the address given points to an empty account, then value_to_empty_account_cost is the account creation gas cost which currently is 25000. An account is empty if its balance is 0, its nonce is 0 and it has no code.     Rationale This behavior is already possible by deploying a new contract that does SELFDESTRUCT but it is prohibitively expensive. In most scenarios, the contract author only wants to transfer ether rather than transferring control of the execution. ERC20 can be used as a case study for this where most users transfer funds without a post-transfer hook. This instruction allows contracts to safely pass ether to an untrusted address without worrying about reentrancy or other malicious things an untrusted contract can do on. The static gas cost is derived by subtracting the gas stipend (2300) from the positive_value_cost of CALL opcode which is currently set to 9000.  Backwards Compatibility No known issues as this is a new instruction that does not affect any old instructions and does not break any valid assumptions since it make not anything impossible possible.  Test Cases TODO  Security Considerations No known security risks.  Discussion points  Gas costs - I would like them to be lower   Should we allow EOA to transfer ether without triggering a call - Consensus is leaning towards NO. It adds an additional risk of locking mistakenly sent ether while there is no demand for the feature. Instruction name alternatives - REMIT/PAY/DISBURSE/GIFT/FORCESEND/BESTOW   FAQ Q) Why not just repurpose SELFDESTRUCT? It is already being planned to be used as just a force transfer. A) SELFDESTRUCT transfers all of your ether. We need a way to transfer a specific amount. Also, the repurposing of SELFDESTRUCT might take a while longer to get into prod. Q) Doesn\u2019t this break the contracts that depend on the stipend? A) Those contracts were already broken as bypassing stipend is already possible. Additionally, I do not think there are any practical contracts that get \u201cbroken\u201d because of this. Sending money to a gnosis wallet, for example, does not break it even if you don\u2019t end up executing its fallback function. Q) What about the additional risk of locking ether mistakenly? A) I agree that it does add some risk there but it\u2019s negligible IMO. The existing contracts will work in the same old way. ERC20s have allowed and normalized forced transfers and it is a well-understood concept that I do not expect new devs to be mistakenly locking ether using this feature too often. This proposal does not recommend for EOAs to have this ability to reduce the risk of lock funds. Furthermore, tooling can warn users if a transaction force transfers ether to a contract that usually doesn\u2019t accept ether. Considering everything, the benefits of this proposal outweigh the cons considerably IMO. Q) Why not propose to remove stipends completely if you think they are broken? A) Because that\u2019s likely to have backward compatibility issues. If I was designing ETH from scratch, I would have advised against stipends but at this point, it might be too late to remove them. Well, too late to remove them without an thorough onchain analysis, at least. Q) Why not adjust the gas given in a stipend? A) That does not resolve the concern and promotes a bad habit of depending on gas costs. On one side, we recommend devs to not depend on gas costs and on the other, we give them a fixed gas cost to do stuff in certain scenarios. Very bad mixed messaging IMO. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-5920-pay-opcode/11717/10"
                    ],
                    "GPT-summary": "The proposal suggests adding a new instruction called AIRDROP that transfers ether to a destination address without handing over the flow of execution to it. The author explains the motivation behind the proposal and provides specifications, rationale, and FAQ. A 3rd party gives constructive criticism on the gas costs and asks questions about the proposal. No collaboration is mentioned.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Privacy, Security and risk management",
                        "Token economics",
                        "Interoperability and Scaleability",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None"
                    ],
                    "Sentiment": 5.103065722156631
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chiro-hiro",
                    "index": "2",
                    "likes": "0",
                    "time": "01/05/2022-11:18:44",
                    "content": "How does this backward compatible with older internal transfer? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maxsam4",
                    "index": "3",
                    "likes": "3",
                    "time": "01/05/2022-11:44:25",
                    "content": " How does this backward compatible with older internal transfer?  It does not affect older transfers. This adds a new way to transfer ether using a new opcode. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.6060606060606055
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chiro-hiro",
                    "index": "4",
                    "likes": "1",
                    "time": "01/05/2022-15:37:06",
                    "content": "I think, the proposal could be better if it emits some sort of event to the outside just like the behaviour of LOG1\u2026LOG4. So, we could track the internal transaction much more easier. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maxsam4",
                    "index": "5",
                    "likes": "0",
                    "time": "01/05/2022-15:53:02",
                    "content": "I think that should be a different EIP that depends on this EIP. I personally don\u2019t think there should be an event. For tracing, it can be shown as a call with 0 gas in trace logs or a new type. Not sure how selfdestruct value transfer is shown right now. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.172077922077922
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/QEDK",
                    "index": "6",
                    "likes": "2",
                    "time": "01/05/2022-17:12:32",
                    "content": "No good reason for that imho, if implemented, I feel it should semantically be similar to how an EOA sends ether to another EOA or a contract with an empty receive() (without any calldata). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/joeysantoro",
                    "index": "7",
                    "likes": "3",
                    "time": "01/05/2022-19:30:49",
                    "content": "This is absolutely essential from a security perspective. The only alternative would be making native ETH ERC-20 compliant. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "8",
                    "likes": "2",
                    "time": "01/05/2022-19:47:12",
                    "content": "I think this is a great idea. I would not call it AIRDROP though. That word is way too loaded with meaning already. I get the idea of the word, but perhaps something a bit less loaded: REMIT? The Cambridge Dictionary says:  remit <verb> formal to send money to someone Example: He worked in a different city and remitted half his monthly wage back to his family. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.466666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maxsam4",
                    "index": "9",
                    "likes": "0",
                    "time": "01/05/2022-19:53:32",
                    "content": " I would not call it AIRDROP though  It is used as a placeholder and is one of the open-ended questions in the proposal. I would be fine if it actually got finalized as sort of an easter egg though.  REMIT  I like it but it solidifies the view that ether is money. That might not be a good thing to do. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.861111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dmfxyz",
                    "index": "10",
                    "likes": "0",
                    "time": "01/05/2022-20:12:14",
                    "content": "I support this; but, would the receiving contract need to be marked as payable in any way, or is it ignored as with self destruct? EDIT: I see the empty account notes now. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/0age",
                    "index": "11",
                    "likes": "1",
                    "time": "02/05/2022-05:25:28",
                    "content": "How about FORCE_SEND or something that makes it explicit that the recipient has no say in the matter of whether or not to accept the payment? Personally, I\u2019d advocate that this not be something that EOAs can do; there aren\u2019t nearly as many use-cases where it\u2019s required (or a forwarding contract could easily be employed where it is needed \u2014 especially since the recipient can\u2019t check the caller / origin anyway), and having it simply be an opcode with similar semantics to SELFDESTRUCT is much more straightforward. One important backwards-compatibility concern is that many contracts are not designed with Ether recoverability in mind; hopefully most contract authors understand at this stage that the ether balance of a non-payable contract can still be modified via SELFDESTRUCT or as the coinbase recipient, but there\u2019s a common understanding that users will not interact with contracts via those methods unless they really know what they\u2019re doing or are acting maliciously. I could see this leading to more instances of Ether accidentally finding its way into unrecoverable situations. Agreed that a feature like this is sorely needed, though \u2014 I wonder if there\u2019s a way to pair it with a BLOCK_FORCE_SEND mechanic? (Though in that event the proposed name here is sub-optimal!) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.2444444444444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maxsam4",
                    "index": "12",
                    "likes": "0",
                    "time": "02/05/2022-05:55:05",
                    "content": " How about FORCE_SEND or something that makes it explicit that the recipient has no say in the matter of whether or not to accept the payment?  I don\u2019t have strong opinions about the name but I prefer just SEND/REMIT. Send is overloaded in Solidity so maybe REMIT is better. Force is implicit, as it\u2019s usually the case with transferring anything. Other names in my mind - PAY, DISBURSE, BESTOW.  Personally, I\u2019d advocate that this not be something that EOAs can do;  Agreed. I don\u2019t see much of a use-case for EOAs to do this but there definitely are additional risks.  I could see this leading to more instances of Ether accidentally finding its way into unrecoverable situations.  Potentially, yes. However, since this opcode can only be used by new contracts, I don\u2019t think there should be any issue. ERC20 tokens, for example, are worse in terms of ease of sending mistakenly and recovering. People/devs are now sufficiently aware of asset recovery IMO.  I wonder if there\u2019s a way to pair it with a BLOCK_FORCE_SEND mechanic?  I think that will partially defeat the purpose. Not recommended until we make SELFDESTRUCT and block reward also follow it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.408820346320347
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/charles-cooper",
                    "index": "13",
                    "likes": "2",
                    "time": "03/05/2022-07:54:39",
                    "content": "Probably the mnemonic for this instruction should be TRANSFER. It\u2019s semantics are clear, it matches ERC20 transfer, and there is no existing opcode named TRANSFER. What high-level languages call it is a different matter. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/firnprotocol",
                    "index": "14",
                    "likes": "0",
                    "time": "13/11/2022-14:15:32",
                    "content": "    maxsam4:  Q) Doesn\u2019t this break the contracts that depend on the stipend? A) Those contracts were already broken as bypassing stipend is already possible. Additionally, I do not think there are any practical contracts that get \u201cbroken\u201d because of this. Sending money to a gnosis wallet, for example, does not break it even if you don\u2019t end up executing its fallback function.   another good name could be PAY, which was proposed by another EIP draft. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "15",
                    "likes": "0",
                    "time": "30/11/2022-04:05:45",
                    "content": "Adding to the naming discussion:     0age:  How about FORCE_SEND or something that makes it explicit that the recipient has no say in the matter of whether or not to accept the payment?   There are at least two existing ways to non-consensually send ether to a contract. It is foolish to assume that a contract\u2019s balance cannot increase without your permission. So I don\u2019t like the wording of FORCE, as we don\u2019t use such terminology to signal non-consent in the other contexts. I like TRANSFER, SEND, and PAY, which convey the meaning and are distinct from the CALL opcodes. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.84375
                }
            ]
        }
    ],
    "group_index": "1725"
}