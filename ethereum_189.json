{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1352-restricted-address-range-for-precompiles-system-contracts/1151",
            "title": "EIP-1352: Restricted address range for precompiles/system contracts ",
            "index": 1151,
            "category": [
                "EIPs"
            ],
            "tags": [
                "precompile",
                "eip-1352"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "2",
                    "time": "24/08/2018-15:34:37",
                    "content": "This topic is intended be the discussion for EIP-1352. Any comment or feedback is very much appreciated!   Ethereum Improvement Proposals   Specify restricted address range for precompiles/system contracts Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-1352",
                        "https://ethereum-magicians.org/t/eip-1109-remove-call-costs-for-precompiled-contracts/447/7"
                    ],
                    "GPT-summary": "The post is an Ethereum Improvement Proposal (EIP) titled \"Restricted address range for precompiles/system contracts\" and the author is asking for feedback on the proposal. The post also explains what EIPs are and their purpose. Some third parties are giving constructive criticism and asking questions about the proposal, while others may be auditing and reviewing it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "2",
                    "likes": "0",
                    "time": "04/09/2018-19:08:34",
                    "content": "Due to multiple suggestions, extended the reserved range from 256 to 65536 addresses: 00\u20260000 to 00\u2026ffff is reserved. Prior to that I had an idea to split the reserved the range into two parts. Changed that numbers to reflect the new expanded reserved range:  0x0 to 0xffff for precompiles 0x10000 to 0x1ffff for \u201csystem contracts\u201d, which have code in the state (e.g. blockhash refactoring or (the now obsolete) casper contract).  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.014204545454546
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carver",
                    "index": "3",
                    "likes": "4",
                    "time": "26/04/2019-19:12:21",
                    "content": "Since @boris mentioned on the call that EEA wants to use this space for custom precompile slots, maybe the EIP should advise that non-mainnet precompiles should start from 0xFFFF and iterate down. If they just pick a random slot in the space, they could end up with conflicts when they try to import later mainnet forks to their sidechains. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.430555555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "4",
                    "likes": "2",
                    "time": "26/04/2019-19:25:33",
                    "content": "I have passed this on. Thanks! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chaals",
                    "index": "5",
                    "likes": "1",
                    "time": "30/04/2019-00:34:02",
                    "content": "EIP-1352 reserves a block of address space for precompiles. However, there is no apparent mechanism to register that anyone intends to use (or is already using) part of that space. This means that if say a private network client wants to use a given address for a function it implements, primarily serving one network, it will have to either flag the precompile by network or check everything else it connects to in case there is a different precompile at the same address. I  think  the expectation is that precompiles would normally be useful across a lot of different networks (this would seem especially the case for e.g. EEA clients), so it seems to me that it would be useful to actually be able to register addresses in this space\u2026 The idea is that at a minimum people claim an address. In most of the cases I can think of, there is no real reason to hide what is happening there, and if for example the EEA wants to mandate a new precompile across multiple EEA clients, it would be a benefit to be able to state where it is and what it does. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.856283422459892
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "6",
                    "likes": "0",
                    "time": "30/04/2019-00:42:01",
                    "content": "I have briefly thought about this, but figured that private chains would not want to reveal themselves to allocate specific numbers. Allocating a specific range for some external body which could govern it may be a good middle ground? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "7",
                    "likes": "0",
                    "time": "30/04/2019-00:51:05",
                    "content": "Yep, this sounds like it would work for the EEAs purposes at least. But more generally, allow any bodies or chains to get some address space allocated. Much like we just list chainids at https://chainid.network without \u201ccontrolling\u201d them per se, this would in part just be informative. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chaals",
                    "index": "8",
                    "likes": "0",
                    "time": "30/04/2019-01:14:57",
                    "content": "    boris:  Yep, this sounds like it would work for the EEAs purposes at least. But more generally, allow any bodies or chains to get some address space allocated.   Indeed, it would work fine for EEA. The question is whether it leads to people requesting lots of blocks they don\u2019t need, in which case we might be better with a system where you request addresses as you use them. I don\u2019t have a strong opinion either way at this stage, but look forward to hearing arguments. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "9",
                    "likes": "1",
                    "time": "30/04/2019-14:28:50",
                    "content": "So we should think of the precompile address space like port number allocations for TCP/IP? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/zoenolan",
                    "index": "10",
                    "likes": "2",
                    "time": "30/04/2019-17:46:44",
                    "content": "I was thinking managing the precompile space could work along the lines of the OpenGL extension registry. Addresses are allocated and have a specification attached. From an old blog post  OpenGL (a cross-platform, low-level graphic library controlled by the Khronos group) offers a useful precedent on how this can be managed. OpenGL has included an extension mechanism since the mid 1990\u2019s: a registry is managed by the Architecture Review Board (ARB) where any member of the ARB can propose an extension (which if accepted) is allocated a number in the registry). Different classes of extension exist: single vendor; EXT for older generic or multiple vendor extensions; and ARB for more modern extensions supported by a number of vendors.  ",
                    "links": [
                        "https://medium.com/clearmatics/extending-the-evm-d386d858729d"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5396825396825395
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/zoenolan",
                    "index": "11",
                    "likes": "1",
                    "time": "02/05/2019-15:38:18",
                    "content": "and just to make things more explicit. If i was writing that blog post today. I would suggest the EVM evolution working group as the natural home for the registry ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "12",
                    "likes": "1",
                    "time": "02/05/2019-18:31:42",
                    "content": "Would they, though? The address space is enormous. If you, say, hash the binary, or the name of the pro-compile + the deployer\u2019s name (or something along these lines), you get a deterministic address that is unlikely to conflict, no? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 3.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chaals",
                    "index": "13",
                    "likes": "0",
                    "time": "03/05/2019-12:50:05",
                    "content": "    expede:  If you, say, hash the binary, or the name of the pro-compile + the deployer\u2019s name (or something along these lines), you get a deterministic address that is unlikely to conflict, no?   hashing the binary is nice because you don\u2019t expect a different binary to be able to conflict. If you add names, then it becomes easier to create a conflict which seems less helpful. But precompiles that do the same thing might actually have a different binary across different clients (or even not be actual precompiles, but plain smart contracts), no? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.180555555555556
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "14",
                    "likes": "2",
                    "time": "03/05/2019-19:32:50",
                    "content": "What I like about a reserved range instead of a hash of whatever is that code analysis tools or manual inspection can easily identify what is a precompile contract. Some of these contracts will in essence become \u201csystem calls\u201d that can do things regular EVM cannot do, such as a lot of things EEA finds precompiles interesting to do.  So that would present a different attack surface, and audits/tools would want to know when the attack surface grows. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.777777777777777
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/zac-williamson",
                    "index": "15",
                    "likes": "0",
                    "time": "04/05/2019-10:43:40",
                    "content": "Would it be within the scope of this EIP to also define how much gas is used when the CALL, CALLCODE, DELEGATECALL and STATICCALL opcodes are used to call contracts within the precompile address range? It seems like, if a precompile address range is defined at the protocol level, we have the opportunity to more formally define the semantics of calling these precompiles. Right now, the 700 gas cost of the call opcodes is to reflect the time required to fetch these contracts from disk, but this is not relevant for precompiles. For some precompiles, this 700 cost is a substantial overhead (e.g. ECADD only costs 500 gas, but the actual cost is 1,200 because of this). A gas cost of 50 might be more suitable? (or even 0? the time taken to run the pre-compile should be factored into its gas formula, no?). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.147321428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "16",
                    "likes": "0",
                    "time": "09/05/2019-14:27:52",
                    "content": "Can you change the title to \u201cEIP 1352: Restricted address range for precompiles/system contracts\u201d? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "17",
                    "likes": "0",
                    "time": "14/05/2019-02:40:17",
                    "content": "I scanned all the addresses below and including 0xffff, and found none with code nor any with a non-zero nonce. I did find, however, that these addresses have ether balances totaling 12,517.53127 eth (that\u2019s around 2.5 million dollars US). 99.5% of that is in a single account (0x000\u2026dead). The core devs should make a donation of this money to the MolachDAO on behalf of the entire community. While the money is already locked and lost, it feels wasted otherwise (especially in an underfunded open source community). I understand that burning money is a way to increase the value of the coin, and that\u2019s a totally valid position. I also understand that this idea is a very slippery slope. That point of view is also totally valid. But, It costs nothing to share an idea, and I had this one, and I didn\u2019t really need it anymore, so I thought I\u2019d give it away for free. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.264285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "18",
                    "likes": "1",
                    "time": "14/05/2019-10:20:10",
                    "content": "    tjayrush:  99.5% of that is in a single account (0x000\u2026dead).   IIRC this address is used by ENS as a burn address. @Arachnid is that correct? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.642857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "19",
                    "likes": "0",
                    "time": "14/05/2019-23:59:29",
                    "content": "    axic:  IIRC this address is used by ENS as a burn address. @Arachnid is that correct?   That\u2019s correct.  to meet length requirements. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "20",
                    "likes": "1",
                    "time": "19/05/2019-23:13:24",
                    "content": " Due to the extremely low probability (and lack of adequate testing possibilities) no explicit checks should be added to ensure that external transaction signing or the invoking of the  CREATE  instruction can result in a precompile address.  Of course the probability is extremely low, but if this happens we will all be confused which chain has the right chain if there is one chain which overwrites the precompile and another chain which uses the precompile at this address. If this happens, then the chance is very high that we get a consensus issue. I propose that in any case a new contract is created (e.g. call to null, CREATE or CREATE2 in a smart contract) code is not deployed in the same way as you try to deploy code using CREATE2 when re-using the same seed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.271957070707071
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "21",
                    "likes": "0",
                    "time": "24/05/2019-15:24:02",
                    "content": "These are the points I raised at the allcoredev-call today\u2026 It\u2019s currently possible to configure a genesis with code at arbitrary addresses. For example, to place a faucet at 0x00...0010. So if we accept 1352, then implement some other EIP which makes calls to precompiles cheaper, the question is of calls to 0x00...10 should, or should not, be included in that (I think they shouldn\u2019t be, since they are stored on disk like any other code, whereas \u2018true\u2019 precompiles are already in-memory) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.5625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "22",
                    "likes": "1",
                    "time": "24/05/2019-15:42:34",
                    "content": "    tjayrush:  The core devs should make a donation of this money to the MolachDAO on behalf of the entire community. While the money is already locked and lost, it feels wasted otherwise (especially in an underfunded open source community).   Dangerous. Next you know, someone files a claim that their money should have been given back to them instead of being \u2018donated\u2019. I agree that it\u2019s wasted money, but I also see difficulties in picking it up and using it, as opposed to shipping it back to wherever it came from (which would be a technical nightmare to implement)     zac-williamson:  Right now, the 700 gas cost of the call opcodes is to reflect the time required to fetch these contracts from disk, but this is not relevant for precompiles. For some precompiles, this 700 cost is a substantial overhead (e.g. ECADD only costs 500 gas, but the actual cost is 1,200 because of this).   Right, but the 700 might also already be factored in. If it was substantially lowered, perhaps the actual cost would also have to be raised (in some cases)? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.803571428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "23",
                    "likes": "0",
                    "time": "24/05/2019-15:44:22",
                    "content": "I don\u2019t agree. The call should be cheaper for the whole range. Otherwise, the cost of the call depends on the current configuration (not only the EVM revision) and EVM is not able to compute the cost on its own. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.550000000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "24",
                    "likes": "0",
                    "time": "24/05/2019-15:47:25",
                    "content": "    chfast:  The call should be cheaper for the whole range. Otherwise, the cost of the call depends on the current configuration (not only the EVM revision) and EVM is not able to compute the cost on its own.   From a technical standpoint, i don\u2019t agree, since gas should correlate to work, and it\u2019s more work to fetch the code from disk than invoke an actual compiled method. From an architectural standpoint, I kind of agree it might be nicer. From a practical standpoint, I don\u2019t really care, since it\u2019s not an issue for mainnet. I\u2019m really just saying that the EIP would do well to specify the behaviour. More quirks:  What about extcodesize of a contract in this range? What about extcodehash? All normal precompile addresses return 0 and zerohash respectively.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.964285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "25",
                    "likes": "0",
                    "time": "24/05/2019-16:01:51",
                    "content": "I think these are really valuable comments. Before going through to answer them, I do have one simple question: how do you define what is a precompile? Extended questions: \u201cHardforks\u201d have a list of precompiles, so does the Yellow Paper. But private chains are free to do whatever they wish with the address range. If they move sha256 from address 0x2 to 0x4242...4242, does it remain a precompile? How do you specify what a precompile is for example in EIP-1109? Would that specify the precompile addresses as 0x1 to 0x8? Would it specify that an address is a precompile when the client says so (because precompiles are not represented in the genesis)? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.6000000000000005
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "26",
                    "likes": "0",
                    "time": "24/05/2019-16:28:17",
                    "content": "So the hard fork impact might be  Any contract that would wind up deploying to the reserved range fails with an out-of-gas exception. Any TX \u201cfrom\u201d the reserved range is invalid and should not be seen in blocks.  \u201cTo\u201d or beneficiary addresses are valid - that ship sailed with Spurious Dragon and ENS.   Any call into the reserved range is at the precompiled price (for EIP-2046/EIP-1109)  And this would be across all Istanbul compatible chains, regardless of what precompiles are configured. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.020833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chaals",
                    "index": "27",
                    "likes": "1",
                    "time": "14/06/2019-11:27:04",
                    "content": "Note that EEA now formally plans to require that precompiles in EEA clients are registered using this mechanism\u2026 My thinking is that we might see people who want to note that they have used an address and provide zero information about what they put there, just letting everyone else know there is someone who expects something (so you reduce accidental collision risk). But others will quite probably put a specification. EEA client spec mandates the presence of, and some requirements for a permissioning contract, which would be an example of something we might give an address and provide a specification of some kind (probably not an actual contract since there are things that can vary from chain to chain). ",
                    "links": [
                        "https://entethalliance.github.io/client-spec/spec.html#sec-permissioning-smart-contracts"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "28",
                    "likes": "0",
                    "time": "03/09/2021-00:18:02",
                    "content": "Follow up to my discission on this from AllCore Devs #120 (https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%20120.md) I brought this up as the scope of precompiles is growing for L2 and alt-eth chains.  In particular all L2 chains have at least one system precompile to initiate exits back to L1. The proposal was to make this proposal impactful by making the whole range \u201cwarm\u201d.  Martin pointed out this would re-open the broken metre attack. After thinking about it for two weeks I think the way forward may be to re-open EIP-1109, which is a PRECOMPILEDCALL opcode, that would fail if it called anything but a precompile, and mix it with EIP-2046, which wanted to reduce precompile costs but not make them zero.  The proposed fee would be the same as all other CALL series for warm calls, and any call to a non-precompile (as determined by the chain, so hard forks and other-chain additions like L1 exit precompiles would adjust that set) would fail consuming all gas. As far as when\u2026 the next \u201copen\u201d hard fork.  It\u2019s not important enough to drive a hard fork and not essential to the merge. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-1109-remove-call-costs-for-precompiled-contracts/447",
                        "https://ethereum-magicians.org/t/eip-2046-reduced-gas-cost-for-static-calls-made-to-precompiles/3291/5"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.4907407407407405
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "29",
                    "likes": "0",
                    "time": "08/09/2021-18:42:57",
                    "content": "    shemnon:  The proposal was to make this proposal impactful by making the whole range \u201cwarm\u201d. Martin pointed out this would re-open the broken metre attack.   I think making it warm while avoiding the issues with the tree could be accomplished with more drastic changes:  Allocate the range 1\u2026256 for \u201cprecompiles\u201d. Remove these accounts from the tree. Any account access to this range would just return fixed values (i.e. the null code hash, 0 balance, 0 nonce, etc.) A call to this range outside of the activated precompiles instantly returns with empty bytes. (This in practice means that the behaviour is the same as today.) If a call has a value attached, allow the call to be successful, but do not change the account balance.  The critical part is point 5), which ensures that contracts which relied on using one of these addresses for burning can still operate. Important that I omitted the zero address (0x0000000000000000000000000000000000000000 ) as that was never a precompile and is the ultimate \u201cburner address\u201d. (Is this actually a problem worth solving?) Point 2) is optional, but given point 3) would shadow them, it may as well make sense removing them. I would be interested what are @holiman\u2019s thoughts on the above? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.777777777777777
                }
            ]
        }
    ],
    "group_index": "189"
}