{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/gather-for-an-eip-useful-bit-manipulation-instructions/9751",
            "title": "Gather for an EIP: Useful Bit manipulation instructions ",
            "index": 9751,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "1",
                    "likes": "4",
                    "time": "27/06/2022-09:57:09",
                    "content": "Hi there, While optimizing some data structures I\u2019ve realized that the EVM is missing some in-memory bit operations that make it much more gas expensive to do certain calculations compared to x86. I think it would make sense to add them and would love to hear if you\u2019ve come across similar mathematical instructions.   POPCNT - Population Count (Counting all set bits in a uint256)  CLZ - Count Leading Zeros (Getting the highest bit in a uint256)  These two operations need to be simulated in a loop at the moment and become thus pretty expensive. E.g. here is a 700 gas version of getting the highest bit Logarithm math operation in Solidity - Ethereum Stack Exchange I might turn this into an EIP, so let me know if there are more instructions to add. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eth-station-upcoming-event-in-berlin-call-for-action/10415/5",
                        "https://ethereum-magicians.org/t/eth-station-upcoming-event-in-berlin-call-for-action/10415/4"
                    ],
                    "GPT-summary": "The author of the post is proposing the addition of some in-memory bit operations to the EVM to make certain calculations less gas expensive. The author is asking for feedback on the proposal and is considering turning it into an EIP. A 3rd party is giving constructive criticism and asking questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.483766233766234
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "2",
                    "likes": "2",
                    "time": "28/06/2022-17:44:55",
                    "content": "Hi @dominic, Such instructions are easy to add, but it can take up to 2 years if we start now. The most important part is justification why such instructions are useful. E.g. you would need to show a group of popular contracts what would benefit from new instructions. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.4810606060606055
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "3",
                    "likes": "2",
                    "time": "24/08/2022-17:19:10",
                    "content": "A few words about implementation: POPCNT is data-parallel at first (perform popcount on 4 words) and finally sum the results. So in theory latency should be better than in ADD. But this is only in case the CPU has native popcount instruction what is not the case for the baseline x86-64. CLZ seems to have the complexity of SHL, i.e. it is messy. There is a lot of handling of individual words being zero. I have not seen constant-time implementation yet. Having lzcnt instruction available should help a bit. Native instructions availability for x86-64: Compiler Explorer. I think you still should proceed with the EIP and try to move it to the \u201cReview\u201d state. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.46875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Vectorized",
                    "index": "4",
                    "likes": "1",
                    "time": "11/09/2022-07:35:07",
                    "content": "@dominic Thanks for making this proposal! Accidentally made a new thread Create a new opcode for counting leading zeros (CLZ) without finding this first. Thanks @chfast I think CLZ and POPCNT are best to be in separate EIPs, such that the usefulness of each opcode can be separately evaluated, giving a higher chance that one may pass. Would you be available to work on an EIP or have been working on one already? Otherwise, I can take on the effort and include you as an author too. Imo, CLZ is too useful not to have it as a native opcode. Even 2 years will be worth the wait. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.464876033057852
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "5",
                    "likes": "0",
                    "time": "11/09/2022-11:36:44",
                    "content": "@Vectorized I like that approach let\u2019s push together. CLZ is definitely more important - felt that if going through the process is by itself taking so much time that taking a group of bit manipulation instructions would be more efficient. But definitely better to have CLZ over not having anything. If you\u2019re around ETHStation or Bogota we can catch up in person, tag team for the EIP draft and the implementation PRs ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party or author wants to collaborate on proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.1
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "6",
                    "likes": "0",
                    "time": "11/09/2022-15:22:51",
                    "content": "    chfast:  CLZ seems to have the complexity of SHL, i.e. it is messy. There is a lot of handling of individual words being zero. I have not seen constant-time implementation yet. Having lzcnt instruction available should help a bit.      Create a new opcode for counting leading zeros (CLZ)   For the implementation of CLZ, I\u2019d propose a gas cost of 3 (to keep in line with the gas cost of shl, shr, not, xor, etc).   Just keep in mind, that while from an EVM code perspective they seem simple, due to the EVM operates on 256-bit big endian words and most CPUs operate on 64-bit little endian words, this becomes slightly more complex to implement, and the cost should reflect that. One could argue that not/xor is overpriced compared to shl/shr. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.329028925619834
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "7",
                    "likes": "0",
                    "time": "01/10/2022-08:29:21",
                    "content": "    axic:  Just keep in mind, that while from an EVM code perspective they seem simple, due to the EVM operates on 256-bit big endian words   This is not accurate. EVM implementations usually keep the value on the EVM stack in native form (i.e. little endian). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.364583333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "8",
                    "likes": "0",
                    "time": "08/10/2022-22:11:47",
                    "content": "@chfast @axic @Vectorized and anyone else, if you\u2019re around this week for devcon (I am) I would definitely like to cut out an hour or two to get the EIP draft in place. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "9",
                    "likes": "1",
                    "time": "11/11/2022-17:57:26",
                    "content": "Sorry I missed this message, but would be happy to collaborate. @Vectorized left some comments on the clz topic. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                }
            ]
        }
    ],
    "group_index": "1793"
}