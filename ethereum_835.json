{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2028-transaction-data-gas-cost-reduction/3280",
            "title": "EIP-2028: Transaction data gas cost reduction ",
            "index": 3280,
            "category": [
                "EIPs"
            ],
            "tags": [
                "gas",
                "eip-2028"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/TomBrand",
                    "index": "1",
                    "likes": "2",
                    "time": "15/05/2019-15:00:42",
                    "content": "This is to discuss the EIP I am currently creating. Will fill this out later   Ethereum Improvement Proposals   Calldata gas cost reduction Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-2028",
                        "https://ethereum-magicians.org/t/eip-2242-transaction-postdata/3557"
                    ],
                    "GPT-summary": "The post is about the EIP-2028 proposal for reducing the gas cost of transaction data in Ethereum. The author is seeking feedback and explaining the proposal, while third parties can provide positive, negative, or constructive criticism of the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "2",
                    "likes": "1",
                    "time": "17/05/2019-14:47:00",
                    "content": " The gas per non-zero byte is reduced from 68 to TBD. Gas cost of zero bytes is unchanged.  This EIP proposes a change to the cost of CALLDATA but doesn\u2019t specify the new cost. It proposes a model with certain parameters to be considered when coming up with the new value. I think there should be some kind of initial ballpark figure given to kick start discussions. Is it a 10% reduction? Is it a 50% reduction? A 90% reduction? Or at least giving a ballpark figure for a time/effort needed to do the simulation using the models. Is this work feasible within the Istanbul timeline? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.655844155844156
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "3",
                    "likes": "2",
                    "time": "18/05/2019-01:14:28",
                    "content": "I\u2019d like to know how the gas costs for TXZERODATA and TXNONZERODATA were choosen in the first place. Why is there a difference in cost for zeros and non zeros? If I would want to send a boolean (0x00 or 0x01) to the chain it would be cheaper to encode 0x01 as 0x0000. This seems weird to me. For costs itself I don\u2019t see why there should be a difference in data aswell. To me it seems that the data gets included (in the end) in one of the block hashes (transactionRoot?) but then it makes no sense to me why nonzero data has different cost. Storing this data would also make no difference to me? Unless I\u2019m missing some trivial trick which you can do with this data. I\u2019d like to learn why the cost is different in the end =) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.041666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PhABC",
                    "index": "4",
                    "likes": "0",
                    "time": "02/06/2019-16:11:15",
                    "content": "To echo @axic, do we have a rough estimate of what the new cost per byte could be? An estimate value would help me figure out if I should go or not for a more complicated architecture using much less storage. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.86969696969697
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elibensasson",
                    "index": "5",
                    "likes": "1",
                    "time": "03/06/2019-09:41:49",
                    "content": "We don\u2019t know yet by how much, we need to collect data and extrapolate the impact of reduced gas cost on things like uncle rate. We\u2019ll definitely have a new estimate by time for Istanbul and we\u2019ll support it with some data (now being collected). We\u2019ll also discuss this matter at Scaling Ethereum this week. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.5606060606060606
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "6",
                    "likes": "0",
                    "time": "23/06/2019-11:35:28",
                    "content": "Was there any progress made on this? I\u2019d be curious to see some results, so that it can be seriously considered for Istanbul. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.9166666666666665
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elibensasson",
                    "index": "7",
                    "likes": "0",
                    "time": "28/06/2019-08:40:26",
                    "content": "Yes, we\u2019re working on this diligently, on track for the July 19th deadline, will update ASAP when we have preliminary results but we\u2019re optimistic that gas can be safely reduced. (Louis answered this along these lines yesterday but his membership in this thread is pending so this comment will likely be repeated in other words by him.) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "8",
                    "likes": "0",
                    "time": "28/06/2019-17:54:35",
                    "content": "We are actively working and are on track for the deadline of July 19th. We are currently running a simulated network in a controlled environment where tried various numbers for the call data gas cost and measure their effect on network security and open access (aka syncing time). So far, our preliminary results are positive and points toward a large reduction. We hope to share preliminary results as soon as we have them. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.291589363017934
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "9",
                    "likes": "1",
                    "time": "28/06/2019-17:57:17",
                    "content": "Ok I see it, just approved this post by @guthlStarkware (flagged by Discourse for some reason). Perhaps it was \u201cpreliminary results\u201d that seemed too business-like for the spam filter LOL. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 8.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "10",
                    "likes": "0",
                    "time": "28/06/2019-18:42:24",
                    "content": "    elibensasson:  Yes, we\u2019re working on this diligently, on track for the July 19th deadline,   July 19 is the deadline for clients to have EIPs implemented, not for the EIP to be complete.  I know this is water under the bridge and an audible was called but the intent was that the May deadline was when this data should have been available. How much sooner than 19 July can this data be made available? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "11",
                    "likes": "0",
                    "time": "28/06/2019-20:19:56",
                    "content": "Hahaha I will know better next time  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elibensasson",
                    "index": "12",
                    "likes": "0",
                    "time": "30/06/2019-09:55:29",
                    "content": "Later this week we\u2019ll share what we currently have, and will keep doing so as data emerges from the various simulations. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "13",
                    "likes": "0",
                    "time": "04/07/2019-12:14:57",
                    "content": "Disclaimer: I cannot post more than two links per post as a new user, therefore the multiple posts. EIP-2028 Standalone Analysis TL;DR - We present our simulation plan and explain why we focus only on network delay and history. The plan is available here Introduction When EIP-2028 was introduced, we discussed two kinds of test-cases: (1) measuring network effects of increased calldata (2) measuring local effects on a single node. Here\u2019s a brief update on both cases. For item (1), we collect data from Ethereum\u2019s mainnet. We shall report our preliminary findings early next week. To corroborate our findings, we\u2019ve partnered with WhiteBlock to simulate the effect of reducing calldata gas cost and increased block size on important parameters such as network delays, and uncle rate. Our simulation plan is available here and is already running. ",
                    "links": [
                        "https://notes.whiteblock.io/s/SkV_SEYlB"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.371645021645022
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "14",
                    "likes": "0",
                    "time": "04/07/2019-12:15:35",
                    "content": "The rest of this post discusses (2), the effects on a single node. The purpose of this analysis is to understand how calldata was priced at the network launch. Update on Local Tests (Standalone Node) and Gas Cost Comparison The main goal of performing local tests is to understand how the decrease in calldata gas cost would impact the system, assuming the network has zero delay (the effect on network delays is investigated separately). Recall that each node must validate the header of each new block and then, process the block. We want to ensure that the implementation of this EIP does not harm the network: for example, that the mere increase in blocksize does not cause significant problems in computing block headers and increase processing time, even if we assume zero network delays. Recall that the current cost for calldata is 68 gas for each non-zero byte and 4 gas for each zero byte. An increase in headers validation would impact security whereas an increase in block processing, all other things being equal, would impact throughput. A quick gas comparison is interesting here: When a validator receives a block, it computes the Keccak hash of the whole block to verify that the header used for the PoW is correct. For a calldata input of size N bytes, if this verification operations were done in the EVM, the gas cost would be 30 gas for the first invocation of keccak and 6 gas for each additional word (32 bytes), totaling 30+6 * N / 32 gas. Asymptotically (neglecting the first 30 gas) this gives a gas price of roughly 6 for every 32 bytes, or 0.2 gas per byte. So, under current pricing, transmission and history for nonzero bytes accounts for all 68 gas. One could argue that Keccak might be underpriced too. This is debunked by Holiman vm analysis, based on a historical analysis of opcode runtime over Ethereum lifetime. According to this work, the Keccak opcode\u2019s gas price is on par with its processing time. Our local measurements on our machine go along with this analysis. So far, we compared calldata to computation cost. One could also try to compare calldata and storage. We tried but failed to find similar analogies there. This goes along with several other reports on SLOAD and SSTORE, stating that their pricing is complex and must be understood as a design choice for the network future 1 To conclude, assuming zero network delay, the fair and consistent pricing of calldata has a lower bound at 0.2 gas per byte. Practically, this means that the new gas cost recommendation should be based on its effects on network delay and history. This is also what was done in the original system design. ",
                    "links": [
                        "https://github.com/renlord/bookish-octo-barnacle/blob/master/slides.pdf",
                        "https://ethereum-magicians.org/t/eip-2242-transaction-postdata/3557/3"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.341883116883118
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "15",
                    "likes": "0",
                    "time": "05/07/2019-07:27:36",
                    "content": "This was pointed out by @AlexeyAkhunov on today\u2019s ACD: this EIP only tries to change the txdata cost and not the cost for CALLs between contracts. Would it make sense changing the title of this EIP to \u201cTransaction data gas cost reduction\u201d? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "16",
                    "likes": "0",
                    "time": "05/07/2019-07:28:21",
                    "content": " Can you rename to something like `\u201cTransaction data gas cost reduction\u201d. Can you also run simulations for the case where the same cost for zero and non-zero bytes?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "17",
                    "likes": "0",
                    "time": "05/07/2019-07:52:31",
                    "content": "It would make sense, the new title being self-explanatory. Where do we need to change it? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.681818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "18",
                    "likes": "0",
                    "time": "05/07/2019-07:56:12",
                    "content": "Let me discuss it with WhiteBlock. On a side note, I\u2019m still looking a good reason for the distinction in the first place and would be pleased to discuss it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 7.416666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "19",
                    "likes": "0",
                    "time": "05/07/2019-07:57:56",
                    "content": "File a PR changing the EIP, it should be merged automatically. Please also update the title of this forum topic, if it won\u2019t allow it for you, @jpitts can help. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "20",
                    "likes": "0",
                    "time": "05/07/2019-08:08:00",
                    "content": "    guthlStarkware:  On a side note, I\u2019m still looking a good reason for the distinction in the first place and would be pleased to discuss it.   I believe the reasoning for pricing zero bytes differently was that they might be compressed easier. But considering that these numbers do not closely reflect CPU times, it was rather premature optimization. If there is a chance to simplify this with this EIP I\u2019d go for it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.8125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TomBrand",
                    "index": "21",
                    "likes": "0",
                    "time": "05/07/2019-10:08:21",
                    "content": "@axic @chfast good suggestion - changed it. Thank you ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "22",
                    "likes": "2",
                    "time": "10/07/2019-14:33:35",
                    "content": "We published a Geth reference implementation for EIP2028: https://github.com/liorgold2/go-ethereum/pull/1. Note that currently, in Geth, there is an artificial (i.e., non-consensus based) limitation of 32KB on the size of each transaction, and this bound needs to be increased to be consistent with this EIP. A pull request for such an increase already exists in https://github.com/ethereum/go-ethereum/pull/19618 and our new reference implementation for EIP 2028 relies on it (using a limitation that is appropriate to the new gas cost of call data). We are now working on the Parity implementation. Notice that the gas cost currently stated in the reference implementation (16 gas per byte) may change once we finish analysing the simulation results which are still being collected. ",
                    "links": [
                        "https://github.com/ethereum/go-ethereum/pull/19618"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.264204545454545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "23",
                    "likes": "0",
                    "time": "12/07/2019-07:10:53",
                    "content": "Here\u2019s the parity version of EIP 2028, for testing purposes. Notice that the transmission gas cost there (16 gas/byte) may be updated once we finish analyzing our test data (which we\u2019ll publish next week). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "24",
                    "likes": "8",
                    "time": "18/07/2019-10:17:25",
                    "content": "Transmission Gas Cost Reduction \u2013 What Ethereum\u2019s Mainnet Has to Say TL/DR Analysis of block size vs. uncle rate on Ethereum, including our high-load test conducted on Mainnet on Monday July 15 2019, supports EIP 2028 and the new gas cost of 16 gas per byte. In fact, this data suggests that gas cost can be further reduced in the future. Introduction and the Parity update of March 2019 As we explained in the EIP 2028 description, reducing the gas cost of transmission will allow larger blocks and this might affect network security, as measured by uncle rate. To start the discussion, lets review on Etherchain the correlation between average daily block size and uncle rate. The Parity update In March 2019 Parity modified its block propagation method. Prior to the change, a Parity node would process a block before sending it on the network. After the change, Parity nodes joined other nodes (Geth, pantheon, Nethermind) in transmitting blocks before processing them, once the following three conditions were met: (1) Block body matches the block header (txHash, uncleHash), (2) Proof Of Work in the header is valid, and (3) the block is on the longest PoW chain. The actual processing happens  concurrently to this but does not prevent block propagation. This change caused a dramatic 3x reduction in uncle rate, and unlinked the linear correlation between block size and uncle rate that was evident before the change. More details are available in Vitalik\u2019s tweet. The plot below shows this dramatic effect. The pre-March 2019 points are colored blue and the post-March 2019 ones are colored red (the big red dot at the bottom right corner will be discussed later).  hpZ3VIe.png1134\u00d71134 71.8 KB  This plot originated from https://etherchain.org/correlations. The Big Red Dot StarkWare is responsible for the Big Red Dot, the increased average block size on Monday July 15 2019.  (All our transactions originated from this address). That day also holds the Guiness World Record for largest average block size in Ethereum\u2019s history, as seen clearly on the next plot taken from Etherchain. We explain the experiment that caused it, and what we learned from it, next.  5Ols121.png1024\u00d7468 93.7 KB  The Experiment - A Bunch of Zeros Not all bytes are equal on Ethereum. In particular, a zero byte costs only 4 gas (compared with 68 gas for all non-zero bytes). This allowed us to generate bigger blocks that have a low gas cost. Ethereum uses snappy compression so we had to be a bit careful to create blocks that have many zeros (and low gas cost) but cannot be compressed significantly (no more than roughly a factor 2x compression), though their gas cost was 5x lower than that of typical (or random) data. On Monday July 15 2019, we generated a large number of such transactions and submitted them to Ethereum\u2019s mainnet, to measure the effect of larger blocks on uncle rate. We created roughly 2,000 blocks that varied in uncompressed size between 45-534 KB. Here\u2019s the first block in our experiment, here\u2019s the last one and this is the largest one. But, as the the big red dot in the plot above shows, this long period of large blocks had little noticeable effect on the daily uncle rate. Taking 20% daily uncle rate as an upper bound on acceptable uncle rate, we believe that gas cost can be reduced even below 16 gas per byte. This is the take-away message of the Big Red Dot. But now lets take a look at the experiment in greater granularity and see what we learn from it. Big Red Dot in finer granularity Here is a plot of the block size from recent days. The big peak towards the right comes from the blocks of our experiment (and prior peaks are our trials a few days earlier).  To parse this data at finer granularity, we took a small time window of 10,000 blocks and broke it into buckets of 50 blocks (roughly 11 minutes). The next plot shows uncle rate as a function of uncompressed block size. Bear in mind that the average uncompressed blocksize is 23KB, compressed to an average of 15KB. We maintained a similar compression ratio (of roughly 2x) for the blocks in our test, even though we managed to generate blocks that are 22x larger than the average (max-ing at 535 KB uncompressed). The buckets of 50 consecutive blocks during our experiment were up to 7.5x bigger than average. As can be seen, there is little to no effect on uncle rate per bucket.  A block brother is a block that is not part of the main chain, but sits as the same height as another block (i.e., brothers are uncles, but attributed to individual mainnet blocks). The next plot shows brother count as a function of individual block size. Inspecting this plot, we still see no adverse effect of increased block size, even when average block size is larger than the average block size (of 25 KB) by a whopping factor of 22x.  Summary To conclude, we see no adverse effect of increasing today the average block size by a factor of 7.5x, nor of increasing the individual blocksize by a factor of 22x. Based on this, the conservative choice of reducing transmission gas cost by a factor of roughly 4x, to 16 gas per byte, is well-founded. Our code modifications for Parity and Geth have been posted earlier. ",
                    "links": [
                        "https://twitter.com/VitalikButerin/status/1127926330501234692",
                        "https://ethereum-magicians.org/uploads/default/original/2X/9/9810ffe125913216bd072367cb0b1ca7550bdab5.png",
                        "https://www.etherchain.org/correlations",
                        "https://etherscan.io/address/0xe7c57b7c38f9654d0e250079a472d0098d23e74d",
                        "https://www.etherchain.org/charts/blockSize",
                        "https://ethereum-magicians.org/uploads/default/original/2X/f/f11a4276667145be3297d49122351eb391c08daa.png",
                        "https://etherscan.io/block/8147489",
                        "https://etherscan.io/block/8158156",
                        "https://etherscan.io/block/8157001",
                        "https://github.com/liorgold2/parity-ethereum/pull/1",
                        "https://github.com/liorgold2/go-ethereum/pull/1",
                        "https://ethereum-magicians.org/t/eip-4844-shard-blob-transactions/8430/2"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.922147001934237
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cdetrio",
                    "index": "25",
                    "likes": "2",
                    "time": "18/07/2019-12:40:16",
                    "content": "Great work! To make L2 scaling (i.e. stateless or state-minimized contracts with data stored off-chain and only a 32-byte stateroot stored in the contract) competitive with storing data on-chain using SSTORE, the cost originally suggested by @Recmo was \u201c100 gas per word\u201d or 3.125 gas per byte (see summary post here and proposal here). The number is based on the size of a merkle proof assuming a depth 32 binary trie and 32-byte hashes (total bytes = trie_depth * hash_size = 1024 bytes). At 16 gas per byte the data cost of a proof would be 1024 * 16 = 16384 (brought down from 1024*68 = 69632), but 16384 is still not competitive with 5000 gas for an SSTORE. Proofs can be batched/de-duplicated with a varying amount of reduction (depending on where the accounts are in the trie), so in some circumstances 16 gas per byte might be cheap enough to be competitive if proofs are batched. ",
                    "links": [
                        "https://youtu.be/dHZiWFWCGNM?t=536"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.156746031746032
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "26",
                    "likes": "2",
                    "time": "18/07/2019-16:28:22",
                    "content": "To bring the last part of the discussion about the EIP, here are our history and sync analysis after the hardfork. The effect of reduced transmission gas cost on blockchain history accumulation and full nodes EIP 2028 reduces gas cost of data 4x (to 16 gas/ byte) and we believe this is safe in terms of its effect on network security (as argued here). A different concern might be the effect on blockchain history accumulated by full nodes and archival nodes that maintain this data. On this matter, we believe our conservative 4x gas reduction is safe, for the following reason. Current accumulation rate Let\u2019s start by examining the average growth in history per block on full nodes and on archival ones. If you take the total growth seen in the month starting on May 17 2019 and ending on June 17 2019 (on Etherscan) and divide it by the number of blocks, you get that each block adds roughly 100 KB to a full node and 1 MB to an archival node. Over the same time period, the average (and median) block size was roughly 23 KB, so we see that transmission accounts for no more than 25% of history accumulated on a full node and no more than 2.5% of the history accumulated on an archival one. (Calldata requires the same storage volume on both full nodes and archival ones.) The impact of EIP 2028 on accumulation rate EIP 2028 reduces transmission gas cost roughly 4x, so it will likely increase block size by roughly 4x. Assuming all other storage components remain the same, according to this calculations an average block size will add roughly 175 KB to a full node, less than doubling the history accumulation rate. For archival nodes the history accumulation rate will increase by roughly 10% to roughly 1.1 MB. The impact of EIP 2028 on sync To best of our knowledge, the main bottleneck in syncing is due to state updates (see here for background on syncing). Therefore, even in the worst case scenario of a 2x increase in the accumulation rate of full nodes due to larger block size, we do not anticipate significant increase in sync time. In fact, since EIP 2028 will likely move stuff from storage to transmission, we conjecture that our EIP will improve (decrease) sync time. Conclusion Since Ethereum\u2019s mainnet was launched in July 2015 (4 years ago), storage capacities per dollar have more than doubled. Therefore we believe that a worst case 2x increase in the storage needs of full nodes, and a 10% increase for archival nodes, is reasonable. ",
                    "links": [
                        "https://etherscan.io/chartsync/chaindefault",
                        "https://etherscan.io/chartsync/chainarchive",
                        "https://github.com/ethereum/go-ethereum/issues/16796#issuecomment-391649278",
                        "https://www.backblaze.com/blog/hard-drive-cost-per-gigabyte/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.239130434782608
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "27",
                    "likes": "0",
                    "time": "18/07/2019-16:31:04",
                    "content": "Thanks! As we explained, we remain conservative in our approach. Since the timeline before Istanbul is quite short, we want this first modification to go through and if necessary, push further the reduction in the next one. 16 gas is already a large reduction and our data shows that it does not impact the security. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.5102040816326525
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AFDudley",
                    "index": "28",
                    "likes": "1",
                    "time": "18/07/2019-16:48:02",
                    "content": "Ideally, we would not apply all of this gas reduction to the current transaction type, given that we need to incentivize the switch to the EIP-1559 transaction type. As I understand it, this is already being discussed with ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "29",
                    "likes": "0",
                    "time": "22/07/2019-14:00:46",
                    "content": "EIP implemented in aleth https://github.com/ethereum/aleth/pull/5691 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "30",
                    "likes": "0",
                    "time": "22/07/2019-19:11:39",
                    "content": "Can we get the EIP updated with the agreed upon number? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kraykov",
                    "index": "31",
                    "likes": "0",
                    "time": "26/07/2019-14:46:32",
                    "content": "I\u2019m not quite sure I fully understand the change (sorry for my ignorance), but doesn\u2019t this require to also reduce the available gas of the fallback function (currently being 2300)? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "32",
                    "likes": "0",
                    "time": "11/08/2019-08:40:21",
                    "content": "This change is only about the transmission cost, aka the cost of sending data to the chain. Today, the max block size is around 120kb (for a normal string of random bytes). This change will make possible to upload up to 480kb. Keep in mind that blocks on Eth are not defined by their max size but by the gas limit. I don\u2019t see how the fallback function needs a change. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.5625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/voith",
                    "index": "33",
                    "likes": "1",
                    "time": "02/09/2019-10:35:26",
                    "content": "EIP implemented in trinity https://github.com/ethereum/py-evm/pull/1832 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "34",
                    "likes": "0",
                    "time": "02/12/2019-23:57:58",
                    "content": "I have reviewed this EIP. Everything looks great. And this is a good and clear model for future repricing arguments, thank you. A typo. Quick fix --> https://github.com/ethereum/EIPs/pull/2422 ",
                    "links": [
                        "https://ethereum-magicians.org/t/hardfork-meta-eip-1679-istanbul-discussion/3207/55"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.933333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "35",
                    "likes": "5",
                    "time": "14/01/2020-15:03:11",
                    "content": "EIP2028 - Post Istanbul/Muir Glacier Hardfork-- What Ethereum\u2019s Mainnet Has to Say TL/DR Post Hardfork analysis of block size vs. uncle rate on Ethereum, including our high-load test conducted on Mainnet on Sunday January 20 2020, confirms our EIP-2028 Pre Hardfork analysis and suggests the network can even tolerate further reductions in transmission gas cost. Introduction and the Hardforks timeline On December 8th 2019 and January 2nd 2020, Ethereum upgraded respectively to Istanbul and Muir Glacier. EIP-2028 got included in Istanbul and Muir Glacier brought back the network to normal block time. On January 12th 2020, StarkWare proceeded with a post-upgrade analysis. As argued in  EIP 2028, reducing the gas cost of transmission would allow larger blocks and could affect network security, as measured by uncle rate. As previously, we use Etherchain as an independent source to analyse the correlation between average daily block size and uncle rate. The plot below shows this correlation. The pre-March 2019 points are colored blue, the data between March 2019 and November 2019 is orange, and the latest data points are in red. We will remind the readers that the drop in Uncle Rate compared to prior to March 2019 is mainly due to Parity propagation change as expressed previously. (Update: Vitalik\u2019s link is broken and the bug was fixed in January 2019. Thanks to @evan_van_ness for the edit. Here is the link to the Parity github issue).     guthlStarkware:  The Parity update In March 2019 Parity modified its block propagation method. Prior to the change, a Parity node would process a block before sending it on the network. After the change, Parity nodes joined other nodes (Geth, pantheon, Nethermind) in transmitting blocks before processing them, once the following three conditions were met: (1) Block body matches the block header (txHash, uncleHash), (2) Proof Of Work in the header is valid, and (3) the block is on the longest PoW chain. The actual processing happens concurrently to this but does not prevent block propagation . This change caused a dramatic 3x reduction in uncle rate, and unlinked the linear correlation between block size and uncle rate that was evident before the change. More details are available in Vitalik\u2019s tweet .   An additional observation can be made about the relative drop in November and December which is believed to be due to the Difficulty Bomb that was delayed with Muir Glacier.  correlation-between-avg%2031135\u00d71135 73.7 KB  This plot originated from https://etherchain.org/correlations. The Big Dots In our previous analysis, we created (and analyzed) what was then the day with the largest average blocksize in Ethereum\u2019s history and observed the very limited impact of increased blocksize on Uncle Rate. On January 12 2020 (after Istanbul and Muir Glacier), we repeated the experiment. Thus, StarkWare is also responsible for the new Big Red Dot. As seen above, the average blocksize  on January 12th was  roughly twice as large as the previous world record, which resulted from our previous experiment in July 2019. Here\u2019s another view of this, from Etherchain.  1187\u00d7474 51.9 KB  In more detail, on Sunday January 12th 2020, we generated a large number of such transactions and submitted them to Ethereum\u2019s mainnet, to measure the effect of larger blocks on uncle rate. These transactions were included within roughly 6,000 blocks, that varied in uncompressed size between 45KB-1.46MB. Here\u2019s the first block in our experiment (114,513 Bytes uncompressed), here\u2019s the last one (436,908 Bytes uncompressed) and this is the largest one (1,467,727 Bytes uncompressed). But, once again, despite an increased average size of roughly 2x, the big red dot in the plot above shows that this long period of large blocks had little noticeable effect on the daily uncle rate. As a consequence, StarkWare believes that this analysis empirically proved the soundness of EIP-2028. Big Red Dot in finer granularity Here is a plot of the block size from the time of the previous experimentation (July 2019) to January 13th 2020. The two main peaks come from the blocks of our Pre and Post Istanbul experiments (the peak right before block 9000000 was an experiment we started and then terminated due to the acknowledgement of the Difficulty Bomb influence on the resulting numbers).  To parse this data at finer granularity, we took a small time window of 10,000 blocks and broke it into buckets of 50 blocks (roughly 11 minutes each). The next plot shows the uncle rate as a function of uncompressed block size. Bear in mind that the average uncompressed blocksize is 23KB, compressed to an average of 15KB. We maintained a similar compression ratio (of roughly 2x) for the blocks in our test, even though we managed to generate blocks that are 65x larger than the average (max-ing at 1.46MB uncompressed). The buckets of 50 consecutive blocks during our experiment were up to 21x larger than average, improving on our previous largest bucket (from our pre-Istanbul experiment) by almost 3x. As can be seen, there is little to no effect on uncle rate per bucket.  A block brother is a block that is not part of the main chain, but sits at the same height as another block (i.e., brothers are uncles, but attributed to individual mainnet blocks). The next plot shows brother count as a function of individual block size. Inspecting this plot, we still see no adverse effect of increased block size, confirming the same prediction from our previous analysis.  Summary To conclude, increasing the average block size by a factor of 20x shows no adverse effect on the security of Ethereum\u2019s Mainnet (Post-Istanbul\u00a7 and Post-Muir-Glacier), nor do we see any deleterious effects from increasing individual blocksize by a factor of 65x. Based on this, we believe that the new gas cost of data transmission adopted with EIP-2028 was well-founded, and even further gas reductions seem warranted (to be discussed by the community later). ",
                    "links": [
                        "https://www.etherchain.org/correlations",
                        "https://twitter.com/evan_van_ness",
                        "https://github.com/paritytech/parity-ethereum/pull/9954",
                        "https://twitter.com/VitalikButerin/status/1127926330501234692",
                        "https://ethereum-magicians.org/uploads/default/original/2X/0/01ff7fa078775298bf4152bae493e94dec04925c.png",
                        "https://www.etherchain.org/correlations",
                        "https://ethereum-magicians.org/t/eip-2028-transaction-data-gas-cost-reduction/3280/24",
                        "https://ethereum-magicians.org/uploads/default/original/2X/0/0664e5665c8c0b893597160c6a97c66a2277d45e.png",
                        "https://etherscan.io/block/9265746",
                        "https://etherscan.io/block/9271645",
                        "https://etherscan.io/block/9267309",
                        "https://ethereum-magicians.org/t/eip-4844-shard-blob-transactions/8430/2"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.9274251733929155
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lithp",
                    "index": "36",
                    "likes": "6",
                    "time": "25/01/2020-01:57:42",
                    "content": "TLDR: The above post painted a rosier picture of the situation than I think is warranted. It concludes that \u201c[we do not] see any deleterious effects from increasing individual blocksize by a factor of 65x\u201d However, larger blocks are more likely to become uncles and this shows up in the data. Larger blocks are more likely to become uncles First off, thanks for doing the experiment, this is great data to have! Also, I love the idea of trying to create snappy-incompressible transactions with many zeroes, to eke out every additional byte you can. I have an additional dataset to add to the above. I went back and tried to collect all the uncles which were created during the second experiment. During the ~22 hours for which the experiment ran[1], 5900 blocks were added to the canonical chain and 303 [2] uncles were created, for an uncle rate of ~0.0514 (For easier comparison with the table below: 5% of the blocks became uncles). Unfortunately, I wasn\u2019t able to find sizes for all those uncles, but by checking blockscout (example) I was able to collect uncompressed sizes for 225 of them.     Block Size [3] Canonical Blocks Uncled Blocks Uncle Probability     0-128KB 5393 200 4%   128-256KB 91 2 2%   256-512KB 241 11 4%   512KB - 1MB 115 7 6%   >1MB 60 5 8%    I should ask you not to take the right-most column very seriously. For one, there are 78 uncles for which I was not able to find a size, so these uncle probabilities are underestimates. Also, this is a tiny amount of data! If, by chance, 3 blocks over 1MB instead of 5 had been uncled the rate would appear to be 5%. If 7 had been uncled the rate would appear to be 11%. Without more data it\u2019s hard to say what true uncle rate for blocks this big is, though I\u2019d be surprised if it was outside 5-11%. However, even though the rightmost column isn\u2019t very precise I think its trend contradicts the conclusion that we can continue to reduce gas costs without concern, this experiment didn\u2019t rule out the possibility that increasing block sizes to 1MB could double the uncle rate. Why didn\u2019t this effect show up in etherchain.org/correlations chart? The etherchain chart averages an entire days worth of data and a lot happens each day, more than enough to overwhelm whatever signal was in this experiment. Below is the block size distribution on Jan 11 (when the experiment was not running) and on Jan 12 (when the experiment was running). Both charts show the same dataset but the top chart is zoomed in, it doesn\u2019t show blocks above 100KB in size:  The distributions on Jan 11 and 12 are incredibly similar! The day of experiment had a few large blocks but not enough to meaningfully change the block size distribution. Another way to see this is by looking at the medians. The median block size on Jan 11 was 17358.5 bytes. Jan 12 had a median block size of 18493 bytes, just 1134.5 bytes higher. If every block over 1MB had been uncled the uncle rate for Jan 12 would have been 0.01 higher and would still look completely normal on the etherchain correlations chart. Why didn\u2019t this effect didn\u2019t show up in the brother chart? (the last chart in the above post) The following image has two charts. In the first chart I\u2019ve reproduced the brother chart. There does not appear to be any relationship between block size and brother count, but there\u2019s big confounder here, which is that there are many more blocks in the left part of this chart than in the right part. Understanding whether larger blocks are more likely to have brothers requires correcting for that difference in density,  a task the eye does not excel at. In the second chart, I\u2019ve made the relationship between block size and brother count easier to see by grouping the block sizes into bins and reporting the average brother count across all blocks in each bin. This chart is also impacted by the difference in densities! There are fewer blocks in the buckets representing larger sizes, so their data is noisier and the trend isn\u2019t consistent, but there does appear to be a trend.  Footnotes: [1] The post says that the experiment started at block 9265746 and ended at block 9271645. There are a few more blocks above 1MB in size, the final one is block 9273973. I\u2019ve used the original interval for everything in this post, including everything up to the last 1MB block doesn\u2019t significantly change the results. [2] Above I said there were 303 uncles during the experiment. If you look at the uncle hashes for all the blocks in this range you\u2019ll find 315 hashes. The discrepancy is because I looked at all uncle blocks which had block numbers in the block range of the experiment. [3] For this entire post I\u2019ll be using uncompressed sizes. This is roughly double the compressed size:  ",
                    "links": [
                        "http://etherchain.org/correlations",
                        "https://etherscan.io/block/9273973"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.646354166666667
                }
            ]
        }
    ],
    "group_index": "835"
}