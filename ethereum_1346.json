{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/signal-priority-of-a-transaction-to-the-wallet/6348",
            "title": "Signal priority of a transaction to the wallet ",
            "index": 6348,
            "category": [
                "Wallets"
            ],
            "tags": [
                "wallet",
                "eip-1559"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "1",
                    "likes": "3",
                    "time": "27/05/2021-00:01:08",
                    "content": "After post-processing the EIP1559 wallet call and seeing the mock-ups of other wallets I think that we are not yet leveraging EIP1559 to the full extend. The user is still presented with a choice (tx priority/miner tip) in the context of signing a transaction. In a perfect world the wallet would just tell the user what it will cost and be done with it (\u201cDon\u2019t make me think\u201d) But for this the wallet needs a signal what the priority for this transaction should be. This depends on the type of the transaction e.g. we need a high priority for transactions like a dex token-swap to e.g. not get failed transactions  - and we can live with a low priority when we vote on a DAO proposal where voting closes in a month. I see 2 ways to signal it to the app:  NatSpec annotation on the function injecting the intent into the RPC  I am leaning to option 2 as it covers more cases (e.g. including plain ETH transfers that are not possible with #1) and also because it can be done with already deployed contracts. ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.653538961038961
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "2",
                    "likes": "2",
                    "time": "27/05/2021-16:16:18",
                    "content": "I also prefer option 2 because it allows interfaces to update for contracts that are not upgradable. Maybe a new parameter for sendTransaction, like urgency, with a preferred resolution time in ms? That way it can be friendly on a variety of evm compatible chains. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.278409090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "3",
                    "likes": "3",
                    "time": "27/05/2021-16:17:23",
                    "content": "Actually that parameter probably isn\u2019t sufficient. You kindof both want a sense of urgency, and also want to know leniency. \u201chow long can this transaction wait?\u201d. Some transactions legitimately may not be useful after a certain point, and that\u2019s valuable information to convey to the wallet. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.580357142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "4",
                    "likes": "0",
                    "time": "27/05/2021-19:47:45",
                    "content": "Thanks for chiming in! Yea think we should go the RPC route for sure - but maybe it makes sense to also signal via NatSpec to cover use-cases where no RPC is used (e.g. could imagine a static QR somewhere) - but maybe it\u2019s not worth it for such edge cases. On the other hand \u201cBetter to have than to need\u201d and it is not possible-feasible to retro fit it in this case. And Yea we might need 2 values. Something like a \u201cbest before\u201d and an \u201cideal at\u201d ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.887499999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "5",
                    "likes": "0",
                    "time": "27/05/2021-19:56:19",
                    "content": "Doesn\u2019t need to be natspec to be \u201cwallet readable\u201d from the contract. There could be a protocol like optionally implementing a getTransactionUrgencyLevel(): uint256 method that wallets can ping just in case. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "6",
                    "likes": "1",
                    "time": "27/05/2021-20:11:45",
                    "content": "I would not want to bother nodes with that and also like the prospect it could boost sourcify usage a bit in the process  We need more contracts verified in that manner and that could be a forcing function. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "7",
                    "likes": "0",
                    "time": "01/06/2021-16:20:01",
                    "content": "I don\u2019t think people should be submitting any transaction that won\u2019t be mined within a block or two.  I think it is generally a bad idea to rely on the global pending pool for medium-term storage of transactions and trust that your transaction won\u2019t get dropped. IMO, wallets should present the user with a cost and the user can take it or leave it.  If they leave it, they may come back and try again at a later time, and maybe some wallets have a \u201csave for later\u201d button to make this easy, but we shouldn\u2019t be encouraging users to submit any transactions that are unlikely to be mined. On a similar vein, I have advocated in the past and will probably continue to weakly advocate that execution clients should become more aggressive with purging their pending pool of transactions that aren\u2019t likely to be mined anytime soon, even if they have extra space.  These transactions get gossiped around when a new client connects/reconnects and it is not free to keep them around.  If a user truly wants to keep transactions alive indefinitely, they should be using software explicitly designed for that and paying the necessary services for doing so rather than relying on the altruism of network gossip participants to not clear out long lived transactions. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.820165945165945
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/perama-v",
                    "index": "8",
                    "likes": "0",
                    "time": "02/06/2021-00:05:16",
                    "content": "I like this idea. If you are going to lowball a transaction for possible inclusion in 1 week, a wallet/client-side system or service can monitor the basefee and resubmit when viable. If after 1 week gas prices are still too high, a user or wallet/client-side system can decide on the new price they will pay. Regarding the exact size of the mempool (from 2 blocks into the future to an unbounded aggregate), one natural upper bound might be 1 epoch (~6 minutes). Post-merge, a consensus engine with one validator will discover if it will be required to propose a block with a lead time of min(1 epoch, slot_into_epoch), or ~6-12 mins. For the vast majority of its time, it will not otherwise be proposing blocks. The consensus engine can pass a message to the application-layer engine signalling the time until a block is expected to be produced. It can then begin to construct a mempool (either then or 2 blocks / ~30s before) by listening for new transactions being broadcast by the network. If instead, the mempool is being treated as a storage facility for unlikely transactions, the application-layer engine is encouraged to maintain a mempool during the long periods where it has no need to propose a block. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.05530303030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ajsutton",
                    "index": "9",
                    "likes": "1",
                    "time": "02/06/2021-00:19:26",
                    "content": "    perama-v:  Post-merge, a consensus engine with one validator will discover if it will be required to propose a block with a lead time of min(1 epoch, slot_into_epoch), or ~6-12 mins.   Block proposers can only be calculated in the epoch they occur - there is no look ahead period. Nodes maintain a transaction pool to be able to gossip those transactions to other nodes even though they know for sure they will never propose a block (assuming they aren\u2019t running a miner). I don\u2019t think we\u2019d want to lose that property or it would become extremely difficult for transactions to propagate through to block proposers effectively. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.8125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/quantobria",
                    "index": "10",
                    "likes": "2",
                    "time": "23/06/2021-13:29:08",
                    "content": "    ligi:  In a perfect world the wallet would just tell the user what it will cost and be done with it (\u201cDon\u2019t make me think\u201d) But for this the wallet needs a signal what the priority for this transaction should be.   I like the idea of not making the user think. Especially when the user doesn\u2019t really have the needed information for making the choice (the tradeoff of time). I think that some good old QoS policies from the traditional networks might be the answer. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/perama-v",
                    "index": "11",
                    "likes": "0",
                    "time": "10/07/2021-12:18:35",
                    "content": "With the brief of \u201cdon\u2019t make me think\u201d and three user groups described the opening post by @ligi:  Generic transaction DAO proposal Dex token-swap  Here is a three-phase model.  Minimal interface yes/no interface (composed of transaction cost derived from Base Fee x 2).  This covers the normal user.   Second page for expressing increased desire for ultimate inclusion (derived from a Base Fee multiple, to cover x minutes of unexpected congestion).  This covers the DAO proposal. Any excess fee is refunded if not used. If the user is not happy to pay the current fee, then they do not submit a transaction. If in the future their needs change (the proposal period is ending) and they now accept the current fee, they submit the transaction then.   Third page for expressing increased desire for rapid inclusion (derived from an increased Priority Fee, obtained from FeeHistory JSON RPC API).  This covers the dex token-swap. The Priority Fee is not refunded, which is why it is presented third as a specialised choice.    I made some notes and visual representations of that here:  Perama\u2019s notes.   Wallet design Interesting topics and explorations.      ",
                    "links": [
                        "https://perama-v.github.io/ethereum/wallet-design"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.625
                }
            ]
        }
    ],
    "group_index": "1346"
}