{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-4973-account-bound-tokens/8825",
            "title": "EIP-4973 - Account-bound Tokens ",
            "index": 8825,
            "category": [
                "EIPs"
            ],
            "tags": [
                "nft",
                "erc",
                "ntt",
                "soulbound"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "1",
                    "likes": "13",
                    "time": "05/04/2022-09:29:06",
                    "content": "Keywords: Non-Tradable, Non-transferrable, non-fungible tokens, NFTs, Soulbound tokens, SBTs, badges  Original first discussion ISSUE by Nicola Greco in 1238: ERC1238: Non-transferrable Non-Fungible Tokens (NTT) \u00b7 Issue #1238 \u00b7 ethereum/EIPs \u00b7 GitHub  EIP-4973 Specification Document: EIP-4973: Account-bound Tokens  Account-bound tokens Working Group on Telegram: Telegram: Contact @eip4973  GitHub Repository that tracks ERC4973 Reference Implementation: GitHub - attestate/ERC4973: Reference Implementation of EIP-4973 \"Account-bound tokens\"  (frequently updated) Blog post that summarizes the Account-bound vs Soulbound debates: What are Account-bound tokens?  How EIP-4973 Account bound tokens could be used for curating music NFTs EIP-4973 - Account-bound Tokens - #125 by TimDaub  EIP-4973 allows for mutually agreed, peer-to-peer minting - without implicitly determined power distributions: EIP-4973 - Account-bound Tokens - #129 by TimDaub  A path towards upgrading \u201cfinal\u201d EIPs: ERC lightning talk: A path towards EIP upgrading   Feedback, discussions, and comments are welcome. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-4973",
                        "https://t.me/eip4973",
                        "https://github.com/rugpullindex/ERC4973/",
                        "https://timdaub.github.io/2022/05/30/what-are-account-bound-tokens/",
                        "https://ethereum-magicians.org/t/eip-4973-account-bound-tokens/8825/125#how-eip-4973-account-bound-tokens-could-drive-curation-in-the-music-nft-industry-1",
                        "https://ethereum-magicians.org/t/eip-4973-account-bound-tokens/8825/129",
                        "https://ethereum-magicians.org/t/erc-lightning-talk-a-path-towards-eip-upgrading/11321",
                        "https://ethereum-magicians.org/t/eip-4974-fungible-non-tradable-tokens-or-exp/8805/19",
                        "https://ethereum-magicians.org/t/ens-bounded-non-transferable-nfts/9217",
                        "https://ethereum-magicians.org/t/eip-5484-consensual-soulbound-tokens/10424",
                        "https://ethereum-magicians.org/t/eth-station-upcoming-event-in-berlin-call-for-action/10415",
                        "https://ethereum-magicians.org/t/minimalistic-transferable-interface/12517"
                    ],
                    "GPT-summary": "The post introduces EIP-4973, which proposes the creation of account-bound tokens that are non-transferrable and non-fungible. The post provides links to the EIP-4973 specification document, a working group on Telegram, a GitHub repository that tracks the ERC4973 reference implementation, and a blog post that summarizes the account-bound vs soulbound debates. The author invites feedback, discussions, and comments on the proposal and mentions the possibility of mutually agreed, peer-to-peer minting.",
                    "GPT-proposal-categories": [
                        "Token economics",
                        "Smart contract updates",
                        "Interoperability and scalability",
                        "Privacy, security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 6.5249999999999995
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carlosdp",
                    "index": "2",
                    "likes": "8",
                    "time": "09/04/2022-16:53:29",
                    "content": "Thanks for putting this together! I\u2019m not sure I\u2019m convinced it\u2019s necessary to create a new standard for this, though. boundTo is identical in intended functionality as ownerOf, but just for an NFT that can\u2019t be transferred, correct? I think ownerOf is sufficient, given this. Similarly, Bound event is synonymous with a Transfer from the null address. I think all we really need is a way to communicate to clients that the NFT in question is \u201cnon-transferrable\u201d, right? I think having that standardized in the JSON metadata would be my instinct on the best place  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.901154401154401
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "3",
                    "likes": "3",
                    "time": "10/04/2022-15:26:59",
                    "content": "    carlosdp:  boundTo is identical in intended functionality as ownerOf, but just for an NFT that can\u2019t be transferred, correct? I think ownerOf is sufficient, given this. Similarly, Bound event is synonymous with a Transfer from the null address.   You are right and so to ensure maximal backward compatibility and minimalism of the interface, I\u2019ve decided to rename Bond and boundTo to Transfer and ownerOf.     carlosdp:  I think all we really need is a way to communicate to clients that the NFT in question is \u201cnon-transferrable\u201d, right? I think having that standardized in the JSON metadata would be my instinct on the best place    From my understanding of Solidity and its surrounding standards, specifically ERC165: It was exactly built for this type of feature detection functionality. I\u2019ve now specifically mentioned it in the standard\u2019s \u201cRationale\u201d section, but essentially a properly built ERC721 wallet should already be able to detect when a token isn\u2019t transferrable when e.g. the ERC165 identifier 0x80ac58cd for its transfer function isn\u2019t supported. As you\u2019re suggesting, having wallets to make an extra asynchronous call is the wrong path in my opinion. Not only may this lead to an immense amount of requests NFT metadata hosts, but it would also ignore the existence and purpose of ERC165. The reason why in my opinion a new but minimal standards interface is mandatory is that e.g. just reverting on transfers of an ERC721 token is also bad. While e.g. a machine or wallet can indeed detect features using ERC165\u2019s supportsInterface function, it cannot interpret whether an ERC721 token\u2019s transfer function fails (e.g. \"does it fail because the token is soulbound or e.g. does it fail because of faulty input parameters). Since, however, event Transfer and function ownerOf are a part of ERC721\u2019s track and transfer interface, but so is function transfer, we\u2019ll have to cut this functionality and reintroduce it as a new interface. For the future, maybe we can have a non-fungible token with entirely composable ownership properties (e.g. private property, Harberger property, or soulbound property). However, for now this is not the scope of the standard. ",
                    "links": [
                        "https://github.com/TimDaub/EIPs/blob/master/EIPS/eip-4973.md#rationale",
                        "https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md#specification"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.998729531338227
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carlosdp",
                    "index": "4",
                    "likes": "4",
                    "time": "10/04/2022-17:05:50",
                    "content": "I see where you\u2019re going! Making it a subset of ERC721 makes more sense for sure. One other thing to consider is that it\u2019s likely a reasonable Soulbound NFT implementation technically would have a \u201ctransfer\u201d function. The \u201csoulbound\u201d part is for the entity, not the literal account itself. We\u2019d still want transfers (or \u201creclaims\u201d or w/e) to other wallets in the event of a wallet rotation, or compromise, for example. I think it\u2019s fine though, if the main point of the spec is to standardize a value to check for in EIP165. Currently, the spec says Transfer events can only happen in mint/burn scenarios, but I\u2019m not sure that\u2019s necessary to dictate.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.4935897435897445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "5",
                    "likes": "1",
                    "time": "10/04/2022-17:51:11",
                    "content": "    carlosdp:  One other thing to consider is that it\u2019s likely a reasonable Soulbound NFT implementation technically would have a \u201ctransfer\u201d function. The \u201csoulbound\u201d part is for the entity, not the literal account itself. We\u2019d still want transfers (or \u201creclaims\u201d or w/e) to other wallets in the event of a wallet rotation, or compromise, for example.   Interesting point. I think I agree with you that an account is only a single manifestation of a human/machine\u2019s identity on-chain. So logically, if, e.g., a human/machine\u2019s keys were compromised or necessary to migrate, a \u201cfriendly transfer\u201d would allow an otherwise soulbound token to be transferred within an identify\u2019s account ontology. There are two levels on which we can discuss this feature; once from the philosophical or name origin perspective, and secondly on the level of what\u2019s technically possible. I\u2019ll do both.  Name origin In the ERC4973 document, but also Vitalik\u2019s post on soulbound tokens, we specifically mention the name stemming from an item\u2019s property of binding to a player\u2019s character upon pickup in World of Warcraft. In V\u2019s post, you can see the \u201cSoulbound\u201d property in the first WoW screenshot. Here, despite a WoW character being structurally the same abstraction as an Ethereum account is for an identity, a Soulbound item cannot be traded/sent to other characters of the same owner. In fact, WoWWiki outlines a different name for the type of property you mentioned called \u201cAccount bound\u201d:  The item can also become Account bound. It happens to items marked as Binds to account after being acquired by a player. Unlike soulbound items, they can be sent by mail to other characters of the same account and realm, including those of opposing faction (patch 3.3).   Technical possibility of \u201cfriendly transfers.\u201d Then, independent of any naming, I think allowing \u201cfriendly transfers\u201d between accounts of the same identity is not something we\u2019ll be able to control by proposing a Solidity interface. The purpose of defining a Solidity interface is that many wallets/marketplaces and so on are capable of displaying information that is consistently formatted throughout different implementations. Concisely put: It\u2019s for interoperability. ERC\u2019s don\u2019t mandate actual behavior implemented as interface definitions. That is why, e.g., there have been so-called \u201csleepminting\u201d attacks on ERC721 tokens as we developers can\u2019t control an implementation\u2019s behavior through a standard document. E.g., although function transferFrom(address _from, address _to, uint256 _tokenId) strongly suggests that a token with id _tokenId gets transferred from _from to _to, it\u2019s not something a specification can define or control. Neither is it a state that a machine can detect as proper or not proper. If soulbound tokens allowed \u201cfriendly transfers,\u201d it\u2019d mean that we had to allow an owner to transfer them to virtually any other address - as we wouldn\u2019t be capable of understanding, on the standard document level, to tell if two accounts are being controlled by the same identity or not. For soulbound token holders and their respective applications, what I\u2019m suggesting, in case of keys have been compromised, etc., is that there\u2019s some form of migration mechanism between accounts, that for now, the application implements by e.g. re-issuing new soulbound tokens to the new account. If it were the case that all applications used a similar migration mechanism, it\u2019d make sense also define it as a separate ERC standards document.  Conclusion For ERC4973, \u201cfriendly transfers\u201d between two accounts of the same identity are out of scope. Still, thank you, @carlosdp, for poking holes - I appreciate it! ",
                    "links": [
                        "https://wowwiki-archive.fandom.com/wiki/Soulbound",
                        "https://wowwiki-archive.fandom.com/wiki/Bind_to_Account",
                        "https://timdaub.github.io/2021/04/22/nft-sleepminting-beeple-provenance/"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.313524684535322
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carlosdp",
                    "index": "6",
                    "likes": "1",
                    "time": "10/04/2022-23:54:46",
                    "content": "    TimDaub:  In the ERC4973 document, but also Vitalik\u2019s post on soulbound tokens, we specifically mention the name stemming from an item\u2019s property of binding to a player\u2019s character upon pickup in World of Warcraft. In V\u2019s post, you can see the \u201cSoulbound\u201d property in the first WoW screenshot. Here, despite a WoW character being structurally the same abstraction as an Ethereum account is for an identity, a Soulbound item cannot be traded/sent to other characters of the same owner.   In Vitalik\u2019s post, he actually explicitly mentions why these NFTs, in practice, need to be transferable, and has a whole section about different ways to handle that using current and future identity methods:  POAP has made the technical decision to not block transferability of the POAPs themselves. There are good reasons for this: users might have a good reason to want to migrate all their assets from one wallet to another (eg. for security), and the security of non-transferability implemented \u201cnaively\u201d is not very strong anyway because users could just create a wrapper account that holds the NFT and then sell the ownership of that.      TimDaub:  Then, independent of any naming, I think allowing \u201cfriendly transfers\u201d between accounts of the same identity is not something we\u2019ll be able to control by proposing a Solidity interface.   Right, but that\u2019s kinda my point. Technically, all ERC-721s would currently conform, on an interface level, to this proposed EIP. Specifying restrictions on transfers alone doesn\u2019t necessarily merit its own standard, it has no real \u201cenforce-ability\u201d. We also already see wide reaching examples of tokens with transfer restrictions fitting perfectly fine into their ERC spec. For example, USDC is an ERC-20 token that maintains a blacklist that can prevent interactions with the contract. In the same vein, couldn\u2019t an ERC-721 just restrict transfers unless the owner can prove they own the to address with whatever the implementation deems acceptable? Having the interface for EIP-165 checks can be useful. For clients, metadata would work fine though. For smart contracts, I\u2019m struggling to come up with an example where a smart contract would want to accept any NFT, as long as it is \u201csoulbound,\u201d as opposed to a specific NFT or just any NFT. Do you have an example in mind, by any chance? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.771660052910052
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "7",
                    "likes": "2",
                    "time": "11/04/2022-08:27:19",
                    "content": "We have to be clear here; despite what others have implemented and whether or not those tokens implement the transfer functionality, strictly speaking, they\u2019re not soulbound according to its definition. For POAP, it\u2019s great that they made the technical decision not to block the transferability. For any future project not wanting to block transferability, I suggest simply using ERC721. But those projects are not to be confused with soulbound tokens. I think you\u2019re misinforming your fellow users with this statement, unfortunately - I  doubt you have the authority to control what merits a standard:     carlosdp:  Specifying restrictions on transfers alone doesn\u2019t necessarily merit its own standard, it has no real \u201cenforce-ability\u201d. We also already see wide reaching examples of tokens with transfer restrictions fitting perfectly fine into their ERC spec.   The difference between ERC721 and ERC4973 is that they can signal the lack of transfer and tracking functionality with supportsInterface. My point is that there\u2019s a relevant difference between implementing a useful feature-detection mechanism (ERC4973) and naively disabling transfer functionality (revert in ERC721 transfer).     carlosdp:  For example, USDC is an ERC-20 token that maintains a blacklist that can prevent interactions with the contract. In the same vein, couldn\u2019t an ERC-721 just restrict transfers unless the owner can prove they own the to address with whatever the implementation deems acceptable?   This example is structurally false. The social contract between USDC and its users is that all transfers generally work, and only unless you\u2019re engaged in criminal activity do they won\u2019t (because you end up on a ban list). With ERC4973 tokens, the social contract with the users is that no token can ever be transferred. Your example is structurally false as USDC uses their ban list as the last means to circumvent criminal activity. In that case, they don\u2019t care about the criminal\u2019s user experience. Hence just having transfer revert is fine. But clearly, we don\u2019t want to treat all soulbound token users as USDC treats criminals\u2026 Instead, if we want to provide a nice user experience on wallets, it is critical making the user understand that they cannot ever transfer certain tokens and, e.g., show advice in a wallet. If we implemented this functionality by having transfer functions revert upon calling, it\u2019d create a confusing scenario as it\u2019d require someone to look into the contract code specifically. A machine cannot tell whether a revert within a tokens transfer function means: (1) the token is soulbound, (2) the user has entered the wrong inputs (3) a myriad of other possibilities. Since ERC4973 can signal transfers not being implemented via supportsInterface and since ERC721 can signal transfers being implemented, an ERC721 with disabled transfers cannot signal any specific information to a wallet. It can just notify the user that the on-chain call they\u2019re about to send will fail - which is a really bad user experience. Instead, with ERC4973, the transfer button can, thanks to supportsInterface, be hidden when the token is displayed. Potentially, the wallet implementer can even choose to educate the user about this new type of ownership experience.     carlosdp:  For smart contracts, I\u2019m struggling to come up with an example where a smart contract would want to accept any NFT, as long as it is \u201csoulbound,\u201d as opposed to a specific NFT or just any NFT. Do you have an example in mind, by any chance?   To me, having ERC4973 get adoption can be the start of a new chapter. So far, we\u2019ve implicitly assumed that all blockchain properties must have tracking and transfer functionality according to the societal norm that is \u201cprivate property.\u201d ERC4973, a token that doesn\u2019t make many implicit assumptions, can challenge these perceptions by, e.g., allowing someone to soulbound a token to a smart contract and then implementing wildly new ownership concepts. Within Radical Exchange\u2019s \u201cPartial Common Ownership\u201d concept working group, we\u2019re exploring what properties \u201cHarberger Property\u201d would exhibit, and SBTs owned by smart contracts may be a good foundation. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.115418346021794
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carlosdp",
                    "index": "8",
                    "likes": "3",
                    "time": "11/04/2022-16:28:46",
                    "content": "    TimDaub:  I think you\u2019re misinforming your fellow users with this statement, unfortunately - I doubt you have the authority to control what merits a standard:   I don\u2019t see how I\u2019m misinforming anyone? You\u2019re the one that brought up the Vitalik article (which coined the very term \u201cSoulbound NFT\u201d), I simply pointed out that in that very article, he himself points out there\u2019s a good argument for why Soulbound NFTs will probably need some form of transferability (using a direct quote from the article, mind you). If you disagree, that\u2019s fine, and I\u2019ll disagree with you there too. That\u2019s not misinformation, that\u2019s disagreement  And no single person has authority over what merits a standard, that was simply my individual opinion.     TimDaub:  The difference between ERC721 and ERC4973 is that they can signal the lack of transfer and tracking functionality with supportsInterface. My point is that there\u2019s a relevant difference between implementing a useful feature-detection mechanism (ERC4973) and naively disabling transfer functionality (revert in ERC721 transfer).   Yea, and again, I agree there could be some utility there.     TimDaub:  But clearly, we don\u2019t want to treat all soulbound token users as USDC treats criminals\u2026   I\u2019m not advocating that\u2026 I don\u2019t think my example is \u201cstructurally false.\u201d The use-case is irrelevant, it doesn\u2019t say anywhere in the ERC-20 spec \u201cyou can blacklist accounts from using transfers, but only if they are criminals.\u201d It doesn\u2019t mention it at all. But the consensus is clearly that USDC is still an ERC-20 token, ergo my point is it\u2019s easy to extrapolate that a transfer-restricted ERC-721 would still be considered an ERC-721. That\u2019s all I\u2019m saying.     TimDaub:  To me, having ERC4973 get adoption can be the start of a new chapter. So far, we\u2019ve implicitly assumed that all blockchain properties must have tracking and transfer functionality according to the societal norm that is \u201cprivate property.\u201d \u2026   That\u2019s all fine! Given that one of your arguments for why this needs to be an EIP for an interface definition, rather than metadata, is so smart contracts can detect that they are Soulbound NFTs, I\u2019d strongly recommend at least having one example of where that functionality would actually be useful to developers in a smart contract. Standards are generally meant to standardize already well-understood functionality, not hypothesize and hope it inspires a use-case.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.599074288806431
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "9",
                    "likes": "1",
                    "time": "12/04/2022-09:23:16",
                    "content": "Last night, @ligi referenced the standards document on Twitter and made a deontic statement for why soulbound items should be \u201cfriendly transferrable\u201d between accounts of the same soul/identity: Nitter: ligi \u262e\ufe0f\ud83c\udf0d\ud83d\udeb2\ud83c\udf33\ud83c\udf75\ud83c\udfb6\ud83c\udf36\ud83d\udd25\ud83d\udd96 (@mr_ligi): \"Interesting proposal by @timdaub: https://github.com/ethereum/EIPs/pull/4973 That said I do not think soul-bound tokens/badges/.. should be bound to a single key (by just removing the transfer functionality) - but it needs to be bound to a identity/soul that still has the ability to rotate keys.\" | nitter In this post, I want to address why I think this requirement is unnecessary. I. Soulbound items don\u2019t mandate single key locking. Keys can be rotated: If a user is unsure about the permanence of their EOA account, but from an app it is suggested that a soulbound item could be sent there, the user could e.g. create a Gnosis Safe multisignature contract with an X out of Y signature scheme. In that way, although keys out of X might go missing, leak or getting revoked, still the user\u2019s soulbound items would still be available at the multisignature contract albeit with new keys controlling the vault. II. In addition, when EOA or even contract access is lost, the soulbound token specification doesn\u2019t make normative statements about whether those tokens ought forever to be lost or not. Rather, since a soulbound item\u2019s recovery is anyways not automatable by a Solidity interface, the dapp originally issuing the items ought to take care of potential reissuance. If e.g. badges are sent to known users certifying their education credentials, I see no reason for a school to not issue the same badges yet again to another new account if it\u2019s clear that the user lost access to the old account. Any other process could be possible too. The point is that it is outside of the specification\u2019s scope to handle administrative migration. To implement (II.), however, it could be useful giving an issuer the option to revoke old credentials on e.g. lost accounts. Specifically to avoid duplication. Then, on a philosophical level, I want to address the criticism that Ethereum isn\u2019t ready because we can\u2019t differentiate identities or souls yet, so how can we have \u201csoulbound items.\u201d For this, it is critical to understand the name origin of the term and how WoW\u2019s ontology applies to that of Ethereum. Within a logical statement, one could say that Identity to WoW account as is EOA Account to WoW Character. Albeit it potentially being confusing given the ambiguous use of similar terminology, I want to stress again that soulbound items within a WoW character\u2019s bags were not transferrable to other characters of the same account/player. Likewise, if a player lost access to a character (e.g. by deleting it through a fat finger), they also subsequently lost access to all soulbound items and would only regain access to them by having the character being recreated by e.g. a gamemaster from Blizzard. For the scope of this specification, I want to say that it is very narrow, deliberately opinionated, and directed towards replicating that dynamic. I understand that with e.g. increased sophistication \u201cbetter\u201d standards could be built - but that is not the goal! Instead, the goal is to define the minimal interface for soulbound tokens as a new property class and ownership experience and see what develops from there. If there are other, \u201cbetter\u201d, soulbound property standards that e.g. allow friendly, transfers between accounts of the same soul - that\u2019s fine, but it was never the goal of this specification. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.283100048100048
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "10",
                    "likes": "2",
                    "time": "13/04/2022-12:40:27",
                    "content": "I see your points - but I would really not call it SoulBound then - it\u2019s more AccountBound. A human can only have one Soul - but multiple Accounts. Sure you can mitigate by expecting users to use a smart-contract wallet to be able to rotate keys - but current reality is most users don\u2019t (also see Vitaliks post: The roads not taken )  We also (very wrongly!) expected most users to quickly migrate to smart contract wallets  Also you can push the responsibility for reIssuance on the issuer - but IMHO this is one the crucial problems in this area. And really do not get me wrong - I did not want to belittle your effort - I just wanted to emphasize that IMHO we need good identity solutions as a building block to build that proper. Still sad that there is not yet a strong solution like Idena on Ethereum. Really hope this changes with Ethereum scaling - currently it is just to expensive to build it on Ethereum. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.561076604554866
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "11",
                    "likes": "0",
                    "time": "13/04/2022-17:19:32",
                    "content": "    ligi:  I see your points - but I would really not call it SoulBound then - it\u2019s more AccountBound.   It makes sense to discuss a name change away from \u201cSoulbound.\u201d On one side, it\u2019s a shame as the community is interested in \u201cSoulbound\u201d tokens since it\u2019s a great marketing name. On the other side, I can see that it may create confusion when related to the actual functionality. In WoW, I guess making an item soulbound was OK as the context was a player playing a character and hence the item binding to the character\u2019s soul, despite a human being able to have multiple characters but just one soul.     ligi:  Also you can push the responsibility for reIssuance on the issuer - but IMHO this is one the crucial problems in this area. And really do not get me wrong - I did not want to belittle your effort - I just wanted to emphasize that IMHO we need good identity solutions as a building block to build that proper. Still sad that there is not yet a strong solution like Idena on Ethereum. Really hope this changes with Ethereum scaling - currently it is just to expensive to build it on Ethereum.   From a practical standpoint, I can\u2019t entirely agree here. Yes, it\u2019s cool working towards actual soulbound tokens that work with sophisticated identity solutions. But anyone always using the \u201cfirst adoption then standard\u201d meme, I\u2019d like to invite you to increase the horizon of experience. For ERC721, when I first saw the standard around its creation, relatively speaking to today\u2019s adoption, it didn\u2019t have adoption. There were times when it had so little adoption that I thought about just ignoring or doing my standard. I interpret the situation such that the Ethereum community came up with a rather decent document that everyone could agree on. Then, the community built the apps (and then, just recently, the actual adoption came). The document (eip-721.md) was a precursor to mass adoption, not vice versa. But I\u2019m probably alone with that opinion. But for me, defining this minimal standard has been interesting as I see it rather as a very big sales filter. I\u2019ve been contacted by clients wanting to build towards it. People are looking at this document, and they are commenting. So it\u2019s useful that it exists and that people discuss it. Whether or not it will become a successful standard, only time can tell. But to me, just throwing it out there and, e.g., \u201csoul\u201d binding to an address, can be an interesting use case - maybe not the one that everybody here\u2019s thinking about. Gladly we don\u2019t have a limit on storage space on the EIP document repository. And we won\u2019t run out of natural numbers either lol. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.700797872340425
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "12",
                    "likes": "0",
                    "time": "18/04/2022-10:11:58",
                    "content": "Updates from 2022-04-18:  Added section on revocations. Changed name to \u201cAccount-bound tokens.\u201d Added section on exception handling in cases of key loss.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "13",
                    "likes": "1",
                    "time": "23/04/2022-13:51:54",
                    "content": "Presented the draft at OGCouncil in Amsterdam at the NFT Standards WG session: https://mobile.twitter.com/vrde/status/1517851423463157761  image1920\u00d71440 189 KB  ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/9/96534a0b65edfed24cb31642257d266c89198ffb.jpeg"
                    ],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Shymaa-Arafat",
                    "index": "14",
                    "likes": "0",
                    "time": "24/04/2022-04:56:15",
                    "content": "    TimDaub:  If e.g. badges are sent to known users certifying their education credentials, I see no reason for a school to not issue the same badges yet again to another new account if it\u2019s clear that the user lost access to the old account. Any other process could be possible too. The point is that it is outside of the specification\u2019s scope to handle administrative migration   I was wondering a few days ago, what if a say malicious person persuaded a succeeding user to sell him/her the success NFT badge? I mean without the administrative educational authority interference: Is it already there in ERC-721 that users who possess badge NFTs can\u2019t resell them? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.113119834710744
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "15",
                    "likes": "1",
                    "time": "26/04/2022-14:22:20",
                    "content": "More feedback from NFT Standards Working Group on Telegram. Copying here for visibility and posterity:  Simon / dievardump: I don\u2019t understand the idea of boundTo / Bond If the contract supports the right interface ownerOf is more than enough to know to which person it is bound, since there won\u2019t be any transfer possible You\u2019re complicating Wallets implementation with this. I would suggest to only have the supportsInterface(NonTransferableNFT) Which would tell wallets to hide all transfer / approval stuff but still be able to use the same suite of tools for all the rest (ownerOf)   iain nash: Additionally, if you want to have provenance for migrated wallets an cross signed admin transfer makes sense. Reverting on transfer to accomplish this or not implying those functions makes sense to me.   Tim: We changed from Bound/boundTo to Transfer/ownerOf recently. Maybe you had an outdated version of the github PR open? A discussion can be found on Ethmagicians.   Tim: In ERC721, unfortunately transfer + approves are combined with ownerOf in one interface, so since we\u2019re not implementing that interface, it\u2019s necessary to re-add parts of it (ownerOf and event Transfer)   Tim: If implementers of 4973 want to implement admin migration transfer they can choose to do that. The standard won\u2019t recommend any norm in that scope. But, account-bound tokens are account-bound , so in some cases migration may not be wanted. Implementers can do as they please. Since, however, revocation is possible, I\u2019d assume that implementers would prefer to migrate by revoking an \u201cold\u201d credential from an old account and minting a new one to a new account as it creates a provenance structure too. But IMO both options can make sense and I wouldn\u2019t want to judge what is better. But actually to formally integrate the usecase of admin migration, I think I\u2019d be helpful to outline it in the spec, where e.g. both \u201cfrom\u201d and \u201cto\u201d are non-zero addresses   Tim: Generally, if implementers prefer to revert on transfer, they should probably use erc721 and others as they fit better. E.g. for banlists  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.564258658008658
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "16",
                    "likes": "0",
                    "time": "26/04/2022-14:31:22",
                    "content": "Feedback from the partialcommonownership.com Discord:  @will-holley [responding to @timdaub posting link to ERC4973 spec]: I read through your spec. How are you thinking about transferability in the context of wallet compromise / security?   @timdaub see: EIPs/eip-4973.md at 15527ff7d5f847cb8819e70e9043a5de8b2f869b \u00b7 ethereum/EIPs \u00b7 GitHub Actually Iain from Zora told me he\u2019s gonna complain about this section on Eth magicians and that e.g. admin migration should be considered in the provenance record of emitting event Transfers. So that section will expand   @will-holley: That makes sense to me as well; if the EIP is agnostic to transfer-implantations, the transfer even should be removed.   @timdaub: 1. I think it makes sense having the event Transfer in there as from what I understand it is the primary source of clients for crawling provenance e.g. etherscan, thegraph. Rather, I think it\u2019s a matter of carefully defining how actions map to parameters in the event Transfer e.g. what equates \u201cminting\u201d, \u201crevocation\u201d, \u201cadmin migration\u201d   @will-holley: Perhaps a different name then transfer. event Attest   @timdaub: Yeah we had event Bond before with the same inputs as event Transfer . But e.g. from the NFT standards working group & on Eth magicians I\u2019ve heard people favoring event Transfer actually  ",
                    "links": [
                        "https://discord.gg/yJjAeMVvqK",
                        "https://github.com/ethereum/EIPs/blob/15527ff7d5f847cb8819e70e9043a5de8b2f869b/EIPS/eip-4973.md#exception-handling"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-holley",
                    "index": "17",
                    "likes": "1",
                    "time": "26/04/2022-14:56:42",
                    "content": "Thanks for directing me to the thread, @TimDaub. Elaborating on Tim\u2019s post above, the Transfer event should be renamed to Attest because the implementation is transfer-agnostic by default and account-bound tokens are granted based on the attestation of issuing contract.  By definition, attestations cannot be transferred, because they are simply proofs of state, rather than state itself.  They can, however, be revoked and re-issued, which I believe more accurately captures the intent of event Transfer. As an aside, this account-binding is most effective when this issuing contract is administrated by a third-party (rather than the first party who could arbitrarily transfer their tokens via burn/mint/burn).  As such, this third-party acts as the arbiter of truth, attesting to the network what (ideally) the network has incentivized to be a true (rather than false) positive attestation.  As long as the incentive to attest true negatives holds, Attest rather than Transfer is a more accurate description. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.285353535353535
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ra-phael",
                    "index": "18",
                    "likes": "1",
                    "time": "26/04/2022-16:05:31",
                    "content": "As I mentioned during the OG Council, I also share the view that a \u201cTransfer\u201d event sounds confusing to me in a standard that is all about non-transferable tokens. Instead there could be Attest and Revoke events, or even more neutral Mint and Burn which are familiar terms for tokens.  As an aside, this account-binding is most effective when this issuing contract is administrated by a third-party (rather than the first party who could arbitrarily transfer their tokens via burn/mint/burn). As such, this third-party acts as the arbiter of truth, attesting to the network what (ideally) the network has incentivized to be a true (rather than false) positive attestation.  I agree that\u2019s probably most use cases but I think we should also keep in mind that self-attestations could be possible where users would call a function and get a non-transferable token if they meet some conditions defined in the smart contract. In that case there\u2019s no third-party, the blockchain acts as the arbiter of truth. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.130174512987013
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "19",
                    "likes": "2",
                    "time": "04/05/2022-12:59:44",
                    "content": "It\u2019s becoming clearer that the concept of event Transfer may not be fully capable of depicting what we\u2019re looking for when creating an ACT ontology. E.g., sleepminting attacks implemented with EIP-721 contracts have made it clear that many developers and users had false assumptions about what an ERC Solidity interface can achieve. To reiterate, despite event Transfer(from, to , id) suggesting that, e.g., a token with an id was sent from an account to another account, it\u2019s an implementer\u2019s choice to make sure that upon emitting Transfer, from==msg.sender. But really, the implementer is free to set any argument of event Transfer to their liking. Sleepminting attacks exploit this fragile and implementation-scoped assumption by deliberately setting false addresses in from and to. For me, to stay practical, the question within this dilemma is what we can do to create an authenticated ontology of tokens where it\u2019s not necessary to have a human individually review every interface compliant contract - as implementation behavior can technically always diverge. For E.g. it\u2019s important that a website like Etherscan shows authenticated data. Instead of asking implementers to honestly set from/=msg.sender (or to) in all implementations, I think it\u2019s less fragile and safer to remove the from key from the event and instead ask indexers to substitute it with the from key of the transaction that is authenticated through Ethereum\u2019s PoW algorithm (miners check the transaction\u2019s signature - so we can be sure the from field is authenticated). Then, in a further attempt to improve the event Transfer concept for creating on-chain provenance, I second the argument of @will-holley and others that its naming is imprecise. I agree that event Attest and event Revoke better identify the user\u2019s actions. However, I also liked event Transfer's convention of allowing to depict e.g., minting from=0x0 and burning to=0x0. Since, however, as we\u2019ve discussed above, we must anyways not use the from field within event Transfer to suggest it contains authenticated information, I now agree with using event Attest and event Revoke just with two parameters: id and to. It\u2019s because what this allows us to build is an indexer that uses authenticated information while still being able to index based on to and id. Hence, my suggestion is to replace event Transfer(from, to, id) with:   event Attest(to, id) where the from field is taken from the transaction\u2019s from; and  event Revoke(to, id) where the from field is taken from the transaction\u2019s from; and  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.830246913580247
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "20",
                    "likes": "0",
                    "time": "05/05/2022-16:04:35",
                    "content": "Update 2022-05-05:  Replaced event Transfer with Attest/Revoke logic Addressed most PR feedback  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "21",
                    "likes": "2",
                    "time": "06/05/2022-08:07:10",
                    "content": "This is probably discussed above (I haven\u2019t read the whole discussion), but I\u2019m pretty strongly against this concept.  Users MUST be able and encouraged to rotate their keys regularly, and especially when compromised.  I would be less bothered by this specification if it explicitly prevented EOAs from owning assets, and everything had to be owned by a wallet of some kind.  However, that prevents people from upgrading/migrating wallets when there is a problem with the wallet or a better version comes out, which is nearly just as bad of a problem. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.715277777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "22",
                    "likes": "3",
                    "time": "09/05/2022-12:23:53",
                    "content": "@MicahZoltu, thanks for your feedback. By answering you, my goal is to integrate your objection to the current form of the document as close as possible.     MicahZoltu:  Users MUST be able and encouraged to rotate their keys regularly, and especially when compromised.   I first want to say that the current iteration of the specification does indeed foresee users\u2019 keys getting compromised, as the \u201cException handling\u201d section details:  Given the non-transferable between accounts property of ABTs, if a user\u2019s keys to an account or a contract get compromised or rotated, a user may lose the ability to associate themselves with the token. In some cases, this can be the desired effect. Therefore, it is suggested to implement re-issuance and potential revocation processes on the issuer side to enable recourse when it is not. This document is deliberately abstaining from offering a standardized form of exception handling in cases where user keys are compromised or rotated. In cases where implementers want to make account-bound tokens sharable among different accounts, e.g., to avoid losing access when keys get compromised, we suggest issuing the account-bound token towards a contract\u2019s account that implements a multi-signature functionality.  I believe, however, that your objection originates in the idea that the specification makes no normative statements (e.g., \u201cMUST\u201d) on whether recoverability MUST be implemented. Rather, it\u2019s outlined as optionality, e.g., implementers can decide. To address your comment, first, I want to be skeptical about your observation that everybody should always write contracts that support frequent key rotation. I\u2019m bringing this up as I, at large, observe the Ethereum community being non-compliant with this norm by, e.g., coupling many valuable core functionalities directly to accounts. A recent popular example is Optimism\u2019s airdrop attempt to 250k historically active accounts. In this case, albeit according to your statement, frequently rotating keys MUST be allowed and encouraged; the OptimismPBC, an organization closely associated with figureheads of the EF, has decided to account-bound the airdrop rewards. On an anecdotal level, I\u2019m also sad to say that I\u2019ve lost countless chances to potential airdrop rewards. Thousands of dollars are stored on accounts I\u2019ve lost access to, all because members of the Ethereum community have NOT complied with your normative statement. However, on the other hand, by liquifying stakes as staking tokens, e.g., in protocols like Uniswap, what\u2019s important to highlight positively, is that many DeFi applications must be aware of the problems that account binding has. E.g., naively implemented, a contract could assume a lender\u2019s account and their capacity to prove key-control via a signature to re-access their collateral. However, most protocols, at least from what I understand, have chosen to fungifying liabilities in subtokens. So, e.g., when a user lends tokens to Uniswap, they get a stake token back that allows them to redeem their collateral from any other account (e.g., users can transfer stake tokens). Implementing staking with special staking tokens allows collateral to be account-agnostic and encourages simplified key rotation. What\u2019s clear, however, is that albeit the Ethereum community has aspirational goals towards non-account-binding, those ideals are far from being norms. The most naive way to comply with your requirement would be to allow users to transfer ABTs between accounts. Another one would be, as you suggested, only giving contracts the ability to receive account-bound tokens. However, I believe this would defeat the standard\u2019s purpose as users would probably be better off using, e.g. EIP721 or EIP1155 tokens. Unless you see a productive way of framing EIP4973 as account-bound tokens with a \u201cfriendly\u201d transfer function, I\u2019d like to ignore these options to integrate your feedback as I think it\u2019d lead to staleness or abandonment. Instead, I was wondering if you feel like your requirement is fulfilled by adding the following to the specification:  In the \u201cSpecification\u201d section, we add a normative statement that, using event Attest and event Revoke, implementers MUST provide an application-specific migration mechanism to encourage key rotation. And additionally, in the \u201cException Handling\u201d section, we reproduce a shorter version of our argument here on the forum to rationalize the decision.  Would this address your requirement? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.450609996064541
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "23",
                    "likes": "2",
                    "time": "09/05/2022-13:39:15",
                    "content": "@MicahZoltu, with some more time to think, here\u2019s an additional mechanism that represents a compromise between binding tokens to accounts while encouraging key rotation in, e.g., case of key loss/compromise. In my last post, I categorically excluded the option that\u2019d allow an ABT holder to \u201cfriendly transfer,\u201d as I said it\u2019d mean users should rather use EIP-721 or EIP-1155 tokens. I then suggested adding a normative statement about ABT needing to be transferrable in the case of key compromise but that the actual behavior should be left to the implementer. With this post, I want to outline an additional possibility that talks about implementing \u201cfriendly transfers\u201d in a particular way, namely exclusively with the Attestation issuer\u2019s consent. E.g., permissive \u201cfriendly transfers\u201d implemented in ABTs would mean that implementers would be better off by implementing, e.g., EIP 721 or 1155. A friendly transfer that EIP-4973 could achieve is one where the original Attestor of an event Attest has to accept an Attestation receiver\u2019s \u201cfriendly transfer\u201d request. E.g., say we have a university issuing EIP-4973 tokens to students - but we want to continue to encourage students to rotate keys for safety frequently. However, we also don\u2019t want students to sell their credentials - as the university; we want a degree of control and transparency over which students have our issued credentials. In that case, a function where both the signature of the Attestation issuer (the University) and the Attestation receiver (the student) is necessary to execute a \u201cfriendly transfer\u201d successfully could be an appropriate process. E.g., as a university, we\u2019d ask students to submit proof to a process that sufficiently motivates a \u201cfriendly transfer\u201d of their credentials to a new account. Upon proof review, as the university, once the student starts the key rotation process, we support the transfer process through the university signature. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.731060606060606
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rsquare",
                    "index": "24",
                    "likes": "3",
                    "time": "09/05/2022-13:39:36",
                    "content": "Moving some of the active conversations Tim and I have been having to here so that broader community can engage as well. The topic of consent management & reassignability hasn\u2019t yet detailed here, albeit very important. I tend to see ABTs through the lens of the following 4 vectors  Issuance - who issues the ABT Attestation - how the ABT came into existence Revocability - being able to revoke/burn an ABT Reassignability - reassigning the ABT to another account  An extreme case to account for is someone minting an ABT with sensitive / compromising metadata and then sending it to someone without having any ability to get rid of it. With the flexibility or minting an ABT to any address and having Revocability via the _burn(), this is significantly derisked. I\u2019m interested in collecting more input on actively accounting for consent when it comes to Issuance of ABTs. Another extreme case to account for is account loss or moving ABTs across accounts/wallets but with the same person. Since there is potential to capture identity & reputation within ABTs, there\u2019s a need to extend functions around reassignability of the token. Note that, we need to distinguish between \u201ctransferability\u201d and \u201creassignability\u201d. The former is initiated by the account owner itself while the latter doesn\u2019t make that strict assumption and can be proxied to another account Reassignability (and Attestation) needs to defer the details of how it can be managed and under what conditions to the implementor. The implementor can then deploy governance measures in order to execute the reassignment. I propose to consider the inclusion of _reassign(), perhaps to a pre-assigned account address, included during the mint and maybe captured as a separate mapping. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.665104166666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "25",
                    "likes": "5",
                    "time": "10/05/2022-06:04:44",
                    "content": "    TimDaub:  Given the non-transferable between accounts property of ABTs, if a user\u2019s keys to an account or a contract get compromised or rotated, a user may lose the ability to associate themselves with the token. In some cases, this can be the desired effect. Therefore, it is suggested to implement re-issuance and potential revocation processes on the issuer side to enable recourse when it is not.   This is basically saying, \u201cany system that uses this should be censorable\u201d, and I\u2019m not sure which is worse, censoring users or compromising user security.     TimDaub:  Ethereum community being non-compliant with this norm by, e.g., coupling many valuable core functionalities directly to accounts.   Yes, it is a huge problem in Ethereum that we should try extremely hard to fight against, rather than supporting this behavior.  While I\u2019m against preventing people from doing things that are (IMO) bad, I feel pretty strongly that we shouldn\u2019t reinforce such behavior.  Pretty much every security expert will tell you the exact same thing, which is keys MUST be rotatable.  Many developers ignore the advice of all security experts and build systems that don\u2019t support key rotation, but this doesn\u2019t mean we should encourage that behavior.  Proposed Solution IIUC, the goal of soulbound tokens is to make it so a token can\u2019t be separated from the rest of the activities of a particular actor.  One could achieve this by binding tokens to something like an ENS name, rather than an account.  Imagine some NFT is owned by alice.eth.  If the owner of alice.eth changes, then the owner of the NFT changes.  If Alice has 10 NFTs, she cannot separate them as they are all owned by the owner of alice.eth, they can never be transferred to bob.eth and since alice.eth will always have a single owner, they can never be owned by multiple people or distributed to multiple people. With a scheme like this, Alice can use an EOA or a contract wallet, and roll her keys, and change her wallet provider.  Each time, she merely needs to change the ownership of alice.eth and all of her soulbound tokens will follow her. While Alice could sell alice.eth to Bob, she would functionally have to sell her entire identity to Bob.  She cannot sell just a small piece of it.  Similarly, if Bob wants those soulbound tokens he would have to fully take on the identity of Alice.  He could not merge alice.eth and bob.eth identities. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.129357993197279
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rsquare",
                    "index": "26",
                    "likes": "1",
                    "time": "10/05/2022-15:17:50",
                    "content": "Binding to ENS name has its own tradeoffs. The ownership of ENS can expire & change while the tokens are still bound to it and without active awareness of the owner - I feel that this approach defeats the whole purpose of binding tokens to an actor in general. Although it addresses some risks you mention while also presenting a different set of opportunities, it seems to introduce a whole new set of tradeoffs. There\u2019s no reason why another spec for ENS-bound tokens couldn\u2019t live in parallel to this approach. Although, the approach I proposed above about this EIP supporting reassign-ability, wouldn\u2019t that solve the problem of key rotation in part? Keen to hear your thoughts on that. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.599747474747475
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "27",
                    "likes": "0",
                    "time": "10/05/2022-15:39:31",
                    "content": "There is no way to actually bind tokens to an off-chain actor, you can only do something that proxies for it.  I think the ENS binding approach solves the problem in an ideal way in the vast majority of cases, and the failure mode of \u201cforgot to renew my domain and didn\u2019t pre-register it for 100 years\u201d I think is less common and less bad than \u201cI need to upgrade my contract wallet but can\u2019t\u201d or \u201cthe system decided to censor me\u201d.     rsquare:  Although, the approach I proposed above about this EIP supporting reassign-ability, wouldn\u2019t that solve the problem of key rotation in part? Keen to hear your thoughts on that.   I\u2019m pretty strongly against this because it introduces a vector for censorship into the system, and I\u2019m a huge proponent of building censorship resistance into all systems on Ethereum (especially standards). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.182291666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/flyjgh",
                    "index": "28",
                    "likes": "4",
                    "time": "13/05/2022-14:19:54",
                    "content": "in regards to the recently released paper by Puja, Vitalik and Glen Decentralized Society: Finding Web3's Soul, I was wondering if the name SBT would not be better than ABT? The Souls concept described in the paper makes a lot of sense imo. There\u2019s an argument to be made that it\u2019s probably easier to market by being a little bit more abstract. I think that sufficient adoption/marketing is a requirement for it to work at scale (enough to convince protocols to integrate this new standard and make it wildely adopted). It also conveys a broader idea of which entities can issue these tokens (as Souls is more abstract than accounts), and can make it easier to think about novel applications with it. Also, this is just my opinion, but I think SBT sounds better, which is not so important but still. An oblivious downside to this is ofc obfuscation as the name is not as clear as ABT, but we can make the same remark about the name NFT. I talked to @TimDaub about this and he didn\u2019t seemed opposed to this idea : E.g. in reference to vitalik et al.'s paper where they specifically say that souls are e.g. represented as \"accounts\" we could get away with calling EIP-4973 \"soulbound\" tokens I would be happy to hear your opinions on this. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.249562937062937
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "29",
                    "likes": "0",
                    "time": "13/05/2022-15:15:47",
                    "content": "Prompted by @vitalikbuterin et al.'s fantastic paper, with the Otterspace team we hacked together an EIP-4973 contract and shipped a minting interface.  Blog post 1: The Otters go Soulbound \u2014 Otterspace  Blog post 2: Shipping EIP-4973's Soulbound tokens to test net  Demo app: https://badges.otterspace.xyz/  Front end code: GitHub - otterspace-xyz/badges: EIP-4973 contributor badges for DAO. A protocol implementing Account Bound Tokens / Soul Bound Tokens or Non-Transferable NFTs.  Back end code: GitHub - otterspace-xyz/otterspace-contracts: The Solidity contracts for EIP-4973 contributor badges for DAO. A protocol implementing Account Bound Tokens / Soul Bound Tokens or Non-Transferable NFTs.  Otterspace website: https://www.otterspace.xyz/   ",
                    "links": [
                        "https://otterspace.mirror.xyz/Cec_bTSsLgcohuaV5dkOJTbaYuFB6tF8jhxzN_30k1A",
                        "https://timdaubenschuetz.substack.com/p/shipping-eip-4973s-soulbound-tokens?s=w",
                        "https://badges.otterspace.xyz/",
                        "https://github.com/otterspace-xyz/badges",
                        "https://github.com/otterspace-xyz/otterspace-contracts",
                        "https://www.otterspace.xyz/"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/flyjgh",
                    "index": "30",
                    "likes": "3",
                    "time": "13/05/2022-16:08:11",
                    "content": "there are some discussions right now about cross-rollup NFT wrappers, that complies with the ethereum vision of moving to L2 for general computation. But if the ABT (or SBT) is non-transferable, doesn\u2019t it prevent \u201cholders\u201d from moving it to L2\u2019s, and if that\u2019s the case, doesn\u2019t it restrict the use-cases for it quite a lot ? Schools or conventions for example won\u2019t want to pay L1 gas to issue these tokens, but if they use a particular L2, there\u2019s a risk that the ABTs distribution gets fragmented over different L2, making it harder to design some of the use-cases highlighted in the paper. It would be good to think about a way to make it available to any L2. @TimDaub suggested the option of having an app that allows you to re-attest a L1 token to L2. (or from L2 to L2) Another way would be to have some kind of message-passing standard between L2s that would allow for (among other things) checking the existence + propreties (like ownerOf) of an ABT/SBT token on a different chain. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.898809523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "31",
                    "likes": "1",
                    "time": "16/05/2022-08:53:28",
                    "content": "Oliver Klingefjord on the RadicalExchange Discord wrote another original take which I thought was important to document here [in response to reading @vitalikbuterin et al.'s paper on SBTs]:  I enjoyed the paper, but don\u2019t get why soulbound tokens (essentially public attestations) need to be tokens at all. You could just have them be self-verified datapoints signed by the receiver and the senders private key, and host it on IPFS. If you imagine these SBTs to represent something fairly \u201cbig\u201d (like attendence to a uni course), as opposed to a positive compliment, that makes sense. But I could see an interesting future of reputation systems where everyone can attest to each other in all sorts of things, and systems could aggregate these attestations in complex ways using ML for multi-dimensional reputation I guess if you have a blockchain hammer, everything looks like a token nail  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.948863636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "32",
                    "likes": "1",
                    "time": "16/05/2022-12:28:09",
                    "content": "    TimDaub:  To reiterate, despite event Transfer(from, to , id) suggesting that, e.g., a token with an id was sent from an account to another account, it\u2019s an implementer\u2019s choice to make sure that upon emitting Transfer, from==msg.sender. But really, the implementer is free to set any argument of event Transfer to their liking.   I opened a separate topic over at ethresearch about this: Authentic Event Logs - Execution Layer Research - Ethereum Research ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "33",
                    "likes": "4",
                    "time": "18/05/2022-10:07:00",
                    "content": "To expand on the idea of using ENS as the user\u2019s \u201csoul\u201d, one can further generalize this to allow any NFT to be a \u201csoul\u201d (ENS names are just ERC-721 tokens).  Essentially the idea would be that a soulbound token is one that is bound to an NFT.  Whoever owns the NFT, also owns all of the attached soulbound tokens. In my mind, the idea with soulbound tokens is that a collection of them cannot be merged or separated, and to achieve that you really just need to bind them to something.  NFTs are, IMO, an ideal \u201csoul\u201d for this use. As a fun thought experiment, this means that a Bored Ape or Crypto Kitty would be your soul, and all of your POAPs and whatnot could be bound to that soul. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rsquare",
                    "index": "34",
                    "likes": "2",
                    "time": "18/05/2022-10:30:31",
                    "content": "That is an interesting idea, although it plays on different assumptions & user needs i.e., binding a collection of NFTs to another non-transferable token. I quite like idea in general but I do think it solves a different problem set than this EIP, while also enabling new possibilities. I think it should be a different EIP  altogether, being mindful about bloating the scope of this too broad. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.534902597402597
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "35",
                    "likes": "0",
                    "time": "18/05/2022-11:10:02",
                    "content": "    rsquare:  I do think it solves a different problem set than this EIP   What problem do you believe this EIP is solving? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ra-phael",
                    "index": "36",
                    "likes": "1",
                    "time": "18/05/2022-17:43:10",
                    "content": "Binding to an NFT / ENS name is a good way to solve for key rotation and might be applicable to some use cases but doesn\u2019t work when you want stricter non-transferability.     MicahZoltu:  While Alice could sell alice.eth to Bob, she would functionally have to sell her entire identity to Bob. She cannot sell just a small piece of it. Similarly, if Bob wants those soulbound tokens he would have to fully take on the identity of Alice. He could not merge alice.eth and bob.eth identities.   This works well if we\u2019re talking about identities like \u201cnick.eth\u201d that accumulated a lot of reputation over time. The more reputation you build the less inclined you are to sell your ENS. But let\u2019s say you want access to an exclusive club where membership is very valuable, represented by a specific Soulbound token and must be earned through a 6 month training program (not bought). I could create a fresh ENS name, get that SBT and sell that ENS to you, effectively selling that membership and tarnishing what it means to be a member. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.868055555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "37",
                    "likes": "0",
                    "time": "19/05/2022-08:29:15",
                    "content": "    ra-phael:  But let\u2019s say you want access to an exclusive club where membership is very valuable, represented by a specific Soulbound token and must be earned through a 6 month training program (not bought). I could create a fresh ENS name, get that SBT and sell that ENS to you, effectively selling that membership and tarnishing what it means to be a member.   The same can be done with contract wallets, private keys, or even real life identities.  In the end, you have to pick some thing that is the \u201csoul\u201d, and bind assets to it.  There is nothing you can do to stop the sale of that soul though.  I think it is better to acknowledge this and design around it, rather than trying to pretend it doesn\u2019t exist. Even if you choose to use private keys, one could still develop a system where an actor \u201cfarms\u201d reputation (or whatever) on that private key without knowing the key and then sells the underlying key later.  (e.g., you could setup something that runs in AWS in a secure enclave where you can prove that no one knows the key except the final buyer). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.647058823529411
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/karmacoma",
                    "index": "38",
                    "likes": "5",
                    "time": "19/05/2022-23:06:32",
                    "content": " Hence, my suggestion is to replace event Transfer(from, to, id) with:   event Attest(to, id) where the from field is taken from the transaction\u2019s from; and  event Revoke(to, id) where the from field is taken from the transaction\u2019s from; and   Maybe not a blocker but something to consider: this conflicts with GSN-style transactions (see EIP-2771: Secure Protocol for Native Meta Transactions), where the from field of the transaction is indeed authenticated but meaningless (because it is a relayer, not the original user). Additionally, I don\u2019t think new events are needed since they don\u2019t directly contribute to the primary goal of this EIP, defining non-transferrable tokens. Improving the traceability of from is a separate issue that does not need to be conflated with this EIP in my opinion. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.759469696969697
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "39",
                    "likes": "3",
                    "time": "21/05/2022-15:30:43",
                    "content": "I think there might be some semantic ambiguity in this thread that might be creating some artificial friction. Namely, I think some people treat the goal as non-transferability (a token cannot move from entity A to entity B in any form). In contrast, others treat the goal as non-separability (a token cannot move separately from Object X, whether the object is an entity or another token). Non-transferability seems only to be (weakly) possible when bounding directly to an account, but with the tradeoffs of requiring a failsafe transfer mechanism to allow for key management. Non-separability allows for easier underlying account management but with the tradeoff of allowing for easier transferability that would require out-of-protocol social coordination to prevent. If I\u2019m reading the room correctly it seems like the prevailing opinion here is that non-separability answers the bulk of the motivation for the initial proposal - so it might be useful to disambiguate and explicitly agree that we\u2019re pursuing non-separability instead of non-transferability for the sake of making progress?  As long as people are clear about what non-separable tokens are and what they are not I think most use-cases will be met by this design and the ability to bind to things like ENS addresses. If later on we see there\u2019s still an unmet need for strict non-transferability, we\u2019ll design a separate EIP answering this requirement specifically (which as this thread has shown is a much harder problem than might appear on the surface). Edit: One point about the ownerOf signature if we want to go the non-separable route is that specing the signature to return address means every ownership check will have to recursively resolve to the current owning address which can get pretty gas-expensive: imagine if I want to check if tomcohen.eth has several ABTs - each ABT will have to resolve who owns tomcohen.eth and return it to me instead of just verifying tomcohen.eth is the owner and me checking what address owns tomcohen.eth (or if tomcohen.eth owns a government-ID ABT and that ID has an ABT itself for my driving licence and the recursion there). Are we sure we want to keep the signature as is? Do we have a more flexible signature we can use instead? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.4259259259259265
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "40",
                    "likes": "0",
                    "time": "22/05/2022-05:08:53",
                    "content": "If you want soul binding to NFTs (e.g., ERC-721), then you\u2019ll need to adjust all of the signatures to indicate the ERC-721 token that is the soul.  This includes ownerOf as well as both of the events. Essentially, the binding is to a particular NFT, not to an address.  So when you ask who is the owner of soulbound token X, you get back a pointer to an ERC-721 NFT rather than an address.  You can then off-chain resolve that to a current owner if your application needs to do that, but if you are just trying to figure out the collection owned by alice.eth then you wouldn\u2019t need to resolve to an address at all (and in fact, alice.eth doesn\u2019t even need to have a resolver setup for this to work). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.208333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "41",
                    "likes": "0",
                    "time": "22/05/2022-11:38:04",
                    "content": "I tried my best to read the entire discussion above. I didn\u2019t see my particular concern addressed, but if it is, please point me to it. Nearly all of the examples above reference what I would call \u201cgood tokens\u201d: diplomas, certificates of attendance, licenses, etc. Things that people want to have. So, when an institution such as a university issues a diploma, I \u201cwant\u201d that token attached to me, and I fully understand why everyone involved, the institution, I myself, and any person to whom I show the token does not want it to be transferable. I understand all of that, and there\u2019s no need to explain. My concern is when some institutions almost immediately come to understand that they can issue un-desirable tokens into a person\u2019s wallet without asking that person. For example, the fact that I belong to \u201cThe Group Opposed to the Government\u201d who speaks out loudly against the institution. I, as the recipient, am left with nearly no recourses in this case. I can either (a) get a new wallet \u2013 very undesirable as it contains other tokens that I want \u2013 my diploma for example, (b) revoke (i.e. burn) the token which doesn\u2019t really solve the problem as the existence of the token in my wallet\u2019s history remains and the institution can choose to ignore the revocation, or (c) keep the token in my wallet and hope that being part of \u201cThe Group Opposed to the Government\u201d doesn\u2019t some day become a capital offense. In its rush of excitement, the above proposal seems to ignore the obvious and foreseeable downside of institutions being able to send a \u201ctag of ill repute\u201d to an unlucky recipient that cannot be wiped clean. So as to not allow you to underestimate the importance of this issue, I ask you to read and comment on this piece I wrote a few years ago. I think this issue is literally a matter of life and death.   Medium \u2013 4 Aug 17    Be Careful Little Brain What You Code When I was a kid, my mother used to send my brothers and me to vacation Bible school. Having children of my own, I\u2019m pretty certain she did\u2026  Reading time: 6 min read       I would appreciate your conscientious response. ",
                    "links": [
                        "https://tjayrush.medium.com/be-careful-little-brain-what-you-code-6ad4d5fb9d9b"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.534296536796537
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesLefrere",
                    "index": "42",
                    "likes": "0",
                    "time": "22/05/2022-15:23:44",
                    "content": "What a timely initiative, I\u2019m very glad to join the discussion here. Like many of you, I\u2019ve read the recent paper from Weyl et al with gusto, and believe that this standard will be transformative for Ethereum, in terms of social scaling, enabling new forms of ownership and markets, fixing existing applications (e.g. DeFi) such that they are fairer and safer, and so on. I think that this will take real-world experimentation with a very limited standard to see what works and what doesn\u2019t; it\u2019ll take time. It seems like there\u2019s still quite a lot of debate about the scope of the ownership/binding of these tokens, or other user-security concerns like loss of access. I think that highlights the value (A/S)BTs will have to users, but I agree with @TimDaub that this EIP should not consider this; i.e. don\u2019t try to over-solve more generic UX issues here. As @ligi mentioned, UX solutions like smart contract wallets do exist. Similarly, there are solutions for message-passing between Ethereum and L2s. If we leave revocability and reissuance up to the implementer, there are no new problems to solve here as I understand. Re: the name of the standard, I\u2019d invite @ligi and @TimDaub to reconsider SBTs over ABTs once more, with this in mind: the context of the effort is to empower human actors that use the network. To quote the DeSoc paper:  Our key primitive is accounts, or wallets, that hold publicly visible, non-transferable (but possibly revocable-by-the-issuer) tokens. We refer to the accounts as \u201cSouls\u201d and tokens held by the accounts as \u201cSoulbound Tokens\u201d (SBTs).  It\u2019s true that individuals can run multiple accounts (indeed, it\u2019s the reason why Sybil is a problem), but I don\u2019t think it helps to make that differentiation here. SybilBot Pro#2912 doesn\u2019t have a soul, but it has an account that can give and receive attestations. What\u2019s the difference? It\u2019s that we don\u2019t care about the accounts, because we can\u2019t verify them as having Souls in the context of an ecosystem of these tokens and the users that hold them.  Note there is no requirement for a Soul to be linked to a legal name, or for there to be any protocol-level attempt to ensure \u201cone Soul per human.\u201d A Soul could be a persistent pseudonym with a range of SBTs that cannot easily be linked.6 We also do not assume non-transferability of Souls across humans. Instead, we try to illustrate how these properties, where needed, can naturally emerge from the design itself.  I think Account-Bound, while technically true today, does not reflect the goal of the initiative. I won\u2019t die on the hill, but I think it\u2019s worth a good re-think. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.807116733840871
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "43",
                    "likes": "5",
                    "time": "23/05/2022-02:25:24",
                    "content": "    tjayrush:  My concern is when some institutions almost immediately come to understand that they can issue un-desirable tokens into a person\u2019s wallet without asking that person.   Someone can do this today, no need for a standard for that and a standard cannot prevent it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "44",
                    "likes": "2",
                    "time": "24/05/2022-09:44:31",
                    "content": "To expand @MicahZoltu\u2019s point above a bit for clarity - This discussion is for an ERC, meaning we\u2019re trying to define a standard way of accomplishing a goal in the context of existing capabilities. All the capabilities of doing anything described in the ERC already exist in Ethereum today, and the goal of this proposal is just to land on a shared way of building something to make it easier for developers that build or consume something. The reason no standard we can devise will ever, by definition, prevent the abusive case described is that no one forces anyone else to use the standard. If ERC-4973 will have some \u201creject\u201d (or preemptive \u201caccept\u201d) functionality - the malicious party (the government in this case) will simply create a non-standard token that doesn\u2019t have that functionality. They can do it irrespective of ERC-4973 ever finalising, regardless of how it will look like. I hope this clears things up.  Re: @JamesLefrere and Tim\u2019s points about finalising this standard for accounts only and having a separate ERC for NFT owners: I think it\u2019s a reasonable path forward to enable people to start building soulbound tokens faster and iterate - as long are we\u2019re explicitly comfortable with one token not being both account-boundable and token-boundable. Seems ok to me, since solving the global case in a clean way requires a much stronger definition of an \u201cobject\u201d on-chain than we have right now (where \u201cobject\u201d can be both an address and a token). Anyone thinks having a separate ERC for token-owners is not the way to go? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.634126984126984
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "45",
                    "likes": "0",
                    "time": "24/05/2022-10:15:20",
                    "content": "I would much rather see this standard switch over to soul binding, and just no one creates a standard for account binding because I personally think that is a deeply flawed design that compromises user security and implies promises that cannot be kept.  That being said, the standardization process is open, and I don\u2019t have to agree with a standard for it to exist.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.785714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "46",
                    "likes": "1",
                    "time": "24/05/2022-10:42:11",
                    "content": "Personally, I\u2019m much more interested in ENS-Bound tokens than Account(address)-Bound ones just because I think abstracting addresses away is generally the path forward for the ecosystem (counterfactual wallets ftw) - but I accept that for the time being account addresses are still the dominant identity in Ethereum. My concern with trying to solve for soulbound-everything in this ERC is that as far as I\u2019m aware there is no standard for an Object primitive we can refer to as the Owner. Addresses look differently from ENS domains which look differently from ERC721 tokens etc. A couple of us had a chat about what some theoretical potential \u201cERC-XXX: Referenceable Object\u201d could look like (details below since this is a tangent), but unless you have a clever workaround I\u2019m not sure how we could solve a generic ERC4973 without solving this first - which will block this ERC for some undetermined amount of time. I think no matter how we design Referenable Object in the future we\u2019ll design it to allow for standards that are backwards compatible with tokens that only return addresses as owners as 721 already does that now. If you have a way around this that will allow for generic ERC4973 owners without a standard for objects I\u2019d love to scratch this point completely    \u201cERC-XXX: Referenceable Object\u201d tangent If this is interesting to pursue we should probably take this to a separate threat to avoid derailing the conversation for this EIP. What we\u2019ve been talking about is a potential interface that can draw some inspiration from EIP 137 to create a standard mapping to any address or token - a super rough sketch of it is something like an object address being a recursive chain of references from a base address to a specific object ID. A pointer is a string in the form [address:ID1:ID2:\u2026]. The address can be an account or a contract, and there can be an arbitrary number of IDs for contracts that hold more than one object type. Null ID1 is a reference to the address itself, which makes this backwards compatible with existing ownership models that return an address. To illustrate: if we have a contract at address A that issues two types of NFTs, X and Y, we can refer to any specific NFT issued by A by providing a reference like A:X:32 Is this something worth pursuing further? Is there something already in place/worked on that I missed aimed at the same problem? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "47",
                    "likes": "3",
                    "time": "24/05/2022-11:26:18",
                    "content": "    tomcohen.eth:  Addresses look differently from ENS domains which look differently from ERC721 tokens etc.   ENS names are ERC-721 tokens, so soul binding can just be to any ERC-721 and it would cover everything from Crypto Kitties to Bored Apes to ENS names, all with one relatively simple standard. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "48",
                    "likes": "1",
                    "time": "24/05/2022-11:30:45",
                    "content": "As far as design, I would just do something like: interface SoulBoundToken { \tfunction ownerOf(uint256 tokenId) external view returns (address erc721Contract, uint256 erc721TokenId); }  Super simple, works with all ERC-721 tokens as souls (which includes ENS names), and isn\u2019t blocked by anything. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.541666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "49",
                    "likes": "0",
                    "time": "24/05/2022-12:21:16",
                    "content": "    MicahZoltu:  ENS names are ERC-721 tokens, so soul binding can just be to any ERC-721 and it would cover everything from Crypto Kitties to Bored Apes to ENS names, all with one relatively simple standard.   Yeah, I guess I was thinking explicitly about the 137 namehash node definition but there\u2019s no reason to actually go that route. Was this another case of Tom overthinking things? (Narrator: \u201cIt was\u201d)     MicahZoltu:  As far as design, I would just do something like: interface SoulBoundToken { \tfunction ownerOf(uint256 tokenId) external view returns (address erc721Contract, uint256 erc721TokenId); }  Super simple, works with all ERC-721 tokens as souls (which includes ENS names), and isn\u2019t blocked by anything.   Just to clarify: if this is a unified interface (so address owners should be allowed) - in case the owner is an account address and not a token, what should the return value be? ERC-721 states that  callers SHALL NOT assume that ID numbers have any specific pattern to them, and MUST treat the ID as a \u201cblack box\u201d  So we can\u2019t just return 0 for erc721TokenId ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.962962962962963
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "50",
                    "likes": "0",
                    "time": "24/05/2022-13:16:24",
                    "content": "    tomcohen.eth:  Just to clarify: if this is a unified interface (so address owners should be allowed) - in case the owner is an account address and not a token, what should the return value be? ERC-721 states that   I recommend not allowing address owned assets.  I think this is a big security risk for users and shouldn\u2019t be done.  If someone really wants an address to own an asset, they can setup a contract wallet that looks like an NFT with a single item. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.910714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "51",
                    "likes": "0",
                    "time": "24/05/2022-13:27:48",
                    "content": "I agree from a purist perspective, but from a pragmatic standpoint in that case I think we should go the two standards route. Rationale: People are going to account bind tokens whether we think it\u2019s a good idea or not, and so standardisation is the best harm-reduction course. If you do it, and least do it in a way that plays nice with the rest of the ecosystem. We can and should then encourage people to take the optimal path and bind to tokens by explaining the merits for that path. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "52",
                    "likes": "0",
                    "time": "24/05/2022-14:03:22",
                    "content": "An alternative path towards standardizing name-bound tokens using ENS can now be found here:  Add initial draft for Name-bound tokens by TimDaub \u00b7 Pull Request #5107 \u00b7 ethereum/EIPs \u00b7 GitHub Name-bound tokens  ",
                    "links": [
                        "https://ethereum-magicians.org/t/name-bound-tokens/9362"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "53",
                    "likes": "0",
                    "time": "24/05/2022-14:25:11",
                    "content": "    tomcohen.eth:  Rationale: People are going to account bind tokens whether we think it\u2019s a good idea or not, and so standardisation is the best harm-reduction course. If you do it, and least do it in a way that plays nice with the rest of the ecosystem.   I disagree with this pretty strongly.  In my experience, the act of creating a standard results in people assuming that it is a good idea and secure.  If there is no standard, then people are more likely to dig and figure out why there is no standard and sometimes they learn that it is a bad idea during this process and then they do something different. There will probably be some people who do address bound tokens, despite there being no standard, and there may be someone who decides to write a standard for it.  However, I think it would do the ecosystem well to at least delay that as much as possible and get people used to using NFT bound tokens instead, hopefully prior to people doing address bound tokens.  If we can normalize NFT bound tokens first, then I think address bound tokens are less likely to take off. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.7318840579710155
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "54",
                    "likes": "0",
                    "time": "24/05/2022-14:30:14",
                    "content": "    TimDaub:  An alternative path towards standardizing name-bound tokens using ENS can now be found here:  Add initial draft for Name-bound tokens by TimDaub \u00b7 Pull Request #5107 \u00b7 ethereum/EIPs \u00b7 GitHub Name-bound tokens    What is the advantage to name binding instead of the more generalized ERC-721 binding? ",
                    "links": [
                        "https://ethereum-magicians.org/t/name-bound-tokens/9362"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/flyjgh",
                    "index": "55",
                    "likes": "1",
                    "time": "24/05/2022-14:55:35",
                    "content": "    MicahZoltu:  I would much rather see this standard switch over to soul binding, and just no one creates a standard for account binding because I personally think that is a deeply flawed design that compromises user security and implies promises that cannot be kept.   There\u2019s probably even bigger security concerns to bind tokens to an ERC-721. Anyone can create an ERC-721 that doesn\u2019t respect the assumptions from the eip, and could therefore take advantage of users who will want to bind a SBT to it. NFT ownership is not as secure as account ownership as it relies on the issuer of the NFT being honest. I think makes sense to implement this EIP as-is as an ethereum account doesn\u2019t rely on a honest third-party assumption.     MicahZoltu:  people are more likely to dig and figure out why there is no standard and sometimes they learn that it is a bad idea during this process and then they do something different.   I would like to think that\u2019s the case but being in a community of active smart-contracts developpers, that\u2019s not what I witness on a daily basis, quite the opposite actually. Devs don\u2019t wait for standardization to implement features they want/need and this EIP is wanted before everyone implements their own standards, making it impossible for large entities (wallet providers, etherscan, zapper, \u2026) to accurately represent it accurately. (btw, since the SBT paper, I already saw 3 different implementations of it) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.398809523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "56",
                    "likes": "0",
                    "time": "24/05/2022-20:41:31",
                    "content": "    flyjgh:  There\u2019s probably even bigger security concerns to bind tokens to an ERC-721. Anyone can create an ERC-721 that doesn\u2019t respect the assumptions from the eip, and could therefore take advantage of users who will want to bind a SBT to it. NFT ownership is not as secure as account ownership as it relies on the issuer of the NFT being honest. I think makes sense to implement this EIP as-is as an ethereum account doesn\u2019t rely on a honest third-party assumption.   I\u2019m not sure where the honest third party assumption is? The non-separatable token is still non-separatable, regardless of the (already existing) possibility of a malicious contract. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.392857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "57",
                    "likes": "0",
                    "time": "25/05/2022-07:08:36",
                    "content": "    flyjgh:  making it impossible for large entities (wallet providers, etherscan, zapper, \u2026) to accurately represent it accurately.   IMO this is a \u201cfeature\u201d, not a \u201cbug\u201d.  I specifically want any address-bound tokens to fail to gain adoption, and if there is not consistency across projects (due to lack of standard) then there is less likely to be integration into things like etherscan, wallets, zapper, etc. and when there is integration it won\u2019t work reliably, which reduces adoption and incentivizes people using better standards like NFT bound tokens. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.027976190476191
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "58",
                    "likes": "3",
                    "time": "25/05/2022-10:58:59",
                    "content": "Ok, so for the sake of going fast enough to prevent fragmentation in the ecosystem, let me quickly recap where we are:  Whether or not standardising account-bound tokens is a good idea, having a standard for a generically bound token that can capture both ABTs and token-bound tokens is not trivial and will take a while. Having just one of the two in a standard is much easier and can be released sooner to prevent too much fragmentation from building up. It doesn\u2019t seem that there is a significant call for waiting for a generically bound token, most of the voices here are either for the two separate standards with a potential future third generic or just for token-bound and not ABT at all. So whether or not standardising ABTs is a good idea, I think (?) the general temperature of the room is that token-binding is something we want and end up doing and shouldn\u2019t be blocked by the ABT discussion.  Tim, Enrico and I have put up a separate proposal for a name-bound token (Tim posted above, link here for convenience). I propose we focus there on making sure we\u2019re making progress with name/token bound tokens, and keep this discussion specifically about ABT. Are we happy with that? It\u2019d be a shame to block something we\u2019re generally for because of something else that\u2019s more contentious. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.274621212121212
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bradleat",
                    "index": "59",
                    "likes": "0",
                    "time": "26/05/2022-00:47:46",
                    "content": "It can also be bound to a recoverable wallet which addresses the point you brought up with the ens bindings. I think what we need here is a set of suggested recipes so that users and developers know that for soul safety they can bind the tokens to a recoverable wallet. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "60",
                    "likes": "0",
                    "time": "26/05/2022-02:33:56",
                    "content": "    bradleat:  It can also be bound to a recoverable wallet which addresses the point you brought up with the ens bindings.   This would mean to user can\u2019t upgrade/switch wallets, which is also bad. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 2.468750000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tyevlag",
                    "index": "61",
                    "likes": "0",
                    "time": "26/05/2022-13:31:35",
                    "content": "I\u2019m very interested in the topic of SBT or abt. I\u2019d like to express my personal views on whether there can be a way to \u201cbind\u201d tokens from an economic perspective, such as adjusting on the basis of erc721  It greatly increases the cost of transfer and makes users almost reluctant to actively transfer NFT. However, in extreme cases (such as the leakage of wallet private key), the wallet needs to be replaced, and the wallet owner can also have a way to save his assets. For the same erc721, all NFTs must be transferred at the same time, which will maintain the consistency of the owners of the transferred NFTs.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.444444444444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bradleat",
                    "index": "62",
                    "likes": "0",
                    "time": "26/05/2022-14:23:17",
                    "content": "The \u201csoul wallet\u201d would need to provide the upgrade and recovery mechanism. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "63",
                    "likes": "0",
                    "time": "26/05/2022-14:58:00",
                    "content": "    tyevlag:  It greatly increases the cost of transfer and makes users almost reluctant to actively transfer NFT. However, in extreme cases (such as the leakage of wallet private key), the wallet needs to be replaced, and the wallet owner can also have a way to save his assets.   The cost of transferring the ERC-721 that tokens are bound to wouldn\u2019t change.  The soulbound token points at a soul (ERC-721), and the soul (ERC-721) is owned by an address.  If you move the soul, nothing changes about the soulbound tokens so there is no extra gas costs. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.386904761904762
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "64",
                    "likes": "0",
                    "time": "26/05/2022-14:58:33",
                    "content": "    bradleat:  The \u201csoul wallet\u201d would need to provide the upgrade and recovery mechanism.   I don\u2019t think adding complexity to wallets (the things that are most critical to be secure, which means simple) is the right solution here. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.185714285714285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bradleat",
                    "index": "65",
                    "likes": "0",
                    "time": "26/05/2022-15:19:16",
                    "content": "Something is going to have to take the complexity. I also like your ENS proposal. I don\u2019t think making the soul bound token or account bound tokens conditionally moveable from their root is the solution. So either attach them to an ENS where the ENS owner can be transferred and the account bound tokens are making attestations on the ENS domain, or put them on a recoverable wallet. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "66",
                    "likes": "0",
                    "time": "26/05/2022-16:57:40",
                    "content": "    bradleat:  I don\u2019t think making the soul bound token or account bound tokens conditionally moveable from their root is the solution.   Maybe I missed something, but I don\u2019t think anyone is arguing in favor of allowing bound tokens to move away from what they are bound top. The disagreement I think is entirely on what is the sun of things that the tokens can bind to.  Addresses, names, private keys, NFTs, etc. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesLefrere",
                    "index": "67",
                    "likes": "0",
                    "time": "26/05/2022-19:34:33",
                    "content": "@MicahZoltu I think you\u2019ve convinced me that Soul (ERC-721)-bound is preferable to Account-bound. Regarding whether limiting the scope of the Soul (e.g. NBTs) is preferable, I\u2019m not quite sure yet. In the case of ENS, the resolved address can be different to the owner \u2013 isn\u2019t it more likely that users would want to bind their ENS to their Soul rather than vice-versa? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xipsord",
                    "index": "68",
                    "likes": "0",
                    "time": "26/05/2022-19:37:54",
                    "content": "    tjayrush:  In its rush of excitement, the above proposal seems to ignore the obvious and foreseeable downside of institutions being able to send a \u201ctag of ill repute\u201d to an unlucky recipient that cannot be wiped   The smartcontract will only ever be able to transfer the amount of token you approve. This is done, in part, as a security measure for ERC20 token holders. A similar security could be implemented in Account-bound Tokens. The address must first approve the NTT SmartContract to receive tokens from there. You will pass your university\u2019s pre-established rules. It could be sending your diploma or some badge of misconduct. It\u2019s a little difficult to cover all the cases like being in a political party today that after 20 years becomes an enemy of the current government with persecutions. The solution is for the user to understand the risks before signing the contracts. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.026041666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "69",
                    "likes": "1",
                    "time": "26/05/2022-19:51:35",
                    "content": "    JamesLefrere:  Regarding whether limiting the scope of the Soul (e.g. NBTs) is preferable, I\u2019m not quite sure yet. In the case of ENS, the resolved address can be different to the owner \u2013 isn\u2019t it more likely that users would want to bind their ENS to their Soul rather than vice-versa?   The reason I like binding to any NFT is so that users can make these decisions for themselves.  If you want your soul to be an ENS name you can have that, or if you want it to be a ClyptoKitty you can.  You could even bind your soul to a contract that issued a single NFT that can\u2019t move if you really want address binding (I still think it is a bad idea, but if people disagree they can functionally achieve it). Regarding ENS specifically, they are transferable, and they cannot change to soulbound without deploying an entirely new system. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.353084415584416
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesLefrere",
                    "index": "70",
                    "likes": "2",
                    "time": "26/05/2022-20:03:40",
                    "content": "I think that\u2019s quite a likely path to adoption. That said, one argument in favour of account-bound tokens is that there\u2019s potentially no cost to receiving one, whereas with the other option, one must have something to bind to. That also doesn\u2019t necessarily need to cost the user anything (even gas, if it\u2019s separately minted/transferred), but what I\u2019m driving at is that users shouldn\u2019t think they need to pick an illiquid jpeg in order to prove things about themselves.  Regarding ENS specifically, they are transferable, and I doubt they cannot change to soulbound without deploying an entirely new system.  Sorry, yes \u2013 wasn\u2019t thinking through. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.59280303030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "71",
                    "likes": "3",
                    "time": "27/05/2022-09:45:44",
                    "content": "@ra-phael @rsquare Chris Chung and I had an account-bound tokens get-together at NFTBerlin to talk about the standard\u2019s future and what other plans we have. Below I\u2019m copying the full notes to the Ethereum Magicians forum. Alternatively you can also read them here on hackmd.  Token Binding Working Group Meeting Berlin Date of meeting: 2022-05-25 Time: 3pm Location: Berlin, NFTBerlin event  Participating  Let\u2019s coordinate via the ABT TG channel: Telegram: Contact @eip4973  Meeting is FFA   RSVP (pls add yourself)  TimDaub Raphael Roullet Chris Chung Rahul Rumalla   Agenda (please add agenda items if you have any)  (Tim): mini update state of ABTs/SBTs (Tim): Gather feedback about transitioning standard from using \u201cnon-transferrable\u201d to \u201cnon-separable.\u201d (Tim): Present Otterspace\u2019s effort to make an informed decision about using event Transfer. (Tim): For event Transfer discuss mapping of input parameter values: from, to, id. (Tim): How to move forward with EIP-5107 \u201cName-bound tokens\u201d: Add initial draft for Name-bound tokens by TimDaub \u00b7 Pull Request #5107 \u00b7 ethereum/EIPs \u00b7 GitHub  (Tim): What about Micah\u2019s proposal on \u201cNFT-bound tokens\u201d?   Minutes  Location NFTBerlin  Attendees:  Tim Daub Rahul Raph Chris   State of the ABTs/SBTs Heightened engagement of 4973 on twitter. Account-bound tokens are starting to emerge as a term. Name-bound tokens proposal created as a spin-off for ENS-bound token standard to help focus the discussions. Let\u2019s aim to keep discussions focussed around the specifics of Account-bound tokens on EIP thread of 4973.  Decision making Decisions that are made on design and implementation must be done through the EIP thread on ethereum magicians forum. How do we make decisions on certain contentious features in terms of placing something in the spec versus suggestions that users have the choice to implement or not. Making sure we have discussions that are tracked and traceable so we can be efficient in being productive and be knowledgeable about the rationale and motivations behind any of the decisions being made.  Naming Account-bound might be more specific than soulbound. Non-separability seems to be less loaded than non-transferability where the baggage of ownership is a contentious point. Token may not even be the appropriate term for the structure of what we might want to be \u201csoulbound\u201d. Maybe we should be more technically descriptive about the function that we are trying to capture or even revisit the intended macro-goal of bindingness.  Design Backwards compatibility for the event signatures may help integrateability: i.e.transfer . Potentially any \u201cbreaking changes\u201d to compatibility can be supported by a clear design intent for the new approach which differentiates it from other tokens. Narrowing down and being very specific can help with adoption. Initially from was removed from the attest and revoke fields. It should be re-introduced to 4973 but the underlying problem needs to be addressed elsewhere. ",
                    "links": [
                        "https://t.me/eip4973",
                        "https://github.com/ethereum/EIPs/pull/5107"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.380922318422319
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/koolamusic",
                    "index": "72",
                    "likes": "1",
                    "time": "29/05/2022-20:14:52",
                    "content": "    TimDaub:  Backwards compatibility for the event signatures may help integrateability: i.e.transfer .   Lovely. currently working on a product that has the potential to be huge, and you had me on integrateability because it\u2019s going to be hard to adopt this if it doesn\u2019t have not backward compatibility with specs like ERC-721 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.6083333333333325
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/BowTiedBart",
                    "index": "73",
                    "likes": "1",
                    "time": "30/05/2022-08:47:48",
                    "content": "Alternative naming suggestions: Identity Bound Tokens (IBTs) User Bound Tokens (UBTs) Personal Identity Tokens (PITs) User Designated Token (UDTs) The names suggested so far are not great, especially \u201cSoul Bound Token\u201d. If we want blockchain utilities to go mainstream, it would help to start using mainstream language when naming them. Most native English speakers hadn\u2019t even heard the word \u201cfungible\u201d before NFTs became popular, but I digress. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.571428571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "74",
                    "likes": "2",
                    "time": "30/05/2022-14:24:28",
                    "content": "In a new post, we\u2019re addressing some of the misconceptions on Twitter and here on the forum about Account-bound tokens:  Link from the web archive to the post (for posterity): Addressing the most common misconceptions about Account-bound tokens  Direct link to the post: Addressing the most common misconceptions about Account-bound tokens   ",
                    "links": [
                        "https://timdaub.github.io/2022/05/30/addressing-the-most-common-misconceptions-about-account-bound-tokens/"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.530303030303029
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "75",
                    "likes": "1",
                    "time": "06/06/2022-13:07:52",
                    "content": "Proposing a new set of changes to EIP-4973: A disassociation mechanic using function burn. Details: Include disassociation mechanic by TimDaub \u00b7 Pull Request #5136 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.681818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "76",
                    "likes": "0",
                    "time": "06/06/2022-23:18:55",
                    "content": "I found EIP-4494 and it\u2019s interesting as a mechanism to both store ABTs off-chain and implement consensual minting towards connecting two accounts. More details: EIP-4494: Extending ERC-2612-style permits to ERC-721 NFTs - #32 by TimDaub ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "77",
                    "likes": "0",
                    "time": "07/06/2022-16:43:40",
                    "content": "That\u2019s not true. I can envision a possibility \u2013 (1) a smart contract is deployed that allows anyone to register themselves as someone who will accept no soul bound tokens. (2) in order to be compliant with the standard, any minting contract must consult that registry first and only create the token if the address is not in the registry. There are probably a Turing-complete number of other possible solutions. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.11734693877551
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "78",
                    "likes": "0",
                    "time": "07/06/2022-18:07:09",
                    "content": "@MicahZoltu is correct: https://nftevening.com/mcdonalds-nft-collection-has-a-nasty-racial-slur-hidden-in-the-mcrib/ Preventing misuse is in the scope of the Ethereum governance community. Make no mistake, I\u2019m just one dude in my basement writing here. And my goal isn\u2019t to build digital identity either. The use case is very narrow, a common interface for account-bound tokens. If you have concret technical insights, please get in touch and you can cowrite. Note, our document existed before Vitalik\u2019s paper. I\u2019m not involved in that. Neither are my coauthors. Misuse has to be discussed more globally within crypto/Ethereum and not within ABT spec. Happy to help ofc. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5285714285714285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "79",
                    "likes": "2",
                    "time": "08/06/2022-07:37:44",
                    "content": "    tjayrush:  I can envision a possibility \u2013 (1) a smart contract is deployed that allows anyone to register themselves as someone who will accept no soul bound tokens. (2) in order to be compliant with the standard, any minting contract must consult that registry first and only create the token if the address is not in the registry.   I would consider this to be a best practice/good idea rather than a standard.  IMO, standards are for facilitating communication between two parties and providing guarantees/constraints on what is valid over that communication channel.  What you are proposing is a \u201cnegative standard\u201d in that it isn\u2019t specifying anything about how two things communicate but rather specifying conditions on which two things should not communicate. FWIW, I can understand the argument for calling such things a standard, but to me that feels like scope creep on the term \u201cstandard\u201d that I would prefer to avoid. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.915178571428572
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/flyjgh",
                    "index": "80",
                    "likes": "1",
                    "time": "08/06/2022-08:21:44",
                    "content": "This last change to eip-4973 is really well designed, I think it addessed concerns about the need to add some \u201cauthorization\u201d process, while retaining full flexibility of the eip, and providing a clearer path for the implementers of this standard to let users keep control over their tokens. On the subject of SBTs, I feel that this change addresses the concerns of most of the reactionary critics of vitalik et al. paper. By baking-in revocation into the standard, we let the user the ability to distinguish publicly between wanted and unwanted tokens, therefore enlarging the scope of this eip in a healthy way. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.768518518518518
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "81",
                    "likes": "2",
                    "time": "08/06/2022-09:17:39",
                    "content": "Per @TimDaub I\u2019m bringing up caching here.  With the current design, applications cannot safely cache anything about individual tokens because it is all mutable.  Just because someone owned a given token 5 minutes ago doesn\u2019t mean they still own it now, so you have to re-check.  Similarly, just because the metadata about the token said X 5 minutes ago doesn\u2019t mean it still says X, so you have to re-check. If everything was immutable once set, applications and service providers would be able to aggressively cache everything and not have to worry about the source of truth changing out from under the cache. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.609375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/flyjgh",
                    "index": "82",
                    "likes": "0",
                    "time": "08/06/2022-19:09:02",
                    "content": "I don\u2019t see in which way this specification would prevent applications to use the same tricks used in implementations of eip-721 ownership can be checked with : mapping (uint256 => address)  //  tokenId => owner  And metadata could either be stored on IPFS, or directly on-chain (not costly on L2). For the caching specifically, applications will have to checkpoint the current state of the user before interacting with protocol\u2019s functions, but that\u2019s already done with erc20s and NFTs. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "83",
                    "likes": "0",
                    "time": "08/06/2022-19:16:21",
                    "content": "Re caching and metadata relevant EIP: EIP-4906: ERC-721 Metadata Update Extension ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "84",
                    "likes": "1",
                    "time": "09/06/2022-00:17:22",
                    "content": "    flyjgh:  For the caching specifically, applications will have to checkpoint the current state of the user before interacting with protocol\u2019s functions, but that\u2019s already done with erc20s and NFTs.   Yes, ERC-20 tokens and ERC-721 tokens cannot be cached.  Bound tokens/badges could be cached if they are sufficiently constrained which makes working with them significantly easier. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "85",
                    "likes": "0",
                    "time": "09/06/2022-04:27:25",
                    "content": "If e.g. your JSON-RPC cache is based on requests with block number tag \u201clatest\u201d, caching will always be a challenge and it\u2019s generally helpful if requests were instead idempotent (over time). So e.g. if you cache eth_call JSON_RPC requests containing a block number, these results should almost never change (unless a reorg happens I guess). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "86",
                    "likes": "1",
                    "time": "09/06/2022-05:07:11",
                    "content": "Caching by block isn\u2019t particularly useful, because ultimately what you are working with is \u201clatest\u201d which is constantly changing.  Being able to tell a user, \u201cyou owned X as of block Y\u201d isn\u2019t nearly as useful as being able to tell the user \u201cyou own X now\u201d.  With full immutability, you can cache everything and you can assert to the user what they own without worrying about mutations happening after you fetch the data. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/flyjgh",
                    "index": "87",
                    "likes": "1",
                    "time": "09/06/2022-06:18:08",
                    "content": "I agree that working with immutable data is far easier, and would allow for better tooling on-chain, but adding this constraint would reduce the scope of this eip imo there\u2019s already a lot of different use-cases for mutable metadata, and even more with SBTs. Besides, I think this is not something to deal with on the interface level but on the implementation level, like making \u201cstandard implementations\u201d with on-chain, immutable, metadata. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "88",
                    "likes": "0",
                    "time": "09/06/2022-06:51:49",
                    "content": "    flyjgh:  Besides, I think this is not something to deal with on the interface level but on the implementation level, like making \u201cstandard implementations\u201d with on-chain, immutable, metadata.   If lifetime policies aren\u2019t part of the specification, then no one can rely on them generally.  If someone thinks that data should be mutable, I would argue that should be a separate standard and a given asset could then be either this standard or that standard depending on what lifetime guarantees they make about the data. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "89",
                    "likes": "1",
                    "time": "13/06/2022-10:18:00",
                    "content": "@ra-phael @rsquare  and I have expanded our \u201cCommon Misconceptions about ABTs\u201d blog post with additional sections. We\u2019re planning to expand it even more e.g. addressing Kate Sills\u2019s post in the future. Here\u2019s the latest version: Addressing the most common misconceptions about Account-bound tokens ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.2
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "90",
                    "likes": "0",
                    "time": "14/06/2022-10:03:49",
                    "content": "EIP-4973 reference implementation now implements simple burn functionality for disassociation of receiver: EIP-4973: Add `function burn` to reference impl. by TimDaub \u00b7 Pull Request #5148 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ThomasM",
                    "index": "91",
                    "likes": "1",
                    "time": "15/06/2022-07:20:24",
                    "content": "I think it would be good to have hooks _beforeTokenTransfer and _afterTokenTransfer (on _mint and _burn) for extensibility (to allow extension like ERC4973Enumerable to be built in the future), like on ERC721. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "92",
                    "likes": "2",
                    "time": "16/06/2022-20:49:42",
                    "content": "I believe it be useful to have a balanceOf function in the IERC4973 A general use case would be the community attests ABT tokens to a particular account. The more tokens attested, the more that account is trusted by the community. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.516666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "93",
                    "likes": "0",
                    "time": "16/06/2022-21:37:40",
                    "content": "agreed that balanceOf is useful. I saw that e.g. snapshot.org\u2019s simplest EIP-721 token voting strategy uses it and so EIP-4973 should have it too! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "94",
                    "likes": "1",
                    "time": "16/06/2022-21:43:31",
                    "content": "@TimDaub I also believe IERC4973Enumerable should be an option as this can have a totalSupply() function that can compliment the balanceOf() in the IERC4973 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "95",
                    "likes": "0",
                    "time": "16/06/2022-22:20:15",
                    "content": "Actually it might be better to mention I721Enumerable as an option in the proposal, because it already has a totalSupply() function and its other functions can be useful too. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.84375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "96",
                    "likes": "0",
                    "time": "20/06/2022-13:29:57",
                    "content": "Given the recent misinterpretation related to Soulbound tokens and Account bound tokens EIP-4973, we\u2019re now segmenting the Telegram groups into those that want to create a new property class (e.g. a \u201csoulbound sword\u201d as in WoW: That\u2019s Account-bound tokens.) And everything else, e.g. credentials etc: \u201cSoulbound tokens\u201d  EIP-4973 account-bound tokens: Telegram: Contact @eip4973  Soulbound tokens: Telegram: Contact @soulbound_tokens   ",
                    "links": [
                        "https://t.me/soulbound_tokens"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.295454545454545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "97",
                    "likes": "0",
                    "time": "20/06/2022-14:57:26",
                    "content": " We\u2019ve updated the \u201cMotivation\u201d section to clearly describe the document\u2019s goal: Specifying a similar mechanic as World of Warcraft\u2019s \u201csoulbound items\u201d like Ragnaros\u2019 Thundefury: EIP-4973: Account-bound Tokens   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "98",
                    "likes": "0",
                    "time": "21/06/2022-05:40:27",
                    "content": "    TimDaub:  a new property class (e.g. a \u201csoulbound sword\u201d as in WoW: That\u2019s Account-bound tokens.)   Just for the record, I disagree that a \u201cSoulbound Sword\u201d makes sense as address bound.  The sword is bound to a character usually, sometimes to an account, but the account can undergo credential changes, unlike an Ethereum address. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.9772727272727275
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "100",
                    "likes": "1",
                    "time": "21/06/2022-08:50:01",
                    "content": "balanceOf is now part of the interface and reference implementation: Add `function balanceOf(...)` by TimDaub \u00b7 Pull Request #5172 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "101",
                    "likes": "1",
                    "time": "24/06/2022-09:49:51",
                    "content": "We\u2019re making progress with implementing mintWithPermission and are getting ready to write up the change to the spec too. Here\u2019s the latest implementation: ERC4973/ERC4973Permit.sol at 5e7d50ec62d9592f425c4cccd2fc3c3b8aca48c1 \u00b7 rugpullindex/ERC4973 \u00b7 GitHub   signature(hash(from, to, uri), from.pk) allows to to keep the token off-chain and take the token on-chain with from's permission In a 2^256 big bitmap, we\u2019re making sure that any combination of hash(from, to, uri) will only be minted once EIP-1271 support is included so contracts can allow minting as from too tokenIds are incremented internally so that we don\u2019t have race conditions of two or more users redeeming at the same time signatures are now EIP-2098 compact representation compatible  feedback is welcome ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "102",
                    "likes": "0",
                    "time": "24/06/2022-09:54:36",
                    "content": " Just for the record, I disagree that a \u201cSoulbound Sword\u201d makes sense as address bound. The sword is bound to a character usually, sometimes to an account, but the account can undergo credential changes, unlike an Ethereum address.  This statement is misinformation. An Ethereum account (e.g. a contract) can undergo credential changes, e.g. different EOAs can manage a contract\u2019s functionality. It depends on the implementation of the contract but it is entirely possible. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "103",
                    "likes": "4",
                    "time": "27/06/2022-12:38:26",
                    "content": "Have we lost our path with this specification? I\u2019m actively asking myself this question these days: Why? Because originally, I set up to define a token standard that is \u201cownership concept\u201d neutral or non-skeuomorphic: And since we\u2019re now defining consensual mintWithPermission instead of bumping the document\u2019s status to \u201cReview.\u201d Here\u2019s what I deem immediately useful to the Ethereum community today. A token standard document that carries as little implicit notion of private property as possible - the goal being to innovate on different kinds of property, e.g., \u201cHarberger Property,\u201d [1,2,3] partial common ownership [4], and to, e.g., replicate the true nature of bits on the internet [5, 6]. It may not be entirely clear to many, and we probably haven\u2019t done the best job at communicating: But it\u2019s clear that if we had configurable property that isn\u2019t implicitly biased towards, e.g., giving all possible rights to the \u201cowner,\u201d at least in the self-referential digital space many call \u201cweb3,\u201d we could attack such interesting problems. Buterin et al.'s \u201cDecentralized Society\u201d contributes to the Account-bound tokens specification, despite scope-creeping the entire field: It unbundles the concept of ownership as a bucket of interaction rights. \u201c4.7\u201d, the \u201cPlural Property\u201d section brilliantly identifies the challenges we want to address [7]:  web3 overemphasized the notion of \u201ctransferability\u201d of property, making it impossible to represent simple and ubiquitous property contracts like an apartment lease. Traditionally, property rights are defined in Roman tradition as bundles of rights:  rights to use property (\u201cusus\u201d) rights to consume and destroy (\u201cabusus\u201d) rights to profit (\u201cfructus\u201d)   In the real world, someone rarely possesses the \u201cfull bucket\u201d of ownership rights.  So to re-iterate on the introduction of this post: I\u2019ve become unsure if we haven\u2019t lost our path here. For E.g. the argument that ABTs discourage key rotation is blatantly false and misguided in the actual context. It\u2019s because truly our intent isn\u2019t to \u201cbind\u201d to accounts: But more to establish a new and unbiased relationship between on-chain property and their subjects (users). Consider the tables and chairs in a bar. They\u2019re owned by the bar: But then nobody really owns a chair in a bar. You get up (e.g. to the toilet) and then in some social contexts and depending who you are and what peers are with you in the bar - your chair is free when you come back or it isn\u2019t. This is the type of new ownership experience I\u2019m talking about. E.g. making a differentiation between possessing, squatting, and owning. Using, profiting, transferring, lending, destroying, remixing, etc. For that, my initial design goal was to strip EIP-721 of all implicit notions of transferability and private property. Yes, we could have used more proper terminology like: \u201cfunction controllerOf\u201d rather than e.g. \u201cfunction ownerOf\u201d - but to me, there has always been the question of backward compatibility. E.g. If we end up creating an entirely original token standard in a vacuum, like EIP-5114 - will there be adoption? Having recently been exposed to the \u201cworse is better\u201d idea [8], I\u2019m still of the opinion that \u201cworse\u201d and hence backward-compatible, is better. Still, now that we\u2019ve successfully implemented function mintWithPermission in the reference implementation and since we\u2019re now making normative statements about a user\u2019s \u201cabusus\u201d rights (namely when it should be burnable), I\u2019m wondering if we\u2019re not getting overly biased again. Here\u2019s what I want for EIP-4973: I want to create the most minimal and backward compatible version of a token that carries as few implicit skeuomorphic ownership biases from our modern world as possible. I deliberately don\u2019t want to replicate existing ownership experiences. Then, and even though this may be to the detriment of some EIP editors that e.g. are asking for \u201ccensorship-resistant\u201d tech (looking at you @MicahZoltu), I\u2019d want to \u201cfinalize\u201d EIP-4973 as a base token such that others can e.g. re-implement new and existing ownership experiences. So how would we get there? E.g. I\u2019d be happy to remove function burn again. I\u2019d also be happy to put a statement in saying that this standard shouldn\u2019t be used to bind tokens non-separable to an account. And I wanna frame it where this standard becomes the bare minimum boilerplate standard for an on-chain property. I hope that sounds reasonable to everyone! How do we get there?  References  1: Non-Skeuomorphic Harberger Properties may not be implementable as ERC721 NFTs  2: Harberger Taxes can be Crypto's Sustainable Business Model  3: What happened at Gitcoin's Schelling Point event?  4: https://partialcommonownership.com/  5: Built on Stolen Data  6: Posner, Eric A., and E. Glen Weyl. \u201cRadical Markets.\u201d Radical Markets. Princeton University Press, 2018. 7: Weyl, E. Glen, Puja Ohlhaver, and Vitalik Buterin. \u201cDecentralized Society: Finding Web3\u2019s Soul.\u201d Available at SSRN 4105763 (2022). 8: Worse is better - Wikipedia   ",
                    "links": [
                        "https://timdaub.github.io/2022/03/28/harberger-tax-can-cryptos-sustainable-business-model/",
                        "https://timdaub.github.io/2022/02/17/gitcoin-schelling-point-ethdenver/",
                        "https://partialcommonownership.com/",
                        "https://rugpullindex.com/blog/2021-07-02/built-on-stolen-data",
                        "https://en.wikipedia.org/wiki/Worse_is_better"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.574877294067435
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/flyjgh",
                    "index": "104",
                    "likes": "1",
                    "time": "28/06/2022-11:21:42",
                    "content": "What was the motivation behind mintWithPermission ? Isn\u2019t the goal already achieved by adding burn into the standard? I would say mintWithPermission is too opinionated to be added in the specification, as it reduces the scope of application quite a bit. I still feel like burn should stay in the standard as a way to publicly react to a specific SBT, and I think it would enlarge the scope of applications, without making any unnecessary assumption. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.333333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "105",
                    "likes": "0",
                    "time": "28/06/2022-18:34:44",
                    "content": "I like mintWithPermission. Means that the receiver can decide to mint it or not. If it\u2019s from someone they know or are expecting it then this works for that. It\u2019s stops being tarnished with sh*t ABT tokens that you don\u2019t want to spend the time and expense to burn, so you leave it and people get the wrong impression. Therefore, I think burn is no longer necessary. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 3.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/flyjgh",
                    "index": "106",
                    "likes": "0",
                    "time": "30/06/2022-12:12:17",
                    "content": "Agree that it can be a good way to use ABTs but I think it\u2019s too opinionated to be put into the standard, imo it restrict use-cases for it quite a bit. Entities can choose to implement the standard with mintWithPermission if they want to but ABT\u2019s scope is way larger than that. Btw, it\u2019s not easy to decide where we draw the line between interface and implementation, but I feel like specific behavior like minWithPermission should be dealt with at impl. level ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.402777777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "107",
                    "likes": "1",
                    "time": "01/07/2022-15:23:57",
                    "content": "I suggest that we standardize mintWithPermission outside of this standard (in another EIP). It can also be useful for any EIP-721 token. And generally, we probably also want another variant of mintWithPermission where the from mints for the to (mintWithPermission is implemented where to needs permission from from). ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kladkogex",
                    "index": "108",
                    "likes": "1",
                    "time": "01/07/2022-18:17:34",
                    "content": "The tokens definitely do need to be transferrable, in case people want to rotate keys or if they want to move to a more effective system of organizing things. But one should not be able to transfer tokens to a different human One simple way to do it is to allow transfers only to accounts with the same label, where the label is a fully qualified name of the human. In this case \u201cAlice XYZ\u201d will be able to transfer her tokens to another wallet with a label \u201cAlice XYZ\u201d but not to a wallet with a label \"Bob 123\u2019 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.954545454545455
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "109",
                    "likes": "0",
                    "time": "03/07/2022-22:24:04",
                    "content": "That is easy to overcome. I set the sub-domain, I transfer the NFT, then I reset the sub-domain. I don\u2019t think there is a way to enforce that limitation. So, the possibilities are either to allow transfers (maybe blocking approvals) or to disallow them. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 7.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "110",
                    "likes": "0",
                    "time": "03/07/2022-22:25:56",
                    "content": "It seems to me a solution similar to the attempts of forcing a royalty on ERC721, despite that the standard does not support it. If I want to abuse that, how can someone block me from implementing a \u201cmintWithPermission\u201d function that actually does not require any permission? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "111",
                    "likes": "1",
                    "time": "07/07/2022-11:21:44",
                    "content": "Major changes are coming to ERC4973: We\u2019re extending the Soulbound item capabilities of World of Warcraft. Namely, because you can \u201cgive\u201d and \u201ctake\u201d items to others.  You can \u201ctake\u201d an item from a dragon You can \u201cgive\u201d an item to a friend You can \u201cequip\u201d an item, showing it to everyone in Ogrimar/Stormwind or you can choose to \u201cunequip\u201d it. I\u2019ve rolled back the Attest/Revoke events. It\u2019s now Transfer again.  I\u2019ll take some time to adjust the standard\u2019s document, but the new interface is actively being developed over in the reference implementations GitHub: Language develop standard towards Soulbound items \u00b7 rugpullindex/ERC4973@27a62d1 \u00b7 GitHub In case you\u2019re looking for a naive implementation of \u201cSoulbound tokens\u201d that non-separably binds an EIP-721 to an account, I recommend you check out EIP-5192 - Minimal Soulbound NFTs ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-5192-minimal-soulbound-nfts/9814"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.8534564393939394
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rsquare",
                    "index": "112",
                    "likes": "0",
                    "time": "08/07/2022-16:48:31",
                    "content": "Have been thinking more about the inclusion of balanceOf. The original argument about it needing it to inform the reputation based on number of ABTs you have seems flawed. For example, if you have 5 ABTs, with 5 different tokenURIs, it may not very useful to know that a user has 5 ABTs in total. It is perhaps rather more useful to know if a user has an ABT of a certain type of tokenURI  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.707722832722832
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "113",
                    "likes": "2",
                    "time": "09/07/2022-07:00:48",
                    "content": " It is perhaps rather more useful to know if a user has an ABT of a certain type of tokenURI   I believe it was me that mentioned the use case for balanceOf. I can imagine that doing the spec for this EIP is particularly difficult as it has to be loose enough to fit many use cases, and remain as minimal as possible. You\u2019re saying that tokenURI indicates a \u201ccertain type\u201d but that I believe is implementation specific. For example, each student receives individual tokenURI\u2019s that says they passed (with additional info like grade etc.) but they could be for the same qualification type. It could be that the ABT contract address represents a type (of qualification), or does it? There could be separate ABT token contracts for each school year, or departments etc. Again, implementation specific. For a community giving the same type of ABT token to an address (the use case I  mentioned earlier), balanceOf would indicate strength of e.g. approval/trust given from the community; each tokenURI could point to text input of why a particular community member decided to give this ABT token. In this case, the ABT contract address could indicate a certain type. Still an implementation detail I feel that can work within the spec. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.449531949531949
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "114",
                    "likes": "0",
                    "time": "13/07/2022-10:10:20",
                    "content": "I know that the latest spec has removed Revoke but I believe a rethink is necessary. Hard to predict of course without running this in the wild but imagine a scenario that an ABT has built great reputation but was somehow duped by an outfit that then did something terrible, like a rugpull. Then anyone who had built up a good reputation/business from holding that ABT would then be affected unfairly. A worse scenario could be that the community is unaware about the bad actor, since they still hold the ABT that continues to affirm them as a good actor, unknowingly, relationships would continue as normal. I believe in these scenarios, the issuer should be able to recall the ABT from the bad actor, in order to save the ABT\u2019s trust level and for it not to affect all others holding and the issuer of the token unduly. I understand the argument that it can be used by the issuer for manipulation but any well functioning community would devalue that ABT token anyway. So a rethink to introduce Revoke again in some form, I believe is necessary, else it could seriously affect trust/adoption if the above type of scenarios happen often. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.007352941176471
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "115",
                    "likes": "1",
                    "time": "13/07/2022-10:31:56",
                    "content": "Hey, we just renamed Revoke to Transfer(owner, address(0), tokenId) in the reference implementation. It\u2019s syntactically it\u2019s different, semantically it is the same. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "116",
                    "likes": "0",
                    "time": "01/08/2022-10:41:34",
                    "content": "Updated EIP-4973 with the long-intended changes here: Adjust EIP-4973 interface to add `function give(...)` and `function take(...)` by TimDaub \u00b7 Pull Request #5209 \u00b7 ethereum/EIPs \u00b7 GitHub  Added a function give and a function take that both respectively allow minting a token consensually between two addresses using EIP-2098 and EIP-1271 (so can be used to proxy consent too) Backtrack to event Transfer  Introduce the mental model of \u201cequipping\u201d and \u201cunequipping\u201d tokens as metaphor for \u201con-chain\u201d vs \u201coff-chain.\u201d Hence, rename function burn(...) to function equip(...)   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "117",
                    "likes": "0",
                    "time": "04/08/2022-15:29:35",
                    "content": "As there have been questions about how to generate the compact signature required to pass function give(...) and function take(...) and since specifying the code within the .md document, I\u2019ve opted to create a JavaScript function using ethers that can generate the signature and also informs the structure of the inputs. The resulting section \u201cEIP-712 Typed Structured Data Hashing and EIP-2098 Compact Signature Creation\u201d is more concise now and points to the .mjs files: EIP-4973: Account-bound Tokens ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-2098",
                        "https://eips.ethereum.org/EIPS/eip-4973#eip-712-typed-structured-data-hashing-and-eip-2098-compact-signature-creation"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "118",
                    "likes": "0",
                    "time": "10/08/2022-16:37:45",
                    "content": "Just released v0.4.0 of the ABT reference implementation to catch up with the specification: ERC4973/changelog.md at master \u00b7 rugpullindex/ERC4973 \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "119",
                    "likes": "1",
                    "time": "12/08/2022-08:41:20",
                    "content": "posted a rant on Twitter about the toxicity of working on SBTs in the Ethereum community: https://mobile.twitter.com/timdaub/status/1557997701874286593 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "120",
                    "likes": "2",
                    "time": "13/08/2022-08:53:25",
                    "content": "We moved EIP-4973 into \u201cReview\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "121",
                    "likes": "0",
                    "time": "28/08/2022-10:29:06",
                    "content": "   arXiv.org    A Plural Decentralized Identity Frontier: Abstraction v. Composability... In this article, we explore the tension between abstraction and composability in web3 today, specifically within identity solutions, and argue that the current standard DID v1.0 is sufficiently under specified, allowing for many methods and...      ",
                    "links": [
                        "https://arxiv.org/abs/2208.11443"
                    ],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "122",
                    "likes": "1",
                    "time": "28/08/2022-10:32:03",
                    "content": "Should EIP-4973 include consensual revocation? EIP-5484 proposes it: EIP-5484: Consensual Soulbound Tokens ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "123",
                    "likes": "0",
                    "time": "04/09/2022-12:21:11",
                    "content": "We probably want to implement EIP-5267: Retrieval of EIP-712 domain for improved developer experience and dynamic domain retrieval. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dror",
                    "index": "124",
                    "likes": "1",
                    "time": "05/09/2022-06:57:00",
                    "content": "I\u2019m trying to understand the \u201croles\u201d defined in the EIP712 structure Aggreement(active,passive) If A want to create a \u201cgive\u201d request to B, he first asks B to sign Aggreement(active=A, passive=B), but then A could issue a \u201ctake\u201d instead of \u201cgive\u201d. Instead, I think the agreement should be TransferAgreement(from,to,token). That is, the signature should describe the token movement direction, not the user issuing the transaction. The signer of this structure depends on the inactive side of the transaction (you could argue that actually both sides sign, as sending this transaction requires the \u201cgiver\u201d or \u201ctaker\u201d to sign it.) In another note, you could support meta-transactions by having the signatures of both \u201cgiver\u201d and \u201ctaker\u201d: e.g. move(address giver, address taker, bytes giverSig, bytes takerSig, string tokenURI) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "125",
                    "likes": "5",
                    "time": "09/09/2022-10:53:49",
                    "content": "@dror, thanks for your comment it\u2019s all relevant and valid. I\u2019ll respond to it in more detail in the future.  How EIP-4973 Account-bound tokens could drive curation in the music NFT industry In the following post, I want to highlight a problem we\u2019ve encountered in the music NFT industry. As a quick aside, these days, I work as a tech lead on https://neume.network, and we\u2019re essentially building a socially scalable data pipeline to extract and augment on-chain data. For all of the music NFTs hosted on Ethereum, in contrast to the Graph Protocol, at Neume, we\u2019re not trying to make contract storage data more accessible. Instead, we want to build a list of music NFTs that users can listen to via an app like Spotify.  Screenshot 2022-09-10 at 19.50.091592\u00d71122 110 KB  A quick disclaimer: My work on Neume Network is financed by hifilabs.co, and they\u2019re creating https://musicos.xyz, an audio player built on the music NFT data that we\u2019re indexing with the Neume Network software. Now: As it\u2019s a lot of work to extract music metadata from smart contracts, today we got some users\u2019 feedback, and to my surprise, it sounded like we had unconsciously optimized for indexing the big curated music NFT platforms like https://sound.xyz, https://beta.catalog.works/, https://zora.co/, and https://www.mintsongs.com/ V2. But truly, this was never our intention: But I was caught off guard by the user feedback, and so this post is somewhat a reflection on what happened and led to problematic emergent effects.  Screenshot 2022-09-11 at 10.36.431920\u00d71084 84.6 KB  See, for https://musicos.xyz, as it\u2019s an audio player like Spotify, we naturally wanted to index the best possible and probably also most popular platforms. So when starting the project, we intuitively went for the popular ones - those that we knew provided nicely sounding songs. And when they launched musicos a few days ago, I suddenly found myself confronted with the following user feedback questioning the credible neutrality of the Neume Network indexer. Here\u2019s what users said:  Screenshot 2022-09-09 at 12.53.181832\u00d7474 119 KB   Screenshot 2022-09-09 at 12.50.531802\u00d7516 134 KB  Additionally, an artist I am I fan of had this to say on Twitter:  Screenshot 2022-09-09 at 16.07.271188\u00d7634 69.1 KB   Welcome to the Machine\u2026 The \u201cAttention Economy\u201d So let us unpack what is being discussed here. In my own words: Guspy, Supersigil, and thepark.eth are all asking for their tracks to be listed on the music-os app we had just released. And they did so by pointing out an interesting dynamic in the music NFT space. guspy mentions that the music they had minted through a custom contract on https://www.manifold.xyz/ isn\u2019t showing up on music-os. They\u2019re saying that having their contract being indexed is posing a challenge: And that instead, had they minted their song on Catalog, Sound, or MintSongs, then it probably would have made it into music-os. Extrapolating their statements here, too, we can reason that any track that gets lots of exposure through a music player may fare better on first and secondary sales. So potentially, for guspy et al., having their songs exposed on music-os can potentially mean an improvement in income. Or anyways that their songs are listened to at all. In the post by Supersigil below, they help double down on the argument, namely that artists need to be given the option to \u201cbe their own platforms\u201d and that hence the favoritism of Neume Network to implement the big music NFT platforms first is a challenge to all artists hosting independent contracts. There\u2019s also an interesting insight in their posts: Namely that the platforms are curated by genre or type of music. And so, despite some artists\u2019 work having the potential for popularity - they may never end up being exposed to larger audiences given the moderation policies of the respective platforms.  Experimenting with Music NFTs And there\u2019s actually more context to unpack here: Historically, the big platforms like sound.xyz and catalog.works have been heavily curated - or at least that\u2019s how their music sounds to my ears. I can back this up with visitor data, too, as I had played around with a minimalist website that allowed users to listen to sound.xyz and catalog.work\u2019s songs on a website I called https://tracks.lol. For a brief moment in time after its release, it gathered a notable listener community and was widely shared on Twitter despite the website having any meaningful web design or other functionality. Below\u2019s a screenshot of the page, or you can see it yourself by visiting: https://tracks.lol:  Screenshot 2022-09-09 at 16.17.56936\u00d7848 223 KB  And what my intention had been here is that I had been experimenting in the true sense, and so I carefully controlled the website\u2019s utility to test the music\u2019s popularity. As you can see, there weren\u2019t any fancy animations - no marketing website to convert users. All there was a single page that played music from sound.xyz and catalog - with the hypothesis being that people would still like this arguably \u201cshitty\u201d website because it played nice music! And oh boy, did they! Here\u2019s a screenshot of my plausible.io tracker, and you can access the numbers yourself by clicking the following link Plausible \u00b7 tracks.lol  Screenshot 2022-09-09 at 16.23.172016\u00d71008 152 KB  So clearly, it couldn\u2019t have been my sick web design skills or the amazing utility you got from the website\u2019s controls. The reason people briefly shared the page was the music on it was nice. And let me reassure you, this is also the qualitative feedback I\u2019m gathering from anyone that I manage to expose to sound.xyz and catalog\u2019s tracks! They\u2019re doing a great job in properly curating NFTs to seed the initial consumption network. And I\u2019m capable of negating that argument, too: Where if you\u2019d built a website that focuses on listing the highest grossing NFT sales on OpenSea, you\u2019d end up not with an aesthetically pleasing newsfeed of NFTs: You\u2019d just get a seemingly random list of Bored Apes, and, in fact, I can prove this to you right away by asking you to visit: Top sales | Context where at the time of writing, the four latest updates in the feed are apes - boring!  Screenshot 2022-09-09 at 17.49.081198\u00d71226 178 KB   Curation, a double-edged sword But despite curation platforms like sound.xyz and catalog.works accelerating the music NFT industry in the first place, there is a sort of tragic story in this utility provision too, which are the problems pointed out today by thepark.eth, Supersigil, and guspy: Namely, that while curation can excel an artist\u2019s work, it\u2019s also gatekeeping other artists from putting their latest tracks in front of a larger audience. And it discriminates against genres. In the end: This capability to curate who and what song is gonna be popular comes with a lot of influence, and so: curating, gatekeeping, and/or censoring: Those actions create power structures. Structures that are actively being misused today to seek further self-serving profit. It is actually well documented, and just a recent prominent example is CoryxKenshin\u2019s rebellion about Youtube\u2019s arbitrariness, favoritism, and racism in moderating potentially harmful content. It highlights a few faults.  Screenshot 2022-09-10 at 20.25.051596\u00d71104 128 KB  The fact that those who moderate do so opaquely - with non-consistent guideline interpretation. With potential implicit bias and little public accountability. Governance, as we say in the crypto-sphere, doesn\u2019t seem to be a meaningful keyword. But OK - what has any of this to do with EIP-4973 and Account-bound tokens? And yes, at least for now, this post has been overfocusing on the problems and not a solution. It\u2019s a principle I work by called \u201cproblem-driven development,\u201d and so now, since we\u2019re sufficiently informed, let\u2019s discuss a potential solution.  Thesis first: \u201cBroad commoditization of infrastructure creates newfound equity\u201d A thesis I have been pursuing with https://rugpullindex.com, the Neume Network, and now also with Account-bound tokens is how infrastructure provision and making it broadly available to any players in a market can produce a wealth-transfer or generally broader equity. With rugpullindex.com I\u2019ve seen this because others built mobile apps based on my API. With Neume Network, we\u2019ll see this effect emerge as developers are capable today of replicating the https://musicos.xyz experience by using our GPL-3 licensed Neume Network crawler or by simply using our data set at neume-network/data. As pioneered by Sabre and Amadeus in the airline industry, by commoditizing and co-owning the infrastructure - namely the database that holds all future flights - similarly, we\u2019re able to create competition around the supply of good music NFT metadata offerings: And we postpone what Ben Thompson calls \u201cAggregation Theory,\u201d an effect of profit-seeking and monopolizing a market\u2019s supply side. But enough with the theory: Simply put, what the above means is that EIP-4973 can make the data structure for consensual music curation available to anyone with a wallet using account-bound tokens to express agreements on-chain. And it simultaneously removes relevancy from the big curation platforms like sound.xyz and catalog. So how would it work?  Consent-based Music Curation using Account-bound tokens See EIP-4973 is a truly peer-to-peer contract in the sense that no single individual or group has different privileges when interacting with the contract. This isn\u2019t true for many contracts, by the way! Most EIP-20 contracts implement permissioned minting, and so do EIP-721 tokens to preserve artificial scarcity. But EIP-4973 doesn\u2019t implement such hierarchical logic. It\u2019s flat, and instead, for two addresses (EOAs or contracts), if both addresses provide a valid signed message, then an Agreement over a document hosted at string tokenURI may be etched to the chain.  Screenshot 2022-09-10 at 19.51.52796\u00d71126 58.4 KB  That storing of a consensual agreement can be done two ways - and surprisingly, it\u2019s NOT done through minting, but instead, we implement two bulky functions called function give and function take. Here\u2019s a drawing of how they work.  Screenshot 2022-09-10 at 13.13.051590\u00d71118 65.1 KB    from can give an ABT to to and is the sender of the transaction.  to can take an ABT from from and is the transaction\u2019s sender.  I\u2019m linking the reference implementation code snippets below in case you want to dive deeper. But for continuing to read this post, it\u2019s not necessary to understand them deeply.   github.com   rugpullindex/ERC4973/blob/1c8d612d78739c2f7bd8cae95be808bcbf3a1cae/src/ERC4973.sol#L78-L88                             function give(               address to,               string calldata uri,               bytes calldata signature             ) external virtual returns (uint256) {               require(msg.sender != to, \"give: cannot give from self\");               uint256 tokenId = _safeCheckAgreement(msg.sender, to, uri, signature);               _mint(msg.sender, to, tokenId, uri);               _usedHashes.set(tokenId);               return tokenId;             }                             github.com   rugpullindex/ERC4973/blob/1c8d612d78739c2f7bd8cae95be808bcbf3a1cae/src/ERC4973.sol#L90-L100                             function take(               address from,               string calldata uri,               bytes calldata signature             ) external virtual returns (uint256) {               require(msg.sender != from, \"take: cannot take from self\");               uint256 tokenId = _safeCheckAgreement(msg.sender, from, uri, signature);               _mint(from, msg.sender, tokenId, uri);               _usedHashes.set(tokenId);               return tokenId;             }                           To clarify: The result of both of these functions is that a new token is minted to address to: And their validation method is similar. Namely, both need two valid signatures of string tokenURI from address from and address to. Their difference is who represents the active part on-chain and who just provides a signature. The figure below outlines the difference in both cases:  Screenshot 2022-09-09 at 18.30.491596\u00d71128 102 KB  For function give(address to, ...), address from must wait for address to's signature to arrive and can only then send the transaction on-chain to cement their agreement. Whereas in the case of function take(address from, ...), address to takes the ABT from address from and hence has to include their signature. So these primitive functions have been deliberately called \u201cgive\u201d and \u201ctake.\u201d It\u2019s because, in the World of Warcraft universe, where Soulbound items were first implemented and since this in-game metaphor has become EIP-4973\u2019s baseline, players could also \u201cgive\u201d and \u201ctake\u201d certain items. In case a player completed a quest, the NPC often \u201cgave\u201d the player items: But it was at the player\u2019s discretion to preserve them in their bag. Likewise, although this challenges the \u201cconsent\u201d metaphor, players could \u201ctake\u201d items from a dragon or firelord they had slain earlier.  On-chain consent agreements for music NFT curation So going back to our initial story of how EIP-4973 Account-bound tokens can help the music NFT industry\u2019s curation problem, here\u2019s what I\u2019d like to say: Right now: It is a one-way street where artists are practically dire for having their tracks minted on popular curation websites. It\u2019s also a problem as the infrastructure for curation is proprietized - so assuming this moat strengthens further over time: It\u2019ll also negatively raise the bar for unestablished artists to publish. And we must acknowledge that the above-mentioned dynamic won\u2019t go away overnight too. Instead, given our thesis that commoditizing infrastructure can break markets, I think by using EIP-4973 for consensual on-chain curation of music NFT playlists, I think we could achieve more equitable outcomes if more people could become curators. It is because standard adoption can initially level the playing field of access to attention. Instead of one website being able to promote their tracks and build potentially proprietary solutions, with EIP-4973, we have a primitive that can express bidirectional agreements between curator and artist.  Screenshot 2022-09-10 at 20.22.461586\u00d71124 111 KB  And sure, we could implement contracts where the curator is in charge of administering the listing. But I think that\u2019s an unwise design, given how reproducible content is curated nowadays. Rather, if the authors and the curators mutually agreed on which tracks end up on what lists - I believe this would carry a higher signal when compared to curator-only feeds. Additionally, by making the curation infrastructure usable by anyone, a greater degree of competition would improve outcomes and reduce the risk of a single party monopolizing. Wide-scale adoption of this standard would incentivize indexers and other NFT infrastructure providers to implement its interfaces and make the on-chain data symbolizing publicly-visible agreements broadly available. If you\u2019re deep in the traditional music industry, you probably know how complicated moral rights can get - and here\u2019s a standard that can potentially solve some of this domain\u2019s questions. So how would this end up looking? Here\u2019s a sketch:  Similar to https://presentmaterial.xyz\u2019s on-chain curation contract, we should come up with a standard agreement JSON template that the curator and artist can collaboratively sign. The active part in the agreement (who sends the transaction), would then upload the agreement on a network like IPFS, where the JSON\u2019s context-addressability is guaranteed They\u2019d send over the agreement to the passive party where it gets signed Once the signature is back at the active part: They can start etching the agreement on-chain. The smart contract and the Ethereum consensus algorithm check the validity of both parties\u2019 signatures, and if they\u2019re valid, the Account-bound token gets emitted, and an event Transfer(address from, address to, uint256 tokenId) is sent.  Now, it\u2019d be great if, additionally, a \u201ccuration release signal\u201d could be emitted that clarifies to music NFT indexers when a new song is released. And that could happen after having reached an agreement between the artist and curator. Remember, minting an NFT is not laying claim to license your work permissively. An artist retains all copyright, and so technically speaking, unless there\u2019s a specific agreement put in place, reproduction of a music NFT is simply a legal grey zone many seem to tolerate for now. Hence this whole essay on chainifying two parties\u2019 agreement - Since the string tokenURI's content would detail the conditions under which curator and artist have decided to collaborate to release the NFT. For the curator, there\u2019s no clarity on whether they\u2019re allowed to reproduce the artist\u2019s song on their site. And for the artist, there\u2019s transparency regarding what can be done with their work and what can\u2019t. So that\u2019s it, that\u2019s why EIP-4973 Account-bound tokens could drive curation in the music NFT industry. Anyways, this is a very long post, so I\u2019d now like to start concluding it.  How EIP-4973 can be used for music NFT curation In this post, we\u2019re documenting the problems of the emerging music NFT industry and how the aggregation of music NFT supply creates suboptimal outcomes for independent artists. Our thesis is that well-curated media content is useful to anyone but that it can also easily lead to power abuse. To combat this potential negativity and to \u201cbreak the curation market,\u201d our thesis is that the commoditization of infrastructure can help level the playing field. And specifically, it means that by mainstreaming consensual content curation, a new ecosystem of dApps could emerge that serves curators and artists alike. EIP-4973 Account-bound tokens are the basis for expressing consensual agreements on-chain. Their lack of permissions in minting makes them ideal to be applied broadly and in a true peer to peer fashion. ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/9/90a8b06850315f8c852b5f88a46a4ad11d8c1d4b.jpeg",
                        "http://hifilabs.co",
                        "https://musicos.xyz",
                        "https://sound.xyz",
                        "https://beta.catalog.works/",
                        "https://zora.co/",
                        "https://www.mintsongs.com/",
                        "https://ethereum-magicians.org/uploads/default/original/2X/f/fc159a36b8d5c06edd201dfef8a5d0024771c142.jpeg",
                        "https://musicos.xyz",
                        "https://ethereum-magicians.org/uploads/default/original/2X/b/bcfe34ca0bae6c4bb84994d601d8b56bebdd6455.png",
                        "https://ethereum-magicians.org/uploads/default/original/2X/8/85a84a9c977fc4b6db2e56ca88613e5ac1b2bc62.png",
                        "https://mobile.twitter.com/thepark/status/1568127129203920896",
                        "https://ethereum-magicians.org/uploads/default/original/2X/2/26f51fc2dbab4a5488cdc3d2d177fe65f528b6e3.png",
                        "https://www.manifold.xyz/",
                        "https://tracks.lol",
                        "https://tracks.lol",
                        "https://ethereum-magicians.org/uploads/default/original/2X/d/db5b5bcf3df27a409aee6c7919dffc8e4884c62d.png",
                        "http://plausible.io",
                        "https://plausible.io/tracks.lol",
                        "https://ethereum-magicians.org/uploads/default/original/2X/8/89290158e1948e08971ccd91d37591aac6e5b9b3.png",
                        "https://context.app/trending",
                        "https://ethereum-magicians.org/uploads/default/original/2X/2/2a346ebbc94cd54369e3855dee630d67a5aa11ca.jpeg",
                        "https://www.youtube.com/watch?v=GaHcnPDcUOE",
                        "https://ethereum-magicians.org/uploads/default/original/2X/6/60e6e5b7fbdbf77ab87eb39e62f46afa795bfbf8.jpeg",
                        "https://rugpullindex.com",
                        "http://rugpullindex.com",
                        "https://musicos.xyz",
                        "https://github.com/neume-network/data",
                        "https://stratechery.com/",
                        "https://ethereum-magicians.org/uploads/default/original/2X/f/fabbb181cb175e5068b975032bc2c330ffd06014.jpeg",
                        "https://ethereum-magicians.org/uploads/default/original/2X/7/78e7e593c66db7cf8ef984dc01ff6213894880a0.jpeg",
                        "https://github.com/rugpullindex/ERC4973/blob/1c8d612d78739c2f7bd8cae95be808bcbf3a1cae/src/ERC4973.sol#L78-L88",
                        "https://github.com/rugpullindex/ERC4973/blob/1c8d612d78739c2f7bd8cae95be808bcbf3a1cae/src/ERC4973.sol#L78-L88",
                        "https://github.com/rugpullindex/ERC4973/blob/1c8d612d78739c2f7bd8cae95be808bcbf3a1cae/src/ERC4973.sol#L90-L100",
                        "https://github.com/rugpullindex/ERC4973/blob/1c8d612d78739c2f7bd8cae95be808bcbf3a1cae/src/ERC4973.sol#L90-L100",
                        "https://ethereum-magicians.org/uploads/default/original/2X/4/43962f07b25e5a7224c20e7e6349738a7c4043c5.jpeg",
                        "https://ethereum-magicians.org/uploads/default/original/2X/6/680e4f6195854a9e895266dffab12fe35e8d88fb.jpeg",
                        "https://presentmaterial.xyz",
                        "https://etherscan.io/address/0x6422Bf82Ab27F121a043d6DE88b55FA39e2ea292#code",
                        "https://ethereum-magicians.org/t/idea-p2p-soulbound-token-call-for-a-better-name/11262/7"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.717895398252542
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "126",
                    "likes": "1",
                    "time": "15/09/2022-11:33:04",
                    "content": "A roadmap for what should happen now:  we should further diverge from the classic Soulbound tokens meme and pave our own path With, e.g. using EIP-4973 for consensual on-chain agreements, I think we have a valid and extendable use case Areas where we\u2019d need more improvement: An agreement can either be directional or most of the time, an agreement reflects the will of a minimum of two parties. Hence it\u2019d make more sense to emit a token to both parties in an agreement rather than just one. Similar to how when a contract is signed, both parties get a copy we must fix the problem @dror outlined: EIP-4973 - Account-bound Tokens - #124 by dror  consider (consensual/individual) withdrawal of the agreement too expiry dates  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.619047619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "127",
                    "likes": "1",
                    "time": "16/09/2022-11:58:07",
                    "content": "Excellent write-up. Hopefully Web3 can also solve the issue where Web2 tech platform owners make curators work for them for nothing, whilst they accumulate the value created. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 10.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "128",
                    "likes": "1",
                    "time": "16/09/2022-11:59:43",
                    "content": "That\u2019s great, as long as EIP-4973 still allows for directional agreements then I\u2019m happy. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "129",
                    "likes": "3",
                    "time": "18/09/2022-23:36:57",
                    "content": " EIP-4973 allows for mutually agreed, peer-to-peer minting - without implicitly determined power distributions You can make a surprising discovery about EIP-20 and EIP-721\u2019s functioning when you notice that they\u2019re entirely unusable without at least once conceptually invoking a minting functionality. Now, whether a user does it via calling the often provisioned function _mint(...) function or by manually setting account balances via the constructor doesn\u2019t matter. And surprisingly, minting by itself is suspiciously absent from the Ethereum Improvement standardization Process. Isn\u2019t this odd: No EIP-20 token or EIP-721 contract would be functional today hadn\u2019t at least one of their implementers decided to implement and call a non-standardized functionality and minted tokens to some addresses. And sadly, this comes with the obvious consequence of power aggregation and distribution unfairness. However, for the sake of this post and to make it a little more emotional, I want to rather say: leaving the minting function of EIP-20 and EIP-721 non-canonicalized is a failure in implementing a truly peer-to-peer system. What do I mean by that?  Building peer-to-peer systems If you\u2019ve ever built networked systems, you probably understand an obvious way to encode power into a distributed system: The client-server model. Any frontend+backend app is essentially that: It\u2019s fundamentally not peer-to-peer and instead drastically elevates the server in the power hierarchy over clients. This is not only the case for clients coming into existence by downloading and executing server-feed code .e.g., in a browser (compare to, e.g., a smartphone app), it becomes especially apparent when only a server can decide which users are rightfully logged in and can read certain tables in the database. I say that the hierarchy in a web app is fundamentally not peer-to-peer as in most implementations, the server controls the client entirely, and since we\u2019d even go as far as saying that the client could manage the server, then we\u2019d consider it an attack vector.  Client-server architectures Now: If you\u2019ve ever played around with peer-to-peer libraries - which I recommend - as a client-and-server developer, you\u2019ll soon realize feeling stuck. A sense of hyper normalization has set in, and you\u2019re staring at the screen: Uhm, how\u2026 do I build anything without immediately encoding power? See, already by implementing a chat client that broadcasts a user\u2019s messages and receives other users\u2019 texts - moderating the network\u2019s state is very different from a single server backing up all chat history. In the practical case of a user broadcasting messages with unwanted content to others, albeit all users being individually capable of deleting them from their storage, the messages would remain untouched and replicable for any user implementing a non-message-deletion policy in their chat client. So contrast the above to the traditional client and server model, where the client literally spawns from downloading whatever the server delivers: In that case, it\u2019s rather likely the client didn\u2019t store any chat message history at all. But not only that, additionally, the server could implement privileging certain clients over others. Clearly, it\u2019d then also mean that the server could implement logic that allowed an administrator to act on behalf of the community to delete messages containing unwanted content - and unless client users implemented their own software clients, they\u2019d have to show whatever the server delivered. And generally: They\u2019d probably have a hard time upgrading their authority to that of the server. Consider this: You could technically build a Twitter client that\u2019d only show you things you explicitly want to see, but your filtered view is ultimately dependent on what Twitter would deliver to you in the first place. And all of this to highlight my initial point: Namely that we rarely \u201cjust\u201d build peer-to-peer systems. In fact, when given the opportunity, the anxiety for opportunity makes us want to flee back to more familiar architectures.  EIP-20 and EIP-721\u2019s permissioned minting At this stage, it is important to highlight again that EIP-20 and EIP-721 have sadly shied away from canonicalizing and mandating the minting function to be publicly accessible - and sadly, this has led to many bad results. Famously in the ICO craze - with the reckless selling of PFPs and with the rise of questionable DeFi Ponzi scheme platforms that likely all implemented some sort of founder\u2019s and early investors privilege to flip the value along the adoption curve. If null is the billion-dollar mistake, then what tragedy is the failure to canonicalize the EIP-20 minting function? But despite all of the above criticism, I don\u2019t want to purely paint a negative picture as to me this can now also be a moment of opportunity and a chance to course correct.  The Soulbound tokens meme is a chance for a clean-sheet design With DeSoc and comparable philosophical ideas regarding the implementation of social power in blockchain data structures, I think with the emergence of a new token model like Soulbound tokens, we\u2019re now in a spot where the time and will could be in our favor. And so I want to take this moment to point out interesting directions that peer-to-peer token emission through, e.g., EIP-4973\u2019s function give(...) and function take(...) could go. In fact, a really great example that gets my imagination running wild is the countless examples of Stephen Wolfram\u2019s cellular automata, that from simple rules, can spawn seemingly impossible structures. Convince yourselves:  And so this is where I\u2019d like to propose heading towards the minting functions for EIP-4973. I know: for now, it must seem intimidating and unfamiliar that anyone is capable of minting a new token from an EIP-4973 contract. Anyone and with any tokenURI. But it is also important to realize that Account-bound tokens in this implementation are hence fundamentally incompatible with the permissioned structure of classic EIP-20 and EIP-721 contracts that often put this functionality into the hands of a few privileged. I also think that we may not even have many use cases where true p2p minting could make a difference either - but with continuing to develop this standard, I think we could end up in a spot where the implementer is capable of defining a cellular automaton-ish rule set that describes the relationship between a token holder\u2019s social power and their reproducibility in that, e.g., DAO founders can invite new members, but members can\u2019t.  Conclusion In this post, I\u2019ve highlighted the caveats that come from EIP-20 and EIP-721\u2019s failure to define canonical minting functions with descriptive automata rule sets. I\u2019ve defined peer-to-peer as a power hierarchy between computer systems in the context of distributed execution, and I\u2019ve shown how client-server architectures and the prevalence of the web made us all hypernormalized into writing backend and frontend code. But I\u2019m reflecting my criticism and I\u2019m seeing it as a chance to improve the current systems by experimenting further with flattening the distributed systems architectures, e.g. by building smart contracts that treat all users as equally. My vision: an EIP-4973 standard that allows the implementers to define automata reproduction rules to implement social hierarchies interpretable, simulatable, and predicatable to all. ",
                    "links": [
                        "https://ethereum-magicians.org/t/erc-5679-mint-and-burn-tokens/10913/12",
                        "https://ethereum-magicians.org/t/erc-5679-mint-and-burn-tokens/10913/2"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.264475108225108
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "130",
                    "likes": "2",
                    "time": "18/09/2022-23:41:32",
                    "content": "I\u2019ve spent years working on competing solutions to Account bound tokens - namely verifiable credentials with decentralized identifiers where I\u2019ve been an editor of the verifiable credential spec and have audited numerous did methods as an editor of the did spec registries. I definitely have a bias here, but I\u2019m not opposed to this architecture. It seems to align well with the way many other ETH based dApps have approached this problem, but I do have two major issues with this approach. First off, I\u2019m genuinely surprised that there\u2019s not been one mention of attaching PII to an account on chain in this thread nor in the EIP itself. What sort of privacy nightmare are we trying to create here or am I missing something? 2nd, the primary debate around transferability is a red herring problem in my opinion that\u2019s only occurring because Ethereum still hasn\u2019t decoupled the address identifier (e.g. the way an account is identified) from the cryptographic key authentication material (e.g. the actually public key used to verify a signature). This would be solved if account abstraction was completed so that proper key rotation can occur at the account layer on chain via an authorization to update and revoke keys. Then the account just becomes a simple identifier of an on chain persona. I\u2019d really hope that more consideration comes into play here around privacy before this ships or you\u2019ll find yourself setting the digital credential space back 5 years or being a massive target by the other competing solutions in the digital credential space who\u2019ve thought this through. ",
                    "links": [
                        "https://w3c.github.io/did-spec-registries/"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.28125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "131",
                    "likes": "0",
                    "time": "18/09/2022-23:45:31",
                    "content": "As always: Privacy and linking PII is definitely a problem but always one of the blockchain and not an interface standard, so I\u2019d be happy if people could not make me or co-authors personally responsible for that. Thanks! In 2015 I thought I was funny, encoded my application to a job to Bitcoin addresses, and sent it as transaction. It is still out there, and back then, SBTs didn\u2019t exist, so please direct your criticism correctly to those working on blockchain governance and ensuring its immutability. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "132",
                    "likes": "1",
                    "time": "18/09/2022-23:55:54",
                    "content": "You may be able to convince yourself of that truth, but is that really how you\u2019re going to feel in 10 years? Creating technology doesn\u2019t absolve us of a social responsibility in my opinion. I used to believe that and even wrote a blog post as such. I know I\u2019m wrong now. That holds true based on the people I\u2019ve spoken with as well. Every person who I\u2019ve spoke with that contributed to the development of web cookies considers it a failure because they didn\u2019t consider privacy. They at least have an excuse that privacy was a second order problem that hadn\u2019t even been realized when they made it. We can\u2019t say the same about this today. Secondly, if you do believe that this is something that dApps developers should be considering but is out of scope why isn\u2019t there a mention of that in the first place anywhere in this thread or discussion? This will inevitably leads implementers to believe that it\u2019s acceptable or that developers are somehow meant to assume this knowledge. This isn\u2019t a hard problem to solve either. At the very least just link to data off chain and put an authz check up so that the data isn\u2019t being published publicly and there\u2019s a basic consent check being made. At least than we\u2019re halfway supporting GDPR because right now nothing about this is GDPR compliant and dApp developers will get called into question by regulators as soon as this gets deployed widely. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.913798701298701
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "133",
                    "likes": "0",
                    "time": "19/09/2022-00:21:05",
                    "content": "I understand your concern given the standard\u2019s broad popularity. For sure, we have a responsibility here and I\u2019m not denying that privacy is a big issue in the blockchain space. In the early days of the RTWOT, I contributed to multiple papers that probably later informed the final design of the DID and VC spec. I\u2019m named a contributor and whatever. I\u2019m generally very friendly to this group of people, and I really respect their work. EIP-4973 is not stepping on VC\u2019s toes, those standards are complementary. If anything, VC contributors should be concerned about EIP-712 being directly competing with what they\u2019re trying to do. But frankly, over the last few months, I\u2019ve become very disappointed with the way the VC group behaves themselves - especially since they unrightfully shit on the entire work of someone like me that literally develops a standard for an MMORPG game mechanic in their free time. And I mean really shit as, e.g., a popular person compares Soulbound tokens to herpes, etc. And so I also think that your cookie example is extremely misleading here: I am not working for an extractive ad tech company that develops browsers to track their users to harvest data to serve them better ads. And I also don\u2019t own a significant share of interest tokens that would lead me to do that. I\u2019m also not saying you did that or the cookie developers. But now we\u2019re here, and it\u2019s not an individual\u2019s fault IMO, but the set up of those ad tech giants. I have also worked with many companies over the years, and I have always advocated for my jurisdiction\u2019s privacy and data protection laws. I have had a significant impact on other\u2019s data, and many people can be thankful to me that their PII isn\u2019t stored on-chain because I opened my mouth. In all coms channels of this standard, I have always tried to teach people about not keeping PII on-chain. But if you follow my social media, you can see that people rather like to follow users that compare SBTs to the herpes virus, so my reach is limited, sadly. But again: It really doesn\u2019t matter what functions you use to encode PII to store it on Ethereum. It will make no difference if it comes from an EIP-20 token, EIP-721 token, or Unicode string. It is obviously a very bad situation, but for real nothing, I can truly influence in this thread specifically. See, the ERC standards track is only about defining a class interface of a Solidity contract object: we can\u2019t even properly enforce implementing certain behaviors (e.g. check sleepminting attacks for EIP-721). Sure I can use strong normative language, but ultimately we\u2019re going to have to rely on the common sense of developers here to know what\u2019s right and what isn\u2019t. Again, you have a reasonable request, and you deserve to be heard. Universally, not all information stored on Ethereum should be easily accessible and the Ethereum Magicians can be a venue to discuss solutions! But not in this thread. So to me, unless you have specific use case examples where a user\u2019s contextual integrity is at risk with the Solidity interface outlined here, I think in this conversation, it is out of scope. But of course, if you have one, feel free to share it, and we can solve the problem.     kdenhartog:  Secondly, if you do believe that this is something that dApps developers should be considering but is out of scope why isn\u2019t there a mention of that in the first place anywhere in this thread or discussion?   If you want to write a section in the EIP about not storing PII, I\u2019ll merge it and make you a co-author. We have an interpretation of the sovereign identity principles here: What are Account-bound tokens?     kdenhartog:  At the very least just link to data off chain and put an authz check up so that the data isn\u2019t being published publicly and there\u2019s a basic consent check being made.   Yeah absolutely, and any implementer can do that by reverse-proxying the access to the tokenURI resource. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.3728625541125545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "134",
                    "likes": "0",
                    "time": "19/09/2022-01:04:44",
                    "content": "Woah, the hostility isn\u2019t needed, but I understand where it\u2019s coming from if you\u2019ve been attacked in that way. I don\u2019t condone behavior like that since it\u2019s not conducive to a collaborative environment. Let\u2019s keep this on topic and focused on the development of the EIP. I\u2019ll commit to that and will address a few of the comments here before I go back to discussing the original topic at hand.  But frankly, over the last few months, I\u2019ve become very disappointed with the way the VC group behaves themselves - especially since they unrightfully shit on the entire work of someone like me that literally develops a standard for an MMORPG game mechanic in their free time. And I mean really shit as, e.g., a popular person compares Soulbound tokens to herpes, etc.  I\u2019d suggest directing your personal attacks or character defenses at them then. I\u2019ve not personally attacked you, I\u2019ve critiqued your work as is expected in these forums. However, I can understand how my comments above could be read that way and I apologize especially given the history you\u2019ve encountered. That was not my intention. I don\u2019t personally know you so it would be unreasonable for me to make any sort of assertions about your character. Furthermore, while I do associate myself with that group and have participated as a member I do not endorse every statement of the WG nor it\u2019s members. Please do not associate it as such as that\u2019s an unfair assumption.  I am not working for an extractive ad tech company that develops browsers to track their users to harvest data to serve them better ads. And I also don\u2019t own a significant share of interest tokens that would lead me to do that.  Full disclosure from my end, I own no cryptocurrencies currently and the primary portion of my tokens purchased previously have been BTC and ETH. I have owned other tokens back in 2017 when speculating including BAT, but I sold them before I began working for the company. Furthermore, the purpose of my statements were not to state that you\u2019ve somehow used cookies maliciously, but rather to point out that, as developers, we still maintain a social responsibility for the tools we build and we should be doing our best to contribute where we can. The same could be said for any technology including technology I\u2019ve worked on such as Covid passes that have directly led to social unrest throughout the world. I accept the responsibility that I indirectly contributed to that and am using that knowledge to improve how I build systems in the future.  I have also worked with many companies over the years, and I have always advocated for my jurisdiction\u2019s privacy and data protection laws. I have had a significant impact on other\u2019s data, and many people can be thankful to me that their PII isn\u2019t stored on-chain because I opened my mouth. In all coms channels of this standard, I have always tried to teach people about not keeping PII on-chain.  Thank you, I was not aware of this as I\u2019ve not been on Twitter for the past 3 years nor have I seen your work previously. My impression of you comes only from reading this thread and this EIP since that is what I was trying to critique. Now that we\u2019ve addressed those concerns, I\u2019ll focus back on the topic at hand.   It really doesn\u2019t matter what functions you use to encode PII to store it on Ethereum. It will make no difference if it comes from an EIP-20 token, EIP-721 token, or Unicode string. It is obviously a very bad situation, but for real nothing, I can truly influence in this thread specifically.  I\u2019d argue a nuance here that we do have the ability to influence if we don\u2019t have the ability to outright deny when developing standards. This is why the VC spec has spent so much time authoring a privacy section on many of these topics. Even if the implementers choose to outright ignore normative sections we can still encourage particular behavior (such as publishing PII on the chain) via authoring particular sections on this topic. It sounds like you\u2019re in favor of this as well. I\u2019d be happy to contribute a privacy considerations section to the EIP and will do my research of that link provided. On quick glance, I think we\u2019ll probably need to debate the principles and considerations here a bit to improve this, but that\u2019s ok. As long as we know we\u2019re trying to achieve something that\u2019s doing so and also pointing the developers in the right direction I\u2019m sure we\u2019re generally going to find some consensus on the topic and get some insightful information added to enhance the EIP.  Yeah absolutely, and any implementer can do that by reverse-proxying the access to the tokenURI resource.  Sounds like there\u2019s some recommendations you\u2019ve got here that we could non normatively include as notes to point people in the right direction. One thing I\u2019ve learned is that if we provide examples and good notes than most developers imitate that code and read those things to treat documents like this as gospel truth. Even just updating the assets document could go a long way to pointing developers in the right direction without the need to normatively define these things because most developers don\u2019t read the full document anyways. I\u2019m sure we can find a good solution here, and I wanted to raise these two major concerns here to make sure we\u2019re taking this to the best direction. I\u2019m happy to help contribute to this and offer what I\u2019ve learned through the years of debate. I\u2019m not the enemy just a developer who wants to see good solutions that are useful built just like you (I assume). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.8047038327526135
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "135",
                    "likes": "1",
                    "time": "19/09/2022-02:29:17",
                    "content": "@TimDaub here\u2019s an initial PR to kick off the authoring of a privacy considerations section. It\u2019s all non-normative at this point and really just briefly glazes over many of these issues which could turn into much larger more detail solutions of their own, but it at least gets us a starting point to iterate on. Hopefully, this isn\u2019t too far off from your thinking on this work and if it is let\u2019s continue to discuss and find some consensus about what a privacy by design solution might look like for ABTs.   github.com/ethereum/EIPs         Define initial criteria of a privacy considerations section for EIP-4973   ethereum:master \u2190 kdenhartog:kdh/eip-4973-improvements            opened 02:24AM - 19 Sep 22 UTC               kdenhartog             +20 -0       cc @TimDaub here's the start of a privacy considerations section. I've not finis\u2026hed this yet. Just had to time box it for now, but wanted to get it out there for you to be able to review. I'll be adding to it over the next couple of days still, but curious where you land on this.  Much of this has been derived from thinking that's been defined already in the [privacy considerations section of the VC spec](https://www.w3.org/TR/vc-data-model/#privacy-considerations)       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5686",
                        "https://github.com/kdenhartog",
                        "https://github.com/ethereum/EIPs/pull/5686/files",
                        "https://github.com/ethereum/EIPs/pull/5686"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.733333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "136",
                    "likes": "0",
                    "time": "19/09/2022-10:51:34",
                    "content": "    kdenhartog:  Creating technology doesn\u2019t absolve us of a social responsibility in my opinion. I used to believe that and even wrote a blog post  as such.   I agree with the blog post\u2019s idea that values and view points can change over time. I also like the idea of trust being a more specific application of risk. But where I\u2019d disagree is on the premise of framing tech as possibly neutral. Or rather, that a single human being is capable of fully reflected neutrality. E.g. there are people falsely claiming their work to be more neutral than others. But this cannot be true. There are cultures on this planet, and generally view points, anyone can reach that are entire incompatible with what certain people would call neutral. Even if, for years, you\u2019d \u201csucceed\u201d in creating \u201cneutral\u201d technology, every new day someone could come out of the wood work and present a view point putting in question your seemingly neutral position. So for me the attempt at purposefully building neutral technology won\u2019t work. Within this specification and other work, I\u2019ve adopted problem-driven development, meaning we check the technical vision etc. at the door and iterate on actual problems in the actual context. And then we solve them iteratively. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.346888528138528
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "137",
                    "likes": "0",
                    "time": "19/09/2022-20:56:19",
                    "content": " But where I\u2019d disagree is on the premise of framing tech as possibly neutral. Or rather, that a single human being is capable of fully reflected neutrality.  That\u2019s the exact issue I\u2019ve come to realize was incorrect at the time of writing the post. I\u2019m glad we see it the same way!  Within this specification and other work, I\u2019ve adopted problem-driven development, meaning we check the technical vision etc. at the door and iterate on actual problems in the actual context. And then we solve them iteratively.  I\u2019m happy to stay focused on the problem, but without a vision for where we see this going and how we see it being used we may introduce unintended consequences that would be valuable to address from the outset. For example, if this was truly only intended to be used for your single use case of games there\u2019s not likely to be a problem with privacy at all since that use case hardly links the PII of the person to the avatar being represented in the game. However, we both know given the landscape of digital credentials and the external activity outside the Ethereum community that\u2019s unlikely to occur so it\u2019s useful for us to address these concerns (like we\u2019re doing in that PR I\u2019ve linked). Anyways, I find that this would be an interesting discussion to continue, but I don\u2019t think this is the right place to continue the discussion. Instead we could move it to a different thread and keep this focused on the specific development considerations of EIP-4973. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.264652014652015
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "138",
                    "likes": "1",
                    "time": "19/09/2022-22:30:52",
                    "content": "IMO we can keep it here and you should point out specific problems as you have a good eye for privacy issues. E.g. @rsquare from Otterspace is implementing the standard for DAO voting and they have a demo live. So you two could get in touch, you observe issues in their approach. And if those issues are back tracable to the standard interface we make the changes to the document. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.696969696969697
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "139",
                    "likes": "1",
                    "time": "19/09/2022-23:55:13",
                    "content": "but a document we should co author @kdenhartog is basically an EIP informal document of an interpretation of the ten self sovereign identity principles specifically for Ethereum, similar to how I did it in my blog post. @Sal could also be interested in moderating this I imagine ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "140",
                    "likes": "1",
                    "time": "20/09/2022-02:09:05",
                    "content": "Yeah I need to dig into that a bit more. Right now, I\u2019ve not even done proper justice to playing around with the contract interface and evaluating how it can be used or abused so far so I\u2019ll take a look at Otterspace to see what I can learn from this a bit more.  but a document we should co author @kdenhartog is basically an EIP informal document of an interpretation of the ten self sovereign identity principles specifically for Ethereum, similar to how I did it in my blog post. @Sal could also be interested in moderating this I imagine  I\u2019m keen that seems like something that would be useful to describe some principles of design for dApp architectures. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.075396825396826
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "141",
                    "likes": "0",
                    "time": "20/09/2022-10:05:29",
                    "content": "yes, collaborating on an interpretation of these principles applied to dApps would really propell the space forward in a posititive direction and ultimately a standards doc like eip-4973 would profit by being able to reference and inform decisions axiomatically from it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "142",
                    "likes": "1",
                    "time": "05/10/2022-15:05:17",
                    "content": "    kdenhartog:  Every person who I\u2019ve spoke with that contributed to the development of web cookies considers it a failure because they didn\u2019t consider privacy. They at least have an excuse that privacy was a second order problem that hadn\u2019t even been realized when they made it. We can\u2019t say the same about this today.   Just a quick note to every person who ever develops any sort of identity-related tech from  this moment until the end of human history (a purposefully large net) \u2013 pay attention to these words. Everything I see (excluding this, perhaps) seems almost designed on purpose to create a massive privacy nightmare in the future. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.945887445887446
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "143",
                    "likes": "1",
                    "time": "05/10/2022-19:14:26",
                    "content": "I understand those general concerns about privacy as data generally isn\u2019t deletable on blockchains, but I\u2019d also like to stress that there are widely cited academic publications, most notably H. Nissenbaum\u2019s \u201cPrivacy as contextual integrity,\u201d that build an entire framework for specifically evaluating uses cases based on their privacy where pre-existing norms are considered and it is checked whether those norms are challenged. Hence, through this lens, generally saying: \u201cUsing SBTs/cookies is a bad idea for privacy,\u201d is arguably not reasonable as the underlying reasons for a certain flavor of privacy are culturally specific. E.g., cookies, when not being used as third-party tracking devices to spy on users for the sake of data mining their shopping preferences, are a completely fine tool for web developers, e.g. for implementing sessions. In fact, I\u2019ve used cookies many times in my career, and I\u2019ve never \u201caccidentally\u201d data mined my users\u2019 data and sold their data to advertisers! It\u2019s not only a design question - it\u2019s also about a person\u2019s integrity and responsibility! It\u2019s vital when using cookies, SBTs, ABTs, or any other technology, especially when we\u2019re dealing with PII, to understand how to evaluate the software in Nissenbaum\u2019s contextual integrity framework. If this is done appropriately and with a good faith, then I don\u2019t see any problems with developers using cookies, SBTs, or ABTs.  references  1: Nissenbaum, Helen. \u201cPrivacy as contextual integrity.\u201d Wash. L. Rev. 79 (2004): 119.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.670238095238095
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "144",
                    "likes": "0",
                    "time": "10/10/2022-00:36:56",
                    "content": "Original source: Soulbound Token Workshop at the DAOist - HackMD  Soulbound Token Workshop at the DAOist  Date: 2022-10-09 Location: TheDAOIst, Bogota, Colombia   Minutes  L: Topic is soulbound tokens and their role in governance. Let\u2019s start with intros. Initials in clock-wise order: (A)ngela, (L)ukas, (I)ra, (Ed)uardo, (T)homas, (B)en*, (V)aughn, (Al)ex, (La)uren*, (To)m, (T)im, (K)hai*, (J)ack, (N)ick, (S)helby, (Be)n*  *left earlier  L: Who saw the talk I just gave? Maybe we start summarizing the SBT concept. Jack, what got you started on using SBTs? J: We wanted to have a 1p1v system. We wanted sybil resistant and confidence that people that voted were stakeholders in the project. Many projects don\u2019t consider stakeholder ship. We also wanted to build a quest system and can we repurpose quests to a stakeholdership signal? When we started there was nothing available. The closest we had was Discord roles. We wanted to have level-ups and we worked with Collab.land. We\u2019re manually airdropping. Collab.land\u2019s airdrop wasn\u2019t designed for SBTs. People were attacking Collab.land\u2019s issuance process. L: Originally, the term SBTs was coined by Vitalik et al.'s DeSoc paper. One important topic is permanence, whether I want my SBT or not anymore. How we address this at Otterspace is through Consent. Another important topic was consent: In EIP-4973 it\u2019s addressed with consensual minting. Another topic is key-rotation and how we can recover a SBT when the owner lost their keys. What are the challenges for these topics? And how can we improve this concept? At Otterspace, we call SBTs \u201cBadges.\u201d Main usecases: (1) Governance e.g. 1p1v or impact-based voting, (2) Credentials e.g. education, (3) Rewards e.g. reputation, (4) Access management e.g. using it as a key. K: Would love how to start from the minting perspective. Can multisigs mint? How do we do access control. L: Every DAO is represented by a RAFT token. A RAFT token is a regular NFT. With this RAFT token you can access the badges, add people to the allow list. And that\u2019s how you control permissions. Depending on community structure: Different kind of members can create different kind of badges. E.g. there can be a hierarchical issuing of badges within an organization, tickle-down style. K: What about revocation and social recovery? Can these rights be delegated? L: The RAFT is the point of control for the revocation. But how should revocations be permissioned? K: E.g. if we only have one admin member, we have to share share the key. L: We can hold the RAFT token in a multi signature wallet. J: One RAFT token per organization and it could be helt by a multisig. L: We suggest a 1/n for a RAFT token. We\u2019re seeing that DAO\u2019s are structured differently. And how do badges emerge? Top-down, buttom-up? Probably the later is closer to the nature of DAOs. But there could also be several RAFT tokens. K: One challenge we\u2019re facing. We\u2019re running an accelerator. We want to incentivize contributors. What we\u2019re debating: Time-based contribution badge. Maybe there\u2019s a tiering system, but for us we see that we\u2019ll have a lot of badges. There is a trade-off between granularity of how finely-grained we should issue badges. L: It depends on the organization. Can there be a badge hyperinflation? A: I could share examples. We\u2019re dealing with this for the cerificates. If you\u2019re designing the badge system to identify contributors then the detailed approach is promising because it matters at what time and on what you contributed to. We image that we could identify a person without leaking the name. The most relevant part of SBTs is privacy. Many aspects can be adapted and evolve. You could even replace badges. Upgradability is a important topic but privacy can\u2019t be rolled back. E.g. when PII is revealed, then it cannot be rolled back. E: The tokens are specific to the social layer. So the data doesn\u2019t necessarily have to be on-chain. If you\u2019re using tokens to create organizational hierarchy then this also affects owners e.g. \u201cI feel less than you.\u201d When we are designing tokens, we should consider who we are affecting. A: I\u2019d like to explore the topic of SBTs and what they actually mean. What are open questions? Should we start with work-shopping. A: We should collect the design aspects for SBTs. There are standards, discussions and then what do SBTs mean for you? Take a sheet of paper and write down what comes to your mind. Sh: Composability A: What makes Composability special? Composability means programming other rights permissionlessly ontop of it. Composability and evolvability are related. Essentially it means the utility is decoupled from the primitive. A: Another one is \u201cadaptability.\u201d V: Question: The more adaptable, the less utility the token has? At some point the token becomes useless. A: A smart phone is like that but the material is pretty useless, but through the composability of software then it\u2019s very useful. N: Non-transferrable, KYC aspect, how they could be used within a DAO/permissions. A: Non-transferrability is baked into the token. Sh: A note on the non-transferrability. It\u2019s important that non-transferability is a feature. MICA Defi regulation in Europe the NTT take it out of the scope. A: Non-fungible is interchangability e.g. like a piece of art, not like a dollar bill. Non-fungibility is about being specific, non-fractualizable and so it can only be helt as a whole. We can bind it to persons that participate in a workshop, or even representing different metadata (e.g. speaking time in a workshop). J: Minting permissions L: Should that be baked into the token logic? A: Can you give us an example Lukas how users are permissioned to claim tokens? L: Most business logic for how to retrieve the token is built on-top of the token logic. But you could built-in on-chain logic X: Conditions to loose a token are also important J: If you want the token to be modular, you don\u2019t want to bake too much functionality into the design. L: Consensual minting is a permission. Consent needs to be present from both parties for the token to be minted. Sh: What if you mint a token to a bad actor. Or you could define an expiry. A: SBTs are tied much more to the soul than to the organization that granted it. We want to use SBTs for identity. Identity should be emerge from inventory. The conditions to receive and loose it are very important. How can we capture these conditions, e.g. at the application layer. T: How can we encode top to bottom or bottom to top emergence of social graphs? J: Maturity, expiration, relevance. Maybe you want an SBT become more relevant over time, e.g. bound to an SBTs role. You may also want to devalue the SBT over time (e.g. if the SBT represents decaying expertise). An extension is expiry. A: Today we can define an expiration date (it\u2019s a fundamental property). Maturity means, can the value change over time e.g. in terms of utility. Should maturity be a core part of the technical spec? Jo: SBTs want to decouple financial value from holding the token. E.g. Proof of Humanity can be used as representation. A: Maturity means the meaning changes over time. J: Maturity can mean the longer you hold the token, the more reputation you have. E.g. in academia, a 10 year professor. T: There can be different types of values. E.g. social value or financial value. A: Is utility similar to signficiance. J: Significance is personal and utility may be general. Minut taker comment: We\u2019re trying to find synonyms for utility, significance, maturity, weight. They seem to be subjective to owner or issuer. Sh: External perspective is important and is connected to conditions to receive and loose. Significance can change based on perspective. J: Maturity needs to be linked back to the conditions. We could encode specific maturity conditions with e.g. a trial period. A token can be configured to become inalienble. A: Can a token that is non-transferrable be valuable? Ang: When tokens are non-transferrable, they can\u2019t be valuable. X2: But I could sell my private key. T: Private keys can\u2019t be sold because how can you prove to delete the private key? X2: But many people have said that with SBTs you can sell the private key. L: You can\u2019t sell a private key. Because how can you prove to delete a private key. X2: So it can be that many people can have access to an SBT J&A: so multi sig could also hold an SBT J: SBTs can have value through significance. When you use SBTs for access or identification or reputation. E.g. if you only get into a club with an SBT. A: Is Maturity/Significance built into the token design? J: I\u2019m interested in encoding maturity into an SBT. There is a trade off between building that into the app layer or standard based on the decentralization. Al: You can do go both ways. You can interpret the SBT on-top or build it into the token. A: What the token means over time is decoupled from the token itself. It\u2019s great! I means you have a lot of flexibility as the token can change its meaning and have subjective meaning for different organizations. SBT is a symbol representation for rights, permissions, identity. V: If we wanted to store some information about a person (e.g. their gender) into an SBT, but should we be doing this? L: For the token metadata, the less we define as metadata, the more flexible they are. We wouldn\u2019t want to bake in e.g. \u201cheight\u201d of a person into the SBT. We want to encode it on top of the token. Al: If you send an SBT to a wallet, it\u2019s more efficient to have a dumb SBT globally. If you make SBTs more vertical, then another token may just replicate. L: The benefit of the standard is that you build one integration and that it fits into the standard. B: Fashion. Ang: Is fashion a property of SBTs? L: Metadata is an important property. Be: Metadata isn\u2019t realy what I meant I: If a token is issued by a government it\u2019s not a brand, it\u2019s more an issue. L: Association of issuer. Ang&L: Association is stored within the token. V: I wrote \u201cscope\u201d. What are you binding the SBT\u2019s namespace on. So a SBT is subjective. An SBT needs to have a scope because it needs to have a reference for users. If you implemented context lower level then it\u2019s be difficult how the interpretation would be built? Granulatity of expression and scalability are connected. A: At what level is metadata? X2: Metadata has to be always in the token because it defines the utility. E.g. you can see the expiration. So e.g. the expiration is in the token. Ang: Clearly from a standard pov, the metadata is in the token. T: Social scalability and metadata are related. If all metadata is in the token it stops being socially scalable. J: Group ownership. Can that be done on the token layer. L&A: What shouldn\u2019t be changable over time?  Would you add a price to a metadata? X: It depends. We approach metadata as evolutionarily. If you have bio signals that come from your loved one. We\u2019re looking into that. This is how sentiment changes over time. J: Tie a thread on some of what is said. E.g. relationships change over time, this changes over time so we don\u2019t want to encode that into the metadata. L: To counter that: Issuer is not the Association. e.g. there is an issuer and a DAO and a receiver. V: We tried to build a data network for music ownership. We wanted to define relationships on-chain. JSON-LD, Schema, we were backing into those concepts. What do you store on chain is fundamental. You have to find the right amount of metadata to store. You want social scalability and usefulness. Semantic web isn\u2019t popular because it was impossible to do Al&Ang: You would never produce an SBT with your age inside. You\u2019d produce one with your birthdate. E.g. a professorship could be revoked. At some point you don\u2019t want to go too abstact. V: Abstraction for metadata is a key point. T: Issuer and Receiver are encoded on-chain V: Some properties are from nature e.g. some properties aren\u2019t arising from another person.   1579\u00d7921 174 KB  ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/9/9bc38e00bfb4cc6890ac5c652d931591f278a51f.jpeg"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.570502039847279
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "145",
                    "likes": "0",
                    "time": "10/10/2022-00:38:53",
                    "content": "Original source: Soulbound token workshop on use cases at the DAOist in Bogota - HackMD  Soulbound token workshop on use cases at the DAOist in Bogota  date: 2022-10-09 clock-wise order of participants: (B)en, (L)ukas, (Br)ett, (V)aughn, (A)ngela, (T)im, (C)indy   Minutes  Ang: The metadata example from the last session, I found quite interesting. A guiding question to me is: If it\u2019s something that should never change, then put it into the metadata. And don\u2019t put it if it can evolve. T: There are different ways how the tokenURI is hosted, e.g. IPFS, web2 URLs and so that affects privacy as e.g. the tokenURI access could be permissioned. A: We\u2019re discussing to issue SBTs to TE participants but we shouldn\u2019t put the name into the metadata. The credential receiver should consent to the token being minted. V: If I can always figure out where an SBT was minted towards, there\u2019s provenance. Ang: Collectible history is also tracked and that\u2019s similar. There\u2019s this triangle of token, holder and issuer. L: SBT itself doesn\u2019t have a value, it gets value through the context. T: Kate Sills post on \u201cSBTs should be claims\u201d and that claims are to be subjectively interpreted and cannot be computed over. Ang: When we have SBTs as subjective e.g. like credentials like passports they can be problematic. Ang&L: Let\u2019s go over use cases: Go over the privacy question. Not sure if it was in V\u2019s paper or where I saw it. This claim that you can compute identity is something I\u2019d like to explore. E.g. we\u2019d want each individual to control what information should be public. We don\u2019t want to have another social score. B: How expressive are soulbound tokens, because you can\u2019t express everything with them. Tim: [explain H. Nissenbaum: Privacy as contextual integrity] Ang: What\u2019s signficiant is that you can\u2019t role back privacy. L: Community member rejected SBT issuing because of fear of being doxxed by government. But on a practical level the SBT isn\u2019t that different from that person having a wallet of EIP20 token. Privacy is a topic that is very present. The SBT doesn\u2019t necessarily cary information about the person. C: Are there projects that implement SBTs. Polkadot can derive wallets. And then someone could aggregate different addresses. Br: UTXO model for issuing SBTs. Ang: You can discolose the wallets that you want to show. Br: You want to have different collections of SBTs for different contexts. L: Revealing SBT context has to do with stake too. E.g. imagine revealing your identity to a financial app then you want to a wallet that has many SBTs. V: There can also be a problem of spam. e.g. someone DOS\u2019ing your wallet. L: Consensual minting can combat spam. Otterspace allow list is public so that may leak data. SBTs in otterspace are used for roles. There is also a question of what you want to capture with SBTs, e.g. \u201cI gave a talk here\u201d, vs. \u201cteam lead\u201d badges. Optimism\u2019s citizenhouse doesn\u2019t know yet how their SBT will look like. B: Consensual minting how it should work: You get a credential and then you mint the SBT if you want. The default of VCs is that everything is private and then you actively generate proofs and make them public. The default should be that you have the credential and then you mint it. T: EIP-4973 can do private credentials and then mint them on-chain. Ang&L: Everybody please think of a use case and how it\u2019s related to privacy and then we discuss. C: (1) Persistent anonymous reputation: Publish papers anonymously and not being able to tie it back e.g. to avoid NDAs or because you\u2019re anti-thetical to the institution, whistleblowing, RSA authors, PGP thing. Use case: Against impersonation (2) DAO delegate, I want to transfer reputation across chains. T: Anonymity and pseudononymity? What are the definitions? L: If reputation is transferrable then you\u2019re opening yourself to attacks. Composable Twitter blue checkmarks Ang: Verification of identity is also a use case. C: Anti-impersination was another one and the forth use case would be soulbound items in games. NFTs are still transferrable and for games those wouldn\u2019t work well. Achievements and credentials are the same use case. But e.g. games issue achievments for engagement and credentials for verification of completing a course. Ang: Another use case is social recoverability. In crypto only the private keys can be used to recover funds and so having SBTs can help. An SBT is an identifier. L&Ang: The SBT as an identifier can be a use case and then it can be used to recover tokens. Th: In university a title goes to me and must say my name so the title is connected to you through KYC. Ang: It\u2019s similar to a passport and how it proves your name. Th: When I\u2019m born in this imaginary future my wallets gave me my certificate of birth and then this would be your unique inventory that identifies you. T: What does KYC mean? B: \u201cKnowing your customer\u201d is just a small part of KYC. There are different dimensions of KYC. My passport picture is shared with many people. KYC is determining the relationship wit the customer and organization. Th: What I meant as KYC is a verification of a passport. Br: Getting ID\u2019d at a bar can mean KYC too, so they\u2019re just checking your age. L: And the crypto exchange: they wanna understand whether you\u2019re financing terrorism. T: SBTs could also be used for compliance. Permission, Access L: Permissions, Access Ang: Appreciation and recognition Analytics, transparency, equality, token-gating, agreement, a personal contract like a promise, a social commitment, power influence, a public bet   1280\u00d7720 526 KB  ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/b/b5073651a9c54a4d22d6fc3416ce201aa820e226.png"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.993923611111112
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "146",
                    "likes": "1",
                    "time": "11/10/2022-14:43:28",
                    "content": "There may be an incompatibility between our use of EIP-1271 and EIP-2098: EIP-2612: 712-signed token approvals \u00b7 Issue #2613 \u00b7 ethereum/EIPs \u00b7 GitHub via @frangio ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gbdt",
                    "index": "147",
                    "likes": "1",
                    "time": "13/10/2022-02:58:02",
                    "content": "I come from this thread, then I found this EIP very valuable. We are thinking of using this EIP to build a dapp comment sys for decentralized due diligence. VCs (or web3 users) need to do due diligence on dapps. They will send invitations to professionals in related fields. The adoption of reviews can be confirmed through an asymmetric method like give/take. Previously, the comment system of the Internet was permissionless: your review of something does not require the relevant parties\u2019 aggreement. This leads to spam and fake reviews. The reason may be that the previous Internet pursued the maximization of information efficiency, not the maximization of trust. This EIP can be used in scenarios like \u201ctrusted reviews\u201d and \u201crecommendation letters\u201d. The form needs to be directed, but it requires the consensus of both parties. This traceable review sys unlocks a lot of new possibilities. Any suggestions or further reading links? Hope to hear from you  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.024104683195593
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "148",
                    "likes": "0",
                    "time": "13/10/2022-15:59:59",
                    "content": "Hey, glad you\u2019re finding it helpful. The probably most extensive links on the topic can be found in the most top post of this thread. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "149",
                    "likes": "2",
                    "time": "15/10/2022-19:25:07",
                    "content": "Forgive if this was discussed before, I haven\u2019t read the whole discussion yet, but one comment I have about this EIP is that because give and take have the URI as a parameter the EIP is not compatible with generating the URI in the contract. This may make minting unnecessarily gas inefficient, and it may limit some use cases as well. What do you think about changing string uri to bytes metadata where the metadata is application-specific, it may be a URI string or it may be ABI encoded parameters and so on. With this design, it would probably also be useful to add a getter that can convert application specific metadata to a URI so that the URI can be known prior to minting. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.1
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "150",
                    "likes": "0",
                    "time": "16/10/2022-17:24:26",
                    "content": "    frangio:  What do you think about changing string uri to bytes metadata where the metadata is application-specific, it may be a URI string or it may be ABI encoded parameters and so on.   I think this is a useful suggestion that I\u2019m personally in favor of implementing. For the stakeholders lurking here: Does anyone have strong objections?     frangio:  With this design, it would probably also be useful to add a getter that can convert application specific metadata to a URI so that the URI can be known prior to minting.   Mhh I\u2019m not sure what you mean exactly. Would you mind elaborating? Thanks for your feedback @frangio! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.4854166666666675
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "151",
                    "likes": "3",
                    "time": "16/10/2022-22:18:36",
                    "content": "I\u2019m thinking of a scenario where a user has an Agreement signature in their wallet that is ready to be redeemed via take. With my proposal, the value that is agreed upon and that the wallet will be aware of is not a string uri but an abstract bytes metadata value. But the wallet will likely need the URI for display purposes, so it needs a way to obtain a URI given some metadata. What I\u2019m proposing for that purpose is a function makeURI(bytes metadata) view returns (string) in the ABT contract. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "152",
                    "likes": "0",
                    "time": "19/10/2022-04:06:54",
                    "content": "OK. I think we may want to prototype this in the reference implementation over at GitHub - rugpullindex/ERC4973: Reference Implementation of EIP-4973 \"Account-bound tokens\". Would you be interested in giving this a shot? And then we can also make changes to the specification. I had informally talked about your suggestion with some of the specification\u2019s stakeholders and they all seemed welcoming of the change. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "153",
                    "likes": "1",
                    "time": "19/10/2022-04:08:32",
                    "content": "@rsquare\u2019s lightning talk at devcon on EIP-4973 and how they use it in Otterspace: ERC Lighting Talks - YouTube ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/glu",
                    "index": "154",
                    "likes": "2",
                    "time": "20/10/2022-18:44:17",
                    "content": "Hey all - I believe the Interface Id should be 0x8d7bac72 instead of 0x5164cf47 in the spec. If makeURI is added tho it\u2019d change again - just wanted to leave the note here for anyone else looking at it before updates. I might have some time next week to prototype the bytes metadata change, ERC-4973 is pretty awesome  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.083333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "155",
                    "likes": "2",
                    "time": "20/10/2022-20:01:25",
                    "content": "I\u2019ve opened a PR with bytes metadata: Use opaque metadata by frangio \u00b7 Pull Request #52 \u00b7 rugpullindex/ERC4973 \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "156",
                    "likes": "0",
                    "time": "21/10/2022-10:44:09",
                    "content": "    TimDaub:  If this is done appropriately and with a good faith, then I don\u2019t see any problems with developers using cookies, SBTs, or ABTs.   This is the point I\u2019m making. I\u2019m not saying any particular single developer\u2019s actions (all of which, I agree, are done appropriately and in good faith) are bad (or even can be). I\u2019m saying, in the aggregate, over time, these things morph into something none of us want. To the extent that the today\u2019s conversation focuses on individual use cases and does not give equal mention to the (I would argue obvious) long-term negative second-order effects, I think we\u2019re making a mistake. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.67965367965368
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "157",
                    "likes": "1",
                    "time": "21/10/2022-12:12:18",
                    "content": "Thanks for pointing this out, I\u2019ll fix it. Edit:  Fix interface identifier to 0x8d7bac72 by TimDaub \u00b7 Pull Request #5811 \u00b7 ethereum/EIPs \u00b7 GitHub Fix IERC4973 interface identifier to 0x8d7bac72 \u00b7 rugpullindex/ERC4973@27fe86f \u00b7 GitHub  ",
                    "links": [
                        "https://github.com/rugpullindex/ERC4973/commit/27fe86fd76ca9c18a150ce24f147008b45f9e4b9"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "158",
                    "likes": "1",
                    "time": "27/10/2022-14:14:47",
                    "content": "Some internal discussions in the EIP-4973 Telegram group have reasoned that it doesn\u2019t really make sense to replicate the now-final logic of EIP-5192 Minimal Soulbound tokens here in EIP-4973 and that the specification\u2019s differentiating quality is consensual minting. So some have said that we should, e.g., pull out consensual minting into its own specification as it\u2019s arguably useful for transferable NFTs and potentially even scalar tokens. But then @glu pointed out that we could do the inverse of it, which is removing all the account-binding nonsense that has caused so much controversy and essentially keeping the consensual minting and I don\u2019t know why but it\u2019s making tons of sense and is something that we can also reasonably standardize as \u201cfinal,\u201d whereas all the account-binding and soul-binding related concepts are still too early to opinionatedly finalize. Over the long term, I think we\u2019ll need account abstraction for that, and the Ethereum space isn\u2019t ready for it yet, sadly. Besides, we have addressed account-binding in an un-opinionated way in EIP-5192, and so I\u2019d see EIP-4973 and EIP-5192 being usable in combination too. What do stakeholders here think? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.410714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/CHANCE",
                    "index": "159",
                    "likes": "0",
                    "time": "27/10/2022-17:40:38",
                    "content": "While \u201cremoving all the account-binding nonsense\u201d may appear more accessible, that would no longer be the same EIP, idea, or surrounding considerations. Consensual minting is functionally just a nuanced implementation of any token standard, 20, 721, 1155. It is not something that needs to be solved with an EIP that removes all ability to use the existing and properly standardized tokens. The ability to standardize the process without significant feature loss is possible. To that, the idea of genuinely consensual minting is only possible through account abstraction (using contracts to block unexpected mints) or having the minter opt-in. Today, the EIPs of 20, 721, and 1155 are already designed for consensual minting. It is just opt-in, which the proposed EIP would also be. If the situation is entirely reliant on the minters opting in, I would expect it to be a token-type extension rather than an entirely new one. Further, extensions have not historically been designed for use cases but rather essential functionality that individuals can build on, given their own opinion and use cases. This EIP and proposed actions carry a large amount of opinion and use-case specification. I would appreciate an EIP that provides new functionality (an extension) without being so limited as the current and future (consensual minting) currently stand. As referenced in your previous comment here, EIP-4494 which is serving a similar vertical, is an Extension, which at most, this EIP would and should become given the complete removal of \u201caccount-bound\u201d functionality. With this, though, I would not favor EIP-5484 either as no above-mentioned proposal solves the problem without massive and broad-reaching implications and assumptions. To the relevant conversation here, EIP-5192 is much better defined however still riddled with issues and misalignment in the way standards are written. Prefer to see further clarity before supporting anything or seeing another half-built EIP that drowns in nuance. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5192"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.6795183982683985
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/glu",
                    "index": "160",
                    "likes": "1",
                    "time": "27/10/2022-18:52:07",
                    "content": "I think the main idea behind removing the \u201caccount-binding nonsense\u201d, is in semantics and wording. I\u2019d argue that consensual minting is the crux of what has been discussed/developed here ad nausium and the update I was referring to brings the spec up to date with that design. I think we risk running around in circles further trying to argue/define the canonical Soulbound/Account-Bound/Consensual/Non-transferable EIP when I feel like those terms only recently came into the zeitgeist and don\u2019t even have fully agreeable definitions. The most conversation I\u2019ve seen are links to Glen\u2019s paper, Vitalik\u2019s articles, and some Twitter threads. Semantically, one could argue specs referencing non-transferable NFT is a misnomer since it involves an initial minting, but I digress. So definitely in agreement that we can take out some of the opinions. I think with some of those nuanced phrasings removed/updated, which I will take a stab at, we could take a step back and really see what this EIP is all about. Going forward I think we (me) can provide some more examples on top of what @TimDaub has already given to convince myself and others that this EIP is warranted and will be beneficial over other specs. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.516025641025641
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "161",
                    "likes": "0",
                    "time": "27/10/2022-19:09:16",
                    "content": "    CHANCE:  Consensual minting is functionally just a nuanced implementation of any token standard, 20, 721, 1155. It is not something that needs to be solved with an EIP that removes all ability to use the existing and properly standardized tokens. The ability to standardize the process without significant feature loss is possible.   How do wallets/explorers/marketplaces etc. coordinate on implementing consensual minting without a standard/protocol? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.46875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/CHANCE",
                    "index": "162",
                    "likes": "0",
                    "time": "27/10/2022-19:12:35",
                    "content": "The key nuance of this sentence:  It is not something that needs to be solved with an EIP that removes all ability to use the existing and properly standardized tokens. The ability to standardize the process without significant feature loss is possible.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.46875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "163",
                    "likes": "0",
                    "time": "27/10/2022-19:15:31",
                    "content": "I don\u2019t understand sorry, mind elaborating? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 2.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "164",
                    "likes": "1",
                    "time": "05/01/2023-16:25:59",
                    "content": "I noticed that this EIP uses the same Transfer event as EIP-721, and uses the EIP721Metadata interface. I assume this is hoping to be compatible with existing NFT indexers out of the box. However, this EIP states that the contract must not implement EIP-721, which means that the contract will not advertise EIP-712 compatibility through EIP-165. This is going to be an issue for some indexers. The origin of the issue is in the fact that indexing parameters in an event changes the way the event data is encoded but not the topic0 of the event. topic0 is to events what bytes4 function selectors are to functions. The consequence of that is that EIP-20\u2019s Transfer and EIP-721\u2019s Transfer have different data encoding but similar topic0. So when you listen for Transfer event all over the blockchain, you\u2019ll get EIP-20 and EIP-721 transfers at the same time. What (some) indexers do is that whenever they see such an event, they try to determine if it comes from an EIP-721 contract. This is done using EIP-165 (and cached). An example of this can be seen in an EIP-721 indexing subgraph. export function fetchERC721(address: Address): ERC721Contract | null { \tlet erc721   = IERC721.bind(address)  \t// Try load entry \tlet contract = ERC721Contract.load(address) \tif (contract != null) { \t\treturn contract \t}  \t// Detect using ERC165 \tlet detectionId      = address.concat(Bytes.fromHexString('80ac58cd')) // Address + ERC721 \tlet detectionAccount = Account.load(detectionId)  \t// On missing cache \tif (detectionAccount == null) { \t\tdetectionAccount = new Account(detectionId) \t\tlet introspection_01ffc9a7 = supportsInterface(erc721, '01ffc9a7') // ERC165 \t\tlet introspection_80ac58cd = supportsInterface(erc721, '80ac58cd') // ERC721 \t\tlet introspection_00000000 = supportsInterface(erc721, '00000000', false) \t\tlet isERC721               = introspection_01ffc9a7 && introspection_80ac58cd && introspection_00000000 \t\tdetectionAccount.asERC721  = isERC721 ? address : null \t\tdetectionAccount.save() \t}  \t// If an ERC721, build entry \tif (detectionAccount.asERC721) { \t\tcontract                  = new ERC721Contract(address) \t\tlet try_name              = erc721.try_name() \t\tlet try_symbol            = erc721.try_symbol() \t\tcontract.name             = try_name.reverted   ? '' : try_name.value \t\tcontract.symbol           = try_symbol.reverted ? '' : try_symbol.value \t\tcontract.supportsMetadata = supportsInterface(erc721, '5b5e139f') // ERC721Metadata \t\tcontract.asAccount        = address \t\tcontract.save()  \t\tlet account               = fetchAccount(address) \t\taccount.asERC721          = address \t\taccount.save() \t}  \treturn contract }  This function will return null if the address is not an EIP-721 contract. By not including that interfaceId, EIP-4973 contracts will be disregarded by this indexing systems (and probably others) which will assume its an EIP-20 contract. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.818181818181818
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "165",
                    "likes": "0",
                    "time": "06/01/2023-15:29:39",
                    "content": "Good point, I\u2019ll follow up by implementing EIP-5192 for soulbinding in EIP-4973. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "166",
                    "likes": "0",
                    "time": "06/01/2023-15:39:56",
                    "content": "Updates to the specification and reference implementation  Removed EIP-2098 support as EIP-1271 expects a \u201cnaively\u201d concatenated signature and not an EIP-2098-style compact signature. This was pushed upstream with @frangio removing support for EIP-2098 in the SignatureChecker library. Change string tokenURI in structure data hash and give and take inputs to a more generic bytes metadata. PR: Use opaque metadata by frangio \u00b7 Pull Request #52 \u00b7 attestate/ERC4973 \u00b7 GitHub  Start using forge fmt for all Solidity code formatting  PRs involved in this update:  Clarify document ownership by TimDaub \u00b7 Pull Request #6271 \u00b7 ethereum/EIPs \u00b7 GitHub Improvements for signature generation by TimDaub \u00b7 Pull Request #6270 \u00b7 ethereum/EIPs \u00b7 GitHub fix GHSA-4h98-2769-gh6h by TimDaub \u00b7 Pull Request #57 \u00b7 attestate/ERC4973 \u00b7 GitHub Lint the code, add lint checks to CI by h0tw4t3r \u00b7 Pull Request #55 \u00b7 attestate/ERC4973 \u00b7 GitHub Drop local ERC165 implementation, use OZ by h0tw4t3r \u00b7 Pull Request #54 \u00b7 attestate/ERC4973 \u00b7 GitHub Use opaque metadata by frangio \u00b7 Pull Request #52 \u00b7 attestate/ERC4973 \u00b7 GitHub  Links:  changelog reference implementation: ERC4973/changelog.md at master \u00b7 attestate/ERC4973 \u00b7 GitHub  npm package erc4973: erc4973 - npm   ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/6271",
                        "https://github.com/ethereum/EIPs/pull/6270",
                        "https://github.com/attestate/ERC4973/pull/57",
                        "https://github.com/attestate/ERC4973/pull/55",
                        "https://github.com/attestate/ERC4973/pull/54",
                        "https://github.com/attestate/ERC4973/pull/52",
                        "https://github.com/attestate/ERC4973/blob/master/changelog.md#050",
                        "https://www.npmjs.com/package/erc4973/v/0.5.0"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "167",
                    "likes": "1",
                    "time": "11/01/2023-23:05:48",
                    "content": "We are experimenting with implement soulbinding via ERC5192 in ERC4973. Here\u2019s the a draft pull request: Create compatibility with IERC721 and IERC5192 by TimDaub \u00b7 Pull Request #58 \u00b7 attestate/ERC4973 \u00b7 GitHub For ERC4973 users, this is a big interface change. Please give us feedback. I think the benefits are that it\u2019ll streamline development. ERC4973 defines a generalization of signature-based allow lists. ERC5192 is about lockable NFTs. Composed, they create Soulbound tokens. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Christophe",
                    "index": "168",
                    "likes": "1",
                    "time": "17/01/2023-00:36:13",
                    "content": "I like that this EIP is converging using signatures to prove the token acceptance from the 2 sides of the agreement. That something i\u2019ve myself implemented to build the ticketing/credentials protocol Rouge. But I feel that the EIP is trying to drive to much how this should be implemented and organized. Why not remove give and take from the specs and replace by having just a mandatory event Bound having 1 or two signatures (from issuer and receiver of the token) - of course also metadata & tokenId -. In case the event is emitted by an issuer\u2019s tx, its signature is superfluous and can be null, and respectively if the event is emitted by a receiver tx, its signature can be null. Wallet should only be able to tell if the token had approval from both sides to be bound, so only one event should be enough. I also feel that unequip should be removed from the specs and replace by a symmetric event Unbound with the same double approval mechanism above. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.388888888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "169",
                    "likes": "1",
                    "time": "09/02/2023-11:19:35",
                    "content": "ChatGPT now knows about EIP-4973. I also asked it for specifics about the give function, and it could answer them. WTF!  Screenshot 2023-02-09 at 12.12.091460\u00d71090 127 KB  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 1.875
                }
            ]
        }
    ],
    "group_index": "1686"
}