{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1962-ec-arithmetic-and-pairings-with-runtime-definitions-for-shanghai-candidate/10838",
            "title": "EIP-1962: EC arithmetic and pairings with runtime definitions for Shanghai-candidate ",
            "index": 10838,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm",
                "opcodes",
                "zkp",
                "shanghai-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/weikengchen",
                    "index": "1",
                    "likes": "0",
                    "time": "13/09/2022-09:26:21",
                    "content": "EIP-1962 is to add general EC arithmetics support for SNARK proof verification. Compared with EIP-2537, it is not limited to the BLS12-381 curve, but also other curves. EIP-1962 is certainly a complicated one, but there is something that EIP-1962 can do, but EIP-2537 alone is insufficient. Here, let me cite three examples from the work from our teams.   verification of ed25519 signatures in SNARK: when we do such verification on BLS12-381 or BN254, we have to resort to nonnative field arithmetics, which is very costly. If we use some application-specific curves, such as Yafa-108/146 in the following note, then the cost of scalar multiplication on ed25519 drops significantly.  https://eprint.iacr.org/2022/1145.pdf See page 2 and 3 for some key experiment results, and see Section 1 for a classification of different solutions for such signature verification.    verification of secp256k1 signatures in SNARK: as it is observed before, secq256k1 (\u201cq\u201d) can verify secp256k1 efficiently, and secp256k1 (\u201cp\u201d) can verify secq256k1 efficiently, which forms a cycle for proof systems based on inner-product arguments to work  https://eprint.iacr.org/2022/1079.pdf See Section 1.4 for a technical design as well as some \u201cpersonal opinions\u201d on why secp256k1 is important    computation over SNARK-friendly twisted Edwards curves of BN254 and BLS12-381, such as Jubjub, Baby Jubjub, and others, which may be useful for interoperability with other systems, here, between SNARK-based L2 and L1 as well as zkBridges  Same link above See page 17 for some discussion about these SNARK-friendly primitives    In other words, the necessity about EIP-1962 (instead of EIP-2537) is now materially different from the use cases cited in EIP-1962. Since this EIP was previously tentatively approved, and we know EIP-2537, which is for BLS12-381 is \u201clikely going to be merged\u201d since it already stays in the codebase, and EIP-1962 shares a lot of code with EIP-2537, maybe, it is a good idea to expand EIP-2537 to the scope of EIP-1962. Even if this is unlikely going to be included in the Shanghai candidate due to its complexity, I feel it useful to bring this one up \u201cevery\u201d one or two years to revisit. ",
                    "links": [
                        "https://eprint.iacr.org/2022/1079.pdf"
                    ],
                    "GPT-summary": "The post explains the purpose of EIP-1962, which is to add general EC arithmetics support for SNARK proof verification. The author provides examples of how EIP-1962 can be useful for verification of signatures and computation over SNARK-friendly twisted Edwards curves. The author suggests expanding EIP-2537 to the scope of EIP-1962, but acknowledges the complexity of the proposal. The post also invites discussion and revisiting of the proposal in the future.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Not a proposal"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.033456486042693
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/weikengchen",
                    "index": "2",
                    "likes": "0",
                    "time": "13/09/2022-11:33:58",
                    "content": "Related: EIP-2537 seems to move forward a lot:    EIP-2537 (BLS12 precompile) discussion thread EIPs       Quick update in May 2022:  Summary: The implementation of EIP-2537 has been completed and is now in go-ethereum codebase\u2014 it is only pending activation of this functionality.  Next steps: Enable the precompiles by editing /core/vm/contracts.go, similar to what is done for Byzantine/Istanbul/Berlin:   Create a new default set of pre-compiled Ethereum contracts used in the next release, including the new precompiles of EIP-2537. Modify init() and ActivePrecompiles() functions to activate the new p\u2026     ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.412457912457912
                }
            ]
        }
    ],
    "group_index": "116"
}