{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/using-tx-origin-to-create-an-onlynoncontract-modifier/4345",
            "title": "Using tx.origin to create an onlyNonContract modifier ",
            "index": 4345,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/ilanDoron",
                    "index": "1",
                    "likes": "1",
                    "time": "08/06/2020-13:30:24",
                    "content": "tx.origin usage is discouraged in many places. But as of now, it seems like the best way to avoid receiving a transaction from a contract. This article proposes tx.origin usage as best approach for certain scenarios such as non contract check: https://consensys.github.io/smart-contract-best-practices/recommendations/#avoid-using-extcodesize-to-check-for-externally-owned-accounts On the other hand it has been mentioned that tx.origin might be deprecated in the future: https://ethereum.stackexchange.com/questions/196/how-do-i-make-my-dapp-serenity-proof So I have two questions:  Are there any plans to remove tx.origin? And if anyone could point out a better way to create an onlyNonContract modifier.  Thanks in advance. ",
                    "links": [
                        "https://ethereum.stackexchange.com/questions/196/how-do-i-make-my-dapp-serenity-proof"
                    ],
                    "GPT-summary": "The author of the post proposes the usage of tx.origin as the best approach for certain scenarios such as non-contract check. The author also mentions that tx.origin might be deprecated in the future and asks if there are any plans to remove it. Additionally, the author asks for a better way to create an onlyNonContract modifier.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Privacy, Security and risk management",
                        "Interoperability and Scaleability",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.8273809523809526
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "2",
                    "likes": "1",
                    "time": "08/06/2020-15:23:22",
                    "content": "Out of curiosity, what scenarios would you want to determine if a call is coming from a contract? To your question, I\u2019m not aware of any concrete plans to modify the behavior of tx.origin. There was a brief conversation recently that if we add support for sponsored transactions, tx.origin could refer to the gas payer. But we would need to better understand how tx.origin is currently being used on the network first. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party giving entirely positive feedback on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.553571428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "3",
                    "likes": "1",
                    "time": "09/06/2020-08:51:08",
                    "content": "Why in hell would you want to reject contracts interacting with you? IMO, EOA are just good for paying gas and signing messages. Identities/wallets are moving for EOA to SC and this is a good thing! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving negative feedback on proposal",
                        "3rd party extending to proposal",
                        "3rd party giving opinion on topic"
                    ],
                    "Sentiment": 8.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "4",
                    "likes": "1",
                    "time": "12/06/2020-12:03:05",
                    "content": "You don\u2019t have to use tx.origin to determine if the action is being done from a EOA, you can use ecrecover and ask a signature from msg.sender, because only EOA can be sign messages. However, removing access from other smart contracts is not future proof, as there are many uses to account contracts that might want to interact. Also, if your contract is unsafe because of the use of smart contracts, it\u2019s not safe at all, as creating a new EOA is really cheap. Probably you are looking for a KYC or some sort of proof-of-individuality, you can research for this terms to better understand how you can handle the weakness of an open API. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.7041396103896105
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ilanDoron",
                    "index": "5",
                    "likes": "0",
                    "time": "15/06/2020-08:10:42",
                    "content": "I am writing a function that is callable by any address. The function will trade Eth to KNC and burn the KNC, this is part of Kyber\u2019s new Katalyst version. A number of safety measures were added to block manipulation options. For example the trade rate is compared to a third party price oracle. Also due to Kyber\u2019s architecture, if a few reserves support ETH-KNC pair, price manipulation can\u2019t be done by one reserve. Since best price for taker is always chosen. But still, in order to try and block any attack we didn\u2019t think of (like the ones shown in last flash loan show off) we find it safer if the function can\u2019t be triggered from a contract. I am aware that if it\u2019s called from any non contract address it can still be attacked but an attack would be far less feasible and have fewer profit options for the attacker. Adding to that, even if the use case isn\u2019t clear, or anyone disagrees with the motivation, I still believe it might be a valuable feature to be able  to block calls from contracts.     3esmit:  You don\u2019t have to use tx.origin to determine if the action is being done from a EOA, you can use ecrecover and ask a signature from msg.sender , because only EOA can be sign messages.   Thanks. will look at this one. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.676677489177489
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ilanDoron",
                    "index": "6",
                    "likes": "0",
                    "time": "15/06/2020-08:14:58",
                    "content": "Yes Its a great thing its moving to contracts. No argument there. IMO keeping it flexible is always desired. No one can imagine the various use cases that will be found for smart contracts. From my side, EOA isn\u2019t the main point. Main point is how to avoid attacks that are made very easy with automatic execution like the flash loan attack we saw this year. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 6.5924603174603185
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "7",
                    "likes": "3",
                    "time": "16/06/2020-08:26:17",
                    "content": "    ilanDoron:  Main point is how to avoid attacks that are made very easy with automatic execution like the flash loan attack we saw this year.   If you can be attacked by a flash loan you can be attacked by a whale. Rather then forbidding the use of smart contracts, and turning down many users, you should just fix you contract logic to not be vulnerable. I\u2019ll give you a hint: don\u2019t do arbitrary external calls (this includes sending ETH) unless your internal state is clean and the invariant are valid. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.527698412698413
                }
            ]
        }
    ],
    "group_index": "1076"
}