{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5143-slippage-protection-for-tokenized-vaults/9554",
            "title": "EIP-5143: Slippage protection for Tokenized Vaults ",
            "index": 9554,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "1",
                    "likes": "3",
                    "time": "09/06/2022-12:41:24",
                    "content": "As described in this message I believe and extension ERC is required to standardize the EOA facing functions of ERC4626 vaults.   github.com/ethereum/EIPs         ERCXXX: Slippage protection for Tokenized Vault ERC   ethereum:master \u2190 Amxx:ERC4626SlippageProtection            opened 12:37PM - 09 Jun 22 UTC               Amxx             +205 -0           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5143",
                        "https://github.com/ethereum/EIPs/pull/5143",
                        "https://github.com/Amxx",
                        "https://github.com/ethereum/EIPs/pull/5143/files"
                    ],
                    "GPT-summary": "The post is an explanation of a proposal for an extension ERC to standardize the EOA facing functions of ERC4626 vaults. The author is seeking feedback and has opened a discussion on Github. A third party has given constructive criticism and extended to the proposal, while another third party may be auditing and reviewing the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Interoperability and Scalability",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dimsome",
                    "index": "2",
                    "likes": "0",
                    "time": "16/06/2022-15:36:10",
                    "content": "I think this extension makes a lot of sense. I like the idea of extending 4626 rather than creating a separate new standard to deal with certain use cases as is the case here: EIP-5115: Super Composable Yield Token. Something that I was wondering about: What would be the default behaviour of calling a function without the min/max/Shares/Assets as per 4626 alone?  The user/integrator should build in their own slippage protection?  or  IF a contract extends 4626 with 5143, the overloaded functions are there to customise the slippage, while the base 4626 functions should have slippage protection built-in?  The ladder would be better in my opinion. This would make a true standard, since the user could handle each contract that is 4626 the same way, without risking being sandwiched with one 4626 Vault while being totally safe with another. One that extends 4626 with 5143 while the other doesn\u2019t. We should make sure to protect users/integrators in either case. That is why the reference implementation should be different. The 4626 deposit function should work out a min/max/Shares/Assets and call the 5143 deposit function with that value. While the functions within 5143 can customise the slippage and potentially save gas if the calculation is done off-chain. In my opinion, this would be a better way of extending a standard while keeping the base standard usable even with the extension. I would therefore add:  A contract that is 4626 with the 5143 extensions should require the 4626 deposit/mint/redeem/withdraw to handle slippage The 5143 deposit/mint/redeem/withdraw functions are to customise slippage and save gas if the calculation is done off-chain or to be called directly from another smart contract if the slippage logic is to be customised.  Making each 4626 standardised and functioning in an expected way is the goal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.482560999606454
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "3",
                    "likes": "2",
                    "time": "17/06/2022-07:23:10",
                    "content": "My ERC4646, the deposit/mint/redeem/withdraw function can be subject to slippage, and have no specific protection. They are designed to be called by smart contracts, not by EOA. Using the preview allows them to estimate slippage and only execute the operation if they accept it. This design works if the preview call, the decision making, and the operation are in the same transaction which smart contracts can do, but not EOA. This is why we need an alternative workflow for EOAs. Backward compatibility dictates that using 5143 on top of 4626 does NOT modify the 4626 behavior. in particular, it doesn\u2019t change anything about slippage possibly happening. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.515873015873016
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "4",
                    "likes": "1",
                    "time": "17/06/2022-19:48:13",
                    "content": "I\u2019d recommend requiring support for EIP-165 so that wallets can detect these additional functions easily. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-4626-yield-bearing-vault-standard/7900/100"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "5",
                    "likes": "0",
                    "time": "20/06/2022-11:17:34",
                    "content": "For some reason, EIP-4626 doesn\u2019t include EIP-165 support\u2026 So I\u2019m not sure what should/shouldn\u2019t be in the interfaceID. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ishan-verma",
                    "index": "6",
                    "likes": "0",
                    "time": "05/09/2022-20:49:39",
                    "content": "Instead of overriding functions in ERC4626 protocols could implement a router contract similar to uniswapV2 router. For instance, ERC4626Router could have depositToMinShares(uint256 assets, address receiver, uint256 minShares)  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "7",
                    "likes": "0",
                    "time": "18/02/2023-18:13:51",
                    "content": "That was intentional. For a base spec, it\u2019s pretty obvious whether or not the implementation supports the full spec (because you should be reading the code anyways), ERC165 doesn\u2019t really add anything. For extensions, ERC165 is usually a good idea because then it becomes about which modifications to behavior the implementation supports. Also for some use cases (off-chain wallet signalling, or some types of Registry-style integrations) requiring implementation of ERC165 is also a benefit. Anyways, for the base standard, we didn\u2019t see a huge benefit to mandating it\u2019s use, and wanted to avoid the scenario with ERC721 (as it\u2019s somewhat annoying to use there) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "8",
                    "likes": "0",
                    "time": "18/02/2023-18:23:18",
                    "content": "I like that this proposal is an extension, I think it\u2019s really strong that way, since only sometimes will a Vault implementation be intended to be accessible to EOAs. You can probably reference ERC4626 with some of the implementation notes, e.g. \u201cThis function extends of the behavior ERC4626.mint, with the following additional assumptions:\u201d, just so it\u2019s clear to reviewers what the additional behavior is. I don\u2019t have any more significant commentary, I think this proposal is really strong and should be moved forward to Final once cleaned up  As a side note, you don\u2019t need to use the preview* methods for slipapge protection w/ Smart Contract callers, they can simple call the convertTo* functions and do an assertion based on that, something like: require(vault.convertToAssets(sharesToWithdraw) - vault.redeem(sharesToWithdraw, msg.sender, msg.sender) < SLIPPAGE_TOLERANCE);  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.104978354978354
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "9",
                    "likes": "0",
                    "time": "18/02/2023-18:26:36",
                    "content": "I think using a default of either 0 or type(uint).max (depending on scenario) would most clearly align with what @Amxx is saying, that by default the slippage \u201cprotection\u201d is 100% loss (lol), since the intent is that smart contracts should implement their own (more complex) handling for slippage loss, if desired ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.724489795918367
                }
            ]
        }
    ],
    "group_index": "1770"
}