{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/what-is-a-security-audit/358",
            "title": "What is a security audit? ",
            "index": 358,
            "category": [
                "Working Groups"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/maurelian",
                    "index": "1",
                    "likes": "4",
                    "time": "15/05/2018-16:24:33",
                    "content": "The ethereum community has kind of recreated the security process, with (until recently) very little input from the pre-existing information security community. We\u2019ve made up a lot of things up from scratch, which has resulted in a tremendous variation in the definition of an \u201caudit\u201d, and in what it means to audit a smart contract system. Some questions I\u2019d like to hear from people about: ring an auditor to make sure there are no bugs or vulnerabilities?  Is it an auditor\u2019s job to pronounce a system \u201csecure or insecure\u201d? How can auditors collaborate with development teams earlier in the design and development process? How can the we improve on the existing incentives* in developer/auditor relationship?  ie. Audits are expensive and time consuming, so developers are incentivized to include as many features as possible in a \u201cmajor release\u201d.     If you\u2019re interested in further discussion IRL follow this topic:     Proposed gathering of the Security community Working Groups       I\u2019m concerned that the need for security and correctness in smart contract engineering is being outweighed by the pressure to deliver highly complex systems to anxious ICO investors.  Following conversations at EdCon in Toronto, there\u2019s a clear need for a gathering specifically focused on smart contract security. Here is my best attempt at outlining what I think this event would look like, as well as my open questions.  Goals To share knowledge to prevent and mitigate security risks facing smart\u2026     ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.589759199134199
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "2",
                    "likes": "0",
                    "time": "15/05/2018-18:07:23",
                    "content": "    maurelian:  Can we do better than the current \u201csecurity last\u201d approach of developing a system then hiring an auditor to make sure there are no bugs or vulnerabilities?   Yes. In my previous field (aerospace flight software) we would always have a Preliminary Design Review (PDR) and Critical Design Review (CDR). PDR would typically be at the stage where you are planning how you would like to attack the project, with some breakdown of your goals into high level requirements, which would get reviewed in a day-long presentation showing various customers and stakeholders (FAA or other certification org). This way you can get expert feedback on your approach before you commit too many resources towards implementing it. Including security auditors at this stage would allow them to review your architecture for high-level holes (reducing the time you need to identify and change approaches) as well as getting them familiar with your project for later stages. CDR would typically occur after a design was deemed feature-complete. This review ensures that a large panel of people (customers, QA, certification board) agree with the total approach including testing and flight demo plans before final sign off to begin the validation cycle. Security auditors are entirely fulfiing this role right now (they are expected to provide final GO/NO-GO status on the code), so I think this process should be more formalized into what the expectations are since there are many other groups of people that should understand what is happening here. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.559374999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "3",
                    "likes": "1",
                    "time": "15/05/2018-18:08:40",
                    "content": "    maurelian:  Is it an auditor\u2019s job to pronounce a system \u201csecure or insecure\u201d?   They can only provide positive confirmation that a system is NOT \u201cinsecure\u201d. They should not be expected to prove it \u201csecure\u201d ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.483766233766234
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "4",
                    "likes": "0",
                    "time": "15/05/2018-18:09:50",
                    "content": "    maurelian:  How can the we improve on the existing incentives* in developer/auditor relationship?   More modularity? Getting modules audited piecemeal? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maurelian",
                    "index": "5",
                    "likes": "0",
                    "time": "15/05/2018-23:16:12",
                    "content": "    fubuloubu:  They can only provide positive confirmation that a system is NOT \u201cinsecure\u201d. They should not be expected to prove it \u201csecure\u201d   How would you describe the difference between NOT insecure and secure? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.019480519480519
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "6",
                    "likes": "2",
                    "time": "15/05/2018-23:55:06",
                    "content": "I think to a security auditor \u201csecure\u201d means \u201cto the best of our knowledge and the quality of our toolsets, there is nothing that is a known bug or insecure practice that we have found in the limited time we have to audit\u201d, which is the correct definition. To many developers, \u201csecure\u201d means \u201cpretty much no bugs\u201d. The difference between them is that the auditor understands there are limitations to the toolsets, and how to combine them together to acheive maximum coverage of the codebase to the set of scenarios presented in the specification(s), whereas the developer thinks it is possible to formally prove that what they built is exactly what the specification said, if only they had the knowledge to be able to do so. There is always something that you don\u2019t know is a problem until it is, and it takes multiple tools run by multiple parties with multiple different perspectives on what the goals are in the specification to have enough layers on it to ensure it\u2019s as robust as possible. At the end of the day, the strongest indicator of \u201csecurity\u201d is being in a malicious, open environment for an extended period of time, with a strong incentivize to attack it. Having robust procedures around how the code is handled and ensuring you are properly pushing the envelope of the application only as far as you are willing to lose it is when next steps are involved. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.742380952380952
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/redsquirrel",
                    "index": "7",
                    "likes": "1",
                    "time": "16/05/2018-19:22:22",
                    "content": "In my experience as an auditor, I have sometimes been involved more iteratively, rather than a big bang at the end. You need to be careful of \u201cgoing native\u201d, though. The outside perspective that an auditor brings is important, and the closer you get to the engineering process, the less \u201coutside\u201d you become. I think best case is to \u201cdrop in\u201d for a couple brief sessions of feedback before the final audit. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.816666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "8",
                    "likes": "1",
                    "time": "16/05/2018-19:48:02",
                    "content": "At some point you become their QA person, and you should ask for a raise! But seriously, I think \u201citerative involvement\u201d is definitely key to success. @maurelian keeps bringing this up, and I think setting more formal checkpoints for (serious) developers will create a stronger relationship and a deeper understanding with the auditor, which ultimately increases quality and security. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.111111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/drgoldberg",
                    "index": "9",
                    "likes": "0",
                    "time": "17/05/2018-06:48:13",
                    "content": "Hey all, my co-founder and I wrote this blog post about our philosophy of a smart contract security audit. Hope you enjoy. Welcome any feedback. https://medium.com/@bloctrax/philosophy-of-a-smart-contract-security-audit-1e111efd28cb ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.357142857142858
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/paulhauner",
                    "index": "10",
                    "likes": "2",
                    "time": "20/05/2018-01:31:57",
                    "content": "We\u2019re lucky to have a director who\u2019s last job was as a manager (before that, pen tester) in the cyber-sec division of one of the big-four audit firms. His input has really shaped my understanding of the language we should use. He reviews all reports and generally manages to pick me up on something. Here\u2019s how we work, with regards to the \u201csecure or insecure\u201d topic: Generally, our wording is along the lines of \u201cno vulnerabilities were detected\u201d. This clearly communicates that we did not find any issues, however it leaves open the possibility that some flew under the radar. We also try and avoid the term \u201caudit\u201d as it tends to infer some form of official inspection abiding to some predefined set of rules, which does not exist in this space. We prefer to use \u201csecurity review\u201d. We absolutely do not declare a system to be \u201csecure\u201d, \u201csafe\u201d, \u201cvulnerability-free\u201d or anything of the like. Firstly, such terms are absolute and in order to use them accurately you would need to arduously define the scope of the statement (e.g., does it extend to the management of the \u201cowner\u201d keys, does it include the security of a hash function, etc). Secondly, using such terms do not leave room for error on the reviewers behalf. Of course, you could use some catch-all \u201cbest-effort\u201d statement at the end of the document to cover a \u201csecure\u201d statement, but to me it does not seem very concise to declare a system to be absolutely something, then waive that absolute term later on. Sometimes you can\u2019t avoid doing this (we do include and rely upon that waiver statement), but when it comes down to a final declaration of the system I think it should be as concise as possible. Interestingly, I was pulled up on the statement \u201cno known vulnerabilities are present\u201d, as it could be interpreted that \u201cknown\u201d includes all vulnerabilities known to humanity, meaning the contract is impossible to exploit at this point in time. Avoiding such ambiguity is important to us, so I would definitely say that calling something \u201cnot insecure\u201d is either directly calling it \u201csecure\u201d or simply too ambiguous to be used in any official statement (using our methodology). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.478528528528529
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "11",
                    "likes": "4",
                    "time": "22/05/2018-10:12:31",
                    "content": "I worked as an infosec consultant for about 7 years, so here are some thoughts\u2026  Whenever we wrote a report, we were always very careful to outline the exact scope (what did we look at, what did we look for), and very precise about all that was excluded. You need to think hard about what you have excluded, since it\u2019s harder to narrow it down than what you actually did do. Things like: \u201cdid not audit the test-coverage\u201d, or \u201cdid not audit the multisig wallet that will be used to operate the contract\u201d, or \u201cdid not include the web-parts of the user interface\u201d. Also thread-model-wise: does the audit assume that the operators are trusted?. In scope, always include what you mean by security: security of the users? of the owners? The report summary always ended with a rating. Typically \"we consider this app/thing to have a low risk [\u2026of being hacked\u2026} \", if it was good. We never ever wrote anything more positive than \u201clow risk\u201d. All reports contained a list of observations made. Each observation had one-paragraph summary: non-technical who can achive what impact . E.g: \u201cA flaw in input handling made it possible for an authenticated attacker to alter database entries\u201d. After that follows a technical description. After that recommendation(s) to fix the flaw.  A notable difference I\u2019ve seen in this space, compared to infosec, is that customers tend to want to use the audit as a sales-tool. I have had to explain basically \u201cI\u2019ll give you the report, you\u2019re free to do what you want with it. If you publish it in incomplete form, I reserve the right to publish it in it\u2019s entirety. The report will focus on the things you did wrong, not the things you did right\u201d. Oh, and after delivering a report, we always made a follow-up report when they had fixed the issues. That second check should be quick, and not cover anything other than verifying the fixes in the first report. I agree about iterative mode being good \u2013 but at some point you\u2019re not an auditor any more, but instead the security-guy for the team. And in that case, maybe someone else should do an audit. If a company have X dollars to spend on security, the \u2018iterative-security-guy\u2019 approach may be better to spend it on than a pure audit-approach, imo. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.6911179770050735
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maurelian",
                    "index": "12",
                    "likes": "1",
                    "time": "22/05/2018-10:35:22",
                    "content": "    holiman:  customers tend to want to use the audit as a sales-tool.   Agree that this feels awkward, but I\u2019m not sure it\u2019s a bad thing. End users should genuinely care about security here. Reports should still be written for the project team, but a knowledgeable end user should be able to read the report. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.35
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/trigun0x2",
                    "index": "13",
                    "likes": "1",
                    "time": "22/05/2018-11:23:47",
                    "content": "Risk auditing often deliver probability instead of a boolean for things like this. I\u2019m in favor of a probability of risk of each major section of code instead of one answer for the entire codebase. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.15625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/trigun0x2",
                    "index": "14",
                    "likes": "0",
                    "time": "22/05/2018-11:28:23",
                    "content": "    maurelian:  How can auditors collaborate with development teams earlier in the design and development process? How can the we improve on the existing incentives* in developer/auditor relationship?   I think one big issue here is that most teams come from a web development background and they\u2019re not in the mindset of working with a security team from the start. We often hear from teams 1-3 weeks before their official launch (for small - medium size projects). I have found that the overall atmosphere is changing and people are starting to care about security as a core component thanks to efforts like this. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.321428571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "15",
                    "likes": "1",
                    "time": "22/05/2018-11:47:02",
                    "content": "    trigun0x2:  I think one big issue here is that most teams come from a web development background and they\u2019re not in the mindset of working with a security team from the start.   100% this. There is no common resource that explains \u201cwhy\u201d they need to be more careful, only this general threat that you do, or else learn it the hard way. Explaining what risk is and how to think about it is a critical skill not many have who are entering the space. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.279166666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "16",
                    "likes": "0",
                    "time": "22/05/2018-12:46:51",
                    "content": "    holiman:  A notable difference I\u2019ve seen in this space, compared to infosec, is that customers tend to want to use the audit as a sales-tool.   I think a big part of this is because it\u2019s such a new process for most people, they see it as a value-add instead of a requirement. There\u2019s a lot of education to be done\u2026     holiman:  I agree about iterative mode being good \u2013 but at some point you\u2019re not an auditor any more, but instead the security-guy for the team.   I think there\u2019s a difference between an audit relationship that\u2019s semi-frequent and \u201cthe security guy\u201d. If it\u2019s at defined checkpoints where major changes are taking place, then that\u2019s a value-add because they have better intuition of what the product should do without being too deep in the day-to-day. I would say any contact more frequent than 2-4 weeks and you start to errode the objectivity of the auditor because of familiarity. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.457859848484848
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/RexShinka",
                    "index": "17",
                    "likes": "0",
                    "time": "27/05/2018-02:14:32",
                    "content": "    maurelian:  Is it an auditor\u2019s job to pronounce a system \u201csecure or insecure\u201d?   In aerospace, the final auditor is the government (the FAA or equivalent).  All they say is that a piece of software was developed according to a strict process (at the software level).  They never say anything about bugs and security.  At the system level (flight test) they say the system worked properly when a strict agreed test set was executed. If there was an agreed process, then the auditors responsibility becomes smaller.  An agreed set of code and compile review tools is an example.  The auditor can just run the tools to check the box.  Constantly improving the process is crucial here. Complex blockchain security aspects (re-entry, inheritance, etc) may be very difficult to check via a process, so the individual auditor may still be vital for some time. The process also pushes the work onto the development team, not the auditor.  The auditor spots check that the process was done correctly.  I just realized that with everything in the public github (as it will be for many projects) then anyone can audit the process.  That could be interesting. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.05
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "18",
                    "likes": "1",
                    "time": "27/05/2018-03:34:15",
                    "content": "    RexShinka:  I just realized that with everything in the public github (as it will be for many projects) then anyone can audit the process.  That could be interesting.   That\u2019s a great point. Very interesting indeed!     RexShinka:  The process also pushes the work onto the development team, not the auditor.  The auditor spots check that the process was done correctly   I definitely think we need to explore more of what the developer team\u2019s responsibilities should be. There should be some predefined metrics for success in terms of security, basically what is acceptable and what is not acceptable, as different projects may have different guarantees. Setting expectations is important for a successful audit, as it is for users to understand exactly the level of detail that was applied. Heck, even a short disclaimer saying \u201cthis code is unaudited as it is intended for testing or entertainment purposes only\u201d would be a step up from the level of ambiguity we have now.  We both harp on aerospace because that is what we know, but it does have a solution for this problem: Design Assurance Levels (DAL). It\u2019s a simple letter score that sets clear high level guidelines of what the expectations are for a system: Level A means \u201cflight critical\u201d, which means the system is designed to withstand multiple faults as the functionality is critical for safe operation of the aircraft. Level C means \u201cmission critical\u201d, which means degradation of the system is marginally hazardous as it increases pilot workload, which could lead to mission abort, and other more dangerous scenarios. Level E basically means \u201cnot hazardous at all\u201d which means it does not affect flight safety, and you can do whatever you want to test it as nothing is required. This simple grading schemes allows system integration engineers (like I was in my old career) to take systems other people have designed (like sensors and actuation equipment) and build a larger system out of them. Understanding the DAL as well as the failure modes of that system is what allowed us to do this successfully, it gives us the framework necessary to make well-reasoned assessments without having to be experts in those systems. Perhaps something similar can work here, I know I am figuring out how we can apply it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.841087962962963
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Ethernian",
                    "index": "19",
                    "likes": "0",
                    "time": "23/06/2018-00:37:05",
                    "content": "BACKGROUND: My code was audited by two independent auditors and deployed one year ago. Two cosmetic bugs came in to sight till now but no major bugs appeared. Our Auditors were great guys! I am very thankful to them! EXPERIENCE:   Auditors have audited me, but I have tryied to audit the auditors too. I have silently implanted some bugs into the code and tried to estimate a quality of the audit by ratio bugs_found / bugs_known. Unfortunately non of auditors have found all my \u201cfake\u201d bugs, so the ratio was <100%. (but they have found other show stopping bugs!) IMHO, this kind of measurement must be part of any professional audit.   Audit must be provided face-to-face and in pair-programming mode. Some bugs may be in the gap between specification and implementation. So you will need to explain not only the code written, but the environment around it. A pair-auditing is very exhausting job. More 4 hours a day is not reasonable. You will spend days if not weeks on it.   ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.229464285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "20",
                    "likes": "0",
                    "time": "24/06/2018-14:52:24",
                    "content": "Pair-auditing is a very interesting suggestion. I\u2019m not sure if pair-programming itself is warranted here, that\u2019s more a of a design practice and I think the auditor needs to stay sufficiently out of the design to be objective. But I definitely think pair-auditing \u2013 running through the list of issues found alongside the developer \u2013 should absolutely be best practice for reviewing audit revision suggestions. Face-to-face is the best way to do this, but not always possible. Tools that help with this will be very handy. Wemux is cool! https://github.com/zolrath/wemux ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.05875
                }
            ]
        }
    ],
    "group_index": "905"
}