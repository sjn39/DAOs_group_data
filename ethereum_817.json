{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/generalised-precompile-for-elliptic-curve-arithmetics-and-pairings-working-group/3208",
            "title": "Generalised Precompile for Elliptic Curve arithmetics and pairings Working Group ",
            "index": 3208,
            "category": [
                "Working Groups",
                "Ethereum 1.x Ring"
            ],
            "tags": [
                "eth1x",
                "precompile"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "1",
                    "likes": "1",
                    "time": "26/04/2019-15:49:43",
                    "content": "There is discussion going on here: Precompile for general elliptic curve linear combinations Recently, @shamatar (Alexander Vlasov) has agreed to become the leader of this Working group with the objective of researching and making reference implementation (and test generation) for this precompile (or group of precompiles). I understand that there is also work on figuring out the formula for the gas cost estimation, which is not trivial. Please message DM him or post here if you would like to join the group, with the thought of what you can contribute and how much of your time you would like to commit. ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.3125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "2",
                    "likes": "1",
                    "time": "26/04/2019-18:45:51",
                    "content": "Thank you @AlexeyAkhunov. Here is also a link to an existing repo (with a legacy name). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "3",
                    "likes": "0",
                    "time": "27/04/2019-00:15:15",
                    "content": "@AlexeyAkhunov, for discussions under this WG, should they fall under the category of \u201cEthereum 1.x\u201d, or can I create a new category \u201cEC Arithmetics and Pairings WG\u201d and then tag all topics w/ \u201ceth1x\u201d? I\u2019m aiming to make topics easily searched-for on the Forum! I can also create an entry for this and the other 1.x WGs on the wiki: https://github.com/ethereum-magicians/scrolls/wiki#rings ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.921717171717171
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/snaketh4x0r",
                    "index": "5",
                    "likes": "0",
                    "time": "17/06/2019-16:23:16",
                    "content": "hey @AlexeyAkhunov @shamatar I would like to join the group. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "6",
                    "likes": "0",
                    "time": "17/06/2019-17:55:04",
                    "content": "    shamatar:  Here is also a link to an existing repo  (with a legacy name).   Here is an EVMC Precompile implementation of the EIP using repo from @shamatar: https://github.com/axic/eip1962-evmc ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-2003",
                        "https://github.com/axic/eip1962-evmc"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "7",
                    "likes": "0",
                    "time": "20/06/2019-11:03:06",
                    "content": "Sure, can you PM me your telegram handle? Most of the discussion happens there. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "8",
                    "likes": "0",
                    "time": "05/07/2019-06:50:51",
                    "content": "Since this seems to supersedes https://eips.ethereum.org/EIPS/eip-1829 and https://eips.ethereum.org/EIPS/eip-665 (is it superseding the Ed25519 verification proposal), can you mention that in a section in the EIP? If this EIP is accepted, that it should mark those two properly \u201csuperseded\u201d, but for now just a mention of the fact would be useful. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-665"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "9",
                    "likes": "1",
                    "time": "16/07/2019-19:18:55",
                    "content": "I am still strugging to understand why this isn\u2019t four separate contracts?  The first argument is a 4 way switch to 4 different logic paths, with at least two interpretations of the binary input data and multiple return value meanings. The spec claims   One may separate interfaces for additions, multiplications and multiexponentiations and estimate gas costs differently for every operation, but it would bring confusion for users and will make it harder to use a precompile from the smart-contract.   But my experience as a software engineer says the opposite.  Cramming too much functionality into one function call differentiated only by parameter values is what is making this hard to use.  Four distinct contracts would be much better. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.232638888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "10",
                    "likes": "0",
                    "time": "20/07/2019-04:48:40",
                    "content": "Can someone drop a link to the EIP that is being discussed here?  I can\u2019t find it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "11",
                    "likes": "0",
                    "time": "20/07/2019-13:07:39",
                    "content": "EIP-1962 - This is the discussion-to link for that EIP and after my comment I realized this thread is meant as a more generic working group thread. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "12",
                    "likes": "0",
                    "time": "20/07/2019-18:26:03",
                    "content": "Few notes about the ABI:  Merging different operations under one precompile is a design decision due to the following two reasons:  Not spam the address space of precompiles Most of the procedures where one will want to use pairings will require one to have do few operations in G1/G2   With this in mind large part of the ABI is reusable (e.g. one can always hardcode preamble bytes for G1 ADD/G1 MUL/G1 MULTIEXP in a contract and then just use abi.encodePacked to attach points or scalars encoding after) ABI is the least troublesome part of the precompile, so I\u2019m flexible to change it if necessary. For example one can only encode parameters as multiples of 32 byte \u201cwords\u201d, but it does not solve the problem that for some specific cases one may want to have modular multiplications of 256+ bit integers (e.g. MNT4/6 753) that requires another degree of tricks  @shemnon If you have proposals to improve the ABI I\u2019d be glad to hear them, as I told, ABI is not difficult to change ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.245879120879121
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "13",
                    "likes": "0",
                    "time": "20/07/2019-18:54:26",
                    "content": "    shamatar:  Not spam the address space of precompiles   This is not a problem.  Were we talking about opcodes it would be more of an issue since over half of the \u201cspace\u201d is used.  But for precompiles the available space is quite large. You will note that the alt_bn128 calls already have one call per operation (add, mul, and pairing check).  So splitting this into four functions would match the design of precompiles already in the mainnet definitions.     shamatar:  Most of the procedures where one will want to use pairings will require one to have do few operations in G1/G2   And switching to a different function for each operation will help in understanding which operation is being called. From a client implementation perspective the merged APIs also become difficult to maintain.  The gas cost definitions hinge off of the value of the first byte, and it\u2019s not just changes in constants but changing formula.  While gas costs have taken into account the size and for EXP one value, aside from Call and Storage operations all gas costs go into one formula. Making the functions parametric on curve type is perfectly fine, it feels like a good design.  But putting the operation as a parameter when each operation could/should be its own call is where I think the design should be changed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.130952380952381
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "14",
                    "likes": "0",
                    "time": "22/07/2019-17:29:46",
                    "content": "Just for correctness, it would be 7 different precompiles (3xG1 ops, 3xG2 ops, pairing). For gas estimates - gas estimator is part of the implementation and is not exposed to the node developers with the current design cause it allows one to re-use all the ABI parsing functionality. As I was told, there is no solid preference for one or seven separate precompile addresses. We can discuss it on the next call briefly and here I will rely on the decision of the node developers. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "15",
                    "likes": "0",
                    "time": "22/07/2019-19:08:55",
                    "content": "    shamatar:  Just for correctness, it would be 7 different precompiles (3xG1 ops, 3xG2 ops, pairing).   Still reasonable.  And it more accurately reflects the complexity of what is being proposed.     shamatar:  For gas estimates - gas estimator is part of the implementation and is not exposed to the node developers with the current design cause it allows one to re-use all the ABI parsing functionality.   My main issue is that we should not assume clients are just going to use the one provided implementation.  Multiple viable independent implementations is one of the things that differentiates Ethereum from other blockchains.  Expecting that clients will use the same implementation from a single provider chips away at that quality. The spec needs to be written and thought of from the perspective that clients may want to make a new, clean-room implementation based strictly off the specs.  So saying that it is already implemented is not a persuasive argument.  It is a bit of a counter-indication when a question about a spec detail can be met with \u201clook at what the reference implementation does\u201d rater than being able to reason about it from the content of the specification.  This is the core of a lot of the pushback that I\u2019ve seen and provided on the all core devs calls. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.6563852813852815
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "16",
                    "likes": "0",
                    "time": "22/07/2019-20:08:08",
                    "content": "Sorry for confusion, my meaning of \u201cis provided in implementation\u201d is that it\u2019s my responsibility to perform a gas schedule research and provide a reference implementation bundled together with functionality itself. If client developers would want to port it - no one can stop them. Gas schedule itself is still WiP, but it\u2019s getting close at least for Rust implementations, then I need to check what is a final performance of C++ one since it\u2019s quite far from the Rust one, for example it uses external code for arithmetic (that is great for cross-checks). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.083333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gluk64",
                    "index": "17",
                    "likes": "0",
                    "time": "26/07/2019-09:46:09",
                    "content": "    shemnon:  The spec needs to be written and thought of from the perspective that clients may want to make a new, clean-room implementation based strictly off the specs.   Absolutely agree to this! We started with the ABI spec to define the exact scope of functionality, and will now specify formally the internal details. This is a relatively easy task once the gas metering is complete: since the operations follow simple algebraic formulas, we only need to define the format of the number representations, the edge cases, and the gas metering coefficients. The implementation in C++ took only a week, so the workload is pretty bounded. It will be great to see implementations in further languages, we will be more than happy to assist anybody who will take on the task. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.257034632034633
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gluk64",
                    "index": "18",
                    "likes": "0",
                    "time": "26/07/2019-13:34:36",
                    "content": "A library is implemented to conveniently call the precompile:    GitHub    matter-labs/eip1962_lib Contribute to matter-labs/eip1962_lib development by creating an account on GitHub.       The usage will be as simple as: EIP1962.G1Pair[] memory pairs = EIP1962.Pair[         EIP1962.PairG1({             p1: EIP1962.G1Point(1, 2),             p2: EIP1962.G1Point(1, 3)         })     ];     bytes memory result = BLS12.pairingG1(pairs);     require(result, \"Wrong inputs\"); ",
                    "links": [
                        "https://github.com/matter-labs/eip1962_lib/"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "19",
                    "likes": "0",
                    "time": "26/07/2019-15:00:05",
                    "content": "The repo seems to be broken, I think examples/EIP1962.sol should be in contracts. Another comment: this library uses manual byte copying. Solidity has built in support for that with much better speed: abi.encodePacked. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "20",
                    "likes": "0",
                    "time": "26/07/2019-18:05:33",
                    "content": "    axic:  Since this seems to supersedes https://eips.ethereum.org/EIPS/eip-1829  and https://eips.ethereum.org/EIPS/eip-665 (is it superseding the Ed25519 verification proposal), can you mention that in a section in the EIP?   Looking at today\u2019s version of EIP1962 it doesn\u2019t seem to support Curve25519. @shamatar @gluk64 is this the case?  Can you post gas calculation comparing the cost with the overlapping existing bn128/bn254 ecadd/ecmul/ecpairing precompile? I\u2019d assume the cost for those operations would be the same here, unless the design of this precompile can accommodate for some optimisations. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-665"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "21",
                    "likes": "0",
                    "time": "26/07/2019-19:33:01",
                    "content": "While we are updating the spec can we get real test cases?  \u201cTest cases are the part of the implementation with a link below.\u201d is not a sufficient set of test cases as it blurs the line between specification and implementation.  (Insert waterfall vs agile grumblings here, but waterfall is how we need to work to maintain a billion dollar network). I would expect (possibly in another markdown document kept in the EIP repository) a table of inputs to the precompile, and a column of outputs, and a gas cost column, and possibly a column describing if this test is for any particular corner case.  It doesn\u2019t need to be reference test level exhaustive but given the nature of this precompile would expect at least one positive test for each operation on each supported curve for that operation. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.567099567099567
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "22",
                    "likes": "0",
                    "time": "20/08/2019-08:07:34",
                    "content": "So far, the roadblock for me to complete the implementation including gas schedule is to generate a set of MNT4/6 curves with bit width for the base field of 256, 320, 384, etc bits up to (1024-1) to measure pairing cost on those and redo G1 and G2 operations gas metering based on the latest Monte-Carlo simulation approach (first results an the description of the procedure can be found here). After that for sure there will be test vectors in a form [curve description, points, operation, expected output, encoded input, encoded output, gas cost]. I can already derive most part of it, but gas cost will be missing. For BN254 price - it will not be \u201cthe lowest possible\u201d. Due to variable field modulus some precomputations are not possible and one will have to pay substantial price for those over the run time. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.302083333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "23",
                    "likes": "1",
                    "time": "31/01/2020-02:16:31",
                    "content": "I\u2019m not sure the status of this, it seems relatively stale. I find this eip to be extremely important, and if it needs a new champion I\u2019m happy to help get this pushed forward. A little background: This eip should enable the ability for a cheap on-chain bls-verify which is the a missing check on the eth2 deposit contract. Without that verification a user can submit an invalid deposit,that only gets rejected after the beacon chain has processed it. This means the users funds will be \u201cburnt\u201d. If anyone can provide a status to where it is at we (ChainSafe/Lodestar) would be more than happy to help bring this to fruition. Eth2 phase0 launch is uncertain (perhaps this summer) but if we can get reference implementations, and an inclusion to a HF or even its own HF in a few months that would would be extremely helpful for the UX of new users on eth2. Feel free to contact me @GregTheGreek ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.846946022727273
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "24",
                    "likes": "1",
                    "time": "31/01/2020-11:09:56",
                    "content": "Hey Greg. It\u2019s not stale, recent progress can be seed in latest CoreDevs meeting, like in this agenda. I\u2019d say that precompile is complete in it\u2019s Rust and C++ forms and now we are trying to complete testing of an independent Go implementation. Sincerely, Alex ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.035714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "25",
                    "likes": "0",
                    "time": "31/01/2020-19:11:10",
                    "content": "@shamatar incredible! I wasn\u2019t aware of the active implementations. Let me know if there\u2019s anything you need help with! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.805555555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/alonmuroch",
                    "index": "26",
                    "likes": "0",
                    "time": "05/04/2020-14:06:01",
                    "content": "Any estimate is to which version this might find itself? I guess as the beacon chain release is getting closer this becomes more and more pressing/ ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                }
            ]
        }
    ],
    "group_index": "817"
}