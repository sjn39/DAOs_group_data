{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-681-representing-various-transactions-as-urls/650",
            "title": "ERC-681: Representing various transactions as URLs ",
            "index": 650,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "1",
                    "likes": "2",
                    "time": "05/07/2018-07:06:21",
                    "content": "This is a very useful proposal by @nagydani  that should be getting more attention now that UX (and what I would call \u201cdeveloper UX\u201d) is such a high priority in the community. Simple Summary A standard way of representing various transactions, especially payment requests in Ethers and ERC #20 tokens as URLs. Abstract URLs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely coupled applications. A standardized URL format for payment requests allows for instant invocation of the user\u2019s preferred wallet application (even if it is a webapp or a swarm \u0111app), with the correct parameterization of the payment transaction only to be confirmed by the (authenticated) user.   github.com   nagydani/EIPs/blob/master/EIPS/eip-681.md ## Preamble      EIP: 681     Title: URL Format for Transaction Requests     Author: Daniel A. Nagy <daniel@ethereum.org>     Type: Standard Track     Category: ERC     Status: Draft     Created: 2017-08-01     Requires: 20, 137, 831  ## Simple Summary A standard way of representing various transactions, especially payment requests in Ethers and ERC #20 tokens as URLs.  ## Abstract URLs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely coupled applications. A standardized URL format for payment requests allows for instant invocation of the user's preferred wallet application (even if it is a webapp or a swarm \u0111app), with the correct parameterization of the payment transaction only to be confirmed by the (authenticated) user.  ## Motivation The convenience of representing payment requests by standard URLs has been a major factor in the wide adoption of Bitcoin. Bringing a similarly convenient mechanism to Ethereum would speed up its acceptance as a payment platform among end-users. In particular, URLs embedded in broadcast Intents are the preferred way of launching applications on the Android operating system and work across practically all applications. Desktop web browsers have a standardized way of defining protocol handlers for URLs with specific protocol specifications. Other desktop applications typically launch the web browser upon encountering a URL. Thus, payment request URLs could be delivered through a very broad, ever growing selection of channels.      This file has been truncated. show original      ",
                    "links": [
                        "https://github.com/nagydani/EIPs/blob/master/EIPS/eip-681.md",
                        "https://github.com/nagydani/EIPs/blob/master/EIPS/eip-681.md",
                        "https://ethereum-magicians.org/t/we-need-more-support-for-erc-681/897/2",
                        "https://ethereum-magicians.org/t/human-readable-machine-verifiable-transaction-requests/750"
                    ],
                    "GPT-summary": "The post discusses a proposal by Daniel A. Nagy to create a standardized URL format for payment requests in Ethers and ERC #20 tokens. The proposal suggests that URLs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely coupled applications. The post also highlights the convenience of representing payment requests by standard URLs and how it could speed up the acceptance of Ethereum as a payment platform among end-users. The post includes positive feedback, constructive criticism, and questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Interoperability and Scalability",
                        "Change to proposal pipeline",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.3037109375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "2",
                    "likes": "0",
                    "time": "05/07/2018-07:26:12",
                    "content": "Totally agree, we are working on implementing this as part of the WalletConnect standard. However I think this is a great start for doing transaction requests but I find that there is still more information needed to clearly provide human-readable machine-veriable transaction requests similar to Aragon\u2019s Radspec as suggested by @avsa on the thread for EIP-1138 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "3",
                    "likes": "0",
                    "time": "05/07/2018-07:29:30",
                    "content": "Referencing these here:   github.com/ethereum/EIPs      Issue: ERC: Human-Readable Transaction Requests  \t \topened by coinfork \ton 2018-06-07 \t \t \t  --- eip: 1138 title: Human-Readable Transaction Requests author: Witek Radomski <witek@enjin.com> type: Standards Track category: ERC status: WIP created: 2018-06-06 discussions-to: https://github.com/ethereum/EIPs/issues/1138 requires: 681, 831 --- Simple Summary A standard format for providing...           GitHub    aragon/radspec \ud83e\udd18 Radspec is a safe alternative to Ethereum's natspec - aragon/radspec      ",
                    "links": [
                        "https://github.com/coinfork",
                        "https://github.com/ethereum/EIPs/issues/1138",
                        "https://github.com/coinfork",
                        "https://github.com/ethereum/EIPs/issues/1138",
                        "https://github.com/aragon/radspec",
                        "https://github.com/aragon/radspec"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mikro2nd",
                    "index": "4",
                    "likes": "0",
                    "time": "05/07/2018-10:25:27",
                    "content": "Agree that this is an important step in improving UX. I do have one (faint) concern:  chain_id is optional and contains the decimal chain ID, such that transactions on various test- and private networks can be requested. If no chain_id is present, the client\u2019s current network setting remains effective.  Would it not be better to mandate that the default chain be the mainnet rather than something dependent on the client\u2019s current settings. By relying on the client settings you\u2019re introducing a vector for introducing debugging hassles:  A Play In One Act <Enter A Bug> Dev: What chain_id did you use? User: ? Dev: Did the URL contain a chain_id? User <who doesn't really know what that would look like, but doesn't want to appear stupid>: I don't think there was one...  <By pure chance they're right this time>  Dev: OK, which blockchain was your client using at the time? User: I've no idea. I think it may have been some test network.  <ad lib mayhem, heads exploding, fx fades>  \u2026you get the idea, I hope! Whereas, if the default is mandated to be the mainnet, there\u2019s just one less (fertile) source for confusion when it comes to debugging. Hope this makes some technical sense, but I confess I\u2019m not well qualified to judge that \u2013 I\u2019m just coming at it from a perspective of decades of debugging\u2026  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.674479166666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "1",
                    "time": "05/07/2018-11:58:29",
                    "content": "There is not a single chain that can be considered canonical.  When a contentious fork occurs, there will be two \u201cmain\u201d chains and it is up to users, exchanges, wallets, etc. to decide which one is \u201cmain\u201d.  People have argued in the past (and I have supported) that the chain ID should change with every fork, thus defaulting is also not really reasonable.  Your client follows some chain, someone else\u2019s client follows another chain, both clients call the chain they follow \u201cmain\u201d, neither chain uses the same chain ID from before the fork. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.607142857142858
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/nagydani",
                    "index": "6",
                    "likes": "0",
                    "time": "05/07/2018-12:28:06",
                    "content": "It has been debated a bit, and to be honest I do not remember why it was decided this way, but I guess that it had something to do with being able to test URL\u2019s without a network id on testnets as well as being able to transition to a different chain ID after some contentious hardfork. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mikro2nd",
                    "index": "7",
                    "likes": "1",
                    "time": "06/07/2018-11:53:17",
                    "content": "I\u2019ll stand by my conviction that the existence of a hidden variable is a dangerous source of confusion that will result in misery for many people in time to come, and I strongly urge a reconsideration while the EIP is still in draft and amenable to change/improvement. Perhaps a better solution than I first suggested is simply to make the chain element of the URL mandatory rather than \u201coptional with a hidden default\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.527777777777779
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "8",
                    "likes": "1",
                    "time": "30/07/2018-14:40:34",
                    "content": "AFAIR the chain_id was made optional to provide some backward compatibility to ERC-67 - when making it mandatory would always break compatibility. Also I do not really see the reason to make it mandatory - it is easy - if the parameter is not there -> then the value is 1. I dont\u2019t see users knowing/remembering about chain_id\u2019s in URLs as a valid case - they just will not know or remember - no matter if there is always a number or not. But just my 2cents. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/php4fan",
                    "index": "9",
                    "likes": "0",
                    "time": "19/06/2022-10:00:08",
                    "content": "Why is there no explanation whatsoever in the specification about the pay- prefix?? The formal grammar specification says the url starts with ethereum: followed by an optional pay-, that is, either ethereum:0x..... or ethereum:pay-0x....., but says nothing about when the pay- prefix is allowed or required. Does it make no difference whatsoever? If so it should be specified, because it\u2019s quite counterintuitive that there would be a prefix that you can arbitrarily include or leave out and it makes no difference at all. Intuition suggests that maybe the ppay- prefix should be present when the transaction has a non-zero value, but (a) that\u2019s entirely me speculating, it\u2019s not stated anywhere, and (b) there are examples with non-zero value and with no pay- prefix. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.833333333333333
                }
            ]
        }
    ],
    "group_index": "1362"
}