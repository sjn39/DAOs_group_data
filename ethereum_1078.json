{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2711-separate-gas-payer-from-msg-sender/4353",
            "title": "EIP-2711: Separate gas payer from msg.sender ",
            "index": 4353,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "1",
                    "likes": "3",
                    "time": "11/06/2020-03:13:52",
                    "content": "https://eips.ethereum.org/EIPS/eip-2711 Simple Summary Allow for a second transaction signer who pays for gas, which is separate from the transaction signer who represents the msg.sender of the transaction. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-2718-typed-transaction-envelope/4355/16"
                    ],
                    "GPT-summary": "The post explains the proposal EIP-2711, which suggests allowing for a second transaction signer who pays for gas, separate from the transaction signer who represents the msg.sender of the transaction. The post does not advertise the proposal, but rather explains it. A 3rd party gives constructive criticism of the proposal and asks questions about it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "2",
                    "likes": "0",
                    "time": "11/06/2020-03:16:54",
                    "content": "The link is broken until EIP editors merge the draft PR.  In the meantime, you can see the draft PR at https://github.com/ethereum/EIPs/pull/2711/files?short_path=d153253#diff-d1532538998fb37b8d96e11a10e4ffd0 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 3.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/juanfranblanco",
                    "index": "3",
                    "likes": "0",
                    "time": "11/06/2020-11:18:55",
                    "content": "What is the suggested order of signers and what do they sign? Will the sender sign the rlp message as per now, excluding the gas elements and the gas payer sign the rlp of that message including the r,s,v? I guess if the nonce provider could be similar? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "4",
                    "likes": "0",
                    "time": "11/06/2020-13:01:20",
                    "content": "the sender could sign the transaction, just like now, and the provider, if he accepts the gas parameters included by the sender, would sign the entier sender tx (including r,s,v) That way provider doesn\u2019t have to add anything more, and is already replay protected by the sender\u2019s replay protection EDIT: I think this is better then having the provider give the gas details (in particular gas limit). Otherwize, a provider could purpousfully put a very low max gas (21000 when the transaction needs much more) have the transaction revert, lose the gas but make the sender\u2019s nonce increase. Having the sender nonce increase that way can deny deploying a contract to a particular address\u2026 which can have bad consequences. It should be to the signer to determine how much gas he needs, and the provider accepts (or not) by signing. EDIT2: just realized that this is dangerous, because removing the last signature would make the transaction being paid by the sender (bypass the relayer). The sender ends up paying for its transaction, which is not a major security risk, but is an issue nontheless ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 5.319128787878789
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/juanfranblanco",
                    "index": "5",
                    "likes": "0",
                    "time": "11/06/2020-14:10:53",
                    "content": "I think the sender (signer) should provide the amount gas required for the transaction, the gas payer can estimate the gas and validate that it matches the requirements for the transaction, and provide the gas. If the txn fails the sender will be charged anyway or if it needs to be replayed with a higher price, that will be something for both the gas payer and sender to agree. That might require some other type of messaging between both parties and / or smart contract. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 4.799107142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "6",
                    "likes": "0",
                    "time": "11/06/2020-16:42:27",
                    "content": "This is an EIP I\u2019m excited about and I believe it is long overdue. Here are a few thoughts I currently have:  I\u2019m not sure I follow the reasoning behind an explicit ChainID element in the transaction. It is already encoded in the v element, so it seems like redundant information. By not having the signer sign the gas_price and gas_limit, it protects them from having their tx inadvertently included on-chain w/o a sponsor. The thing to be careful of here is avoiding relay systems where a relayer can set the gas_price arbitrarily high and then recover the cost from the signer. So that will necessitate more calldata to authorize a certain amount of gas at a particular price. In terms of nonces, it might be helpful to also add that having two nonce would increase validation overhead in the tx pool more than just having the signer\u2019s nonce. It could be worth giving a nod to some proposals that would provide atomicity for relayer payments as I believe they are complementary to this EIP I want to throw in the hat \u201cSponsored Transactions\u201d as the name for this new type of tx before meta-tx folks claim it as \u201cNative Core Protocol Meta-Transaction\u2122\u201d.  ",
                    "links": [
                        "https://ethresear.ch/t/native-meta-transaction-proposal-roundup/7525"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 5.384105339105339
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "7",
                    "likes": "0",
                    "time": "11/06/2020-18:26:03",
                    "content": "    matt:  I\u2019m not sure I follow the reasoning behind an explicit ChainID element in the transaction. It is already encoded in the v element, so it seems like redundant information.   Hmm, good point.  I have never been a fan of bit packing v, but as it stands you are right.  That means we\u2019ll need to be a bit more specific on what is signed unfortunately.  I\u2019ll update with that tomorrow.     matt:  a relayer can set the gas_price arbitrarily high and then recover the cost from the signer   It is up to the sender and relayer to negotiate an appropriate fee.  Personally, I wouldn\u2019t recommend gasPrice * gasLimit * exchangeRate in tokens for the exact reason you mentioned.  They can do this negotiation via calldata as you suggested which is probably reasonable.     matt:  In terms of nonces, it might be helpful to also add that having two nonce would increase validation overhead in the tx pool more than just having the signer\u2019s nonce.   I added some more text about the nonces a bit ago, do you think I should add more or is what is now there good?     matt:  It could be worth giving a nod to some proposals that would provide atomicity for relayer payments as I believe they are complementary to this EIP   I\u2019m not a fan of standards including a bunch of history and fluff.  I prefer the standard (EIP) to be written so that someone reading it 3 years from now can easily implement it and isn\u2019t bogged down by a bunch of \u201cthe road that got us here\u201d.  That being said, the rationale section may get value from including specific things that were not done if it is not intuitive why they weren\u2019t chosen.  Do you have specific things you can think of that should be mentioned in the rationale?     matt:  I want to throw in the hat \u201cSponsored Transactions\u201d as the name for this new type of tx before meta-tx folks claim it as \u201cNative Core Protocol Meta-Transaction\u2122\u201d.   Fine with me, though I\u2019m not sure if/where that would fit into the EIP (technical standard)?  I\u2019m fine with using that term in conversation at the least. ",
                    "links": [
                        "https://ethresear.ch/t/native-meta-transaction-proposal-roundup/7525"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.688361974725611
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "8",
                    "likes": "0",
                    "time": "11/06/2020-18:39:26",
                    "content": "Proposition:  Keep the \u201cinternal\u201d transaction similar to the current ones. They include gasLimit, gasPrice and signeture by the \u201csigner\u201d (msg.sender). This can be submitted and mined like currently Wrap them by adding an overloaded gasPrice and the signature of the \u201crelayer\u201d.  The relayer, if he has an insentive to do so, can wrap the transaction. If the signer doesn\u2019t want to pay the gas, just set the gasPrice of the inner transaction to 0 \u2192 the inner transaction can be mined for free (not likelly, but why not ?) \u2192 the relayer can add gas to have the transaction mined If the transaction involves a repaying mechanism onchain, the repaying mechanism should protect the signer by considering a \u201cmaxgas\u201d \u2026 just like current meta-tx repayement schemes. Question is, how would that fit with EIP1559 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "9",
                    "likes": "0",
                    "time": "11/06/2020-18:42:46",
                    "content": "    matt:  I want to throw in the hat \u201cSponsored Transactions\u201d as the name for this new type of tx before meta-tx folks claim it as \u201cNative Core Protocol Meta-Transaction\u2122\u201d.   whether you like it or not, this EIP proposes something that is very similar to meta-tx, and which has already been proposed in all core devs by the \u201cmeta-transaction folks\u201d. I dobt starting this kind of crusade right here, right now, is a smart move. If I had to chose I would trade in a name I don\u2019t like for support that would bet this EIP into a hard fork / network upgrade. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.769007034632034
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "10",
                    "likes": "0",
                    "time": "11/06/2020-21:39:49",
                    "content": "    MicahZoltu:  I added some more text about the nonces a bit ago, do you think I should add more or is what is now there good?   I\u2019m looking at this as the most updated link, let me know if this is wrong. Under the nonce rationale you\u2019ve listed payload size and deadlock as the problems with requiring a sponsor\u2019s nonce, but I feel like increased cost of validation is biggest concern. I\u2019m not sure if you intended it that to fall under deadlock, but I think it is slightly different and worth mentioning.     MicahZoltu:  That being said, the rationale section may get value from including specific things that were not done if it is not intuitive why they weren\u2019t chosen. Do you have specific things you can think of that should be mentioned in the rationale?   I agree with you, we should avoid giving a history lesson within the EIP. However, I believe that it is worth mentioning that this EIP by itself does not solve the relayer payment problem. For that we really need something like rich transactions or batched transactions. I wrote about this need more here.     Amxx:  Proposition:  Keep the \u201cinternal\u201d transaction similar to the current ones. They include gasLimit, gasPrice and signeture by the \u201csigner\u201d (msg.sender). This can be submitted and mined like currently Wrap them by adding an overloaded gasPrice and the signature of the \u201crelayer\u201d.    What do you see as the advantage of this method? At first I was thinking maybe we don\u2019t need to change the tx structure, but if you don\u2019t and introduce some sort of precompile for the relayer to send to then you\u2019re going to link together the signer and sponsor\u2019s nonce - which I think is a problem.     Amxx:  If I had to chose I would trade in a name I don\u2019t like for support that would bet this EIP into a hard fork / network upgrade.   I agree, I don\u2019t want to get hung up on a name it means no support. However, I think being precise in naming is valuable - especially in a technical field. The people I\u2019ve spoken to 1:1 regarding this find it is a more suitable name and appreciate that it is not overloaded with other meanings. Sponsored transactions clearly explain what this EIP is proposing. There is nothing \u201cmeta\u201d about the transaction format here, everything is explicit and defined in the protocol.  For those reasons, I think it is an appropriate title for this EIP. ",
                    "links": [
                        "https://github.com/Arachnid/EIPs/blob/f6a2640f48026fc06b485dc6eaf04074a7927aef/EIPS/EIP-draft-rich-transactions.md",
                        "https://ethereum-magicians.org/t/eip-native-batched-transactions/4337",
                        "https://ethresear.ch/t/native-meta-transaction-proposal-roundup/7525"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.9631410256410255
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "11",
                    "likes": "0",
                    "time": "11/06/2020-21:56:22",
                    "content": "    matt:  What do you see as the advantage of this method? At first I was thinking maybe we don\u2019t need to change the tx structure, but if you don\u2019t and introduce some sort of precompile for the relayer to send to then you\u2019re going to link together the signer and sponsor\u2019s nonce - which I think is a problem.   I might be wrong, but I imagine that enhancing transaction but appending additional data is preferable to reworking the structure (just like EIP155 does) as it simplifies the client implementation: \u201cis there additional data ? keep the tx I\u2019ve built and just add some check/update with whatever is left\u201d I really don\u2019t see the point of having a relayer nonce. \u2192 The internal tx is protected against replay, so the signature for the sponsored transaction (and thus the sponsored transaction) also is. \u2192 You can sponsor many transaction by many signers without introducing strong ordering between them (better for at scale relaying). \u2192 If some transaction is sponsored by many people, if one of the version is mined, the other are automatically invalid, and relayer don\u2019t have to support \u201cout of sync\u201d nounces. Do you see any situation where a relayer nounce would be handy ? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.299242424242424
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "12",
                    "likes": "0",
                    "time": "11/06/2020-22:35:40",
                    "content": "    Amxx:  I really don\u2019t see the point of having a relayer nonce.   Sorry, I misread your post and thought that by wrapped tx you meant also wrapping with the sponsor\u2019s nonce. But I realize now that you said only the overloaded gas_price and additional signature would be included. In that case, I agree with you that appending data is probably preferable to reworking the structure. That seems like the advantage here. However, I\u2019m not sure how much this actually matters in practice. Also, I don\u2019t think the signer is has any more protected. Having a gas_limit is not helpful unless gas_price is bounded as well. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.107142857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "13",
                    "likes": "0",
                    "time": "11/06/2020-23:28:12",
                    "content": "    matt:  Having a gas_limit is not helpful unless gas_price is bounded as well.   I have to disagrea on that. gaslimit is not just about cost, it\u2019s about controlling the execution context, which the signer should define. A simple example: given its address, and its current nonce, the signer knows what we will the address of the contract he will deploy. This can be helpfull, particularly to recover funds that where send to a contract deployed on another network (I can find you references where that really happens). Now the signer wants to deploy a contract, so I sign the transaction with the data, and asks for relaying. If the relayer is able to set the gas limit, he can attack by putting a low value (21000), a high gas price, having his transaction mined, reverted because gaslimit is to low. Boom, he lost some gas but he also increased the signer nounce, preventing from deploying a contract to this address forever. Also, if a signer wants to send multiple transaction with sequential nonce, and if a relayer uses the same trick to have the first tx revert, the subsequent transaction might have unexpected, potentially dangerous, behaviour. Again, it\u2019s the signer who is doing the action, so he is the one knowing how much gas is needed, and he is the one whose account is affected if the gas limit is reached. relayer have many way of protecting themselves (either through off chain repaying agreements or using repaying contracts with try/catch protection) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 5.520175438596491
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "14",
                    "likes": "0",
                    "time": "11/06/2020-23:43:12",
                    "content": "I\u2019m of the opinion that gas_limit and gas_price should both be under the control of the sender. For gas_limit, the transaction sender is the one with the most context about how much gas the transaction needs to execute.  Roughly the same logic can be applied to gas_price. For gas_price, having it settable by the gas-payer probably makes this un-usable for meta transactions since the it would allow the gas-payer to use unreasonably high gas prices with no consequence in cases where the transaction repays the gas-payer. From the gas-payer perspective, if the signer uses either a gas_limit or a gas_price that they are not comfortable with, they have the choice to simply not sign the transaction.  If these values are left under the control of the gas-payer then the sender must sign a transaction without being able to have full knowledge about what they are signing.  And since this is a protocol level thing, I don\u2019t think that we can assume that the sender and relayer will be able to negotiate in all situations. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.868181818181818
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "15",
                    "likes": "0",
                    "time": "11/06/2020-23:46:30",
                    "content": "    pipermerriam:  For gas_price , having it settable by the gas-payer probably makes this un-usable for meta transactions since the it would allow the gas-payer to use unreasonably high gas prices with no consequence in cases where the transaction repays the gas-payer .   current meta transaction already have a fix for that. They repay gasUsed * min(gasPrice, maxGasPrice) where maxGasPrice is provided by the sender to the repaying contract ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.4
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "16",
                    "likes": "0",
                    "time": "11/06/2020-23:48:57",
                    "content": "Regarding nonces: The nonce in eth1.x gives us some DOS protection, ensuring that we can invalidate transactions with too high or low a nonce.  I believe that multiple nonces do not provide any additional value, and in-fact, make transaction validation more complex and expensive. Assuming there is no argument with the above, then we only need one nonce.  Our choices seem to be:  sender nonce gas-payer nonce some-other nonce  Option 3 of having some other nonce that is not the sender or gas payer does not seem to makes sense. Option 2 of only having the gas-payer nonce looks problematic.  One use case is signing multiple transaction with increasing nonce values which are guaranteed to be executed in nonce order.  Using gas-payer nonce would remove the ability of the sender to do this since they would be subject to the gas-payer potentially re-ordering their transactions. Which leaves Option 1: Just include a single nonce, from the sender account. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 4.820323129251701
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "17",
                    "likes": "0",
                    "time": "11/06/2020-23:55:59",
                    "content": "Interesting.  So the issue of griefing via using arbitrarily high gas prices is easily addressed for the meta-transaction use case at the EVM level. I\u2019m still concerned about this value being outside of the control of the sender.  In the extreme case, the sender has no relationship with the gas payer.  IIRC the status token sale set limits on the gas prices allowed for transactions which purchased tokens.  I\u2019m not advocating for this design pattern, but such a situation would allow the relayer to cause the sender\u2019s transaction to fail in a way that was outside of the control of the sender. I\u2019m curious to hear what the argument is for the gas-payer needing to be in control of gas price.  Since they have the discretion to sign or not-sign transactions, it seems to make the most sense to leave it in the hands of the sender, and assume that in cases where the gas-payer is sensitive to the exact gas price, then this would need to be handled outside of the protocol. For example, if the sender trusts gas payer but needs protection against volitile gas prices, the sender can sign multiple messages with different gas prices and the relayer chooses the appropriate one to sign and send. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.536979166666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "18",
                    "likes": "0",
                    "time": "12/06/2020-02:11:26",
                    "content": "I imagine the SENDER as \u201cthe party that defines what they want to do\u201d and the GAS_PAYER as \u201cthe party who gets the transaction included on-chain\u201d.  This separation of concerns is what drove me to put both gasLimit and gasPrice into the GAS_PAYER's control rather than the SENDER's control. I am imagining GAS_PAYER being used for far more than just the traditional meta-transactions of today.  One example would be a private relayer where one member of a business (say, an accountant or someone wanting to make a purchase) may submit a transaction to their company\u2019s Transaction Submission Department (TSD) and the TSD would deal with all of the complexity of ensuring inclusion.  The person who signed the transaction indicating what they wanted to do doesn\u2019t have the tools/knowledge to properly do gas estimates, gas pricing, replace by fee, escalation, etc.  They just know that they want to send 10 ETH to address X or call contract method Y on contract Z. The fact that someone can maliciously bump the SENDER nonce is certainly something worth considering, and may be enough to convince me to move the gasLimit back to the SENDER's control.  I\u2019m pretty firm at the moment on gasPrice being controlled by the GAS_PAYER though as pricing may be done at a different time than SENDER signing.  Again, using the company example above, the SENDER may sign the transaction and then it goes through some test suite, is then verified by several different humans, before finally being handed off to the TSD (GAS_PAYER) who picks a reasonable gasPrice at that time. TL;DR: I think the traditional untrusted-meta-transaction problem can be solved with gasPrice under GAS_PAYER control at layer 2, and by having gasPrice under GAS_PAYER control I think creates opportunities for other uses of this type of transaction. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.326127819548873
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "19",
                    "likes": "0",
                    "time": "12/06/2020-02:14:41",
                    "content": "I have moved gasLimit into SENDER control.  Compelling argument to me came from @Amxx in  EIP-2711: Separate gas payer from msg.sender ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "20",
                    "likes": "0",
                    "time": "12/06/2020-05:33:34",
                    "content": "    Amxx:  I might be wrong, but I imagine that enhancing transaction but appending additional data is preferable to reworking the structure (just like EIP155 does) as it simplifies the client implementation: \u201cis there additional data ? keep the tx I\u2019ve built and just add some check/update with whatever is left\u201d   I think the \u201cright\u201d thing to do would be to create a new transaction payload type, perhaps with a sentinel value up front to make it easily identifiable, that supports versioning of the transaction and adding transaction types over time.  For example, we could do rlp([TransactionType, [...]]) where TransactionType is a number identifying the type of transaction that is included and the [...] is the actual signed transaction.  Need to think more on whether such a transaction can lead to conflicts with existing transactions or if it is possible to uniquely identify them easily or not, but that would let us add new transaction types without having to do bit packing like EIP-155 did, or having to worry about \u201chow do I tell what type of transaction it is\u201d as this one is going to end up doing. I think the above is generally safe because the 2nd item in the tuple is a list, which is RLP encoded different from other things.  Also, we could say that the high bit of the TransactionType is always set to 1, which will never be a valid nonce for legacy transactions to make it even easier to identify legacy transactions early on. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 5.342959001782531
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/epheph",
                    "index": "21",
                    "likes": "0",
                    "time": "12/06/2020-05:40:44",
                    "content": "Should an EIP-2711 transaction cost more than the standard base transaction cost of 21000? The raw TX will is larger, more signature verification, and more nonce/account state updates. It seems tx.origin would be the \u201csender\u201d and not the \u201cgasPayer\u201d ? Will there be an opcode for gasPayer address? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 5.335164835164835
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "22",
                    "likes": "0",
                    "time": "12/06/2020-09:22:20",
                    "content": "    pipermerriam:  Option 2 of only having the gas-payer nonce looks problematic. One use case is signing multiple transaction with increasing nonce values which are guaranteed to be executed in nonce order. Using gas-payer nonce would remove the ability of the sender to do this since they would be subject to the gas-payer potentially re-ordering their transactions.   No having the sender nonce woud allow the gas-payer to replay the sender\u2019s transaction. This is a HUGE no. Imagine sending eth or erc20 \u2026 the recipient would be able to do is own repaying to replay this \u2026 and drain your entier account ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 5.9523809523809526
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "23",
                    "likes": "0",
                    "time": "12/06/2020-09:30:12",
                    "content": "    pipermerriam:  I\u2019m curious to hear what the argument is for the gas-payer needing to be in control of gas price. Since they have the discretion to sign or not-sign transactions, it seems to make the most sense to leave it in the hands of the sender, and assume that in cases where the gas-payer is sensitive to the exact gas price, then this would need to be handled outside of the protocol.   My argument was twofold:  if the outer transaction has a gas price that is overloaded by the repayer, we can use the existing transaction format, with gasPrice=0, for the internal format \u2026 thus simplifying implementation. This also allows anyone to take any pending transaction and accelerate it. The sender would not be affected in anyway (unless the transaction goes through a repaying mechanism, see later) The sender just want its transaction mined. He should not care about the gasPrice (who cares as long as the tx goes through?). The only case where the sender cares (which is also, AFAIK, the only real usage of the gas price opcode) is when there is an onchain repaying mechanism. Onchain repaying mechanism DO implement protection against relayer putting high gas price to drain the user in favor of the miners.  So not only is the problem out of scope, it\u2019s not even a real one. I believe we should not address it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 5.45
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "24",
                    "likes": "0",
                    "time": "12/06/2020-09:34:53",
                    "content": "    MicahZoltu:  I think the \u201cright\u201d thing to do would be to create a new transaction payload type, perhaps with a sentinel value up front to make it easily identifiable, that supports versioning of the transaction and adding transaction types over time. For example, we could do rlp([TransactionType, [...]]) where TransactionType is a number identifying the type of transaction that is included and the [...] is the actual signed transaction. Need to think more on whether such a transaction can lead to conflicts with existing transactions or if it is possible to uniquely identify them easily or not, but that would let us add new transaction types without having to do bit packing like EIP-155 did, or having to worry about \u201chow do I tell what type of transaction it is\u201d as this one is going to end up doing.   I fear this will kills backward compatibility. We have to make sure that all existing transaction format (pre EIP155, post EIP155) remain valid and unchanged otherwize you break a lot of things.     epheph:  It seems tx.origin would be the \u201csender\u201d and not the \u201cgasPayer\u201d ? Will there be an opcode for gasPayer address?   This is the real question. While I could argue that it would make a lot of sens to have tx.origin be the payer, and msg.sender (of the caller) be the signer \u2026 this would potentially break many contracts :\u2019( Having a new opcode would be nice. Personal opinion, this will never go trough/move forward unless we have feeback (and support) from core devs. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.927320075757576
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/juanfranblanco",
                    "index": "25",
                    "likes": "0",
                    "time": "12/06/2020-09:43:54",
                    "content": "Maybe a bit too much for this, but any thoughts about adding a token address to automatically make the payment and agreed rate of conversion? As another extension, agreement? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "26",
                    "likes": "3",
                    "time": "12/06/2020-15:20:44",
                    "content": "I\u2019m strongly  on inclusion of anything \u201ctoken\u201d related.  Those things can all be handled within the EVM/SmartContract layer. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.083333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "27",
                    "likes": "0",
                    "time": "12/06/2020-16:35:25",
                    "content": "After some good conversation with @MicahZoltu: There seem to be a number of strong cases for why gasPrice should typicaly be  under the control of the gas-payer.  These are primarily centered around separation of concerns since the gas-payer is the one responsible for getting the transaction included and speed of inclusion is often a function of gasPrice. One case against gasPrice being controlled by gas payer is the griefing angle for meta-transactions when the gas payer is being re-imbursed, but this can be fully mitigated at the EVM/SmartContract layer. The cases for gasPrice being controlled by sender are fewer, but they are compelling.  The 0x protocol use the formula 150,000 * gasPrice * orders filled to compute protocol fees.  If gasPrice is controlled by the gas payer, then someone could monitor the transaction pool for sponsored transactions, re-sign them at a higher gas price, and grief the transaction sender. Given that there seem to be strong cases for both, we advocate supporting both via something like https://github.com/ethereum/EIPs/issues/232 which poses an extensible transaction format.  Step one would be to introduce this new format, applied to the current legacy transaction format. Step two would be to introduce new formats for sponsored transactions.  Based on current thinking, there are good cases for sponsored transaction to support the following  Sender controlled gasLimit and gasPrice  Sender controlled gasLimit, Payer controlled gasPrice   There are 2 other potential formats that could be included if there are compelling use cases for them:  Payer controlled gasLimit and gasPrice  Sender controlled gasPrice, Payer controlled gasLimit   If anyone has strong cases for these formats, speak up. We are also looking at https://github.com/ethereum/EIPs/pull/2681/files which caps the size of the transaction nonce which is at position-0.  This would have the benefit of being able to differentiate between a legacy transaction and a new-style transaction assuming that we offset the transaction versions by 2**64.  I\u2019m not advocating for this approach as it is a bit hacky and the new transaction format can already be differentiated from the legacy one by decoding the full RLP payload. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/2681/files"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.116106719367589
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "28",
                    "likes": "0",
                    "time": "13/06/2020-02:05:12",
                    "content": "    epheph:  It seems tx.origin would be the \u201csender\u201d and not the \u201cgasPayer\u201d ? Will there be an opcode for gasPayer address?   If no one has strong feelings I\u2019ll update the EIP to have the ORIGIN opcode refer to GAS_PAYER only because it is less likely to block this EIP than deprecating ORIGIN all together (my personal preference long term) and msg.sender is already available if you need to know SENDER address.     Amxx:  This is the real question. While I could argue that it would make a lot of sens to have tx.origin be the payer, and msg.sender (of the caller) be the signer \u2026 this would potentially break many contracts :\u2019(   Contract authors have been warned since basically the beginning to not use tx.origin and I think most static analyzers throw a warning if you use it.  Also, legacy transactions would still be supported so anyone who needs tx.origin to be equal msg.sender of the entrypoint can still get that behavior (even though this exact behavior is what everyone says contracts should not do).     epheph:  Should an EIP-2711 transaction cost more than the standard base transaction cost of 21000? The raw TX will is larger, more signature verification, and more nonce/account state updates.   Maybe 28,000 gas as a starting point since I\u2019m guessing the account updates are the most expensive parts, and we have to do up to 4 (sender, recipient, miner) whereas previously we had to only do up to 3 (sender, recipient, miner, gas payer) for a simple ETH transfer?     Amxx:  I fear this will kills backward compatibility. We have to make sure that all existing transaction format (pre EIP155, post EIP155) remain valid and unchanged otherwize you break a lot of things.   rlp([TransactionType, [...]) would be backward compatible in the sense that the two transaction types don\u2019t overlap in their format so the client can differentiate them by the number of items in the outer RLP array once they decode.  It is a bit annoying on an implementation level, but definitely possible. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.4282051282051285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "29",
                    "likes": "0",
                    "time": "13/06/2020-04:55:06",
                    "content": "I have just merged in some big changes to this EIP.  I published a draft proposal for Typed Transaction Envelope (https://eips.ethereum.org/EIPS/eip-2718) which introduces a generalized mechanism for adding new transaction types to Ethereum.  This could potentially be used for several other open EIPs such as 1559. I updated this EIP to leverage 2718. This EIP now represents 4 different transaction subtypes: a. SENDER sets gasLimit & gasPrice b. SENDER sets gasLimit and GAS_PAYER sets gasPrice c. GAS_PAYER sets gasLimit & gasPrice d. GAS_PAYER sets gasLimit & gasPrice and chainId is not included. I have updated the rationale section to discuss situations in which each of these transaction types could be useful. I have separated the signature y-parity bit from the chainId. I updated the specification to assert that the ORIGIN opcode is GAS_PAYER for these transactions.  Re (5): This increases the payload size by 1 byte but decreases complexity of signing tools notably.  I suspect there will be some push back on this, but I wanted to start from \u201ceasy to read, easy to implement\u201d and have people argue for why the increased complexity is necessary. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.4787296037296045
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "30",
                    "likes": "0",
                    "time": "13/06/2020-07:16:43",
                    "content": "Regarding ORIGIN/tx.origin, see my comment on Typed Transaction Envelopes here.  If that gets added to EIP-2718, then we can simply define TransactionType=1 transactions to have the lower 224-bits of TRANSACTION_DATA opcode (0x32, aka ORIGIN, aka tx.origin) be GAS_PAYER. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "31",
                    "likes": "1",
                    "time": "13/06/2020-09:25:33",
                    "content": "    juanfranblanco:  Maybe a bit too much for this, but any thoughts about adding a token address to automatically make the payment and agreed rate of conversion? As another extension, agreement?   This is far beyound the scope of this EIP. Token are not recognised by the EVM, they are just \u201cone more contracts\u201d and they are likelly to remain that for long. Adding that is the best way to get this EIP rejected. Again, I believe repaying should be handled by smart contracts ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 6.636904761904762
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "32",
                    "likes": "0",
                    "time": "13/06/2020-09:31:22",
                    "content": "    MicahZoltu:      Amxx:  I fear this will kills backward compatibility. We have to make sure that all existing transaction format (pre EIP155, post EIP155) remain valid and unchanged otherwize you break a lot of things.   rlp([TransactionType, [...]) would be backward compatible in the sense that the two transaction types don\u2019t overlap in their format so the client can differentiate them by the number of items in the outer RLP array once they decode. It is a bit annoying on an implementation level, but definitely possible.   It sure is possible, but AFAIK, it much easier to do by adding the extra fields (needed for this EIP) at the end of the rlp encoded array \u2026 and checking appying this EIP (or not) depending on the emptiness / availability of these extra fields. I believe this is what is done with EIP155. I also believe we should get a core dev give his opinion on the best way to implement that. \u2192 I personnaly don\u2019t care how the encoding is done, as long as it\u2019s simple to implement which is what would give the best chance for this EIP to get adopted ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.979166666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "33",
                    "likes": "0",
                    "time": "15/06/2020-10:34:18",
                    "content": "    Amxx:  and checking appying this EIP (or not) depending on the emptiness / availability of these extra fields. I believe this is what is done with EIP155. I also believe we should get a core dev give his opinion on the best way to implement that.   This EIP is just one of many EIPs that would benefit from a new transaction type.  Some other examples include EIP-1559, Rich Transactions, Multisig transactions, etc.  At the moment, we have to be very careful that all transactions are uniquely identifiable based on the number of arguments they have.  The idea with EIP-2718 is that we can solve this problem once and then going forward all we have to worry about is not re-using the TransactionType number, but we don\u2019t have to worry about overlap between types otherwise. Note: We should continue this particular conversation over at EIP-2718: Typed Transaction Envelope  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.1239057239057235
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/stonecoldpat",
                    "index": "34",
                    "likes": "0",
                    "time": "15/06/2020-11:35:26",
                    "content": "+1 Sponsored Transactions. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "35",
                    "likes": "0",
                    "time": "15/06/2020-17:34:26",
                    "content": "Some thoughts on what to do with tx.origin It is tempting to re-use this for GAS_PAYER.  If we go this route I would advocate for renaming this opcode ORIGIN -> GAS_PAYER (which implies tooling like solidity would need to do this rename as well).  This would be socially and technically expensive, but I think it could be a very nice cleanup. The only argument I know of against this, beyond the social/technical cost is the backwards incompatibility issue.  I think it is worth exploring how many contracts are actually making use of this opcode, and to try and objectively understand what the impact would be.  My intuition is that it would be very small. So I\u2019m to using tx.origin for gas payer but only if we go all-the-way and both re-purpose it at the EVM level and rename/rebrand it at the higher levels of the tooling. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.471969696969698
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "36",
                    "likes": "1",
                    "time": "16/06/2020-02:56:54",
                    "content": "I wonder if we need to have a second chainId for GAS_PAYER?  In theory, the sender may want a transaction to be valid on all chains but the gas payer only wants the transaction valid on one chain. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 5.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "37",
                    "likes": "0",
                    "time": "16/06/2020-04:04:33",
                    "content": "    pipermerriam:  Some thoughts on what to do with tx.origin   Let\u2019s continue this discussion over at EIP-2718: Typed Transaction Envelope ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "38",
                    "likes": "0",
                    "time": "17/06/2020-05:15:56",
                    "content": "2718 was recently updated to assert that ORIGIN must equal CALLER of the first frame for reasons.  Either we will need a new opcode for GAS_PAYER if we want that, or we will need to accept that sponsor payments will need to be handled some other way (not via the contract inspecting the transaction to figure out who the gas payer is at execution time). I\u2019m curious to hear people\u2019s thoughts on this and how critical it is that the EVM is aware of who the gas payer is and whether we can live without it.  Something to keep in mind is that for many/most transactions GAS_PAYER will equal ORIGIN, and introducing a GAS_PAYER opcode enable contracts to identify the type of transaction and potentially discriminate on it.  Also, adding a new opcode is a pretty big deal since the space for them is somewhat limited, and additional opcodes add even more complexity to the EVM. We could make it a precompile rather than an opcode, that would avoid contention over the limited opcode space, but that wouldn\u2019t address the discrimination issue. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 5.379774637127578
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "39",
                    "likes": "0",
                    "time": "17/06/2020-12:44:24",
                    "content": "    MicahZoltu:  I\u2019m curious to hear people\u2019s thoughts on this and how critical it is that the EVM is aware of who the gas payer is and whether we can live without it.   Although I don\u2019t feel strongly either way, I believe GASPAYER is not critical. EIP-2711 does not resolve the atomicity requirement of meta-txs. If gas becomes unobservable, paying the relayer in a sponsored tx doesn\u2019t make sense because they could be griefed if reverted if the signer\u2019s action runs out of gas. Therefore a payment makes more sense to executed in separate transaction. I\u2019ve proposed EIP-2733 which would facilitate this. The payment transaction can be hard coded to submit payment to a specific relayer. This raises the question, which should probably be picked up in the EIP-2718 thread, but how can / should transaction envelopes support recursive definitions. For example, the ideal scenario is that EIP-2711 txs can wrap EIP-2733 txs. It\u2019s unclear what the semantics of that should be. ",
                    "links": [
                        "https://github.com/lightclient/EIPs/blob/transaction-package/EIPS/eip-2733.md"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.8763774104683195
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "40",
                    "likes": "1",
                    "time": "18/06/2020-06:36:18",
                    "content": "After some discussion in Discord, I have made some pretty major changes to this EIP.  It now adds support for Sponsored Transactions + Batch Transactions + Expiring Transactions.  The idea is that each of these features may be valuable while paired with any of the other features, and trying to draft specifications that allow you to mix and match is difficult.  Rather than try to solve that particular problem now, 2711 is trying to take the more expedient path of just bundling them together in this EIP. I recommend anyone interested in this EIP review the recent changes, as they are pretty significant. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.614583333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "41",
                    "likes": "1",
                    "time": "19/06/2020-12:51:57",
                    "content": "Regarding the latest version of this EIP: Why should the signer sign secp256k1(keccak256(rlp([TransactionType, SenderPayload])))  when TransactionType is already part of the SenderPayload Why not just sign secp256k1(keccak256(rlp(SenderPayload))) ? Also, in the simple summary you wrote \u201csposored\u201d instead of \u201csponsored\u201d ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "42",
                    "likes": "0",
                    "time": "19/06/2020-20:40:20",
                    "content": "    Amxx:  Why should the signer sign secp256k1(keccak256(rlp([TransactionType, SenderPayload]))) when TransactionType is already part of the SenderPayload   SenderPayload has the TransactionSubtype, but not the TransactionType. Will fix the sponsored typo in the morning.  I have fixed the sponsored typo.   ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "43",
                    "likes": "0",
                    "time": "20/06/2020-21:06:45",
                    "content": "    MicahZoltu:  SenderPayload has the TransactionSubtype , but not the TransactionType .   My bad, I got confused  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 2.2500000000000004
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "44",
                    "likes": "0",
                    "time": "18/07/2020-08:38:55",
                    "content": "I have made 2 normative changes to the EIP:  I have updated it to specify what Type 2 Transaction receipts look like, per recent changes in EIP-2718 (which requires each transaction subtype define its receipt Payload). I changed the child transaction array into a one dimensional array.  This trades ~1% to ~5% size on the wire in exchange for easier human readability/understanding (an array of tuples is easier to grok and describe and talk about than a giant one dimensional array with repeated contents).  As always, feedback welcome! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rai",
                    "index": "45",
                    "likes": "0",
                    "time": "24/07/2020-15:35:40",
                    "content": "Not sure if I missed this when skimming up top but is there a reason that it\u2019s preferable to have subtypes [1-4] instead of the type item of the transaction envelope? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "46",
                    "likes": "0",
                    "time": "24/07/2020-17:28:16",
                    "content": "See the Rationale section.  It was mostly for bookkeeping reasons:  [\u2026] each of the subtypes could be a unique TransactionType. The reason we chose to go with a single EIP with subtypes is because these 4 transactions all have a lot in common and each separate EIP would be almost identical to the previous. We felt that in this case, splitting into multiple EIPs wasn\u2019t worth the duplication of EIP content.  I wouldn\u2019t be too opposed to having them be 4 separate transaction types, but one EIP.  It would save us a byte   When I wrote the EIP originally it was hard to structure and reason about when they were separate types which is the main reason I switched to subtypes.  If people believe that this isn\u2019t important enough, or have suggestions on how to structure the EIP so it is easy to understand with different types I\u2019m open to it. An example of where things get a bit complicated is that the SenderPayload includes a bit of data from outside the inner transaction, which means the thing signed is a merge of the outer and inner transactions.  Certainly not insurmountable, just more complicated. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.078933747412008
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carver",
                    "index": "47",
                    "likes": "0",
                    "time": "23/09/2020-17:01:29",
                    "content": "I appreciate the Rationale writeup of ValidUntil as timestamp instead of block number. I just wanted to note some downsides of timestamp, and the proposed workarounds, like:  It\u2019s harder to use validUntil to prevent the transaction being valid at the next fork (which is currently triggered by block number). Recommendations:  Estimate block number, adjusting based on tolerance for accidental inclusion in next fork Advocate for EIP-2456 to activate forks at a timestamp   Other scenarios might have the same pattern as above, like the proposed ReGenesis.  Advocate for timestamp-based activation of ReGenesis    ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.839285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "48",
                    "likes": "1",
                    "time": "27/09/2020-06:20:52",
                    "content": "In both of the cases you have mentioned, I advocate for switching to timestamp-based activation.   ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/albertocuestacanada",
                    "index": "49",
                    "likes": "0",
                    "time": "24/03/2021-21:01:19",
                    "content": "Hey guys, I\u2019ve been coding some stuff using the multicall pattern, and realized that batch transactions would be similar but with even better UX. I have two questions on how this would work for users:  Would the base transaction fee be per transaction or per batch? Would it be possible to revert a batch if one of its transactions revert?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "50",
                    "likes": "2",
                    "time": "25/03/2021-10:46:50",
                    "content": "@albertocuestacanada I recommend checking out https://eips.ethereum.org/EIPS/eip-3074 for the latest thing we are all pushing for to achieve transaction \u201cbatching\u201d.  This EIP will probably get withdrawn at some point, just leaving it open for now until we settle on something (which is currently looking like 3074). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bradleat",
                    "index": "51",
                    "likes": "0",
                    "time": "25/03/2021-19:25:42",
                    "content": "    MicahZoltu:  king out https://eips.ethereum.org/EIPS/eip-3074 for the latest thing we are all pushing for to achieve transaction \u201cbatching\u201d. This EIP will probably get withdrawn at some point, just leaving it open for now until we settle on something (which is currently looking like 3074).   I agree that this should be included with the transaction batching EIP. It seems that they would be used together anyway. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "52",
                    "likes": "0",
                    "time": "27/03/2021-09:05:46",
                    "content": "    bradleat:  I agree that this should be included with the transaction batching EIP. It seems that they would be used together anyway.   If 3074 is included in a hard fork, I\u2019ll probably close this one because it is no longer necessary/useful/interesting at that point. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match"
                    ],
                    "Sentiment": 3.541666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/LadyBear7820",
                    "index": "54",
                    "likes": "0",
                    "time": "01/04/2022-16:06:21",
                    "content": "Continuing the discussion from EIP-2711: Separate gas payer from msg.sender: ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1078"
}