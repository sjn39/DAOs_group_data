{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5131-ens-subdomain-authentication/9458",
            "title": "EIP-5131 - ENS Subdomain Authentication ",
            "index": 9458,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "1",
                    "likes": "1",
                    "time": "03/06/2022-03:50:10",
                    "content": "Following discussion from this twitter thread:  twitter.com    Wilkins (\u30de,\u30de) @wwhchung  1/ Proposal for safe validation of your NFTs, a \ud83e\uddf5  Today, in order to verify that you control an address or own an NFT, you typically sign a message to authenticate (e.g. editing your profile on OpenSea).   WENEW Labs @wenewlabs  1/3   We often hear people want to use their cold wallet NFTs with their hot wallets. We humbly submit the following   A proxy contract to translate ownership from a cold wallet to a hot wallet (or really, any two wallets):  https://github.com/wenewlabs/public/blob/main/HotWalletProxy/HotWalletProxy.sol\u00a0\u2026    6:36 PM - 31 May 2022           133                34            At current, web2 and contracts validate asset ownership and wallet control by requiring you to sign a message or transaction with the wallet that owns the asset. Examples:  In order for you to edit your profile on OpenSea, you must sign a message with your wallet address. In order to access NFT gated content, you must sign a message with the wallet containing the NFT In order to claim an airdrop, you must interact with the smart contract with the qualifying wallet address.  This method of validation is problematic from a security standpoint (interacting with a malicious site or contract can compromise your wallet\u2019s assets) and a convenience standpoint (e.g. if your assets are on a hardware wallet that is not easily accessible). This EIP proposes a solution which uses the Ethereum Name Service Specification (EIP-137) as a way to link one or more authentication wallets to verify control and asset ownership of a main wallet.  Functionally, this would work as follows (assuming the main wallet has an ENS domain and resolver record set).  Create subomain record on the main ENS domain, starting with auth[0-9]* Set that record to the new authentication wallet Set the reverse record of the authentication wallet to auth[0-9]*.  Then, on a web client, you determine the linked main wallet whenever the authentication wallet performs an action by:  Do a reverse lookup of the authentication wallet to get the ENS name Parse out the main ENS Lookup the address the main ENS resolves to, and that is the wallet you are authenticating for.  Effectively, this is a mechanism to do \u2018read only\u2019 authentication.  Note: Steps 1-3 can be performed client side, and the results passed to a smart contract for cheap validation (rather than doing string operations on a smart contract).  Q: Why subdomains vs. TXT records? A: Subdomains allow us to do the reverse resolution strategy outlined above, meaning that it doesn\u2019t require a user to input the address they are trying to authenticate for.  It makes it much easier from a userflow perspective.  If we were using TXT records, you would need another field to input the wallet you are attempting to authenticate as. ",
                    "links": [
                        "https://twitter.com/wwhchung/status/1531812006319206400?s=20&t=Om9F4VBzizz6TJGXadDcCA",
                        "https://twitter.com/wwhchung/status/1531812006319206400?s=20&t=Om9F4VBzizz6TJGXadDcCA",
                        "https://twitter.com/wenewlabs/status/1523916615040987137",
                        "https://twitter.com/wwhchung/status/1531812006319206400?s=20&t=Om9F4VBzizz6TJGXadDcCA"
                    ],
                    "GPT-summary": "The post proposes a solution to the problematic method of validating asset ownership and wallet control by using the Ethereum Name Service Specification (EIP-137) to link one or more authentication wallets to verify control and asset ownership of a main wallet. The proposal suggests creating a subdomain record on the main ENS domain, starting with auth[0-9]*, and setting that record to the new authentication wallet. The post also answers some questions about the proposal and provides reasons for using subdomains instead of TXT records.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Privacy, Security and risk management",
                        "Identity and reputation systems",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.584686147186147
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "2",
                    "likes": "0",
                    "time": "03/06/2022-06:26:37",
                    "content": "Added sample client and solidity code samples.  (note: solidity code is pretty inefficient right now and untested, may need design changes).    GitHub    GitHub - manifoldxyz/ens-auth-ethers Contribute to manifoldxyz/ens-auth-ethers development by creating an account on GitHub.         GitHub    GitHub - manifoldxyz/ens-auth-solidity Contribute to manifoldxyz/ens-auth-solidity development by creating an account on GitHub.      ",
                    "links": [
                        "https://github.com/manifoldxyz/ens-auth-ethers",
                        "https://github.com/manifoldxyz/ens-auth-solidity",
                        "https://github.com/manifoldxyz/ens-auth-solidity"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.3392857142857135
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "3",
                    "likes": "0",
                    "time": "03/06/2022-11:36:51",
                    "content": "Have you looked at EIP-1271: Standard Signature Validation Method for Contracts? I think it might be better to change this PR to be more in line with it, to avoid having multiple standards that need to be implemented. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "4",
                    "likes": "0",
                    "time": "03/06/2022-13:22:14",
                    "content": "I have and am familiar with it.  This spec is intended to be used in conjunction with something like EIP-1271, and for client side web app and backend server validation as well. Are you suggesting that the contract side validation uses EIP-1271 for cheap validation after a secure server has validated the auth link exists?  Or am I missing something? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.21875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "5",
                    "likes": "0",
                    "time": "03/06/2022-13:39:23",
                    "content": "That is indeed what I am suggesting. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "6",
                    "likes": "0",
                    "time": "03/06/2022-14:02:28",
                    "content": "Makes sense.  The reference implementation I wrote assumed that there would not necessarily be a \u2018server side\u2019 or secret available, but if they had one, then they could simply do that check and computation server side and use EIP-1271 (which is what we would do). I modified the EIP to reflect this in the reference implementations section. If it doesn\u2019t look right, do you have any suggestions on how else I should edit it to reflect what we\u2019re discussing?  This is my first EIP, so any help would be appreciated.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.525510204081633
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cxkoda",
                    "index": "7",
                    "likes": "0",
                    "time": "08/06/2022-14:01:31",
                    "content": "Moving over parts of the discussion from the github PR so it doesn\u2019t get lost after it was merged.  cxkoda commented \u2026 Though, I\u2019m still not totally convinced of the approach with subdomains yet. As far as I have understood, the reasoning was that subdomains can be easily linked using reverse records which yield an improved UX when logging into a platform, right? So the platform provider can just look up the reverse record of authAddress and knows which mainENS we are trying to authenticate for, without any further user interaction. Other than that, the authAddress reverse record serves no purpose to my understanding. IMO, this approach has a few downsides:  The reverse records need to be set by authAddress. This requires transferring funds and some txs from there and makes hence setting up auth wallets a bit cumbersome (effectively preventing throwaway auths). A given authAddress can only be used to authenticate for one mainENS, because reverse records are unique.  Which might be intended? Also I think this is much easier to handle from a platform perspective.   When logging into a service with authAddress, the user still has to specify that they want to authenticate for a linked mainAddress instead of the current address. So an interaction will be required anyways.  This could be removed by defaulting that all reverse records starting with auth.* will only ever authenticate for the linked addresses. But this would be needed to be stated explicitly in the proposal.    Txt records, or subdomains without enforced reverse records would not suffer from these drawbacks but require the user to specify which mainAddress they want to authenticate for (which can be cached by the platform, wallet, etc though). Maybe it would make sense to go for a hybrid approach? So if a reverse record exists, go the default route - if not, prompt the user to specify it? Or will that get too cumbersome? What do you folks think?  wwhchung commented I really think getting ppl to specify it manually is kind of cumbersome. I\u2019m expecting user experiences where I can just sign in with a wallet, one-click style, without need to enter further info. I\u2019m also quite lazy, which is why I like piggybacking ENS vs some new protocol.  cxkoda commented Fair enough, but in order to get rid of any interaction, the service must always use the linked mainAddress over authAddress if the reverse record has the correct pattern. So there will be no way to connect with authAddress any longer. Since this behavior is quite important I think it needs to be stated explicitly in the proposal (I hope I didn\u2019t just miss it).  wwhchung commented Does it though? Can\u2019t the application treat authAddress authentication as simply signing for authAddress OR mainAddress? That\u2019s how I intended to use it in the app. Prioritize authAddress and if no match then use mainAddress.  cxkoda commented  Can\u2019t the application treat authAddress authentication as simply signing for authAddress OR mainAddress?  Wouldn\u2019t that require an unwanted interaction? Or would you automatically log in using mainAddress, but make it manually switchable to authAddress? I think the intended behavior in this case should be stated explicitly in the proposal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.719877344877345
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cxkoda",
                    "index": "8",
                    "likes": "0",
                    "time": "08/06/2022-20:29:43",
                    "content": "    cxkoda:  The reverse records need to be set by authAddress. This requires transferring funds and some txs from there and makes hence setting up auth wallets a bit cumbersome (effectively preventing throwaway auths).   This point still bothers me. I think practically excluding throwaway wallets will be an unnecessary hindrance to adoption. What would you think about running a custom ENS reverse registrar under something like reverse.eip5131.eth (maybe even auth.reverse if possible), that allows any address to set the reverse record for any other address given a valid ECDSA signature? This way we could have convenient setup via mainAddress, while still maintaining the easy flow via reverse records. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.508333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "9",
                    "likes": "1",
                    "time": "08/06/2022-20:57:23",
                    "content": "Well, I\u2019m thinking of the application level cases:  You are doing a claim, and you require to be in the allowlist to mint:   This can work by:  Check if the requesting wallet is in the merkle tree, if so, use it, if not Check if the linked walllet is in the merkle tree, if so, use it     You are doing a web2.0 related gated content access   This can work by:  Check if the requesting wallet has the requirements, allow if so, if not Check if the linked wallet has the requirements, and allow if so     Configuring profiles   This can work by:  Show profiles the signing wallet can access, and ask them to choose or Like on OpenSea, you are on a profile, and if you\u2019re signed into a wallet, the edit button shows if you have access.  You have access simply if the profile is this wallet, or the wallet is linked to the profile\u2019s wallet.    Those are the app cases I can think of, and seem to work reasonably well with minimal user input due to the reverse records being set.  I\u2019m not sure I would put these in the EIP though, because how an app decides to use the knowledge that a wallet is linked should be flexible. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.770833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cxkoda",
                    "index": "10",
                    "likes": "0",
                    "time": "08/06/2022-23:56:52",
                    "content": "Ah I see where I had my misunderstanding, thanks for the clarification. This seems reasonable. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cxkoda",
                    "index": "11",
                    "likes": "0",
                    "time": "28/06/2022-17:44:28",
                    "content": "@wwhchung have you given this point any thought yet? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "12",
                    "likes": "0",
                    "time": "28/06/2022-19:08:52",
                    "content": "Which point?  There\u2019s a few things we talked about, and I thought I answered something, but I guessed I missed another.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cxkoda",
                    "index": "13",
                    "likes": "0",
                    "time": "28/06/2022-22:49:09",
                    "content": "Sorry I forgot that replies don\u2019t display as quotes here (and just sent it from my phone). I was referring to this comment  about a dedicated reverse record registry     cxkoda:  This point still bothers me. I think practically excluding throwaway wallets will be an unnecessary hindrance to adoption. What would you think about running a custom ENS reverse registrar under something like reverse.eip5131.eth (maybe even auth.reverse if possible), that allows any address to set the reverse record for any other address given a valid ECDSA signature? This way we could have convenient setup via mainAddress, while still maintaining the easy flow via reverse records.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.408333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "14",
                    "likes": "0",
                    "time": "29/06/2022-21:42:04",
                    "content": "Hi team. I think I am read up-to-date on the design ideas here for EIP-5131 DRAFT.  Screen Shot 2022-06-29 at 17.26.371360\u00d7906 30.3 KB  And some feedback.  TXT records allow one-to-many and many-to-many logins. We either want to support this or not, and this design choice should be spelled out in the EIP. When you \u201clogin to OpenSea\u201d you may want to login as auth1.mary.eth or you may want to login as Mary.eth. This should be a choice presented in some dialog box. This choice should be given to the website visitor. And we should specify this in the EIP. The discussion above says we DON\"T want to specify the main address. But the reference implementation DOES specify the main address. Putting Ether into your auth wallet to setup reverse DNS is painful. Think this through.  This comment does not justify a complete audit or review. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.733333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "15",
                    "likes": "0",
                    "time": "29/06/2022-23:54:10",
                    "content": "@fulldecent Hey there. It\u2019s very possible that the spec wasn\u2019t clearly written or there\u2019s some confusion. So appreciate the response. The spec is intended to only allow for a one (mainAddress) to many (authAddress) relationship. This is enforced by: mainENS can allow for many sub records (one to many) authAddress must set the reverse record to authENS which is a sub record of mainENS. So, when authAddress signs, it is signing for only mainAddress/mainENS (no popup or selection should be needed). Conversely, mainAddress should be able to allow for many authAddresses Does that make sense? If not, how does that differ from your interpretation and which parts would help clarify the EIP to match what I\u2019m describing? Thanks! ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.425000000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "16",
                    "likes": "0",
                    "time": "29/06/2022-23:57:25",
                    "content": "@cxkoda whats your definition of a throwaway wallet here? From my standpoint, a lot of those signing wallets could end up being throwaway, but would have a tiny bit of eth. Do you mean throwaway from the perspective of being able to configure with no eth? If so, then yes, I agree and maybe needs expansion to allow setting by the mainAddress with a new reverse registry like you said. There might be an even cleverer way though. Possibly setting a record based on a signed message from the authAddress? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.323863636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "17",
                    "likes": "0",
                    "time": "30/06/2022-21:39:01",
                    "content": "Yes, I do understand that this is building a one (mainAddress) to many (authAddress) relationship. But people are going to question why you didn\u2019t design it a different way. So stating this in the spec can be helpful. For example, ERC-721 specifically mentions that it has anticipated use cases of non-transferrable tokens (i.e. \u201csoulbound tokens\u201d), negative value tokens and other specific applications. It was certainly helpful to have that written down and is still helpful now. If there is no popup selection that means that a wallet named auth\u2026 will be impossible to login to a website that supports EIP-5131. That\u2019s a problem. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.666914682539682
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "18",
                    "likes": "0",
                    "time": "01/07/2022-00:25:06",
                    "content": "Ah. Now I see what you mean. Makes sense and will clarify this in the spec and get back to you. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.21875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "19",
                    "likes": "0",
                    "time": "03/07/2022-14:43:45",
                    "content": "@fulldecent @cxkoda Note: from a UI standpoint, I was thinking that the one-to-many relationship would actually also allow for simple UI, without the need to select the address in many cases.  e.g. For an NFT management website, you could simply show a list of tokens owned by both the authAddress and the linked mainAddress, with some UI labeling.  Then the client side can determine the appropriate corresponding address WITHOUT any user interaction. I would imagine that, in Rainbow Wallet, if you were logged in via the auth address, you would see both your NFTs and the NFTs you could sign for. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wwhchung",
                    "index": "20",
                    "likes": "1",
                    "time": "03/07/2022-15:44:11",
                    "content": "@fulldecent I\u2019ve made some edits to the EIP that hopefully address what you mentioned.  Do you think it\u2019s clear enough or do you think more context is needed (and if so, which areas do you think should be expanded on)? And going through the thought process, I actually think you can create a UI/UX that doesn\u2019t require additional selectors with this mechanism for many use cases (although you would still need an address selector for a few as well, however I can\u2019t think of many).  Examples: NFT staking page, claim pages, access gated pages, etc No selector needed. You could simply show all NFTs of both the authAddres and mainAddress, with a little UI label beside each.  When you interact with a given NFT, you simply use the right \u2018address\u2019 if the method needs it. Web2/Web3 Wallet Based Profiles (e.g. OpenSea profiles) No selector needed.  When you go edit a given profile, you simply have to sign with EITHER the mainAddress or any authAddress In what case do you think a selector is needed?  Seems like most cases can be solved without. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.768543956043956
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cxkoda",
                    "index": "21",
                    "likes": "0",
                    "time": "05/07/2022-21:37:07",
                    "content": "    wwhchung:  Do you mean throwaway from the perspective of being able to configure with no eth?   Sorry for being unspecific - yup setting up auth wallets without transferring funds to them is what I meant.     wwhchung:  If so, then yes, I agree and maybe needs expansion to allow setting by the mainAddress with a new reverse registry like you said. There might be an even cleverer way though.  Possibly setting a record based on a signed message from the authAddress?   jup that\u2019s exactly what I meant with     cxkoda:  What would you think about running a custom ENS reverse registrar under something like reverse.eip5131.eth (maybe even auth.reverse if possible), that allows any address to set the reverse record for any other address given a valid ECDSA signature?   The downside is that the standard reverse resolution of common node packages is no longer applicable. However, the relevant logic can be implement quickly - so this is would only be a small sacrifice. I think this delegated reverse-resolution registration would warrant an own EIP (or ENSIP?) though as the applications may go beyond the one here. So it might be worth discussing it in a broader context. I could also see it being implemented as an extension to EIP-181 (ENSIP-3) replacing the registrar for addr.reverse with a revised one that supports something like setNameFor(address for, bytes calldata sig, address owner). This way the standard ENS tooling can again be reused and it the authing scheme presented here would again be fully built on top of ENS. ",
                    "links": [
                        "https://docs.ens.domains/ens-improvement-proposals/ensip-3-reverse-resolution"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.425610269360269
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cyberpnk",
                    "index": "22",
                    "likes": "1",
                    "time": "19/07/2022-05:46:52",
                    "content": "I think adding extra behaviors to some names like \u201cauth\u201d, or \u201csign\u201d or other common words seems like it could cause some annoyances in the future \u201cWhy can\u2019t I name my subdomain \u2018auth\u2019 you say?  Oh, some people in 2022 used it for their protocol and now things would randomly break if I do it\u201d. How about a different name with less chances of clashing like eip5131-auth.myname.eth? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.220238095238095
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jalil",
                    "index": "23",
                    "likes": "1",
                    "time": "19/07/2022-08:52:23",
                    "content": "One security consideration: ENS is working on a subdomain registrar (compare e.g. https://twitter.com/BrantlyMillegan/status/1408551428566753292) that allows issuing 3LD domains (or any nesting level actually) from 2LD that you don\u2019t have access to / can not reclaim (similar to how 2LDs are issued under .ETH). This will introduce situations in which a (new) owner of a second level ENS domain can potentially not control/reclaim auth.* subdomains of their ENS. And it even allows for bad actor trades like setting up authN.* domains just before accepting an offer to a 2LD on a marketplace. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.53030303030303
                }
            ]
        }
    ],
    "group_index": "1763"
}