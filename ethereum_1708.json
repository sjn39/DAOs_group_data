{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5027-unlimit-contract-code-size/9010",
            "title": "EIP-5027: Unlimit contract code size ",
            "index": 9010,
            "category": [
                "EIPs"
            ],
            "tags": [
                "size-limit",
                "shanghai-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/qizhou",
                    "index": "1",
                    "likes": "0",
                    "time": "21/04/2022-19:37:17",
                    "content": "  eip: 5027 title: Unlimit contract code size author: Qi Zhou @qizhou discussions-to: TBD status: Draft type: Standards Track category: Core created: 2022-04-21 requires: EIP-170  Abstract Unlimit the contract code size so that users can deploy a large-code contract without worrying about splitting the contract into several sub-contracts.   github.com/ethereum/EIPs         Create EIP-5027   ethereum:master \u2190 qizhou:qizhou-code-size            opened 07:33PM - 21 Apr 22 UTC               qizhou             +319 -0       When opening a pull request to submit a new EIP, please use the suggested templa\u2026te: https://github.com/ethereum/EIPs/blob/master/eip-template.md  We have a GitHub bot that automatically merges some PRs. It will merge yours immediately if certain criteria are met:   - The PR edits only existing draft PRs.  - The build passes.  - Your GitHub username or email address is listed in the 'author' header of all affected PRs, inside <triangular brackets>.  - If matching on email address, the email address is the one publicly listed on your GitHub profile.       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5027",
                        "https://github.com/qizhou",
                        "https://github.com/ethereum/EIPs/pull/5027/files",
                        "https://github.com/ethereum/EIPs/pull/5027"
                    ],
                    "GPT-summary": "The post is an Ethereum Improvement Proposal (EIP) by Qi Zhou proposing to unlimit the contract code size to allow for the deployment of large-code contracts without the need to split them into sub-contracts. The post provides details about the proposal and includes a link to the EIP template for submitting a new EIP. The post also mentions a GitHub bot that automatically merges some pull requests if certain criteria are met. The post may be of interest to those interested in Ethereum development and blockchain technology.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.35064935064935
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "2",
                    "likes": "0",
                    "time": "29/04/2022-18:53:46",
                    "content": "I think you\u2019re going to get a ton of pushback from core devs on this. I\u2019d recommend bringing this up in the Eth R&D discord to gather some consensus before going forward with standardization. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ramvi",
                    "index": "3",
                    "likes": "1",
                    "time": "30/04/2022-20:45:03",
                    "content": "This is not an argument against your proposal, just a note for any developer wanting to deploy large-code contracts: Aribtrum allows for unlimited contract code size. You can get the Ethereum security (Arbitrum is a Layer 2) with an inifite contracted size today. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving additional information",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/qizhou",
                    "index": "4",
                    "likes": "0",
                    "time": "02/05/2022-18:51:17",
                    "content": "Glad to know that Arbitrum has already enabled this.  Out of curiosity, I am wondering if Arbritum has a customized solc to support this feature.  I know that current solc will stop compilation if the contract size exceeds 24KB. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/qizhou",
                    "index": "5",
                    "likes": "1",
                    "time": "02/05/2022-18:59:55",
                    "content": "Thanks for the suggestion.  Just joined! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "6",
                    "likes": "1",
                    "time": "27/05/2022-13:54:35",
                    "content": "Because the EIP does not give any considerations to the security rational explained in EIP-170 (where the restriction was imposed) nor explanation for why those concerns are either mitigated or no longer valid I feel it should be tabled until such details are added and accepted. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/qizhou",
                    "index": "7",
                    "likes": "0",
                    "time": "30/05/2022-01:31:22",
                    "content": "Thanks for the comment.  Introducing proper gas metering adjustment to avoid possible attacks in EIP-5027 is to address the issue found in EIP-170, especially  O(n) cost in terms of reading the code from disk, preprocessing the code for VM execution.  The basic idea of gas metering is to treat calling a contract with size > 24K as that of calling multiple contracts with size <= 24K.  E.g., calling a contract with size 24K + 1 will charge the gas as calling two contracts (2 * 700 gas). Further, to avoid DoS attack, EIP-5027 recommends implementing a mapping from codehash => codesize at the client side, so that EVM can pre-charge the gas of calling a potentially-large contract with O(1) KV get cost.  This should eliminate the DoS attack considered in EIP-170 without changing the current Ethereum state structure. All of above will be presented to AllCoreDev meeting.  Free to let me know if you have further comments. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.2727272727272725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "8",
                    "likes": "0",
                    "time": "30/05/2022-03:42:16",
                    "content": "(a) this rationale belongs in the EIP. (b) \u201cpreprocessing the code for VM execution\u201d is a separate concern from \u201creading the code from disk.\u201d  This needs separate exposition as the attacks are unique to EVM preprocessing. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/qizhou",
                    "index": "9",
                    "likes": "0",
                    "time": "30/05/2022-03:57:15",
                    "content": "(a) We are collecting the feedback from ACD to complete the Rationale and Security Consideration subsections, but the current rationale should be a minimal version to illustrate the idea. (b) Preprocessing is basically the JUMPDEST-analysis of the EVM code, which is part of the 700 call gas to my understanding. However, looks like the current JUMPDEST-analysis of the EVM code is not correctly metered, and EIP-3860 is tracking that (EIP-3860: Limit and meter initcode). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "10",
                    "likes": "0",
                    "time": "30/05/2022-13:03:22",
                    "content": "My weakly held position is that any adjustments to how contracts are costed and sized for creation should be done in conjunction with the other EOF related changes and should require a contract in an EOF container.  Legacy code deployment should remain unadjusted. Increased contract size would be a nice incentive for developers to switch over to EOF containers. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "11",
                    "likes": "0",
                    "time": "21/06/2022-18:44:59",
                    "content": "Strongly support this idea ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.166666666666667
                }
            ]
        }
    ],
    "group_index": "1708"
}