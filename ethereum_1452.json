{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2981-extension-erc2981receiver-token-identification-at-payment/7147",
            "title": "EIP-2981 Extension - ERC2981Receiver | Token Identification At Payment ",
            "index": 7147,
            "category": [
                "EIPs"
            ],
            "tags": [
                "nft",
                "royalties"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/dievardump",
                    "index": "1",
                    "likes": "2",
                    "time": "27/09/2021-21:52:02",
                    "content": "Hello everyone. Wanted to start a discussion on an ERC2981 Extension: ERC2981Receiver - A callback that the recipient returned by royaltyInfo() could implement in order to allow cheaper collaborations, a better verification of the royalties payment and better accounting for creators. The idea would be that recipient, when it\u2019s a contract, could implement a callback called onERC2981Received, that would allow the caller to pass meta about the NFT sale (contract address, token id, paymentToken, paymentAmount) at the same time it sends the payment. This to make the EIP a bit more solid and useful for creators than what it is already. Current Draft: https://gist.github.com/dievardump/f7b21f511f595a552becfb7a475eb133   Summary: A standardized way to pass information (address registry, uint256 tokenId, address paymentToken, uint256 paymentValue) with the transfer of royalties payment when supporting EIP-2981.  Abstract This standard extends the EIP-2981 specification and add a callback onERC2981Received(address, uint256, address, uint256) on contracts receiving royalties payments, to allow for Marketplace contracts to pass critical information with the call made to pay royalties. By adding the registry (NFT contract address), the token id, the payment token and the payment value, we allow cheaper management of multiple royalties recipients and easier tracking and accounting of royalties payment.  Motivation EIP-2981 has been designed to be the most easy to grasp and build on. However as we\u2019ve seen during the discussions and since its finalization in the comments, something really needed is missing: multiple recipients. For this, it has been said that this should be the role of a Splitter Contract to do the job when receiving payments. However this has 2 bad sides:   being costly for creators, since the payment does not identify for which token it\u2019s made for, creators would have to create one contract per collaboration. More, some collaboration could involve the same people, but different payout allocations, forcing again another contract deployment (and therefore cost) from the creators.   being hard to do accounting on those royalties payment. Because there is actually nothing to identify these transfers as being payment for royalties, people could have a very hard time knowing, understanding and explaining why they received transfer (not everyone knows how to read etherscan, and being dependent on Etherscan API is the opposite of what our space searches to achieve).   \u2026  See Draft to read more about the why this is needed. I would love to be able to discuss about this with other builders. I have already poked a few of you about this and got nice feedback and would love to open the discussion with more people and maybe soon propose this draft as a start of EIP. Any thoughts? ",
                    "links": [
                        "https://gist.github.com/dievardump/eip-2981.md"
                    ],
                    "GPT-summary": "The author proposes an extension to the EIP-2981 specification to allow for cheaper management of multiple royalties recipients and easier tracking and accounting of royalties payment. The proposal adds a callback onERC2981Received to contracts receiving royalties payments, allowing for Marketplace contracts to pass critical information with the call made to pay royalties. The author is seeking feedback and collaboration on the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Interoperability and Scalability",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.740530303030304
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/aug2uag",
                    "index": "2",
                    "likes": "1",
                    "time": "27/09/2021-21:56:48",
                    "content": "Simon, what\u2019s the intended implementation: is this a wrapper to existing tokens or will an NFT contract need to be deployed with integration to your splitting feature? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dievardump",
                    "index": "3",
                    "likes": "1",
                    "time": "27/09/2021-21:58:23",
                    "content": "This is not intended to be implemented by the NFT contract. The callback is intended to be implement by the royaltyRecipient returned by royaltyInfo(uint256 tokenId, uint256 value) returns (address royaltyRecipient, uint256 amount), if it is a contract. This means this can actually be the NFT Contract, but it must not be it; it can be a random contract, or a splitter contract. The introspection  and call to the callback is intended to be implemented by Marketplaces contracts at time they send royalties to royaltyRecipient, in order to identify the NFT and the payment tokens with the transfer. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 3.75
                }
            ]
        }
    ],
    "group_index": "1452"
}