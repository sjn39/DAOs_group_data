{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-827-callbacks-can-lead-to-reentrancy-attack-vectors/660",
            "title": "ERC-827 callbacks can lead to reentrancy attack vectors ",
            "index": 660,
            "category": [
                "Working Groups",
                "Security Ring"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "1",
                    "likes": "0",
                    "time": "06/07/2018-12:56:47",
                    "content": "This is an interesting case we all can learn from. Smart contract ERC-827 allows / potentially enables a bad contract security practice. From issue comments on the ERC-827 EIP by the security researcher:  We wrote a blog post, how replacing ERC20 with ERC827, can lead to unexpected reentrancy attacks. \u2026  Given that potential use cases of transferAndCall are unclear, I see the value of our article in clarifying how it should not be used. Similar issues apply to approveAndCall, however, given that this functionality does not exist in ERC20 (as you said), we would have had to construct an example with vulnerable code to use it. If you have concrete cases, where approveAndCall is called from a smart contract we would be happy to check.  Overall, our intention was just to notify people that special care is needed when using these functions inside a smart contract. \u2013 ritzdorf, CTO @ ChainSecurity   Related tweets and stories:   twitter.com          Georgios Konstantopoulos (gakonst)     Very interesting reads which I somehow missed, nice finds @chain_security!  tldr: ERC827 callbacks (transferAndCall et al) can lead to reentrancy attack vectors.   https://t.co/b0okX8piYc  https://t.co/aIezvENlo8  cc @arvanaghi @maurelian_ @GNSPS  2:24 AM - 6 Jul 2018     21          11               Medium \u2013 1 Jun 18    Why ERC827 can make you vulnerable to reentrancy attacks \u2014 and how to prevent... The ERC20 standard is currently the most widely used standard for tokens on the Ethereum blockchain. However, unlike transactions using\u2026 Reading time: 4 min read        From OpenZeppelin\u2019s GitHub issue on this:  It is a really bad practice to allow the abuse of CUSTOM_CALL in token standard.    github.com/OpenZeppelin/openzeppelin-solidity      Issue: ERC827: abuse of CUSTOM_CALL will cause unexpected result  \t \topened by p0n1 \ton 2018-06-24 \t \t \tclosed by frangio \ton 2018-06-28 \t  \ud83c\udf89 Description Dangerous ERC827 implementation about anythingAndCall.      openzeppelin-solidity/contracts/token/ERC827/ERC827Token.sol      Line 46  in  f18c3bc             ...        ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/827#issuecomment-393872680",
                        "https://twitter.com/gakonst/status/1015164548431663105",
                        "https://twitter.com/gakonst/status/1015164548431663105",
                        "https://twitter.com/gakonst/status/1015164548431663105",
                        "https://medium.com/chainsecurity/why-erc827-can-make-you-vulnerable-to-reentrancy-attacks-and-how-to-prevent-them-61aeb4beb6bf",
                        "https://medium.com/chainsecurity/why-erc827-can-make-you-vulnerable-to-reentrancy-attacks-and-how-to-prevent-them-61aeb4beb6bf",
                        "https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1044",
                        "https://github.com/p0n1",
                        "https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1044",
                        "https://github.com/p0n1",
                        "https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1044",
                        "https://github.com/frangio",
                        "https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1044"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.241071428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AugustoL",
                    "index": "2",
                    "likes": "0",
                    "time": "09/07/2018-11:44:00",
                    "content": "Hello @jpitts, thanks for bringing this up on the ethereum-magicians community. The issue with transferAndCall is that there is no way to verify the actual balance that was transfered, that is why we recommend the use of approveAndCall to work with \u201cverified\u201d balance in the EIP description. Now we have another issue that brings problem when you for example want to work with ERC223 or ERC667 tokens, you can use the fallback functions of this tokens from the ERC827 contract and drain funds of contracts. Example: https://github.com/windingtree/erc827/blob/master/contracts/examples/VaultAttack.sol We are working on changes on the standard to prevent this from happening, the main proposal that we have for now is the use of \u201callowed\u201d callbacks, wich means that the receiver contracts will be able to allow functions to be executed on it. I think the allowedCallbacks is a good solution, it adds the necessary interface to allow contracts to execute specific and tested arbitrary calls over them. Removing this permission of execute calls on any contract form the token contract, and it adds only a ~50 lines of code.   github.com/windingtree/erc827       Add allowed callbacks proposal     by AugustoL   on 11:06AM - 04 Jul 18 UTC   4 commits   changed 5 files   with 502 additions   and 4 deletions.       I would like to get some feedback from here. ",
                    "links": [
                        "https://github.com/windingtree/erc827/pull/2",
                        "https://github.com/AugustoL",
                        "https://github.com/windingtree/erc827/pull/2",
                        "https://github.com/AugustoL",
                        "https://github.com/windingtree/erc827/pull/2"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.733333333333333
                }
            ]
        }
    ],
    "group_index": "1378"
}