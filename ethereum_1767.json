{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5139-remote-procedure-call-provider-lists/9517",
            "title": "EIP-5139: Remote Procedure Call Provider Lists ",
            "index": 9517,
            "category": [],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "1",
                    "likes": "2",
                    "time": "07/06/2022-04:08:44",
                    "content": "  github.com/ethereum/EIPs         Get a first pass of an RPC endpoint list standard going   ethereum:master \u2190 SamWilsn:rpc-list            opened 04:05AM - 07 Jun 22 UTC               SamWilsn             +676 -0           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5139",
                        "https://github.com/SamWilsn",
                        "https://github.com/ethereum/EIPs/pull/5139/files"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "2",
                    "likes": "2",
                    "time": "07/06/2022-16:36:56",
                    "content": "Any time I see these sort of \u201cregistry\u201d or \u201clist\u201d ideas, I ask the obvious question: who is allowed to maintain this list. I\u2019m not in any way arguing that this is or is not a good idea. (In fact, I think it is a good idea), but without at least a discussion of mechanism involved in who manages this list, this has all the obvious problems.  who reviews it? who says who\u2019s a valid entry? what are the criteria for a valid entry? how do we avoid people paying to be included (or paying to remove someone else)?  At the very least these questions should be addressed in the document. In fact, I think one would need to fully flesh out how this would work. The fact that these considerations are non-existent in the EIP is a non-starter for me. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.716666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "3",
                    "likes": "0",
                    "time": "07/06/2022-16:45:06",
                    "content": " ChainId being listed ultimately is for readability, a wallet would be remise to not check for chainId/netVersion when connecting to a new rpc endpoint.  Yeah, I\u2019d expect wallets to continue to do that.  Net Version is used by metamask fwiw.  I\u2019m mostly going for compatibility with EIP-3326, which uses chain id as the key. Would adding net version help wallets verify the RPC endpoint, and if so, how often do net versions change? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.454545454545454
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "4",
                    "likes": "0",
                    "time": "07/06/2022-16:59:26",
                    "content": "    tjayrush:  who reviews it?   It would ultimately be up to the end user to review whatever list they choose to use. Most of the time, users would default to the list provided by their wallet, which would be maintained by the wallet developers. Since we already give ultimate control over private keys to wallets, it seems reasonable to also delegate provider list maintenance to wallet devs.     tjayrush:  who says who\u2019s a valid entry?   In a formatting sense, wallets would be expected to validate lists against the JSON schema. In a more practical sense, that\u2019s really up to the user to decide who to subscribe to. Maybe some service will come along that monitors your RPC activity and in exchange recommends products and services you might like      tjayrush:  what are the criteria for a valid entry?   If the schema validates, it\u2019s a valid list. If the providers listed don\u2019t work, then it\u2019s a bad list and you shouldn\u2019t subscribe to it.     tjayrush:  how do we avoid people paying to be included (or paying to remove someone else)?   We don\u2019t. I completely expect each wallet to have their own list and not list competing providers. That\u2019s no different from what we have now. The benefit of this standard is to allow users to easily choose other lists, without normalizing adding random one-off providers from whatever dapp you happen to be on.  I\u2019ll add some of this to the document. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.346354166666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sbacha",
                    "index": "5",
                    "likes": "0",
                    "time": "08/06/2022-12:26:30",
                    "content": "I do not think net_version helps at all actually, more of an artifact of a pre-ChainId environment. Are you wanting to use the latest JSON-Schema format as I see its using https://json-schema.org/draft/2020-12/schema version? I ask because I would have thought using OpenRPC format would be natural (I do not know the differences if any). Are you also wanting to enumerate custom RPC methods that may be supported by difference RPC Providers? What sort of help do you want? Cheers ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "6",
                    "likes": "0",
                    "time": "08/06/2022-14:48:13",
                    "content": "    sbacha:  I do not think net_version helps at all actually, more of an artifact of a pre-ChainId environment.   Good to know, I won\u2019t include it then.     sbacha:  Are you wanting to use the latest JSON-Schema format as I see its using https://json-schema.org/draft/2020-12/schema version?   I did choose the latest version, though I\u2019m not super familiar with JSON Schema. I can use an older version if there\u2019s a good reason?     sbacha:  I ask because I would have thought using OpenRPC format would be natural (I do not know the differences if any).   I think OpenRPC is for defining an interactive API, while JSON Schema is for defining the structure of a single file, though I may be mistaken. These lists are single files, so I went with JSON Schema.     sbacha:  Are you also wanting to enumerate custom RPC methods that may be supported by difference RPC Providers? What sort of help do you want?   I have a few concerns about adding this kind of information:  What is the value of adding this information to the list instead of the wallet trying the functions itself? How do you account for different implementations of the same function (eth_signTypedData being a prime example)? Is this a lot to ask of list maintainers?  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.210714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sbacha",
                    "index": "7",
                    "likes": "0",
                    "time": "21/06/2022-02:21:16",
                    "content": "Will get back to you after hearing more about this its looking nice  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sbacha",
                    "index": "8",
                    "likes": "0",
                    "time": "28/07/2022-00:04:19",
                    "content": "thanks for answering my questions, have a few more now: should there be support for user@pass:fqdn.rpc.com style RPC endpoints? also, can there be an optional field for RPC endpoints that have a status/healthccheck? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "9",
                    "likes": "0",
                    "time": "28/07/2022-01:09:24",
                    "content": "    sbacha:  should there be support for user@pass:fqdn.rpc.com style RPC endpoints?   Would user and pass be parameters, or included in the list itself? I think a literal https://user:pass@example.com should Just Work\u2122, but passing in the user\u2019s credentials might be out of scope?     sbacha:  also, can there be an optional field for RPC endpoints that have a status/healthccheck?   Are these standardized? I think there\u2019s some appetite for a capabilities exchange in a handshake, and I could see a status endpoint being a part of that. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/LefterisJP",
                    "index": "10",
                    "likes": "1",
                    "time": "20/08/2022-19:26:18",
                    "content": "Hey Sam, Thanks a lot for taking the time to write this EIP. We have something sort of similar in rotki. Each user has a list of nodes they can use and a probability by which each node will be used by any query in the app: rotki Usage Guide \u2014 rotki 1.25.2 documentation Our implementation is more rotki specific. And not important here. But we allow each user to completely customize their suscribed nodes. Having it in a standardized way like this EIP suggests may be a good idea. Some comments.   The versioning is perhaps an overkill and overcomplication? I mostly imagine people subscribing to a list and then changing things on their own, creating their own custom list at the end.   I think it can be extended. Wallets probably don\u2019t care about this but apps like rotki that need the node to query historical data care. So we could have a new key, let\u2019s say capabilities containing an object that defines the capabilities of the node.   Something like: {     is_archive: false,     history_pruned_after_block: 120000,     gas_limit: 3600000 }  The list of capabilities just popped in my mind right now and probably could be expanded. The ones I mentioned are important for an app using historical data since:   archive: Would determine if we can query historical state.  history_pruned_after_block: Would help us figure out if the node is pruned. If it is and the block is recent we know that we can\u2019t ask it for transactions/receipts before the block. This has hit us often in rotki for example, and it\u2019s always so annoying to debug the issue to figure out that the node the user used was just pruned.  gas_limit: In a query context gas limit is also really important. If you use something like a multicall that loops over many subcalls the gas limit is what would determine how many such subcalls you can fit in a single rpc call.  These are just some thoughts off the top of my head. They are all guided by our own experience and uses in rotki. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.810456784594715
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "11",
                    "likes": "0",
                    "time": "20/08/2022-19:43:20",
                    "content": "    LefterisJP:  The versioning is perhaps an overkill and overcomplication? I mostly imagine people subscribing to a list and then changing things on their own, creating their own custom list at the end.   Do you mean versioning specifically, or extension lists? I\u2019m on the fence about extension lists, since they add a ton of complexity, but on the other hand, they do let users port/share the same customizations between different wallets, so\u2026 I\u2019m really not sure. Versioning I think is useful regardless of whether there\u2019s extension lists. If the list maintainer removes an entire rollup for some reason, I think it\u2019d be good to make that visible to the user.     LefterisJP:  I think it can be extended. Wallets probably don\u2019t care about this but apps like rotki that need the node to query historical data care. So we could have a new key, let\u2019s say capabilities containing an object that defines the capabilities of the node.   Capabilities have come up quite a few times now  They seem sorely needed. Would you rather have this information in the list itself, or in some kind of handshake (new RPC endpoint?) between the provider and the consumer? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.7897727272727275
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "12",
                    "likes": "0",
                    "time": "20/08/2022-22:19:18",
                    "content": "Capabilities is a great idea. We would use it, but it seems to me this should be a new RPC method in the best case. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.227272727272727
                }
            ]
        }
    ],
    "group_index": "1767"
}