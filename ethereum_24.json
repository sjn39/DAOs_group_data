{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5409-non-fungible-token-extension-for-eip-1155/10240",
            "title": "EIP-5409: Non Fungible Token extension for EIP-1155 ",
            "index": 10240,
            "category": [
                "EIPs"
            ],
            "tags": [
                "nft",
                "erc-721",
                "erc1155"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "1",
                    "likes": "1",
                    "time": "04/08/2022-06:19:57",
                    "content": " EIP-5409: Non Fungible Token extension for EIP-1155 Pull request: https://github.com/ethereum/EIPs/pull/5409  Abstract This standard is an extension of EIP-1155. It proposes an additional function, ownerOf, which allows EIP-1155 tokens to support Non-Fungibility (unique owners). By implementing this extra function, EIP-1155 tokens can benefit from EIP-721\u2019s core functionality without implementing the (less efficient) EIP-721 specification in the same contract.  Motivation Currently, EIP-1155 does not allow an external caller to detect whether a token is truly unique (can have only one owner) or fungible. This is because EIP-1155 do not expose a mechanism to detect whether a token will have its supply remain to be \u201c1\u201d. Furthermore, it does not let an external caller retrieve the owner directly on-chain. The EIP-1155 specification does mention the use of split id to represent non-fungible tokens, but this requires a pre-established convention that is not part of the standard, and is not as simple as EIP-721\u2019s ownerOf. The ability to get the owner of a token enables novel use-cases, including the ability for the owner to associate data with it.  Specification The keywords \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119.  Contract Interface interface IERC1155OwnerOf {      /// @notice Find the owner of an NFT     /// @dev The zero address indicates that there is no owner: either the token does not exist or it is not an NFT (supply potentially bigger than 1)     /// @param tokenId The identifier for an NFT     /// @return The address of the owner of the NFT     function ownerOf(uint256 tokenId) external view returns (address); }  The ownerOf(uint256 tokenId) function MAY be implemented as pure or view. The supportsInterface method MUST return true when called with 0x6352211e.  Rationale ownerOf does not throw when a token does not exist (or does not have an owner). This simplifies the handling of such a case. Since it would be a security risk to assume all EIP-721 implementation would throw, it should not break compatibility with contract handling EIP-721 when dealing with this EIP-1155 extension.  Backwards Compatibility This EIP is fully backward compatible with EIP-1155. ",
                    "links": [],
                    "GPT-summary": "The author proposes an extension of EIP-1155 to support Non-Fungibility (unique owners) by implementing an additional function, ownerOf. The proposal aims to enable novel use-cases, including the ability for the owner to associate data with it. The post also includes the contract interface and rationale for the proposal. A 3rd party could give constructive criticism, extend the proposal, or ask questions about it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.3465608465608465
                }
            ]
        }
    ],
    "group_index": "24"
}