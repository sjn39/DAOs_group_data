{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/teleport-oracle-overview/15077",
            "title": "Teleport Oracle Overview ",
            "index": 15077,
            "category": [
                "Core Units",
                "Oracles"
            ],
            "tags": [
                "oracles",
                "starknet",
                "wormhole",
                "layer-2",
                "optimism",
                "arbitrum",
                "teleport"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/marcandu",
                    "index": "#1",
                    "likes": "15",
                    "time": "10/05/2022-13:50:35",
                    "content": " Teleport Oracle Overview  Introduction Maker Teleport allows fast withdrawal between an L2 chain to L1 or L2 chain. To do so, Teleport smart contracts on the destination chain need to know if a withdrawal happened on the source chain. Because most L2 designs, especially optimistic roll-up, have a built-in long confirmation delay on L1, we need to provide the status of the withdrawal using a separate method to ensure a proper user experience. The Maker Oracle is able to provide this confirmation by levering its existing network of Oracle Feeders. The feeders are already signing price information, and will now be signing \u201cattestations\u201d that specific events happened on specific chains. These attestations will now be usable on other chains, providing a new cross-chain communication mechanism, tailored to the needs of the Maker Teleport.  Design Goals  Resiliency and Uptime The ability to perform fast withdrawal is a key feature of the Maker Teleport design, and as such the oracle solution must be available at all times and ensure that doesn\u2019t miss or lose attestations. The solution must be easy to scale, to support a large volume of API requests.  Censorship Resistance It shall not be possible to censor a transaction.  Minimize Requirements for Feeders Running nodes, especially L2 nodes, is a relatively complex task as it involves powerful servers and constant monitoring. At this stage, we do not want to force Feeders to run these servers, even though it will likely become a requirement in the future as the volume and risk increase. Feeders typically run small but secure servers, so we must ensure that the software that we provide does not overly tax the servers.  Minimize Feeder Attack Surface Feeders run critical software for the Maker Protocol and we must ensure that adding the Maker Teleport functionality does not expose the Feeders to additional risks. For example, having the feeders answering API calls directly would expose significantly increase their attack surface (server vulnerability, DoS, doxxing, etc.)  Architecture  Step 1: Witnessing the withdrawal event Oracle Feeders run a software component called leeloo. Leeloo is monitoring one or more contract addresses one or more L2 chains for the emission of the WormholeInitialized event. Once leeloo witnesses the specific event on the L2 chain, it signs an attestation with its private key. The signed attestation is then broadcast on the Maker Oracle libp2p network. The attestation contains the following elements:  Withdrawal data, i.e.  sourceDomain: a string identifying the source chain (e.g. arbitrum, optimism, a testnet) targetDomain: where the withdrawal will be completed (ethereum mainnet, testnet) receiver address: address receiving funds on the target chain operator: address of the smart contract relaying the funds on the target chain amount: in DAI nonce: unique to the source domain timestamp: block time of the withdrawal on the source chain   Signature  Ethereum signature of the hashed withdrawal data    Once signed, leeloo broadcasts the attestation to the Maker Oracle libp2p network. Step 2: Collect the attestations in a database An API server called lair is made available to anyone that wants to serve attestations to end users. Running the server is permission-less, anyone can spin up the server and start serving attestations signed by feeds. lair listens the Maker Oracle libp2p network for attestations and stores them in a Redis database for future retrieval by users. The attestations are kept for up to seven days in the database. Step 3: Serve the attestations to end users The lair server provides an API endpoint. Users can request all the received attestations from the feeders by providing the transaction hash in the source chain. E.x: Query: https://serverhost/?type=wormhole&index=txhash answer: [   {     \"timestamp\": 1649855736,     \"data\": {       \"event\": \"data\",       \"hash\": \"hash\"     },     \"signatures\": {       \"ethereum\": {         \"signer\": \"signer address\",         \"signature\": \"signature\"       }     }   },   {...} ]  The server will return all the attestations received for a specific hash. It is possible that not all attestations are received at the time of the request, and the answer will not contain enough attestations reach the quorum required to complete the withdrawal. In this situation, the user will have to request the attestation again at a later time.  Specific features  Multiple RPC Node Support To protect from malicious or compromised RPC nodes, the feeders are invited to either run their own L2 node, or to use several third-party nodes. When configured with several nodes, leeloo will query every node and compare their answer. In the case of a discrepancy, leeloo will ignore every answer and check again later. Only if a majority of the RPC nodes agrees on the presence of a specific Teleport withdrawal event, the feeder will sign an attestation.  Permissionless API Endpoint The lair server does not require permission to join the Maker Oracle Network and start serving attestations to users. Anyone can run the software package, join the network, start accumulating attestations in a database, and serve the attestations to users using the built-in API.  Feeder Isolation Feeders only take blockchain input to perform their work, they do not respond to any external request (user and API server). The primary reason is to reduce the attack surface, but also to minimize the server load.  Database Catch-Up Lair holds all attestations signed in the past 7 days, and there is no possibility to request past attestations from leeloo signers (due to feeder isolation). We want to be able to quickly spin up new API endpoints to easily recover from failure without having to wait seven days. The feeders running leeloo periodically replay past attestations on the libp2p network, allowing new API servers to fill their seven days database in hours.  Libp2p Security The Maker Oracle network uses the well-established libp2p protocol, already used by the Ethereum consensus layer and Filecoin. This protocol has great resistance to spam thanks to a built-in node scoring mechanism. Accessing the network is permissionless, so anyone can read and relay messages, but we added an allow-list of authorized signers (the oracle feeders) that will get their messages relayed. Malicious or incorrectly configured nodes that relay messages from unauthorized signers will have their score penalized and will be dropped from the network.  Maker Feeders The Maker Oracle network has 25 feeds  14 Anon feeders (dark feeds)  Individuals that were selected in 2017 to run the first version of the Maker Oracles. These individuals were either active Maker community members at the time, or people with experience running validation nodes for other decentralized networks.  11 Public feeders  Established crypto projects, in the DeFi space or running Ethereum infrastructure.  Risks and mitigation  Collusion If enough feeders collude, they could sign attestations for fake L2 withdrawals. These attestations would allow them to steal DAI from the bridge, up to the value of the debt ceiling. Mitigation:  Keep the signing quorum high to decrease the likelihood of collusion. Our recommendation is to keep the quorum to 13, the same as the price oracles. Keep debt ceiling low to reduce the value that can be extracted from the attack. Public feeds risk their reputation and expose themselves to legal risks if they participate in collusion.   Censorship Feeders could choose not to sign attestations on certain criteria. Mitigation:  25 feeders are available, while only 13 signatures are required today, so more than 8 feeders must be performing censorship to be effective   Availability Part of the infrastructure could be unavailable, preventing users to complete fast withdrawals, and force them to wait seven days. Mitigation:  25 feeders are available, while only 13 signatures are required today, so more than 8 feeders must go down at the same time to have an impact Feeders are accessing multiple RPC nodes If a feeder goes down, it will still sign the missed attestation thanks to the catch-up mechanism If a popular API server becomes unavailable, alternative servers can be quickly spun up by anyone   Software Vulnerability Software vulnerabilities could allow an attacker to sign fake withdrawals: e.g.:  Server can be compromised Software bug could create attestation for the wrong amount or for a different address Trick the signing software to sign an attestation from a different application Trick feeders to install unauthorized software Compromised dependencies Other software on the same box (L2 nodes, or other)  Mitigation:  Minimize attack surface: leeloo only listens for specific blockchain events and does not take any action from libp2p or other protocols Hosting and server diversity among Feeders. Established secure communication channels between feeders and the Oracle Core Unit, to minimize the odds of personification.   Private Key Private keys could be stolen by an attacker Mitigation:  Hosting and server diversity among feeders, reducing the risks that many feeders are exposed to the same server vulnerability Feeders are educated on the importance of preserving private keys   RPC Node Attack RPC node used by feeders have to be trusted. They could maliciously send fake L2 events to the feeders to attest on, get compromised, or the communication channel could be attacked (DNS poisoning, domain takeover, MITM, etc.) Mitigation:  Ask feeds to find 3 providers, and provide software to ensure their answers are always matching We will incentivize in the future feeders to run their own L2 nodes to remove this trust element.   Conclusion The Teleport Oracle cannot use the same protection mechanism as the price oracles used by the Maker Protocol, as the Oracle Security Module solution (delaying price updates) cannot be used for teleport attestations, so the Oracle Core Unit made sure to add mitigation to various risks. The community still needs to be conscious that circumventing the built-in protection of the L2 chains necessarily entails some risks, and proper attention must be given when adjusting the signer quorum and the Teleport debt ceiling.  Ressources  Introducing Maker Wormhole Detailed design Leeloo Readme Lair Readme  edit 2022-07-20: typos and Teleport rebrand ",
                    "links": [
                        "https://forum.makerdao.com/t/introducing-maker-wormhole/11550",
                        "https://www.notion.so/L2-Fast-Bridge-0ba5074adcf749e791a0576c130d7534",
                        "https://github.com/chronicleprotocol/oracle-suite/tree/master/cmd/leeloo",
                        "https://github.com/chronicleprotocol/oracle-suite/tree/master/cmd/lair",
                        "https://forum.makerdao.com/t/layer-2-roadmap-history-and-future/17310",
                        "https://forum.makerdao.com/t/actualizaciones-mensuales-de-las-core-units-junio-del-2022/16923",
                        "https://forum.makerdao.com/t/request-to-poll-for-maker-teleport-deployment-on-starknet-and-associated-risk-parameters/16844",
                        "https://forum.makerdao.com/t/ruta-de-layer-2-historia-y-futuro-traduccion/17387",
                        "https://forum.makerdao.com/t/monthly-core-unit-updates-june-2022/16783",
                        "https://forum.makerdao.com/t/forum-at-a-glance-may-5-11-2022/15154",
                        "https://forum.makerdao.com/t/maker-teleport-oracle-launch-configuration/17471"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.341607281607281
                },
                {
                    "author_link": "https://forum.makerdao.com/u/system",
                    "index": "#2",
                    "likes": "0",
                    "time": "09/08/2022-19:50:39",
                    "content": "This topic was automatically closed 91 days after the last reply. New replies are no longer allowed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0606060606060606
                }
            ]
        }
    ]
}