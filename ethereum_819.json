{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/evm-evolution-working-group-formation/3218",
            "title": "EVM evolution Working Group Formation ",
            "index": 3218,
            "category": [
                "Working Groups",
                "Ethereum 1.x Ring"
            ],
            "tags": [
                "evm",
                "evm-evolution",
                "eth1x"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "1",
                    "likes": "3",
                    "time": "29/04/2019-13:31:36",
                    "content": "Some relevant discussion has been happening here. There is also recent presentation by @expede: https://www.youtube.com/watch?v=qck2KBqT14o at Eth1x gathering in Berlin. This post is to formally acknowledge the de-facto existence of the EVM evolution Working Group, led by @expede. The Working Group will be performing necessary steps (research, proof of concept implementation, generation of conformance tests, etc.) to enable further improvement in the EVM. Once the group is formed and funded (at least short term), we should expect to hear more of what their current plan is, given other simultaneous developments in Ethereum 1x (State Rent, semi-stateless clients, eWASM), and given their time/money constraints. ",
                    "links": [
                        "https://www.youtube.com/watch?v=qck2KBqT14o"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.263888888888889
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "2",
                    "likes": "2",
                    "time": "29/04/2019-17:39:01",
                    "content": "Thanks Alexey. Brooke\u2019s EVM Evolution presentation from Core Devs is on YouTube here:  Slides are here: https://drive.google.com/open?id=1_taRpfsEF-ofF0UpwKyGOH-ogPqxmpUD And we\u2019ve got more on plans and progress on our site here: https://fission.codes/evm-evolution/ Leave a comment if you\u2019d like to get involved with the working group! ",
                    "links": [
                        "https://fission.codes/evm-evolution/"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.0625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "3",
                    "likes": "2",
                    "time": "01/04/2021-01:46:03",
                    "content": "Thanks @AlexeyAkhunov.  I\u2019m waking up this group because, as @vbuterin put it, the merge is a sort of last chance to get the EVM tidied up for the future.  At this point we have a fair number of related proposals going, including at least the following.  I think they all deserve discussion and refinement into a coherent whole, and propose this group as a good place to pull these discussions together.  EVM encapsulation format EVM384 List of EVM features potentially worth removing EIP-3337: Frame pointer support for memory load and store operations EIP-3336: Paged memory allocation for the EVM EIP-2930: Optional access lists EIP-2327: BEGINDATA EIP-2315: Simple Subroutines for the EVM  EIP-1153: Transient storage opcodes EIP-1051: Overflow checking for the EVM EIP-663: Unlimited SWAP and DUP instructions EIP-616: SIMD Operations for the EVM EIP-615: Subroutines and Static Jumps for the EVM  The authors include at least @Arachnid, @axic, @cdetrio, @chfast, @chriseth, @holiman, @MrChico, @poemm, and jwasinger ",
                    "links": [
                        "https://notes.ethereum.org/@poemm/evm384-update4",
                        "https://hackmd.io/@vbuterin/evm_feature_removing",
                        "https://eips.ethereum.org/EIPS/eip-3337",
                        "https://eips.ethereum.org/EIPS/eip-3336",
                        "https://eips.ethereum.org/EIPS/eip-2930",
                        "https://eips.ethereum.org/EIPS/eip-2327",
                        "https://eips.ethereum.org/EIPS/eip-2315",
                        "https://eips.ethereum.org/EIPS/eip-1153",
                        "https://eips.ethereum.org/EIPS/eip-1051",
                        "https://eips.ethereum.org/EIPS/eip-663",
                        "https://eips.ethereum.org/EIPS/eip-616",
                        "https://eips.ethereum.org/EIPS/eip-615",
                        "https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/117"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.892857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "4",
                    "likes": "0",
                    "time": "02/04/2021-20:10:56",
                    "content": "To create some \u201ccoopetition\u201d, here is what I would like to try: TEVM Transpiled EVM: accelerate EVM improvement R&D, but learning from eWASM \u00b7 ledgerwatch/turbo-geth Wiki \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "5",
                    "likes": "1",
                    "time": "02/04/2021-23:07:57",
                    "content": "Yes, \u201ccoopetition\u201d is a good word for it, as what you lay out is an implementation strategy for an EVM that could be surfaced for general use later, independently of other work.  I\u2019ll await a better understanding of your ideas before digging in very much, but it does sound a lot like eWasm. I think there has been enough work on the proposals I listed over the years that we can probably come to agree (or agree that we can\u2019t agree) on a reasonable subset of features for an initial upgrade.  (Including features that might make TEVM\u2019s life easier.) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.992500000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "6",
                    "likes": "0",
                    "time": "03/04/2021-11:45:30",
                    "content": "As a first case study for TEVM, I am planning to add EIP-615 (in its entirety) to TEVM  and try to use our abstract interpretation analyser to transpile EVM byte codes to it. Even if for already deployed contract and even if semi-manually to start with. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "7",
                    "likes": "1",
                    "time": "04/04/2021-02:41:49",
                    "content": "That would be gratifying, but still not where I\u2019d start - EVM-615 is restricted in ways that make it a difficult target for the EVM.  I think I\u2019d start with looking at eWasm and EVMC, which attempt to separate out purely computational concerns from the rest, which is part of what you seem to want.  But we should talk about it next week. And I wonder what you mean by unrolling storage ops. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.252232142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "8",
                    "likes": "0",
                    "time": "05/04/2021-19:15:30",
                    "content": "    gcolvin:  And I wonder what you mean by unrolling storage ops.   Good question! I have added a new Case study section about this into the doc (only initial ideas, but I hope it will make things clearer). I have also added the case study about structured control flow, and an extra feature of non-deterministic instructions with hints. Hope you\u2019ll enjoy the read: TEVM Transpiled EVM: accelerate EVM improvement R&D, but learning from eWASM \u00b7 ledgerwatch/turbo-geth Wiki \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.784902597402597
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "9",
                    "likes": "0",
                    "time": "07/04/2021-02:57:58",
                    "content": " Transpilation of EVM into Web Assembly (for performance reasons) was the idea behind starting eWASM (ethereum Web Assembly) project. Lessons need to be learnt from this. For example, are these statements true?:  One EVM instruction gets translated into many Web Assembly instructions, thus creating additional overhead. Executing many Web Assembly instructions takes longer than executing a corresponding single EVM instruction. Having higher-level instruction may be inconvenient (as referred later), but it does have a benefit of amortising the cost of the interpreter loop. Web Assembly code is harder to meter efficiently than EVM bytecode, again due to the finer granularity of operations. Because of this finer granularity, the relative overhead of metering for Web Assembly code can be much higher than for EVM bytecode. Problems above are not unsolveable   All true, but not show-stoppers.  The big EVM operations are mostly calls to native crypto and big-int libraries, which can have their gas counted as a unit.  So the EVM isn\u2019t necessarily better that way.  The NEAR folks are doing well with Wasm. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.487103174603175
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "10",
                    "likes": "1",
                    "time": "07/04/2021-03:19:29",
                    "content": "I don\u2019t  understand, but unrolling storage ops sounds like a good idea.  How would it compare to just having EIP-1153? I\u2019m still unconvinced that EIP-615 is a very good target for EVM code \u2013 it\u2019s being so much more constrained than the EVM would mean that optimized EVM code would need to be de-optimized.  There is probably a better design for the purpose \u2013 less dynamic than EIP-2315, and less restricted than EIP-615. And I remain fairly unconvinced that transpiling arithmetic operations is a good strategy anyway.  It\u2019s not uncommon for interpreters to translate their input into a different form for better performance, some not looking much like byte-code, or even being easy to serialize. What makes sense to me as a starting point is separating out the purely computational parts of the EVM \u2013 the VM proper \u2013 then looking at what remains \u2013 like state access and message calls and where they fit.  Wasm and eWasm have done a fair amount of work on this. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.352946428571428
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "11",
                    "likes": "0",
                    "time": "07/04/2021-07:10:04",
                    "content": "    gcolvin:  I don\u2019t understand, but unrolling storage ops sounds like a good idea. How would it compare to just having EIP-1153?   As we established, I think, presenting a new resource (transitive storage, subroutine) without also presenting lots of usecases for it (not theoretical, but practical), seems to greatly reduce the changes of the new resource being adopted in EVM in the \u201chead on\u201d way. That is why I would like to introduce these resources in a \u201croundabout\u201d way to go deeper and start using them before \u201cEthereum governance\u201d approves of them and \u201ccommunity\u201d starts caring about these things  From my point of view, this is the only way. As I mentioned before, \u201ctrading EIPs for years of my life is not a good trade\u201d. I want to make stuff that works, and show people how it works.   And I remain fairly unconvinced that transpiling arithmetic operations is a good strategy anyway   That is where the difference between eWASM and TEVM is. As far as I understand, eWASM idea was to transpile 256-bit operations into 64-bit operations, and with TEVM we won\u2019t, and we will also go the other way, introducing 384-bit operations, and perhaps even longer words.   Wasm and eWasm have done a fair amount of work on this.   Correct. That is why part of this effort is to study the \u201chistory of eWASM\u201d ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.457386363636363
                }
            ]
        }
    ],
    "group_index": "819"
}