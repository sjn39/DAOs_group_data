{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-6381-emotable-extension-for-non-fungible-tokens/12710",
            "title": "EIP-6381: Emotable Extension for Non-Fungible Tokens ",
            "index": 12710,
            "category": [
                "EIPs"
            ],
            "tags": [
                "nft"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/ThunderDeliverer",
                    "index": "1",
                    "likes": "1",
                    "time": "26/01/2023-14:46:47",
                    "content": "  eip: 6381 title: Emotable Extension for Non-Fungible Tokens description: An interface for Non-Fungible Tokens extension allowing for reacting to them using Unicode emojis. author: Bruno \u0160kvorc, Steven Pineda, Stevan Bogosavljevic, Jan Turk discussions-to: here status: Draft type: Standards Track category: ERC created: 2023-01-22 requires: 165, 721  Abstract The Emotable Extension for Non-Fungible Tokens standard extends EIP-721 by allowing NFTs to be emoted at. This proposal introduces the ability to react to NFTs using Unicode standardized emoji.  Motivation With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having the ability for anyone to interact with an NFT introduces an interactive aspect to owning an NFT and unlocks feedback-based NFT mechanics. This EIP introduces new utilities for EIP-721 based tokens in the following areas:  Interactivity Feedback based evolution Valuation   Interactivity The ability to emote on an NFT introduces the aspect of interactivity to owning an NFT. This can either reflect the admiration for the emoter (person emoting to an NFT) or can be a result of a certain action performed by the token\u2019s owner. Accumulating emotes on a token can increase its uniqueness and/or value.  Feedback based evolution Standardized on-chain reactions to NFTs allow for feedback based evolution. Current solutions are either proprietary or off-chain and therefore subject to manipulation and distrust. Having the ability to track the interaction on-chain allows for trust and objective evaluation of a given token. Designing the tokens to evolve when certain emote thresholds are met incentivizes interaction with the token collection.  Valuation Current NFT market heavily relies on previous values the token has been sold for, the lowest price of the listed token and the scarcity data provided by the marketplace. There is no real time indication of admiration or desirability of a specific token. Having the ability for users to emote to the tokens adds the possibility of potential buyers and sellers gageing the value of the token based on the impressions the token has collected.  Specification The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119. /// @title EIP-6381 Emotable Extension for Non-Fungible Tokens /// @dev See https://eips.ethereum.org/EIPS/eip-5773 /// @dev Note: the ERC-165 identifier for this interface is 0xf8d6854d.  pragma solidity ^0.8.16;  interface IRMRKEmotable is IERC165 {     /**      * @notice Used to notify listeners that the token with the specified ID has been emoted to or that the reaction has been revoked.      * @dev The event SHOULD only be emitted if the state of the emote is changed.      * @param emoter Address of the account that emoted or revoked the reaction to the token      * @param tokenId ID of the token      * @param emoji Unicode identifier of the emoji      * @param on Boolean value signifying whether the token was emoted to (`true`) or if the reaction has been revoked (`false`)      */     event Emoted(         address indexed emoter,         uint256 indexed tokenId,         bytes4 emoji,         bool on     );      /**      * @notice Used to get the number of emotes for a specific emoji on a token.      * @param tokenId ID of the token to check for emoji count      * @param emoji Unicode identifier of the emoji      * @return Number of emotes with the emoji on the token      */     function getEmoteCount(         uint256 tokenId,         bytes4 emoji     ) external view returns (uint256);      /**      * @notice Used to emote or undo an emote on a token.      * @dev Does nothing if attempting to set a pre-existent state.      * @dev When the state is being changed, the Emoted event MUST be emitted.      * @param tokenId ID of the token being emoted      * @param emoji Unicode identifier of the emoji      * @param state Boolean value signifying whether to emote (`true`) or undo (`false`) emote      */     function emote(uint256 tokenId, bytes4 emoji, bool state) external; }   Rationale Designing the proposal, we considered the following questions:   Does the proposal support custom emotes or only the Unicode specified ones? The proposal only accepts the Unicode identifier which is a bytes4 value. This means that while we encourage implementers to add the reactions using standardized emojis, the values not covered by the Unicode standard can be used for custom emotes. The only drawback being that the interface displaying the reactions will have to know what kind of image to render and such additions will probably be limited to the interface or marketplace in which they were made.  Should the proposal use emojis to relay the impressions of NFTs or some other method? The impressions could have been done using user-supplied strings or numeric values, yet we decided to use emojis since they are a well established mean of relaying impressions and emotions.   Backwards Compatibility The Emotable token standard is fully compatible with EIP-721 and with the robust tooling available for implementations of EIP-721 as well as with the existing EIP-721 infrastructure.  Test Cases Tests are included in emotable.ts. To run them in terminal, you can use the following commands: cd ../assets/eip-6381 npm install npx hardhat test   Reference Implementation See Emotable.sol.  Security Considerations The same security considerations as with EIP-721 apply: hidden logic may be present in any of the functions, including burn, add asset, accept asset, and more. Caution is advised when dealing with non-audited contracts.  Copyright Copyright and related rights waived via CC0. ",
                    "links": [
                        "https://github.com/steven2308",
                        "https://github.com/stevyhacker",
                        "https://github.com/ThunderDeliverer",
                        "https://eips.ethereum.org/EIPS/eip-721",
                        "https://eips.ethereum.org/EIPS/eip-721",
                        "https://eips.ethereum.org/EIPS/epi-721",
                        "https://github.com/rmrk-team/EIPs/tree/propose-emotable-eip/assets/eip-6381/test/emotable.ts",
                        "https://github.com/rmrk-team/EIPs/tree/propose-emotable-eip/assets/eip-6381/contracts/Emotable.sol",
                        "https://eips.ethereum.org/eip-721.md"
                    ],
                    "GPT-summary": "The post introduces the Emotable Extension for Non-Fungible Tokens standard, which allows NFTs to be reacted to using Unicode emojis. The proposal aims to introduce interactivity, feedback-based evolution, and valuation to NFTs. The post explains the motivation behind the proposal, its specification, and rationale. The post also includes information on the test cases, reference implementation, and security considerations. The post does not advertise the proposal, but rather explains it and invites feedback and questions.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Community and engagement",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.090000773036487
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/toledoroy",
                    "index": "2",
                    "likes": "0",
                    "time": "30/01/2023-20:09:08",
                    "content": "What do you think about maybe holding arbitrary data about token on a separate contract? Just a simple contract that holds mapping, e.g.  [account][contract][tokenId]=>emoji I think that since smart contracts are supposed to function like micro services, it might make more sense to create a contract as a public service for that. This could potentially allow you to add emojis or any other arbitrary data about any NFT, even for  immutable contracts that were already deployed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.243303571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/stoicdev0",
                    "index": "3",
                    "likes": "0",
                    "time": "30/01/2023-22:00:24",
                    "content": "Hey @toledoroy, thanks for participating! Internally, we actually created 2 versions, an extension (the one we\u2019re presenting) and a stand alone which can track emojis for any contract. We don\u2019t see it as valuable to create an EIP for the second case, since you don\u2019t really need an interface, ideally you would need a single contract deployed which tracks them all. Hard to achieve. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.704931972789115
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "4",
                    "likes": "0",
                    "time": "15/02/2023-17:57:43",
                    "content": "Apologies if I\u2019ve mentioned this before, but what if you track reactions as ERC-5114 badges? Note that these soulbound badges aren\u2019t removable, which would be different from your current proposal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/stoicdev0",
                    "index": "5",
                    "likes": "0",
                    "time": "20/02/2023-20:26:45",
                    "content": "That\u2019s just too different honestly. Besides not being removable, you may have thousands of reactions using the same emoji on a token, which can be tracked by a simple counter in this proposal. With the badges approach it would be too expensive to do this. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.1
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "6",
                    "likes": "0",
                    "time": "20/02/2023-21:21:44",
                    "content": "    stoicdev0:  Besides not being removable   What if I suggest allowing burning badges to @MicahZoltu? It\u2019s a small amount of mutability, in exchange for use cases like these.     stoicdev0:  can be tracked by a simple counter in this proposal.   If the emoji are tracked as a simple counter, how do you control who can remove one? Couldn\u2019t anyone remove the reaction I added? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ThunderDeliverer",
                    "index": "7",
                    "likes": "0",
                    "time": "20/02/2023-23:50:26",
                    "content": "    SamWilsn:  If the emoji are tracked as a simple counter, how do you control who can remove one? Couldn\u2019t anyone remove the reaction I added?   We use two simple mappings to track the emotes given by the address and the number of emotes the token has received: EIPs/Emotable.sol at 2bdcdb61baf8ba6210096c06f0e265d8622d4d7f \u00b7 ethereum/EIPs \u00b7 GitHub This ensures that the emoter can emote and undo emote and that the change is reflected on the token. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "8",
                    "likes": "0",
                    "time": "21/02/2023-04:58:09",
                    "content": "That seems roughly equivalent to what you\u2019d need to do to keep track of badges. You could use keccak256(abi.encode(msg.sender, tokenId, emoji)) as the badge\u2019s tokenId. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "9",
                    "likes": "0",
                    "time": "21/02/2023-06:23:28",
                    "content": "Here\u2019s an untested implementation: // SPDX-License-Identifier: CC0-1.0  pragma solidity ^0.8.17;  interface IERC5114 { \tevent Mint(uint256 indexed badgeId, address indexed nftAddress, uint256 indexed nftTokenId);  \tfunction ownerOf(uint256 badgeId) external view returns (address nftAddress, uint256 nftTokenId);  \tfunction collectionUri() external pure returns (string memory collectionUri);  \tfunction badgeUri(uint256 badgeId) external view returns (string memory badgeUri);  \tfunction metadataFormat() external pure returns (string memory format); }  contract Reactions is IERC5114 {     event Reacted(         address indexed emoter,         address indexed nftAddress,         uint256 indexed nftTokenId,         bytes4 emoji,         bool enabled     );      struct Reaction {         address operator;         address nftAddress;         uint256 nftTokenId;         bytes4 codepoint;         bool enabled;     }      mapping (uint256 => Reaction) private _reactions;      //      (nftAddress =>         (nftTokenId =>        (codepoint => count  )))     mapping (address    => mapping (uint256    => mapping(bytes4    => uint256))) private _counts;      /*      * IERC5114 Implementation      */     string constant public metadataFormat = \"TODO\";     string constant public collectionUri = \"TODO\";      function ownerOf(uint256 badgeId) external view returns (address nftAddress, uint256 nftTokenId) {         Reaction storage reaction = _reactions[badgeId];         require(address(0) != reaction.operator);         return (reaction.nftAddress, reaction.nftTokenId);     }      function badgeUri(uint256 badgeId) external view returns (string memory) {         require(address(0) != _reactions[badgeId].operator);         return \"TODO\";     }      /*      * IToggleable Implementation      */     function isEnabled(uint256 badgeId) external view returns (bool) {         Reaction storage reaction = _reactions[badgeId];         require(address(0) != reaction.operator);         return reaction.enabled;     }      /*      * Reactions Implementation      */      function id(         address operator,         address nftAddress,         uint256 nftTokenId,         bytes4 codepoint     ) public pure returns (uint256) {         return uint256(keccak256(abi.encode(operator, nftAddress, nftTokenId, codepoint)));     }      function react(         address nftAddress,         uint256 nftTokenId,         bytes4 codepoint,         bool enabled     ) external returns (uint256) {         uint256 badgeId = id(msg.sender, nftAddress, nftTokenId, codepoint);         Reaction storage reaction = _reactions[badgeId];          if (reaction.enabled == enabled) {             return badgeId;         }          if (address(0) == reaction.operator) {             reaction.operator = msg.sender;             reaction.nftAddress = nftAddress;             reaction.nftTokenId = nftTokenId;             reaction.codepoint = codepoint;              emit Mint(badgeId, nftAddress, nftTokenId);         }          if (enabled) {             _counts[nftAddress][nftTokenId][codepoint] += 1;         } else {             _counts[nftAddress][nftTokenId][codepoint] -= 1;         }          reaction.enabled = enabled;         emit Reacted(             msg.sender,             nftAddress,             nftTokenId,             codepoint,             enabled         );          return badgeId;     }      function reactionCountOf(         address nftAddress,         uint256 nftTokenId,         bytes4 codepoint     ) public view returns (uint256) {         return _counts[nftAddress][nftTokenId][codepoint];     } }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.169172932330826
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "10",
                    "likes": "0",
                    "time": "21/02/2023-08:22:27",
                    "content": "    SamWilsn:  What if I suggest allowing burning badges to @MicahZoltu? It\u2019s a small amount of mutability, in exchange for use cases like these.   Any mutability (including burning) makes it so you can not aggressively cache badges, which was a design goal of 5114.  That being said, one could create another EIP for mutable badges where the owner can burn them.  This EIP could share essentially the same interface as 5114, so anyone supporting one would likely support the other as well.  I think there is value in calling those two types of badges different things however, which is why I think they should be different EIPs (with different numbers and titles). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.930555555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/stoicdev0",
                    "index": "11",
                    "likes": "0",
                    "time": "21/02/2023-13:16:13",
                    "content": "There are so many differences:  They are meant to be non removable, confirmed by the author. Badges are sent to any contract, which can be a nice feature, but our proposal is meant to be an extension, so badges are tracked within the contract itself. We don\u2019t need collectionUri nor metadataFormat. For badgeUri we could force it to return the id of the emoji I guess, but it feels really hacky IMO. There\u2019s no way to get the count of reactions for a specific emoji on a token. It is reasonable in general since an indexer could take care of this. But it is important on our EIP since we intend implementations to vary the behavior based on this. e.g:   An NFT of a plant returns a dying plant image unless it has a certain number of  reactions. This plays really well with ERC-5773. An NFT of a person returns a blushed version after it gets 100  emojis. Goes also well with 5773. An NFT can be transferable only after receiving 10  reactions, playing nice with ERC-6454   Finally, when building extensions of ERC721, we\u2019ve found contract size to be a huge limitation. You hit the 24kb limit easily when you stack many together. So we try to keep them as minimal as possible. I understand your purpose with this and it\u2019s really valuable, but in this case forcing it into use a somehow related one would be harmful for us. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-6454"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.199404761904762
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "12",
                    "likes": "0",
                    "time": "21/02/2023-14:38:00",
                    "content": "    stoicdev0:   They are meant to be non removable, confirmed by the author.    Very true. The example I posted uses non-removable badges. I\u2019d be very open to making a burnable badge standard if necessary.     stoicdev0:   Badges are sent to any contract, which can be a nice feature, but our proposal is meant to be an extension, so badges are tracked within the contract itself.    What benefits come with putting the reactions in the same contract?     stoicdev0:   We don\u2019t need collectionUri nor metadataFormat. For badgeUri we could force it to return the id of the emoji I guess, but it feels really hacky IMO.    Assuming someone made a generic badge viewing dapp, or wallets build in native support for badges, then the reactions/emoji badges would just show up (and collectionUri could have a nice description of what a reaction is for.) metadataFormat is just an implementation detail.     stoicdev0:  There\u2019s no way to get the count of reactions for a specific emoji on a token.   See reactionCountOf from my earlier example.     stoicdev0:   An NFT of a plant returns a dying plant image unless it has a certain number of  reactions. This plays really well with ERC-5773. An NFT of a person returns a blushed version after it gets 100  emojis. Goes also well with 5773.    Ha, I love it! That\u2019ll be quite fun. I think you could still implement this by querying the badge contract in your tokenURI?     stoicdev0:  Finally, when building extensions of ERC721, we\u2019ve found contract size to be a huge limitation.   Isn\u2019t this a great argument against your point 2? If the reactions/emoji live in their own contract, there\u2019s no code size increase to the ERC-721 contract.     stoicdev0:  I understand your purpose with this and it\u2019s really valuable, but in this case forcing it into use a somehow related one would be harmful for us.   It seems like such a close fit to me, but it\u2019s totally fine if you don\u2019t agree! ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5773"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.279131285381285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/stoicdev0",
                    "index": "13",
                    "likes": "0",
                    "time": "21/02/2023-16:25:32",
                    "content": "Thanks again, I really enjoy this discussions   What benefits come with putting the reactions in the same contract?  I don\u2019t have to keep track of an external contract where emojis would be stored. My main problem with tracking them in an external contract is that there could actually be many! Each marketplace might have their own for instance, so I\u2019d have to either choose or aggregate, which feels less usable.  Assuming someone made a generic badge viewing dapp, or wallets build in native support for badges, then the reactions/emoji badges would just show up (and collectionUri could have a nice description of what a reaction is for.) metadataFormat is just an implementation detail.  It still feels forced and extra unneeded effort IMO. Emojis are powerful, widely used and can be achieved with as little as what we\u2019re proposing.  See reactionCountOf from my earlier example.  The thing is, that\u2019s not part of the 5114\u2019s interface, and we do need it to be there if we want to use it as intended.  It would be a show stopper.  Isn\u2019t this a great argument against your point 2? If the reactions/emoji live in their own contract, there\u2019s no code size increase to the ERC-721 contract.  It is  I realized as I was writing it. But weighing pros and cons we find local storage better for this use case, mostly for the reason pointed in the answer about benefits. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.016057312252965
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "14",
                    "likes": "0",
                    "time": "21/02/2023-17:22:28",
                    "content": "    stoicdev0:  I don\u2019t have to keep track of an external contract where emojis would be stored. My main problem with tracking them in an external contract is that there could actually be many! Each marketplace might have their own for instance, so I\u2019d have to either choose or aggregate, which feels less usable.   That\u2019s a great point  What if the standard includes the deployment transaction so there can be exactly one emoji contract at a well-known address?     stoicdev0:      SamWilsn:  See reactionCountOf from my earlier example.   The thing is, that\u2019s not part of the 5114\u2019s interface, and we do need it to be there if we want to use it as intended. It would be a show stopper.   For sure! I\u2019m more suggesting we define IEmotable as: interface IEmotable is IERC5114 { ... }  Or in other words, add whatever extra methods/events you need on top of IERC5114. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.258333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "15",
                    "likes": "0",
                    "time": "22/02/2023-07:44:30",
                    "content": "    SamWilsn:  That\u2019s a great point  What if the standard includes the deployment transaction  so there can be exactly one emoji contract at a well-known address?   I would use something like GitHub - Zoltu/deterministic-deployment-proxy: An Ethereum proxy contract that can be used for deploying contracts to a deterministic address on any chain. personally, which is a simplification around keyless execution.  I agree with this general idea though.  Have a single \u201creaction registry\u201d (this would be standardized) that allows anyone to react to any token (5114 or 721 or other, anything with the form (address, id)).  This means you don\u2019t need to build tokens with support for reactions built-in, it can be added on to any existing token.  For example, people could react to CryptoKitties or Bored Apes once the standard is finished. ",
                    "links": [
                        "https://github.com/Zoltu/deterministic-deployment-proxy"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.22420634920635
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/stoicdev0",
                    "index": "16",
                    "likes": "0",
                    "time": "22/02/2023-12:27:41",
                    "content": "We will review your suggestions @SamWilsn and @MicahZoltu, they look promising. Thanks! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/stoicdev0",
                    "index": "17",
                    "likes": "1",
                    "time": "27/02/2023-18:00:42",
                    "content": "We decided to switch for the recommended approach of a single contract with a predictable address across all chains.   but not reusing 5114. We\u2019ll need a few days to adapt, will keep you posted. Thanks! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 4.723214285714286
                }
            ]
        }
    ],
    "group_index": "328"
}