{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-3779-safer-control-flow-for-the-evm/6975",
            "title": "EIP-3779: Safer Control Flow for the EVM ",
            "index": 6975,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "1",
                    "likes": "3",
                    "time": "30/08/2021-05:29:34",
                    "content": "I have withdrawn this proposal.  The algorithm cannot be made to work   Abstract This EIP specifies validation rules for some important safety properties, including  valid jump destinations, valid instructions, no stack underflows, and no stack overflows without recursion.  Valid contracts will not halt with an exception unless they either run out of gas or overflow stack during a recursive subroutine call. Code is validated at contract creation time \u2013 not runtime \u2013 by the provided algorithm.  This is a one-pass algorithm, linear in the size of the bytecode, so as not to be a DoS surface.   Ethereum Improvement Proposals   EIP-3779: Safer Control Flow for the EVM Ensure an essential level of safety for EVM code.      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-3779",
                        "https://ethereum-magicians.org/t/eip-3690-eof-jumpdest-table/6806/8",
                        "https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/124"
                    ],
                    "GPT-summary": "The author of the proposal has withdrawn it due to the algorithm not being able to work. The proposal aimed to specify validation rules for safety properties in EVM code, ensuring that valid contracts will not halt with an exception unless they run out of gas or overflow the stack during a recursive subroutine call. However, the proposal has been withdrawn, and there is entirely negative feedback on the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Law and regulations",
                        "Change to proposal pipeline"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "2",
                    "likes": "0",
                    "time": "30/08/2021-21:36:05",
                    "content": "Am I correct that is is intended to be a possible improvement under EOF (EIP3540) but that the exact mechanism through which this would be integrated with EOF is not currently specified? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving entirely negative feedback on proposal"
                    ],
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "3",
                    "likes": "1",
                    "time": "30/08/2021-23:15:39",
                    "content": "In the end this just specifies a few more rules, in the same way that EIP-3690 \u201cextends contact creation validation rules (as defined in EIP-3540).\u201d  I should be more clear about that. The validation algorithm (or its equivalent) would presumably be run at code-validation time, as defined in EIP-3540.  I should be more clear about that.  Logically, it could be run after the code given there is run.  For performance reasons an implementation would probably integrate the code into a single pass. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.932539682539683
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "4",
                    "likes": "0",
                    "time": "01/09/2021-09:09:21",
                    "content": "    gcolvin:  In the end this just specifies a few more rules, in the same way that EIP-3690 \u201cextends contact creation validation rules (as defined in EIP-3540).\u201d I should be more clear about that.   3690 extends the rules defined in 3670. The basic validation rules are defined by 3670 and not 3540. For clarity I suggest to provide a reference implementation in Python which extends the validation of 3670 the same way 3690 does. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-3670",
                        "https://eips.ethereum.org/EIPS/eip-3540"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely negative feedback on proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.642857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "5",
                    "likes": "0",
                    "time": "01/09/2021-13:48:26",
                    "content": "Aha.  I\u2019ve been using Go for example implementations because I don\u2019t know Python, and when I write the reference implementation it will almost surely be a draft PR against Geth. Anyway, this PR would render 3670 unnecessary - all jump destinations are validated, and no jumpdest table is needed.  However, EIPs generally should not reference other EIPs that are still Drafts.  We are making an exception for 3540 because it is almost sure to go in.  3670 is more controversial. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "6",
                    "likes": "0",
                    "time": "01/09/2021-18:55:08",
                    "content": "    gcolvin:  Anyway, this PR would render 3670 unnecessary - all jump destinations are validated, and no jumpdest table is needed.   3670 does not introduce a jumpdest table (3690 does), so not sure what do you mean.     gcolvin:  However, EIPs generally should not reference other EIPs that are still Drafts. We are making an exception for 3540 because it is almost sure to go in.   3540/3670/3690 are all in Review and not Draft.     gcolvin:  3670 is more controversial.   Why is 3670 controversial? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely negative feedback on proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.590277777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "7",
                    "likes": "0",
                    "time": "02/09/2021-13:06:33",
                    "content": " 3540/3670/3690 are all in Review and not Draft.  Good, I and I think @MicahZoltu I missed that, or it changed since his review.  Why is 3670 controversial?  Sorry - I meant 3690.  3670 is good.  3690 I don\u2019t like at all. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.8125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "8",
                    "likes": "0",
                    "time": "03/09/2021-22:57:20",
                    "content": "I\u2019ve added an EOF container section with a jumptable which gives valid jump destinations for every dynamic jump.  This extends the range of valid programs without sacrificing tractable validation. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "9",
                    "likes": "0",
                    "time": "28/09/2021-10:44:41",
                    "content": " I\u2019ve added an EOF container section with a jumptable which gives valid jump destinations for every dynamic jump. This extends the range of valid programs without sacrificing tractable validation.  I would prefer this extension to have a separate opcode pair (JUMPTABLE / JUMPTABLEI ?), and maybe to be proposed in a separate EIP. Now it seems like two different semantics (that will need two different implemantations) conflated into JUMP/JUMPI. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "10",
                    "likes": "1",
                    "time": "28/09/2021-15:59:51",
                    "content": "Some more comments / confusions:  Valid contracts will not halt with an exception unless they either run out of gas or overflow stack during a recursive subroutine call.  As I understand here by subroutines you mean subroutines as they\u2019re currently generated by compilers (with dynamic jumps). So recursive call to a subroutine can overflow, but why wouldn\u2019t be the same possible with a simple loop doing PUSH ?  A new EOF section called vjumptable (section_kind = 4 ) is introduced. It contains a sequence of n tuples (jumpsrc, jumpdesti_, sorted in ascending lexicographic order.  Please specify how jumpsrc and jumpdest are encoded (16-bit unsigned integer?)   Every JUMP and JUMPI either   matches at least one tuple in the vjumptable or the vtraptable, or is static    First, as noted above these two cases I think should better be different opcodes. Then, for the tabulated jump, I think validation should check:  each jumpsrc and jumpdest in both tables points to an instruction (is within code bounds and doesn\u2019t point to immediate)  potentially we could restrict jumpdest to point to JUMPDEST opcode for consistency. Not sure it\u2019s worth it, but it probably will simplify breaking into blocks?  jumpsrc could alse be additionally restricted to point to a tabulated jump instruction   each tabulated jump instruction always has exactly one item in vtraptable with corresponding jumpsrc. number of items in vjumptable for each jumpsrc is not contstained (can be 0)  Your algorithm code doesn\u2019t seem to check all potential destinations of tabulated jumps, did you intend to support switch-like control flow with this at all? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely negative feedback on proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.414174641148325
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "11",
                    "likes": "0",
                    "time": "28/09/2021-20:18:28",
                    "content": " \u2026 subroutines as they\u2019re currently generated by compilers (with dynamic jumps).  Yes, as limited by the rules.  I want to loosen up the rules enough to capture most of what Solidity generates.  \u2026 So recursive call to a subroutine can overflow, but why wouldn\u2019t be the same possible with a simple loop doing PUSH ?  Because that breaks the constant stack depth rule.   \u2026 A new EOF section called vjumptable (section_kind = 4 ) is introduced. It contains a sequence of n tuples (jumpsrc, jumpdesti_, sorted in ascending lexicographic order.  Please specify how jumpsrc and jumpdest are encoded (16-bit unsigned integer?)  The whole table layout needs to change, so this will get fixed, thanks.  Probably 2 MSB-first bytes, unsigned. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.40959040959041
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "12",
                    "likes": "1",
                    "time": "28/09/2021-21:01:57",
                    "content": "   Every JUMP and JUMPI either   matches at least one tuple in the vjumptable or the vtraptable, or is static    First, as noted above these two cases I think should better be different opcodes.  My desire in this EIP is not to introduce new opcodes, but to constrain the existing opcodes so that they are safer (as defined) without breaking too much existing code that is already safe.  Then, for the tabulated jump, I think validation should check:  each jumpsrc and jumpdest in both tables points to an instruction (is within > code bounds and doesn\u2019t point to immediate) potentially we could restrict jumpdest to point to JUMPDEST opcode for consistency. Not sure it\u2019s worth it, but it probably will simplify breaking into blocks?  jumpsrc could alse be additionally restricted to point to a tabulated jump instruction each tabulated jump instruction always has exactly one item in vtraptable with corresponding jumpsrc. number of items in vjumptable for each jumpsrc is not contstained (can be 0)   I think I just didn\u2019t get around to validating the jump tables themselves, thanks for noticing.  I think that will still require some version of jumpdest analysis be done. JUMPDEST does makes it easier to break code into basic blocks with a simple one-pass algorithm.  My intent is that every JUMP* instruction has at least one entry in the jumptable.  And yes, there needs to be exactly one vtraptable destination for each JUMP*, and at most one vjumptable destination for every JUMP*.  Your algorithm code doesn\u2019t seem to check all potential destinations of tabulated jumps, did you intend to support switch-like control flow with this at all?  Yes.  Switches, virtual functions, and function pointers should all be handled via this mechanism. Brooke and I are working on the algorithm, will be sure we get this right, thanks. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.809147374364766
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "13",
                    "likes": "0",
                    "time": "10/11/2021-12:39:19",
                    "content": "Just an observation for myself to not forget, what \u201cconstant stack depth rule\u201d would imply. I don\u2019t know if this would be a concern, but it does change what is possible to do in EVM. So this kind of code will be forbidden with it: for (i = 0; i < 3; ++i)   push(x); for (i = 0; i < 3; ++i)   pop()  and if (flag) {   push(x)   push(y) } else    push(z) ... if (flag) {   pop()   pop() } else    pop()  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely negative feedback on proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 8.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "14",
                    "likes": "0",
                    "time": "11/11/2021-22:43:15",
                    "content": "Yes, those would be forbidden.  That is the price of detecting underflows.  It\u2019s possible to generate use cases for this \u2013 like subroutines that take or return variable numbers of arguments \u2013 but those can be handled in memory as well. I\u2019m pretty sure the JVM and Wasm have this restriction as well. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "15",
                    "likes": "0",
                    "time": "04/02/2022-13:10:06",
                    "content": "I\u2019m trying to understand the algorithm again, and here\u2019s my current confusion: data stack contains some valid values from PUSH and some INVALID from other instructions, which are supposed to not matter. When we get to case JUMP branch it gets jumpdest from the stack, and then it might be INVALID . I guess your intention is to guarantee that all destinations of dynamic jumps come from previous PUSHes, but this is never checked by an algorithm. (Also I think case JUMP is missing pc = jumpdest) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely negative feedback on proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.508333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "16",
                    "likes": "0",
                    "time": "04/02/2022-13:12:53",
                    "content": "Ah well I guess valid_jumpdest(jumpdest) is supposed to return false for INVALID, this makes sense now, I didn\u2019t get this intention at first. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "17",
                    "likes": "0",
                    "time": "04/02/2022-13:21:58",
                    "content": "Another question: say we want to pass arguments to a subroutine, so we push them and then execute RJUMPSUB. If called subroutine tries to access these arguments, wouldn\u2019t algorithm consider this an underflow? (I think maybe it would because RJUMPSUB does bp = sp, and then any pop will move sp below bp and this is checked for each instruction) Actually this applies not only to subroutines, but to conditional jumps, too. I\u2019m confused whether such code would be valid at all: push(1) if (flag)   pop() else   pop() ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely negative feedback on proposal.",
                        "3rd party asking questions about proposal."
                    ],
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "18",
                    "likes": "0",
                    "time": "04/02/2022-13:53:08",
                    "content": "Also confused about what is used_items. Is it maximum stack height for entire path? (this is what comment says about return value of validate_path). If this is its meaning, shouldn\u2019t it do for each instruction used_items = max(used_items, used_items + added_items(pc) - removed_items(pc) ? Also then sp += used_items doesn\u2019t look correct for each instruction, it would add max to sp on each iteration\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "19",
                    "likes": "0",
                    "time": "04/02/2022-18:02:07",
                    "content": "Thanks for looking at this in detail, Andrei, @gumb0.  Rather than try to answer here and now I\u2019ll go back to the code and fix any mistakes first.  The problems you point out look like bugs in the validator, rather than conditions that can\u2019t actually be validated.  The algorithm is subtle, and I\u2019ll try to explain it better as I go. If we decided to just deprecate JUMP it would be a simpler proposal and algorithm. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.513888888888889
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "20",
                    "likes": "1",
                    "time": "04/02/2022-20:41:18",
                    "content": "See also I fixed some minor typos in https://github.com/ethereum/EIPs/pull/4769 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "21",
                    "likes": "0",
                    "time": "04/02/2022-22:09:12",
                    "content": "@gumb0 I\u2019ve merged your changes and the changes I had in progress, and I think we have the algorithm close to correct, thanks.  At your leisure, you can take a look if you want. (And I suppose that at some point the code should be ported to Python.) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 6.0
                }
            ]
        }
    ],
    "group_index": "1430"
}