{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/crypto-collectives-membership-and-role-management/3688",
            "title": "Crypto collectives: membership and role management ",
            "index": 3688,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/rumkin",
                    "index": "1",
                    "likes": "1",
                    "time": "08/10/2019-22:42:32",
                    "content": "This is a proposal draft. For crypto communities/organizations. Problem  Each time new member get into the organization or get out of it, someone need to grant/revoke all accesses to the new member. Sometimes new member couldn\u2019t receive required permissions or preserve access to organization infrastructure and continue to receive corporate mails/bills/other sensitive information. Also when this member change a role the process should be run again. This is really insecure and very problematic issue. Today all services around the globe couldn\u2019t determine wether the user has permissions to create account for the specified brand or not. There is no such data layer which can join company ownership data with any database to provide membership/ownership guaranties.  Solution Create a contract which can manage team members and their roles. Changes from the contract could be read by another contracts or external software to define/resolve access permissions. For example it could be used with ENS domain. This will allow user with role developer to have permissions to deploy the website, merge PRs, close Issues, etc. and owner to create new social network accounts for this host. Requirements  Role could be added and removed. Role could be suspended and activated. Role could be renamed. Roles count is uint256. Members could have several roles in the same time for example \u2018developer\u2019 and \u2018sysadmin\u2019 or \u2018designer\u2019 and \u2018photographer\u2019. Member could be suspended and activated. Contract should emit events for:  membership granting/revoking, members role granting/revoking, role adding/removing, role suspension/activation.   Role granting/revoking process could have different implementations: authoritative, votable, hierarchical.  Contract interface contract ITeam {     // Role management     addRole(string name) returns(uint);     getRoleId(string name) return(uint);     getRoleName(uint roleId) returns(string);     countRoles(address member);     getRoleByIndex(uint index);     disableRole(uint roleId) returns(bool);     enableRole(uint roleId) returns(bool);          // Membership menagement     setMemberRole(address member, uint roleId) returns(bool);     hasMemberRole(address member, uint roleId) returns(bool);     removeMemberRole(address member, uint roleId) returns(bool);     removeAllMemberRoles(address member);     countMemberRoles(address member);     getMemberRoleByIndex(uint index);     disableMember(address member) returns(bool);     enableMember(address member) returns(bool); }  Unresolved questions/probable solutions  There could be a \u201cstandard\u201d roles. To be unified for all solutions. There should be a way to avoid role names collision for upgradeability and security issues.  Example I\u2019ve realized such contract support in a twitter a-like text-only append log web app to manage collective accounts or groups. Thus it became possible to hire content managers without fear of access loss, buy/sell membership, create earning communities. ",
                    "links": [],
                    "GPT-summary": "The post is a proposal draft for a contract that can manage team members and their roles in crypto communities/organizations. The proposal explains the problem of granting/revoking accesses to new members and the solution of creating a contract to manage team members and their roles. The post also includes the requirements and an example of how the contract can be used. The post invites feedback and collaboration on the proposal.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.188552188552189
                }
            ]
        }
    ],
    "group_index": "933"
}