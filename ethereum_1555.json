{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-4521-erc-721-erc-20-compatible-transfer/7903",
            "title": "EIP-4521: ERC-721 / ERC-20-compatible transfer ",
            "index": 7903,
            "category": [
                "Tokens"
            ],
            "tags": [
                "token",
                "nft"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/z0r0z",
                    "index": "1",
                    "likes": "1",
                    "time": "05/01/2022-07:58:33",
                    "content": "The goals of EIP-4521 are modest but important for Ethereum users. Namely, it recommends a transfer() function for ERC-721 \u2018NFTs\u2019 in order to achieve backwards compatibility with ERC-20 tokens. Currently, ERC-721 only supports transferFrom() and safeTransferFrom(), and in the event that an NFT is accidentally sent to a contract that only expects ERC-20, it will be locked and unable to be transferred out again. Further, it is a convenience to smart contract developers to be able to write their contracts in the ERC-20 interface and yet have the ability to manage NFTs at same time without the need to import independent logic. Thus, EIP-4521 suggests a basic extension that allows tokens to work better with user apps, like wallets, and developers who want simpler code to handle a variety of assets, by placing tokenId into the typical transfer function: function transfer(address to, uint256 tokenId) public returns (bool success) { ... ) ",
                    "links": [],
                    "GPT-summary": "The post explains the goals of EIP-4521, which is to recommend a transfer() function for ERC-721 'NFTs' to achieve backwards compatibility with ERC-20 tokens. The proposal aims to make it easier for smart contract developers to manage NFTs and other assets at the same time without the need to import independent logic. The post also suggests a basic extension that allows tokens to work better with user apps, like wallets. The post does not contain any advertising or collaboration requests.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.4211309523809526
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "2",
                    "likes": "0",
                    "time": "02/03/2022-15:59:46",
                    "content": "Nice. I see this makes ERC721 contracts more interoperable with software that works with the ERC20 standard. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ashhanai",
                    "index": "3",
                    "likes": "0",
                    "time": "18/04/2022-13:21:23",
                    "content": "Can you help me understand this EIP better and provide an example where same logic can be applied to fungible and non-fungible tokens in a way that amount and id are interchangeable? Even though the transfer function will not fail, I see a bunch of use cases where contract handles some kind of logic around token amount, which cannot be substituted by id. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.6875
                }
            ]
        }
    ],
    "group_index": "1555"
}