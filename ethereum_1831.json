{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5289-discussion-notary-interface/9980",
            "title": "EIP-5289 Discussion: Notary Interface ",
            "index": 9980,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "1",
                    "likes": "0",
                    "time": "18/07/2022-14:49:43",
                    "content": "  github.com/ethereum/EIPs         PR-5289: Ethereum Notary Interface   ethereum:master \u2190 Pandapip1:eip-legal-smart-contracts            opened 02:45PM - 18 Jul 22 UTC               Pandapip1             +147 -0       Allows interoperability between Ethereum smart contracts and the real world.       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5289",
                        "https://github.com/Pandapip1",
                        "https://github.com/ethereum/EIPs/pull/5289/files"
                    ],
                    "GPT-summary": "The post is an explanation of the EIP-5289 proposal for the Ethereum Notary Interface, which aims to enable interoperability between Ethereum smart contracts and the real world. A third party has given constructive criticism of the proposal and asked questions about it.",
                    "GPT-proposal-categories": [
                        "Interoperability and Scalability",
                        "Smart contract updates",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.035714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "2",
                    "likes": "0",
                    "time": "19/07/2022-13:40:09",
                    "content": "NOTE: None of the authors is a lawyer. If you are a lawyer and would like to contribute to this EIP, please contact Pandapip1 on Discord (Pandapip1#8943). ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "3",
                    "likes": "0",
                    "time": "20/07/2022-16:51:36",
                    "content": "I would strongly recommend against using a PDF for the document. They are insanely complex, and incorrectly implementing a renderer in the wallet could mean inconsistencies between what two users see and sign. I\u2019d suggest picking a very minimal markdown flavour and use that instead. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.590833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "4",
                    "likes": "0",
                    "time": "20/07/2022-16:56:45",
                    "content": "Hm, why create a registry contract for documents, instead of an interface implemented by, for example, the NFT contract itself? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "5",
                    "likes": "0",
                    "time": "20/07/2022-16:59:51",
                    "content": "Even more hm, what if I created a malicious smart contract that reused the same document ID as a target contract. A user could agree to the document while interacting with the malicious smart contract, convincing the target contract I had signed for it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.428571428571428
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "6",
                    "likes": "1",
                    "time": "20/07/2022-17:48:48",
                    "content": "    SamWilsn:  I would strongly recommend against using a PDF for the document. They are insanely complex, and incorrectly implementing a renderer in the wallet could mean inconsistencies between what two users see and sign.   How about markdown with a Jekyll header (\u00e0 la EIP)? EDIT: Regular markdown is probably better. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.184027777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "7",
                    "likes": "0",
                    "time": "20/07/2022-17:50:40",
                    "content": "    SamWilsn:  Hm, why create a registry contract for documents, instead of an interface implemented by, for example, the NFT contract itself?   One word: Gas. It\u2019s cheaper to have a registry for contracts that stores all the contracts and then have the function revert if necessary. I suggest that wallets simulate the transaction and if it would fail, prompt the user to sign the necessary documents before submitting the TX to the mempool. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 4.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "8",
                    "likes": "0",
                    "time": "20/07/2022-17:51:44",
                    "content": "    SamWilsn:  Even more hm, what if I created a malicious smart contract that reused the same document ID as a target contract. A user could agree to the document while interacting with the malicious smart contract, convincing the target contract I had signed for it.   Not possible. The revert reason references both the document ID and the library address so that there is no ambiguity as to what needs to be signed. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.190476190476191
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "9",
                    "likes": "0",
                    "time": "20/07/2022-18:23:17",
                    "content": "    Pandapip1:  Not possible. The revert reason references both the document ID and the library address so that there is no ambiguity as to what needs to be signed.   Not sure I follow. Here\u2019s the scenario I was imagining:   ValuableNftContract deployed, using a standard document registry. Document 0x01 is created on the same registry. Attacker deploys FunnyNftContract using the same document registry, and puts up a fancy web UI. Victim sees FunnyNftContract and goes to mint one.  Attacker\u2019s fancy web UI displays document 0x01 and requests a signature (possibly using eth_sign, which is still supported by MetaMask.) FunnyNftContract reverts with the magic message. User signs the document, expecting it to only apply to FunnyNftContract, and it is submitted on chain. Now if the user interacts with ValuableNftContract, it will believe the user has signed document 0x01, and will never revert to request the signature.  I think the easiest solution would be to include the requesting contract in the key, something like: interface IContractLibrary is IERC165 {     // ...     event DocumentSigned(address indexed signer, address indexed counterparty, uint48 indexed documentId);     function isDocumentSigned(address user, address counterparty, uint48 documentId) public view returns (boolean signed);     function documentSignedAt(address user, address counterparty, uint48 documentId) public view returns (uint64 timestamp);     function signDocument(address signer, address counterparty, uint48 documentId, bytes memory signature) public; }   On another note, why have both isDocumentSigned and documentSignedAt? Couldn\u2019t you just catch the revert in documentSignedAt to tell? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.067307692307692
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "10",
                    "likes": "0",
                    "time": "20/07/2022-18:26:41",
                    "content": "    Pandapip1:  It\u2019s cheaper to have a registry for contracts that stores all the contracts and then have the function revert if necessary.   Is it? Don\u2019t you have the overhead for a call into another contract for every operation? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "11",
                    "likes": "0",
                    "time": "20/07/2022-19:04:01",
                    "content": "    SamWilsn:  Is it? Don\u2019t you have the overhead for a call into another contract for every operation?   You have a one-time overhead for checking if the user has signed. Then, once the user has, the value should be cached. Also, there is no rule that says the library and the contract have to be different. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "12",
                    "likes": "0",
                    "time": "20/07/2022-19:13:29",
                    "content": "    SamWilsn:    ValuableNftContract deployed, using a standard document registry. Document 0x01 is created on the same registry. Attacker deploys FunnyNftContract using the same document registry, and puts up a fancy web UI. Victim sees FunnyNftContract and goes to mint one.  Attacker\u2019s fancy web UI displays document 0x01 and requests a signature (possibly using eth_sign, which is still supported by MetaMask.) FunnyNftContract reverts with the magic message. User signs the document, expecting it to only apply to FunnyNftContract, and it is submitted on chain. Now if the user interacts with ValuableNftContract, it will believe the user has signed document 0x01, and will never revert to request the signature.    This is a feature, not a bug . Always make sure you know what you are signing! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 5.65625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "13",
                    "likes": "0",
                    "time": "20/07/2022-19:14:07",
                    "content": "    SamWilsn:  On another note, why have both isDocumentSigned and documentSignedAt? Couldn\u2019t you just catch the revert in documentSignedAt to tell?   I\u2019ll probably just add it as a second return value of isDocumentSigned ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "14",
                    "likes": "0",
                    "time": "20/07/2022-19:26:40",
                    "content": "    Pandapip1:  This is a feature, not a bug . Always make sure you know what you are signing!   That\u2019s the thing, you can know exactly what you\u2019re signing (the document id), and it\u2019ll apply to all contracts that use the same registry. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.458333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "15",
                    "likes": "0",
                    "time": "20/07/2022-19:28:16",
                    "content": "    SamWilsn:  That\u2019s the thing, you can know exactly what you\u2019re signing (the document id), and it\u2019ll apply to all contracts that use the same registry.   Again, I don\u2019t see the issue here. If there is ever a \u201cUniversal NFT Contract\u201d that could apply to all NFTs, then great! There\u2019s no need to make the user re-sign. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 7.083333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "16",
                    "likes": "0",
                    "time": "06/09/2022-01:41:45",
                    "content": "I don\u2019t have a good place to give feedback, hence adding here:  I don\u2019t think it\u2019s a good practice to include a full copy of Base 64 in the specification   it may violate copyright laws because author is copying a piece of work that was originally granted with condition, but then release it in another place in-violation of the condition, such as per   subject only to the restriction that no Contributor has the right to represent any document as an RFC, or equivalent of an RFC, if it is not a full and complete copy or translation of the published RFC.  Because this piece of Base 64 spec was not a full copy   It\u2019s error prone for authors to make copy of references especially when it\u2019s a code table. Such error if incurred can lead to significant backward difficulty.   I suggest directly put the interface solidity code into the markdown file, as opposed to reference them in the asset file.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.2556022408963585
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/omnus",
                    "index": "17",
                    "likes": "0",
                    "time": "06/09/2022-08:25:24",
                    "content": "Very interesting, would be great to see this in use. From the look of things the document set would be contract wide? Any thoughts on expanding this to allow token specific docs? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "18",
                    "likes": "0",
                    "time": "06/09/2022-12:59:26",
                    "content": "    xinbenlv:  I don\u2019t have a good place to give feedback, hence adding here:   This is definitely the right place.     xinbenlv:   I don\u2019t think it\u2019s a good practice to include a full copy of Base 64 in the specification    I\u2019m working on another proposal that will supersede base64 for this.     xinbenlv:   I suggest directly put the interface solidity code into the markdown file, as opposed to reference them in the asset file.    Agreed. This will just be while this is in draft and while this is initially in review. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.834821428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "19",
                    "likes": "0",
                    "time": "06/09/2022-12:59:59",
                    "content": "    omnus:  From the look of things the document set would be contract wide? Any thoughts on expanding this to allow token specific docs?   Not sure what you mean. Mind elaborating? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 4.171875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/omnus",
                    "index": "20",
                    "likes": "0",
                    "time": "06/09/2022-22:30:01",
                    "content": "    Pandapip1:  Pandapip1#8943   Hi @Pandapip1, I have an amazingly talented lawyer friend who also understands crypto. I\u2019d like to introduce you. Have sent you a friend request on discord. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None"
                    ],
                    "Sentiment": 8.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/omnus",
                    "index": "21",
                    "likes": "0",
                    "time": "08/09/2022-22:31:59",
                    "content": "I was wondering if there was a use case for saying, for example, documents 1,2 and 3 are associated with all tokens in the collection, and document 4 was a specific agreement for tokenId 1129, and document 5 for tokenId 2971, etc. This could then support specific legal arrangements that individual token holders have made. I have something along those kind of lines in the delegation extension built on top of EIP-4886, though not with the sophistication of your solution (I just have the ability to hold a URI). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.083333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "22",
                    "likes": "1",
                    "time": "09/09/2022-15:11:31",
                    "content": "    omnus:  I was wondering if there was a use case for saying, for example, documents 1,2 and 3 are associated with all tokens in the collection, and document 4 was a specific agreement for tokenId 1129, and document 5 for tokenId 2971, etc.   Yes, there is! You can have it revert only when the token ID is a specific number if you want. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DePONotary",
                    "index": "23",
                    "likes": "0",
                    "time": "18/10/2022-15:45:23",
                    "content": "    Pandapip1:  NOTE: None of the authors is a lawyer. If you are a lawyer and would like to contribute to this EIP, please contact Pandapip1 on Discord   Hey, guys, I\u2019m DePONotary founder of an eNotarization StartUp, Software Developer, and US eNotary Public, and I can only provide a personal interpretation of my experience as such because I AM NOT AN ATTORNEY LICENSED TO PRACTICE LAW IN THE US  AND MAY NOT GIVE LEGAL ADVICE OR ACCEPT FEES FOR LEGAL ADVICE I am going to endure the task of going through the entire thread and commenting as I make myself through the lot and if any of my comments receive a response, I will respond after I have finished the thread. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.285714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DePONotary",
                    "index": "24",
                    "likes": "0",
                    "time": "19/10/2022-14:35:55",
                    "content": "    SamWilsn:  I would strongly recommend against using a PDF for the document. They are insanely complex, and incorrectly implementing a renderer in the wallet could mean inconsistencies between what two users see and sign.   What exactly makes the Portable Document Format so complex that is so hard to implement a rendering? is it the tampered-evident XML wrap? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.556547619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "25",
                    "likes": "0",
                    "time": "21/10/2022-17:28:10",
                    "content": "    DePONotary:  What exactly makes the Portable Document Format so complex that is so hard to implement a rendering? is it the tampered-evident XML wrap?   For one, the most recent standard is managed by ISO and is non-free to access. Second, PDFs can include JavaScript, fillable forms, a multitude of animation and image formats, fonts, and probably a ton of other features I\u2019m neglecting to mention. I would advocate for something simpler and more open as the basis for legal documents in this space. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Bruh",
                    "index": "26",
                    "likes": "0",
                    "time": "15/03/2023-09:34:24",
                    "content": "Hello everyone, I\u2019m an IT student and I\u2019m trying implementing this EIP. I found an issue while compiling the code, as the function documentSignedAt() returns the timestamp value in a uint64 variable. In the contract, i tried to store data of the Documents in this struct struct Document {         address signer;                 uint64 timestamp;         string ipfsuri;     }  The field timestamp is initialized with bock.timestamp every time an address signs a document, however block.timestamp is a uint256-type, therefore the compiler rejects casting from uint256 to uint64. Is this made on purpose? Am i doing something wrong? Thank you everyone ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 2.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "27",
                    "likes": "0",
                    "time": "15/03/2023-13:28:47",
                    "content": "    Bruh:  Is this made on purpose?   Yes, to save storage. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1831"
}