{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-2770-meta-transactions-forwarder-contract/5391",
            "title": "ERC-2770 Meta-Transactions Forwarder Contract ",
            "index": 5391,
            "category": [],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/alex-forshtat-tbk",
                    "index": "1",
                    "likes": "0",
                    "time": "21/02/2021-18:43:11",
                    "content": "Starting a discussions topic for ERC-2770 ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "2",
                    "likes": "0",
                    "time": "22/02/2021-09:20:16",
                    "content": "Note: I\u2019ll be using this implementation as a reference for my discussion. I really don\u2019t understand the whole point of preparing the EIP712 structure for extra content. This increases the complexity of the contract, and amount of data that has to be passed (domain separator) \u2026 which has a gas cost. Adding support for typesHashes is not a security issue, but it doesn\u2019t bring anything to the table since the additional fields are disregarded. Line 63 doesn\u2019t change its behavior depending on the presence of suffixData. Why pay the price of verifying it is signed properly and then not use it ? If the idea is that the interface is future proof, so that future implemntation could use the same interface in a way that make use of this data, I honestly think you are going in the wrong direction. My personal opinion is that there should be only ONE common (singleton) forwarder, at the same address on all networks, for this to even hope to be successful. Having multiple forwarder that should all be whitelisted by all apps causes governance issues, and will never happen. Also, if you state that the forwarder is going to be changed, people will just wait for it to be final before adopting it. Why should I make my contract compatible with the current forwarder if its going to be deprecated anyway ? I\u2019d personally drop this extra-data & multiple typeHashes nonsense in favor of features that would actually improve the forwarder to a point where it meets most usecase and can be envisionned as somehow futur-proof. Out of order execution of meta-tx is IMO one of such features. If I remeber correctly, @wighawag proposed a mechanism where the the 256bits nonce was separated into two 128bits integer, one being a \u201csub-nonce\u201d identifier, and the other one being the value for this subnonce. Keeping le leftmost 128bits to 0 would replicate the current behavior, and setting these leftmost 128bits to any value would allow to create independent timelines where meta-tx can be ordered independently of the main (and of any other) timeline. This is how it could look like ",
                    "links": [
                        "https://github.com/Amxx/openzeppelin-contracts/blob/feature/OutOfOrderForwarder/contracts/metatx/OutOfOrderForwarder.sol"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.2440476190476195
                }
            ]
        }
    ],
    "group_index": "1236"
}