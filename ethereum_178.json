{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5805-voting-with-delegation/11407",
            "title": "EIP-5805 Voting with delegation ",
            "index": 11407,
            "category": [
                "EIPs"
            ],
            "tags": [
                "erc",
                "governance-ercs"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "1",
                    "likes": "2",
                    "time": "20/10/2022-12:01:31",
                    "content": "  github.com/ethereum/EIPs         Add EIP-5805: Voting with delegation   ethereum:master \u2190 Amxx:vote_with_delegation              opened 10:30AM - 20 Oct 22 UTC                 Amxx               +406 -0           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5805",
                        "https://github.com/Amxx",
                        "https://github.com/ethereum/EIPs/pull/5805/files",
                        "https://ethereum-magicians.org/t/eip-5875-opcode-for-tx-number-in-a-block/11612"
                    ],
                    "GPT-summary": "The post is an announcement of a new Ethereum Improvement Proposal (EIP) called \"Voting with delegation\". The author is explaining the proposal and has opened it for discussion and feedback. A third party has given entirely positive feedback on the proposal, while another third party has given constructive criticism. The author is also open to collaboration and is advertising the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Community and engagement",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/crazyrabbitLTC",
                    "index": "2",
                    "likes": "1",
                    "time": "09/01/2023-21:06:11",
                    "content": "Excited to see this get in! Very important for onchain DAOs! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.796875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "3",
                    "likes": "1",
                    "time": "12/01/2023-19:37:16",
                    "content": "The current version of the EIP doesn\u2019t give sufficient information to determine what kind of clock is being used. clock() returns the current timepoint, but more than that is necessary for basic tasks like measuring spans of time, which users have to do when configuring Governor parameters like voting period. Two examples that could be useful to consider are timestamps with lower granularity: function clock1() returns (uint) {     return (block.timestamp / 1000) * 1000; }  function clock2() returns (uint) {     return block.timestamp / 1000; }  The first one is interesting because every 1000 seconds it would appear equivalent to block.timestamp, but it isn\u2019t exactly that and in some cases the difference might lead to errors. The second one doesn\u2019t present the same potential for confusion, but a user or an application wouldn\u2019t know (unless they inspect the source code) how to measure a span of time in this clock. The EIP should define a standard way to identify the clock function. This is difficult because we are allowing arbitrary monotonic functions, but I think we will agree that the user needs to know more properties about the clock than that. The simplest thing would be to add a function returning an enum with options a) block number, b) timestamp, and c) other. The two examples above would be classified as \u201cother\u201d, so if we think it\u2019s valuable to express those we will need something more complex.  Another thing that I would consider is defining timepoints as 64 bit values, and making uint64 the return type of clock(). This would allow timepoints to be be packed in storage, otherwise we can make no assumptions about their size. Timepoints as large as uint256 have way too much granularity that will never be needed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.581101190476191
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "4",
                    "likes": "0",
                    "time": "12/01/2023-19:52:49",
                    "content": "I\u2019d rather do none of these /1000 conversions and just return raw value and leaving the conversion to caller. function clock() returns (uint) {     return block.timestamp; }   In addition, from a standardization scoping perspective, I think the representation of time shall be solved in a separate EIP, something like  EIP-XXX Time Scheme  Specification enum TimeSchemeOption {   blocknum = 0;   timestamp = 1; };  interface ERCTimeScheme {   function defaultTimeScheme() external pure returns(TimeSchemeOption); }   Ref Impl contract Foo is ERCTimeScheme, ERC1202, ERC5805, ERC5732 {     function defaultTimeScheme() external pure returns(TimeSchemeOption) {       return TimeSchemeOption.blocknum;    } }  This help ensuring whenever a time is being used, the scheme is acquirable and shall be consistent across different functions. Complying contracts of EIP-1202 probably need to align with the same sense of time too. The EIP-5007: Time NFT, EIP-721 Time Extension however choose to use int64 for unix stamp. (posted as EIP-XXX Time Scheme to see if there is interest to consolidate) ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5007",
                        "https://ethereum-magicians.org/t/eip-xxx-time-scheme/12545"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.279876373626373
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "5",
                    "likes": "1",
                    "time": "17/01/2023-02:30:04",
                    "content": "    xinbenlv:  I\u2019d rather do none of these /1000 conversions and just return raw value and leaving the conversion to caller.   The EIP as currently written allows arbitrary monotic functions for the clock, so I was giving examples that are valid according to the spec. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party is advertising proposal"
                    ],
                    "Sentiment": 4.448717948717949
                }
            ]
        }
    ],
    "group_index": "178"
}