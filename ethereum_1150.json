{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-20-erc-20-can-token-transfers-be-made-more-gas-efficient/4623",
            "title": "EIP-20 (ERC-20): Can token transfers be made more gas efficient? ",
            "index": 4623,
            "category": [
                "EIPs"
            ],
            "tags": [
                "erc-20"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/cmango",
                    "index": "1",
                    "likes": "0",
                    "time": "16/09/2020-10:36:12",
                    "content": "A normal ERC-20 token transfer transaction takes about 51,000 gas. The function that does the transfer is this one (this is the OpenZeppelin ERC-20 implementation): function _transfer(address sender, address recipient, uint256 amount) internal virtual {     require(sender != address(0), \"ERC20: transfer from the zero address\");     require(recipient != address(0), \"ERC20: transfer to the zero address\");      _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");     _balances[recipient] = _balances[recipient].add(amount);     emit Transfer(sender, recipient, amount); }  What I noticed is that if the recipient token change line is commented out, the gas cost comes down very significantly, to about 30,000 gas: // _balances[recipient] = _balances[recipient].add(amount);  It seems the problem is that we have to go through the same _balances hashmap twice (for sender and for recipient). Could this be somehow improved so that both sender\u2019s and recipient\u2019s balances could be updated in one iteration? ",
                    "links": [],
                    "GPT-summary": "The author of the post is explaining the ERC-20 token transfer function and proposing a way to make it more gas efficient. The post also includes a question about whether the function can be improved to update both the sender's and recipient's balances in one iteration. A 3rd party could provide constructive criticism or ask further questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Token economics",
                        "Smart contract updates",
                        "Interoperability and Scalability"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.818287037037038
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cmango",
                    "index": "2",
                    "likes": "0",
                    "time": "16/09/2020-11:06:50",
                    "content": "I see in this StackExchange answer that mappings in Solidity are not really hash tables (there are no iterations through mappings). So perhaps iterations are not the issue for the high gas usage here\u2026 Looks like there\u2019s no way around this. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.15
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/qizhou",
                    "index": "3",
                    "likes": "0",
                    "time": "26/10/2020-17:55:35",
                    "content": "The underlying implementation of contract storage is a Merkle Patrica Tree, which is expensive for read/write.  Further, if you write a new entry into the tree (i.e., increasing balance from 0 to non-zero), EVM will charge 20,000 gas in EIP2200.  The cost can be even higher for _transferFrom, which is widely used by contract interactions with extra write to allowance map. Since the MPT access cost is so high, we are proposing an upgraded ETH without MPT, which could achieve at least 4-5x performance increase based on our experiments. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.778977272727273
                }
            ]
        }
    ],
    "group_index": "1150"
}