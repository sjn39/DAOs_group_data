{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/types-of-resurrection-metadata-in-state-expiry/6607",
            "title": "Types of Resurrection Metadata in State Expiry ",
            "index": 6607,
            "category": [
                "Working Groups",
                "Ethereum 1.x Ring"
            ],
            "tags": [
                "state-expiry",
                "address-space"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "1",
                    "likes": "2",
                    "time": "05/07/2021-22:36:38",
                    "content": "Thanks to @adietrichs for reviewing this post. State expiry is the current preferred solution the state growth problem. For the purposes of this post, we\u2019ll think of state expiry as a mechanism that, at fixed intervals, expires the entire state trie. Storing previous periods is generally orthogonal to this post, as we\u2019re focusing on how to resurrect state that has been forgotten \u2013 regardless if n=0 or n=1. Here is a summary of a few proposed mechanisms:  Nothing Nothing is as straightforward as it sounds. Simply expire state and then require users to provide witnesses for state elements they use that are not in the active state. Note that elements that are read or written to that have not been initialized in the active state must have either an exclusion proofs showing they haven\u2019t been initialized at any point in the past or a proof showing a certain value in time and then exclusion proofs showing it hasn\u2019t changed since then.  Pros   really easy   Cons  exclusion proof sizes grow linearly with the number of periods, making it extraordinarily expensive to initialize state elements kicks the address-collision problem down the road   Period-Aware Addresses (PWA) The main problem with having no metadata is that initializing new state elements is really expensive. Period-aware addresses give the protocol a mechanism to avoid address collisions upon initialization of new elements. The discriminator establishes a lower bound on what period an account could have existed. There are currently two potential approaches to having PWAs:  Address Space Extension (ASE)  Vitalik\u2019s original writeup Ipsilon writeup  tldr; allow legacy 20 byte addresses and 32 byte ASE prefixed addresses. Create a context variable in the EVM to modify the behavior of opcodes that deal with addresses depending whether they\u2019re executing in legacy or ASE mode.  Pros  new state can be initialized without proofs extendable to hold other metadata solves the address-collision problem   Cons  requires significant EVM changes creates two different EVM contexts, legacy mode and extended mode translation map will grow unbounded (linear in relation to the number long addresses used in legacy context), and can\u2019t be expired seems like it can be expired, with a small risk of a collision after expiration confusing UX, now potentially 3 types of addresses a user\u2019s funds could be stored under (short, long, compressed) not all solidity compiled contracts mask addresses to 160 bits, so it\u2019s possible some contracts have dirty upper bits in addresses  (more complete analysis by Ipsilon)  Extension-free PWA  Vitalik\u2019s original writeup  tldr; find an unused 4-byte prefix and disallow new contracts / addresses from being created with it under legacy rules. Legacy contracts execute in legacy mode, creating new addresses using legacy rules. New contracts execute in PWA mode, creating new contracts where the first 4-bytes are the pre-selected prefix, bytes 5-6 are the current period, and bytes 7-20 are the address as usual.  Pros  new state can be initialized without proofs relatively straightforward EVM changes doesn\u2019t require translation table, users only have one address to consider doesn\u2019t break existing tooling (although they may have display the xor\u2019d address instead of the preimage?)   Cons  makes address-collisions very practical, no more counterfactual contracts not an eloquent solution, may make address extension harder in the future   Period Metadata  Trie Metadata I don\u2019t think this idea has been formally defined (other than in @adietrichs\u2019 head), but roughly the idea is to add a new field to the account object in the state trie denoting its creation epoch. This solves the issue of new storage initialization being very expensive due to exclusion proofs (especially assuming contracts are written to deploy new child contracts per period), but does not improve the \u201cdo nothing\u201d case for creating new accounts.  Pros  new storage elements can be initialized without proofs if a contract is fresh pretty simple extendable to hold other metadata doesn\u2019t require unbounded state growth for external mapping doesn\u2019t break existing tooling   Cons  kicks the address-collision problem down the road creating new accounts is expensive, need exclusion proof from period 0 that the account never existed   External Period Registry Also not formally defined, but the broad strokes are we introduce a new registry trie which stores state expiry metadata. The registry would not be expirable and would store the period that the contract was created. Additional information could be stored, like total number of storage elements. Any time the number of active storage elements equals the number of total storage elements for the contract, the contract period could be promoted to the current period. A scheme like this could probably also be implemented for the EWA proposals with a state trie modification.  Pros  new state can be initialized without proofs extendable to hold other metadata doesn\u2019t require translation table, users only have one address to consider doesn\u2019t break existing tooling   Cons  new trie structure grows unbounded (linear in relation to the number of addresses in use) kicks the address-collision problem down the road  ",
                    "links": [
                        "https://hackmd.io/@vbuterin/state_size_management",
                        "https://eips.ethereum.org/EIPS/eip-3607#motivation",
                        "https://ethereum-magicians.org/t/increasing-address-size-from-20-to-32-bytes/5485",
                        "https://notes.ethereum.org/@ipsilon/address-space-extension-exploration",
                        "https://notes.ethereum.org/@ipsilon/address-space-extension-issues",
                        "https://ethereum-magicians.org/t/simple-non-address-length-extending-address-periods/6536",
                        "https://ethereum-magicians.org/t/thoughts-on-address-space-extension-ase/6779"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.048893626453868
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adietrichs",
                    "index": "2",
                    "likes": "1",
                    "time": "05/07/2021-22:48:43",
                    "content": "While I personally really hope we can make one of the PWA approaches work (ideally ASE), I think the trie metadata alternative might not actually be terrible, especially if combined with some light version of the period registry. Rough idea:  For contracts, store creation period among (expirable) metadata such as nonce and balance (this is what you call trie metadata). This would solve state expiry for contract storage. Keep some minimal information about previously created accounts in state. Worst case that would be a complete tree of touched addressses (but without any attached data, you only need the address itself). Ideally it could be more efficient, e.g. prune dense areas & accept that those from now on always require exclusion proofs. Maybe do something clever with bloom filters (I know, attackable, but maybe they can still be made to work in this context), or something similar. Basically, accept some minimal extra in-state information to make the exclusion proof situation for accounts bearable.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.611111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "3",
                    "likes": "1",
                    "time": "14/07/2021-22:44:35",
                    "content": "    matt:  External Period Registry Also not formally defined, but the broad strokes are we introduce a new registry trie which stores state expiry metadata. The registry would not be expirable and would store the period that the contract was created. Additional information could be stored, like total number of storage elements   Is this any better than just keeping a reduced version of the account alive? As part of the rent discussions in 2018 such options were discussed. A version of that is described in EIP-1682:  When an account\u2019s balance is insufficient to pay rent, the account becomes inactive. Its storage and contract code are removed. Inactive accounts cannot be interacted with, i.e. it behaves as if it has no contract code. Inactive accounts can be restored by re-uploading their storage. To restore an inactive account A, a new account B is created with arbitrary code and its storage modified with SSTORE operations until it matches the storage root of A. Account B can restore A through the RESTORETO opcode. This means the cost of restoring an account is equivalent to recreating it via successive SSTORE operations.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.464015151515151
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "4",
                    "likes": "0",
                    "time": "19/07/2021-08:00:58",
                    "content": "    axic:  Is this any better than just keeping a reduced version of the account alive?   I think to take advantage of state expiry (expiring the entire trie) you can\u2019t keep a reduced version in place, you would need an external structure to store the mapping whether the account had ever been created. Otherwise under the current state expiry mechanism, the metadata would expire and you would be back to needing exclusion proofs from genesis. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "5",
                    "likes": "0",
                    "time": "20/07/2021-18:01:49",
                    "content": "I think at least having this as an option in your list makes sense, because  External registry.   Pro: Potentially simpler state expiry rules Con: Yet another data structure to maintain; Data duplication (the address); Potentially needs expiration too?   Keeping some metadata in the main tree.   Pro: No secondary tree to maintain; No data duplication Con: State expiry rules need to be modified to keep some of the account alive  Or maybe I am misunderstanding it, and the external registry would never expire, but be append only? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.064814814814815
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "6",
                    "likes": "1",
                    "time": "24/07/2021-16:29:32",
                    "content": "    axic:  Or maybe I am misunderstanding it, and the external registry would never expire, but be append only?   I don\u2019t I made it very clear, but yes the external registry would never expire. This is what I mean by \u201cgrows unbounded\u201d in the cons. \u2013 There are benefits of keeping metadata in the state trie and there may be ways of combining different schemes together. In the specific case of EIP-1682, I don\u2019t think it can be classified as a type of state expiry as defined above. State elements are reduced when they become stale \u2013 IIUC there isn\u2019t a mechanism to remove entire portions of the trie at once. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.6587499999999995
                }
            ]
        }
    ],
    "group_index": "1381"
}