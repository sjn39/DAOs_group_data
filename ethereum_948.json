{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2348-validated-evm-contracts/3756",
            "title": "EIP-2348: Validated EVM Contracts ",
            "index": 3756,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm",
                "validation",
                "evm-evolution",
                "eip-2348"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "1",
                    "likes": "0",
                    "time": "04/11/2019-16:04:20",
                    "content": "Discussion topic for   github.com/ethereum/EIPs         Validated EVM Contracts   ethereum:master \u2190 shemnon:validated            opened 04:00PM - 04 Nov 19 UTC               shemnon             +228 -0           A set of contract markers and validation rules relating to those markers is proposed. These validation rules enable forwards compatible evolution of EVM contracts and provide some assurances to Ethereum clients allowing them to disable some runtime verification steps by moving these validations to the deployment phase. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/2348",
                        "https://github.com/shemnon",
                        "https://github.com/ethereum/EIPs/pull/2348/files",
                        "https://ethereum-magicians.org/t/ethereum-account-versioning/3508/13"
                    ],
                    "GPT-summary": "The post proposes a new Ethereum Improvement Proposal (EIP-2348) called Validated EVM Contracts. The proposal suggests a set of contract markers and validation rules that enable forwards compatible evolution of EVM contracts and provide some assurances to Ethereum clients. The post is explaining the proposal and asking for feedback. Additionally, a 3rd party is giving constructive criticism and asking questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MrChico",
                    "index": "2",
                    "likes": "0",
                    "time": "08/11/2019-17:51:42",
                    "content": "What confuses me about this EIP is that you seem to suggest having the two versioning schemes, 1702 and 1707 used in tandem. Why are you doing this? A simpler proposal would be to just say that this validation should apply to all accounts of (1702) version \u201c1\u201d, and not introduce any bytecode versioning header. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "3",
                    "likes": "0",
                    "time": "08/11/2019-18:09:11",
                    "content": "The reason is backwards compatibility. If we suddenly turn on 1702 and require all code to be validated suddenly contracts that could be submitted the block prior now fail to deploy. And such bad opcodes comes from widely used option in solidity (some of which may even be the default, I\u2019d have to research that). That\u2019s bad UX, we need to provide some sort of a means for a contract deployer to \u201copt in,\u201d and in time the tooling will default to opting in and provide options to opt out. We could just do the header (using  0xef  as the version header) that required validation at deployment time. But the impression I got is that other core developers would want a flag to indicate that validation has been/could have been performed other than just the content of the contract. So if we had to choose one it would be the 1707 variant. That preserves the ability of tooling to ease into the new requirements. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.039256198347108
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MrChico",
                    "index": "4",
                    "likes": "0",
                    "time": "12/11/2019-20:13:50",
                    "content": "I see. Another alternative (which seems preferable to me) would be to rely upon https://specs.that.world/44-vertxn/ and use another field of the transaction data to specify that such contracts are to be created. I don\u2019t think that versioning information has a place in the bytecode. Some people use bytecode to store data, and could inadvertently deploy contracts which matches the versioning header. https://medium.com/coinmonks/on-efficient-ethereum-storage-c76869591add ",
                    "links": [
                        "https://medium.com/coinmonks/on-efficient-ethereum-storage-c76869591add"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MrChico",
                    "index": "5",
                    "likes": "0",
                    "time": "12/11/2019-20:15:03",
                    "content": "Not that one necessarily want to support such crazy hacks, but it could indicate that putting the versioning header in the bytecode can have unintended consequences ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "6",
                    "likes": "2",
                    "time": "12/11/2019-20:45:29",
                    "content": "Adding another data field in the transaction has a very high level of resistance to overcome, all of the client tooling would need to change to support it. As for people using bytecode to store data, that is exactly the problem that this EIP is aiming to solve.  Without clear deliniation about what is code and what is data we can\u2019t make reasonable conclusions about the contract code.  Just because some contracts started abusing the contract data should not preclude us from using the field as intended and to curb that abuse. And I feel that the bytecode is a very good place for the versioning information.  The JVM, CIL, WebAssembly, and LLVM bitcode all use items like magic numbers for headers, in stream metadata, and explicit versioning in their data files.  This is in line with how modern VMs operate ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.691428571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "7",
                    "likes": "0",
                    "time": "09/01/2020-16:27:51",
                    "content": "Looping back on this after a long Christmas break. One concern on All Core Devs was that jump validation could cause a DOS attach based on memory use during validation from a large (8Mib) contract.  There are two situations: one where the contract is loaded into an account and when executed from a transaction.  For account contracts the size has been limited since Spurious Dragon to 24Kib, so the memory bloat is limited to a reasonable size.  For a TX the limit is the intrinsic size cost of a transaction.  at 4 gas per zero byte the size is brought up to no more than 2.4Mib and for a non-trival contract the limit is 16 gas per byte would be less than 611KiB.  Using a compact bitset the memory growth is 76KiB in non-pathological cases and 306KiB in pathological cases.  For account based contracts the increase memory needed is 3Kib.  As noted in the EiP there is sample code in Besu to do this analysis in one pass and one I believe would be one flip in Go (the APIs don\u2019t match up the same) - https://github.com/ethereum/EIPs/pull/2348#issuecomment-555116068. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.891534391534392
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "8",
                    "likes": "0",
                    "time": "09/01/2020-17:27:45",
                    "content": "Another concern is the interaction between validated and legacy EVM.  There are two orthogonal concerns that create four situations.  First is does the chain support validating code and the second is does the code expect to be validated. The first case is what we have today, neither the chain nor the compiled code expects to be validated.  This is the status quo. Next let\u2019s consider if the chain expects to validate contracts and all code is treated the same.  In this case a lot of contracts that previously were deployable will no longer be deployable because of metadata such as the swarm hash of the code that was appended to the bytecode in a code section that will never be executed.  Because it\u2019s not following the conventions marking non-executable code the contract is rejected.  This is bad, it would require all users to do a co-ordinated toolchain update of their build and deployment systems.  This is orders of magnitude larger and has more existential risk than an ordinary fork.  Consider that there are PDP-4 and Windows XP systems still in operation providing critical infrastructure to many businesses. To maintain community compatibility we need to provide, at least for a little time, a way to still deploy non-validated EVM.  The question is then how to mark when EVM code should be validated.  One alternative is to introduce a new opcode to create validated contracts.  This would keep the versioning information out of the stream of code.  Considering that there are proposals to fundamentally redefine opcodes, such as redefining the number of stack items consumed by CALL series operations.  Keeping the versioning information out of the stream of operations could make detecting EVM opcodes targeting this proposal could lead to execution confusion.  Broadening our view we need to consider that EVM is becoming an ecosystem to it\u2019s own.  Multiple hyperledger projects support EVM based contract execution.  Relying on an ethereum only way to identify the versioning would then result in these clients adopting different mechanisms to identify different versions of EVM code.  Based on this concern I feel in-stream versioning is superior and will result in less ecosystem confusion. Consider also that almost all other VM systems use a magic number header byte.  Java has 0xCAFEBABE, wasm has \u2018\u0000asm\u2019, and even LLVM, the state of the art, uses \u2018llvm\u2019 at the start of it\u2019s bytecode.  Hence a \u2018\u0000evm\u2019 or '\u00efevm` (0xef65766d) would align with current best practices. If a contract wants to be subject to validation (and gain access to future byte codes) it can compile itself as validated and use the header bytes.  Older EVM code can be oblivious to this requirement. So for the case of the blockchain that wants EVM code that is validated gating the new features off of a header validation byte would provide a means for old and new code to be added and executed simultaneously.  For users who do not update their toolchain they will operate as normal. There is on last case, for a blockchain that does not want to or know how to validate code, when presented EVM code that claims to be validatable.  What happens then?  And what if the code expects new semantics such as different stack counts for CALL and DELEGATECALL?  Ideally we would not want such contracts to execute unless the blockchain supports those semantics.  out of stream versioning does nothing in these cases when the evm code becomes separated from it\u2019s versioning information.  The two proposed headers for validated code would, in current implementations, fail to execute because the first operation would either be 0x00 which is STOP or 0xef which is an invalid opcode. There is also the issue of code claiming to be validated code when it was deployed prior to fork validation.  This is where account versioning provides it\u2019s value.  For account code the validated opcodes would require both the header and the account version, as already mentioned in the EIP. So to summarize: pre-fork/v0 is fine.  post-fork/v0 would execute just as pre-fork with opcodes that don\u2019t require validation.  Post fork/v1 would allow the version header, would run execution, and would unlock new opcodes in the validated contracts.  Pre-fork/v1 should not exist and would be a consensus failure if a v1 account existed prior to account versioning.  EVM code with the header would only execute in post-fork/v1 accounts or post-fork transactions (when executed out of the transaction). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.457035634118967
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "9",
                    "likes": "0",
                    "time": "09/01/2020-17:30:31",
                    "content": "With the headers people can still continue to use code as data (even though it is a bad idea) by either (a) not using the EVM header bytes as the first 4 bytes of their data, which can be tricky if storing user data or (b) prefixing their data with the header byte and immediately going to the BEGINDATA opcode, then adding their data. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 3.875000000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "10",
                    "likes": "0",
                    "time": "10/01/2020-14:54:28",
                    "content": "    shemnon:  One concern on All Core Devs was that jump validation could cause a DOS attach based on memory use during validation from a large (8Mib) contract   I think you misunderstood me on that call. I was talking about a CREATE call, within a tx. The CREATE passed along a 1-meg memory segment containing mainly jumpdests. After the create failed, it flipped a byte in memory, and called CREATE again, over and over. So does this thing validate initcode or not? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.801587301587301
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "11",
                    "likes": "0",
                    "time": "10/01/2020-16:49:44",
                    "content": "In this case I would expect the max code size check to run first and the create would fail because the code is > 24Kib.  So it wold be an implementation detail, would it be worth noting in the EIP that code validation should be one of the last validations, after easier checks like balance and code size? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "12",
                    "likes": "0",
                    "time": "11/01/2020-09:51:14",
                    "content": "    shemnon:  In this case I would expect the max code size check to run first and the create would fail because the code is > 24Kib.   I must be realy lousy at explaining myself\u2026 There\u2019s a misunderstanding here, I think it\u2019s one of these two:  You maybe think I am talking about the code that the initcode (CREATE-call) returns, the code-to-be-deployed. I am not, I\u2019m talking about the execution of initcode. You may think there\u2019s a limit on the initcode? There is not, the initcode is arbitrary length, so the caller expands memory to e.g. 1 Mb once, and is then free to use that for CREATE ops arbitrary many times, at no extra cost-per-byte.  So, my concern/question is basically if there\u2019s any situation where we have to do on-the-fly validation of initcode. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.96875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "13",
                    "likes": "0",
                    "time": "15/01/2020-18:18:24",
                    "content": "Regardless of how it gets in I\u2019m thinking we do want to provide some size limitations.  There are other ecosystem uses of EVM that may be depending on the size limitations that are not subject to mainnet paths. What I\u2019m thinking is adding in that the code segment be subject to the contract code size limit introduced in Spurious Dragon (EIP170).  By code segment I mean all data from the start to the BEGINDATA opcode must be less than 24KiB for mainnet, and whatever contract size limits other chains define.  This still allows for large amounts of data (zksnarks and such) to be crammed into the transacitons, they just wouldn\u2019t be in code. What I would need to gather data on is how the large TXes currently do this, and it could have a gas impact as well but again they would need to opt into validation. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.808035714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "14",
                    "likes": "0",
                    "time": "21/01/2020-16:33:08",
                    "content": "I\u2019ve added some updates to the EIP in the PR here. Two main changes:  Add a contract code size limit check to the \u2018code segment\u2019 Settle on '0xefevm' as the header bytes ([0xef, 0x65, 0x76, 0x6d]) and PC=4 start  I would like to discuss this at the next All Core Devs call (#79). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.416666666666666
                }
            ]
        }
    ],
    "group_index": "948"
}