{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/jello-paper-as-canonical-evm-spec/2389",
            "title": "Jello Paper as Canonical EVM Spec ",
            "index": 2389,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "evm",
                "yellow-paper",
                "jello-paper"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "1",
                    "likes": "9",
                    "time": "10/01/2019-21:43:48",
                    "content": "Hello all  During Devcon 4, there was some discussion about moving the canonical EVM spec to the Jello Paper. I think that this is a fantastic idea. Very few people seem happy with the Yellow Paper as written, and the ambiguous state of maintenance. I am partway through an EVM implementation myself, and have found the Jello Paper to be far superior to the Yellow and Beige Papers. Some of the reasons include:  Much clearer Fewer edge cases Took the time to formalize the semantics Executable (hooray for K!) Can generate various EVMs (via K backends) Very readable (not hard to get used to K\u2019s output)  I will be submitting a Meta EIP shortly, but would love to hear other people\u2019s thoughts!  Related EM Posts  Discussion about the technical spec of the EVM Yellow Paper Maintainership Highlighting the other standards & specs that make up Ethereum  ",
                    "links": [
                        "https://ethereum-magicians.org/t/yellow-paper-maintainership/819",
                        "https://ethereum-magicians.org/t/highlighting-the-other-standards-specs-that-make-up-ethereum/2084",
                        "https://ethereum-magicians.org/t/yellow-paper-maintainership/819/11",
                        "https://ethereum-magicians.org/t/higher-standards-for-eips/2781/12",
                        "https://ethereum-magicians.org/t/eip-615-subroutines-and-static-jumps-for-the-evm/2728/53"
                    ],
                    "GPT-summary": "The author of the post is proposing to move the canonical EVM spec to the Jello Paper, citing reasons such as clarity, fewer edge cases, and formalized semantics. The author is planning to submit a Meta EIP and is seeking feedback from others. A 3rd party is giving constructive criticism and asking questions about the proposal, while the author is looking for collaboration.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None"
                    ],
                    "Sentiment": 5.709606481481481
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "3",
                    "likes": "0",
                    "time": "11/01/2019-19:52:36",
                    "content": "Does anyone know if the Constantinople changes have been added to the Yellow Paper or Jello Paper? @jpitts @Arachnid @ehildenb I just filed a PR to set 1014 and 1052 to Accepted \u2013 I\u2019m not even sure if they went through Last Call (not, as far as I can tell, they just sat in Draft). I\u2019m happy to help maintain the EIPs repo if there aren\u2019t enough hands on deck for this basic admin stuff. EDIT: @axic beat me to creating the same PR. I noticed this back in December, should\u2019ve done it then. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/1692"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.777777777777777
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ehildenb",
                    "index": "4",
                    "likes": "2",
                    "time": "11/01/2019-19:55:29",
                    "content": "We are current as of 23 days ago: LINK REDACTED FOR SOME REASON The Jello Paper is unfortunately not automatically updated on PRs into KEVM, just occasionally manually (though the derivation process itself is 100% automatic). It\u2019s on my todo list to have the CI server update the Jello Paper automatically on merges to master. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "5",
                    "likes": "2",
                    "time": "12/01/2019-06:57:58",
                    "content": "I brought this up on the AllCoreDevs channel and there was the usual criticism, but more support for the Yellow Paper than I expected.  People liked that there were formal specs, but wanted there to be one that they can read as well. The math in the Yellow Paper is not that advanced,  (anyone with a year of so of undergraduate study can handle it) but it\u2019s badly presented. And the English could be much better, as in the Beige Paper.  But with effort people who need to read it can, and without learning another language first.  And with effort it could be much more readable. Compared to technical English and basic math very few people can read formal specification languages, and that terribly compromises many purposes of having a spec.  For one important example, a spec that an engineer can use to write a client matters.  For that purpose, for most engineers, the Yellow Paper falls short, but a K spec would be nearly useless. To be truly useful I think our K spec would need to use a carefully designed presentation syntax, teach the reader the K they need to know, and be sure the embedding English is complete and correct without the K.  Because in the end a K spec is a reference implementation in a language that hardly anybody knows.  And reference implementations have well-known strengths and weaknesses as specs. Still, it depends on who does the work, and how the community cares to put it to use.  A number of people volunteered to get to work on a better Yellow Paper, including how best to embrace our K and Lem formalizations.  Whether they do the work remains to be seen. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.523177083333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "6",
                    "likes": "0",
                    "time": "12/01/2019-08:19:23",
                    "content": "PS. For what it\u2019s worth.  The Yellow Paper specifies the entire client in about 2600 lines of LaTex.  About half of that is the VM. The Jello Paper specifies the VM in about 2400 lines of K. py-evm implements the VM in about 2900 lines of Python. aleth implements the VM in about 2400 lines of C++.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 5.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/grosu",
                    "index": "7",
                    "likes": "3",
                    "time": "12/01/2019-16:26:24",
                    "content": "Thanks, @expede, for starting this discussion!  Your list of reasons is great!  I would like to add one more, which in my view is in fact the most important one in the long term (disclaimer: I am a researcher in formal methods, specification and verification, as well as PL design \u2014 so I may not see things as clearly as I should):  Usable as is as input to a program verifier that can formally specify and verify smart contracts at the EVM bytecode level.  That is, the gap between what you verify and what you execute is zero. That was the main reason we came up with the K semantics of EVM first place (we\u2019ve already done that with other languages, such as C, Java, JavaScript, Python, etc., in the past).  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 6.037840136054422
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/grosu",
                    "index": "8",
                    "likes": "3",
                    "time": "12/01/2019-16:36:42",
                    "content": "@gcolvin I share your thoughts about  formal specs being harder to read/grasp by non-experts.  And I am genuinely interested in doing something about it.  It would be really nice to have a tool that takes a formal semantics (say in K for starters) and generate human-readable documentation from it.  Note that this is research, though!  That is, I\u2019d need one or two people to work on such a project for 6 months or so.  My company does not have any resources allocated to do this, so we either need some funding or some enthusiastic volunteers.  Such a tool would have the benefit that we can then keep using it as EVM itself evolves, not to mention that it can be used for other VMs and languages as well (WASM, IELE, maybe even higher level languages). Anyway, I am in for this.  Our main concern so far was really to make sure that the KEVM semantics is adequate, especially because as I said above, we use it for formal verification of smart contracts.  Serving as documentation for EVM was not our original intention.  But it makes a lot of sense to pick a reference model that is rigorous and that is used as input to tools, because it avoids the problem of having to keep things in synch.  Ah, and additional advantage is that different uses of it with different tools sometimes reveal quite subtle bugs in the semantics/model, which once fixed, they are then fixed for all tools. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.768398268398268
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/grosu",
                    "index": "9",
                    "likes": "2",
                    "time": "12/01/2019-16:40:44",
                    "content": "Thanks for these statistics, @gcolvin, very useful to know!  Again, the K semantics can be used for many purposes as is.  Execution is only one use.  Symbolic execution, model checking, deductive verification (verification of smart contracts), and hopefully test-case generation soon, are other possible uses.  In my view this is the main advantage of the K approach, not necessarily compactness.  I would go for these advantages even if the K semantics of the EVM were 4x larger than an implementation.  But again, I am biased here.  Heavily. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.565205627705627
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "10",
                    "likes": "0",
                    "time": "12/01/2019-18:27:34",
                    "content": "Is there a tracking Github issue for this? (auto-update of Jello Paper by CI Server) Please paste it here or create it, because then it can be bountied! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "11",
                    "likes": "0",
                    "time": "12/01/2019-18:27:52",
                    "content": "LatTex is fairly verbose, so the Yellow Paper is already half the line count of the three implementations, and even more compact once printed.  And readable by a vastly larger audience.  And I mean vastly.  That counts a lot for me. But in the end we will continue to have the Yellow Paper for so long as we continue to have editors, and it will continue to be used as a standard for so long as people find it useful.  We will also have implementations in various languages, including the Python reference implementation, the K and Lem specifications, and various production clients.  Some of those, especially the Python and K work, may also prove useful as standards. In a consensus network they all must agree.  Any disagreement indicates a defect in at least one of them.  Which one, if any, to call canonical or normative is to some extent a matter of convenience.  But whose convenience, and for what purposes? PS.  The K spec being no larger than programs that implement it I consider a victory. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.255787037037037
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "12",
                    "likes": "2",
                    "time": "12/01/2019-19:12:27",
                    "content": "So we have a small number of specifications and reference implementations. Primarily  Python research implementation and specification EIPs slated for a release KEVM reference implementation and specification Yellow Paper  Each serves different purposes at difference points in the workflow. I don\u2019t see a need (or even a way) to bless one of them as \u201cthe standard.\u201d ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.1875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "13",
                    "likes": "2",
                    "time": "12/01/2019-19:18:07",
                    "content": "Note.  It\u2019s a good thing that K is code.  Mostly.  Strip-Les-specs-cest-du-code-650-finalenglish.jpg650\u00d7613 266 KB  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ehildenb",
                    "index": "14",
                    "likes": "0",
                    "time": "12/01/2019-22:30:47",
                    "content": "Hmmmmm, seems my posts are being hidden because I\u2019m including links to repository stuffs? That seems insane. Anyway, @boris, I\u2019ve made an issue about adding a CD job to update the Jello Paper on updates to master. It\u2019s issue 239 on KEVM repository, which I can\u2019t link to because that would be \u201coverly promotional\u201d. A little bit insane, because we\u2019re literally talking about that repository. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 2.057291666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "15",
                    "likes": "0",
                    "time": "13/01/2019-02:29:33",
                    "content": "Have to stop the spammers some how! After spending time coming back to the forum, your account gets upgraded. I don\u2019t have admin powers to do more right now, but just PM me if it\u2019s a problem. Thanks for filing the issue. Here\u2019s the link for reference: https://github.com/kframework/evm-semantics/issues/293 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.232142857142858
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "16",
                    "likes": "0",
                    "time": "14/01/2019-20:40:58",
                    "content": "@ehildenb Could summarize what we haven\u2019t been able to read? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ehildenb",
                    "index": "17",
                    "likes": "1",
                    "time": "14/01/2019-20:53:19",
                    "content": "The post that remains hidden says: Great to see other people championing this!  Feel free to open issues against the KEVM repository (at LINK REDACTED FOR SOME REASON) if you find places where it could be clearer or could use more explanation. The Jello Paper is derived from that repository directly. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.055059523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "18",
                    "likes": "0",
                    "time": "15/01/2019-04:48:01",
                    "content": "Thanks @ehildenb  To be clear, @grosu and @expede, I\u2019m a big fan of K-EVM and the Jello Paper.  I\u2019m also a big fan of the work to maintain and improve the Yellow Paper.  But I\u2019m becoming convinced that given our anarchy there is nobody to declare one spec normative, only community consensus that certain specs are useful.   And given the computational consensus network we are building there is no need for a normative spec; the network itself is normative.  To mangle Heinlein, \u201cThe blockchain is a harsh mistress.\u201d ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.532142857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "19",
                    "likes": "0",
                    "time": "16/01/2019-00:30:27",
                    "content": "Hmm, I\u2019m not sure why LOC would matter here. @gcolvin am I missing something here? IMO a spec should be complete and clear, without regard for length (either short or long) Anyhow, here\u2019s some information in a table      kLOC Language Style Executable Complete Days Since Update     Yellow ~1.3 LaTeX Prose & Equations  Mostly 37   Beige 1.3 LaTeX Prose   249   Jello 2.4 K Declarative   7   Trinity 2.9 Python Imperative   0   Aleth 2.4 C++ Imperative   0     ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "20",
                    "likes": "0",
                    "time": "16/01/2019-00:46:55",
                    "content": " To be clear, @grosu and @expede, I\u2019m a big fan of K-EVM and the Jello Paper.     there is no need for a normative spec   Thinking out loud Interesting. Shouldn\u2019t the semantics of the execution engine be strongly guaranteed by the platform, lest a network split occur from differing state? AFAICT Ethereum is intended to have a logically centralized VM. Such an event would get healed, and is absolutely possible today, but also would cause some general thrash in the system (uncle rate), which should be best avoided, no? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 6.216666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "21",
                    "likes": "2",
                    "time": "16/01/2019-06:04:33",
                    "content": "TL;DR an impassioned defense of the Jello Paper\u2019s notation I\u2019m trying to balance facilitating discussion and being opinionated  Take the following with a grain of salt, and opposing viewpoints are very strongly encouraged! While almost everyone that I speak to is immediately positive about moving to the JP, I feel like there\u2019s two points of resistance:  No one seems to love the YP\u2019s notation as-is, but some have already invested in learning it Don\u2019t want to invest in learning a new notation / assume K is for math geniuses only  K doesn\u2019t read like the PLT literature (aside from BNF). As such, there\u2019s no special advantage on first reading of the JP vs YP, even for people with such a background (omitting those who already know K). From an informal sample, K appears to be much easier to grok for programmers than judgements or the lambda calculus. Further, being that it\u2019s executable (and formalized), the JP has no option but to be extremely clear about all details, which is what you want out of a spec. The YP\u2019s notation also takes some getting used to. I personally find its syntax to be unnecessarily dense (ex. \u201cwhich \u03bc subscript is which again?\u201d). Also some details are unclear, so I found myself repeatedly referring to concrete implementations (mainly Parity and Trinity) while writing my implementation based on the YP. It\u2019s a a small sample, but I hear this from others as well. Admittedly this could be corrected in the notation and prose, but this paper is almost 5 years old and still reads this way  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.4489205969469126
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "22",
                    "likes": "4",
                    "time": "18/01/2019-22:10:13",
                    "content": "I\u2019m just going to vaguely gesture at this thread as more reason to have a formally verified spec. Explicit invariant are also very important. We can go pretty far enshrining invariants in the system     Immutables, invariants, and upgradability EIPs       One of the critical meta-questions raised by Remediations for EIP-1283 reentrancy bug and the delay of the Constantinople upgrade is: Precisely what on Ethereum is immutable and what behavior should be considered invariant?  Since irregular state transitions are outside the scope of this conversation, for sake of argument let\u2019s all agree that code and data (storage) are immutable.  However, we\u2019re left with the challenge that EVM semantics can and do change during a hard fork, the most germane ex\u2026     I personally would love if the community would take a first-principles approach on Ethereum, with only explicit invariants. The current system is loose enough to make spec change conversations difficult. ",
                    "links": [
                        "https://ethereum-magicians.org/t/remediations-for-eip-1283-reentrancy-bug/2434/18",
                        "https://ethereum-magicians.org/t/core-devs-discussion-about-a-vulnerability-in-constantinople-delay-of-the-upgrade/2427"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.389280626780627
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "23",
                    "likes": "2",
                    "time": "18/01/2019-22:18:36",
                    "content": "I was starting to think about semantic versioning. One notion that I arrived at is that the protocol should itself have semantic version, and that its component parts, i.e. the EVM, consensus, RLP, JSON-RPC, each should have semantic versions. Within their various contexts, the versioning changes would have different meaning.   Semantic Versioning   Semantic Versioning 2.0.0 Semantic Versioning spec and website      Ethereum protocol would increment MAJOR when the update to any of its components leads to a fork. EVM would increment MAJOR only if the update leads to incompatibility or security vulnerability (given contract development norms). MAJOR version increments in EVM is similar to a new series in microprocessors. But MINOR version increments in the EVM would lead to a MAJOR increment at the protocol level. ",
                    "links": [
                        "https://semver.org/",
                        "https://ethereum-magicians.org/t/sermantic-versioning-for-the-protocol-with-release-candidates/2493"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.152892561983471
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "24",
                    "likes": "2",
                    "time": "18/01/2019-22:25:55",
                    "content": "    jpitts:  I was starting to think about semantic versioning.    I very much want semantic versioning!  It\u2019s currently difficult to track the various names and EIPs that should be applied in a certain order Clearer for users (\u201coh, this implements Ethereum 4.0.0, so something is not backwards compatible\u201d) Distinctions between bug fixes and semantic changes generally useful  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.282738095238095
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "25",
                    "likes": "0",
                    "time": "19/01/2019-13:30:12",
                    "content": "@expede  I simply found LOC interesting.  First because I was surprised that the C++ version was no longer than the others, despite being a low-level language bummed for performance. It was shorter when I started work on it, and  I\u2019d have expected Python to be shorter still.  And second because the K version was no longer than the rest.  Formal specs used to be a lot longer than the code they formalized. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "26",
                    "likes": "1",
                    "time": "19/01/2019-14:16:10",
                    "content": "    expede:  While almost everyone that I speak to is immediately positive about moving to the JP, I feel like there\u2019s two points of resistance:  No one seems to love the YP\u2019s notation as-is, but some have already invested in learning it Don\u2019t want to invest in learning a new notation / assume K is for math geniuses only    You talk to different people than I do.  In that thread of core dev discussion I shared I think only Everett was unconditionally positive about dropping the Yellow Paper. This is an old discussion, with a chapter on it in The Mythical Man Month.  We are in the usual bind.  Most all engineers and mathematicians can read English and ordinary math.  They cannot, without prior study, read formal notations like K.  And they usually haven\u2019t time or desire for such study. (One way out is an English spec and a formal appendix.  Another is to make the spec a tutorial on the formal notation.) Regardless, as long as people want to maintain and improve the Yellow Paper there will be one.  And if people want to complete a Jello Paper there will be one.  And keeping them in sync with each other, the various clients, and the network itself will be a pain.  It\u2019s pain with only one spec too. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.188241106719368
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "27",
                    "likes": "0",
                    "time": "19/01/2019-14:31:05",
                    "content": "    expede:  The YP\u2019s notation also takes some getting used to. I personally find its syntax to be unnecessarily dense [\u2026] this could be corrected in the notation and prose, but this paper is almost 5 years old and still reads this way   Until last year the copyright prevented anyone but Gav from changing it.  Yoichi put a lot of work into it, (and on formalizing the EVM) but then decided to stop working on crypto.  So only recently are others taking up the task. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "28",
                    "likes": "2",
                    "time": "21/01/2019-03:49:23",
                    "content": "Thanks for taking the time to explore this!    Copyright Issues     gcolvin:  Until last year the copyright prevented anyone but Gav from changing it. Yoichi put a lot of work into it, (and on formalizing the EVM) but then decided to stop working on crypto. So only recently are others taking up the task.   Ah, excellent context \u2014 thanks! That\u2019s a pretty horrendous situation for a community project to be in  The copyright for such a foundational component of this project absolutely should have been released much earlier, but that\u2019s neither here nor there. It sounds like there\u2019s a solve now, though, so that\u2019s great    Unnamed Sources     gcolvin:  You talk to different people than I do. In that thread of core dev discussion I shared I think only Everett was unconditionally positive about dropping the Yellow Paper.       gcolvin:  I\u2019m a big fan of K-EVM and the Jello Paper. I\u2019m also a big fan of the work to maintain and improve the Yellow Paper.   My original source was the controversial semi(?) closed discussion in Prague, where it was brought up by someone else (I can\u2019t remember who for the life of me). The Twitter Thread has a number of supporters, as well as some of the folks in this thread (including you  \u200d\u2642 ). I agree that there is no strong consensus on this change! I really enjoyed the IETF\u2019s \u201crough consensus and running code\u201d concept that came up at the EM Council of Prague. In the Jello Paper we have a more complete & working spec, and support from a number of people in the know. The question becomes if this is a \u201cover my dead body\u201d, and why if so?   The Yellow Paper is Dead, Long Live the Yellow Paper     gcolvin:  as long as people want to maintain and improve the Yellow Paper there will be one   Wonderful! Let people use whichever notation they like, and let a thousand flowers bloom! But even then, why not make the canonical spec for EIPs the formally verified executable one? People can still translate concepts into other notations, or have then generated directly by the K Framework. This was the intent of creating the Beige Paper by hand (since the Yellow Paper was too obtuse for most people), but the canonical spec was still assumed to be the YP. One such setup could look like this:                      Jello Paper                    (canonical spec)                          |                          |       +------------------+---------------------+       |                  |                     |       |                  |                     | Yellow Paper         Beige Paper       BNF & Proof Trees (historical)        (accessible)        (mathematicians)    The Comprehensibility of K     gcolvin:  Most all engineers and mathematicians can read English and ordinary math. They cannot, without prior study, read formal notations like K   I actually strongly disagree on needing formal training to read K  I\u2019m not sure that I\u2019d call K a \u201cformal notation\u201d. It is very much a programming language, and generates both executable code and documentation (conceptually in whatever notation you would like). This reads in a way not unlike modern Javascript\u2019s arrow functions with destructuring, and consuming a K-based spec requires no additional study in PLT or specialized mathematical knowledge than any other programming language. Presumably you would like the writers of the spec in any notation to have some relevant background, though they may or may not be experts in K (I certainly am not one!) For reference on how much more familiar K is than operational semantics, see the illustrative examples below  Example of K (from Jello Paper)     syntax UnStackOp ::= \"POP\"     rule <k> POP W => . ... </k>      syntax StackOp ::= DUP ( Int ) | SWAP ( Int )     rule <k> DUP(N)  WS:WordStack => #setStack ((WS [ N -Int 1 ]) : WS)                      ... </k>     rule <k> SWAP(N) (W0 : WS)    => #setStack ((WS [ N -Int 1 ]) : (WS [ N -Int 1 := W0 ])) ... </k>      syntax PushOp ::= PUSH ( Int , Int )     rule <k> PUSH(_, W) => W ~> #push ... </k>   Formal Notation This is what a common formal notation looks like:  Big-step-operational-semantics-for-expression-evaluation839\u00d7440 64.2 KB    Call For \u201cOver My Dead Bodies\u201d   Correct me if I\u2019m wrong, but you [Greg] are not an \u201cover my dead body\u201d. I would love to hear directly from people that are dead set against this idea, and why that\u2019s the case for them! If you could point the people that you\u2019re talking to at this thread, that would be very helpful! ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/8/8ca37c83ec413aaf57e9836321b2a00e33b8305c.jpeg"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.513631368631369
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "29",
                    "likes": "2",
                    "time": "21/01/2019-20:14:03",
                    "content": "    expede:  why not make the canonical spec for EIPs the formally verified executable one   The questions I keep bumping into are, \u201cWho has the authority to make it canonical?\u201d  and, \u201cDo we really need one spec to be canonical?\u201d I\u2019d say the current consensus is that the Yellow Paper specifies the Ethereum protocol, and that where it doesn\u2019t that is a defect that needs fixing.  No other specification that I know of is complete enough to even attempt to do that job.  When there are other specs that can then we can ask about their relative status.     expede:  I actually strongly disagree on needing formal training to read K   Ok, but I can follow the VM part of the Yellow Paper well enough to write code, and can just barely follow the KEVM.  And yes, the notation you quote is unreadable too (though it\u2019s not the same as the K), but the math in the Yellow Paper is much easier than your example, and could be made even easier. It looks to me like different specs are useful in different ways to different people (and programs).  Different enough that there are people who can use some but cannot use the others. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.391098484848484
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "30",
                    "likes": "1",
                    "time": "21/01/2019-22:14:58",
                    "content": "To continue the semver sub-thread here, @axic pointed out EIP-178 for versioning the EVM:    Sermantic versioning for the protocol, with release candidates   A similar proposal was made back here: https://github.com/ethereum/EIPs/issues/178 It comes with some differences:  only considers EVM, because of this goes well with https://github.com/ethereum/EIPs/issues/154, only uses major/minor in order to save space    ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/178",
                        "https://github.com/ethereum/EIPs/issues/154"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hjort",
                    "index": "31",
                    "likes": "2",
                    "time": "23/01/2019-10:08:39",
                    "content": " Another is to make the spec a tutorial on the formal notation.  I very much support this idea. Having an executable specification will help with verification efforts and proving invariants. The YP does a good job of being self-contained, being a tutorial in its own notation. I don\u2019t see why the JP couldn\u2019t do the same thing \u2013 making itself usable to anyone with a year or so of undergraduate study. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.950000000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/grosu",
                    "index": "32",
                    "likes": "7",
                    "time": "23/01/2019-13:13:34",
                    "content": "That you for all the comments above about K-EVM, both the positive and the negative ones!  Of course, as creators and everyday users of KEVM it is hard for us at RV (http://runtimeverification.com) to see how it fails short, which is why it is so important to have feedback like here.  Here is another thing that may be useful to consider:  At my knowledge, there are three other companies besides RV using KEVM in their smart contract execution or auditing.  In particular, we have 2-3 smart contracts under \u201cformal auditing\u201d at any given moment.  So there is a huge incentive to keep it updated and current!  This may not happen with a paper model/semantics, because that is not directly used.  Additionally, there are several formal tools based on it: an interpreter (which btw way, will be soon much faster, because we transitioned from OCAML to LLVM as target language we generate from K), a bounded symbolic state-space explorer, and a program verifier.  And tens of thousands of tests for each of these that we execute in our CI.  These tend to find bugs quickly in the spec, for the benefit of all.  Only one tool, say an execution engine, can only find a particular subset of bugs but not all.  For example, what if your spec happens to be non-deterministic?  You may not find that with the interpreter but can find that with the state exploration tool (model checker).  If I understand it well, the main criticism is the lack of readability.  I must confess that we put very little to almost no effort into making it readable!  Our main focus was to make it precise and have all the tools work with it.  This is good in my view, because we can address the readability part.  It may only be a matter of having a good technical writer spend 2 months on it and turn it into a book/tutorial in literate programming style.  Or two writers, a technical and a non-technical.  We could do this if there is interest. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.469272578899595
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dteiml",
                    "index": "33",
                    "likes": "5",
                    "time": "24/01/2019-09:30:41",
                    "content": "Hello, Dominik here from Gnosis, one of the companies that uses K-EVM internally. I recently completed the K onboarding, thought I\u2019d share my experience:  There is a pretty good K tutorial available. The only prerequisite that I remember is lambda calculus, but looking back, it is totally possible to skip 1_lambda and 3_lambda++ and complete only 2_imp and 4_imp++ to grasp K. I have read through the entire K-EVM specification. I disagree with @grosu that it is not readable.  If you have any experience with the functional paradigm in Haskell or even Javascript, it is very readable, and even if one doesn\u2019t, it is very easy to get into. What makes K readable in my experience is its explicitness - everything is defined in configuration, syntax and rules - as such the language definition is self-contained, which is super powerful. I personally use K-EVM as the canonical specification of the EVM - if I am unsure about the semantics of an opcode/gas calculation/whatever, I refer to that definition, because of its completeness and simplicity. I have also used K for formal verification. This, imho, is its weak point when it comes to usability. The kprove tool is quite difficult to use and I found I had to contact RV folks to get help iteratively. In our discussions, this is one thing they are working on, as well as many other things like producing easily verifiable proofs etc. (as they switch from Java to Haskell backend), so I have no doubt that this will improve  shortly. But specification of EVM, rather than its programs, is the main topic of this discussion, and for that, nothing beats K  Talking about tutorials/onboarding, I made a Formal verification workshop not long ago. I would be happy to expand this to a full-fledge course (working with RV) if there is demand from the community! Best, ",
                    "links": [
                        "https://www.youtube.com/watch?v=psnZXNzixBU"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.956089743589743
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "34",
                    "likes": "2",
                    "time": "24/01/2019-17:29:47",
                    "content": "    dteiml:  I made a Formal verification workshop not long ago. I would be happy to expand this to a full-fledge course (working with RV) if there is demand from the community!   Maybe we can schedule a workshop for Council of Paris? Or at least, that week, maybe during ETHCC or after? This is the kind of not-quite-council stuff that I am happy to help volunteer around if there is interest. When you say \u201cI found I had to contact RV folks\u201d \u2013 this is the sort of thing where public questions (e.g. github issues or forum threads) would be super helpful. Many times, multiple people have the same question, and either through search or from following along with a discussion, can get answers and learn. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.344696969696971
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dteiml",
                    "index": "35",
                    "likes": "2",
                    "time": "28/01/2019-21:35:34",
                    "content": "    boris:  Maybe we can schedule a workshop for Council of Paris? Or at least, that week, maybe during ETHCC or after? This is the kind of not-quite-council stuff that I am happy to help volunteer around if there is interest.   Totally agree. A workshop at Council of Paris would probably be the easiest option, who can I get in touch with?  I could give an introduction into K, K-EVM and deductive program verification using K-EVM! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "36",
                    "likes": "0",
                    "time": "28/01/2019-21:57:09",
                    "content": "An aside: Isn\u2019t the Council of Paris just one day?  Seems it might not be worth squeezing in many workshops.  Better to spend most of our time on the important issues affecting the Fellowship as a whole. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 7.000000000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "37",
                    "likes": "0",
                    "time": "28/01/2019-22:55:29",
                    "content": "@dteiml that would be me  PM me / I\u2019ll reach out and we can see about organizing. I\u2019m thinking a few events post ETHCC with smaller groups. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pmackay1982",
                    "index": "38",
                    "likes": "1",
                    "time": "29/01/2019-16:21:22",
                    "content": "Boris - good morning from very cold Urbana, IL.  Please include myself and @ehildenb in this discussion about a K workshop. Thanks! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.283333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "39",
                    "likes": "5",
                    "time": "30/01/2019-00:25:05",
                    "content": "    gcolvin:  The questions I keep bumping into are, \u201cWho has the authority to make it canonical?\u201d and, \u201cDo we really need one spec to be canonical?\u201d   Since I like arguing with myself, one authoritative group are the core developers, who more than anyone actually have to use the spec. My own ideal would be in three parts:  a cleaned-up, Beige-tinted Yellow Paper, a readable, executable K spec, and an associated test suite.  The whole package would be one canonical specification, each part of which serves as a check on the others.  Note that the test suite should not be generated by the K, or else it will not serve as an independent check. Never go to sea with two chronometers, take one or three. \u2013 Fred Brooks, The Mythical Man Month But most of all I\u2019d like to see the Yellow, Jello, and Beige people work together towards what is best.  I think @jpitts is working towards that goal.  And some money for @expede, @grosu and some others would help  ;-> ",
                    "links": [
                        "https://archive.org/details/mythicalmanmonth00fred"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "40",
                    "likes": "3",
                    "time": "30/01/2019-23:56:03",
                    "content": "    gcolvin:  The questions I keep bumping into are, \u201cWho has the authority to make it canonical?\u201d and, \u201cDo we really need one spec to be canonical?\u201d   We all do! So let\u2019s do it! We need something that describes the spec in the best fashion possible.     gcolvin:  Note that the test suite should not be generated by the K, or else it will not serve as an independent check.   Here here! Triplex redundancy is the strongest architecture you can get for the least amount of complexity.     gcolvin:  And some money\u2026 would help   Without a doubt!  I\u2019d like to underscore that a canonical spec and test suite (that is maintained and updated with every EIP as it hits mainnet) is a great coordinating factor for all those who wish to use Ethereum and the EVM (compiler devs, tool makers, client devs, etc.) It is the one thing I believe led to the success of all those who built clients in the past year (ask @pipermerriam about Trinity and how the test suite helped) We REALLY need to keep this documentation coordinated and as up to date as possible. As a piece of core infrastructure it is critical to our success. Funding it is a no brainer! Also, there should be an Ethereum 2.0 branch for all of this. Tracing the history alone would be worth it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.024038461538462
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hmijail",
                    "index": "41",
                    "likes": "0",
                    "time": "31/01/2019-00:53:23",
                    "content": "    gcolvin:  Never go to sea with two chronometers, take one or three.   But, does this really work when we\u2019re talking about software whose goal is to reach consensus? You either have one chronometer, or else you have differences in consensus, therefore forks, therefore multiple different blockchains. Code is law at the end of the day. The way I see it, the only choice is whether it\u2019s formal code or informal code. Everything else (papers, docs, whatever) has to play catch up to the existing code up to the point of being bug-compatible. To me it\u2019s amazing to say the least that informal code has brought us so far\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "42",
                    "likes": "1",
                    "time": "31/01/2019-01:06:00",
                    "content": "    gcolvin:  Since I like arguing with myself, one authoritative group are the core developers, who more than anyone actually have to use the spec.    Yup, agreed! It\u2019s the same people who are able to accept opcodes and consensus changes. Nothing is stopping others from running other versions of the spec, but the major implementations should agree.     gcolvin:  But most of all I\u2019d like to see the Yellow, Jello, and Beige people work together towards what is best. I think @jpitts is working towards that goal. And some money for @expede, @grosu and some others would help ;->    Thanks for the shout out! Yes, we would love to devote more time to this work, but attention requires funding.     fubuloubu:  We REALLY need to keep this documentation coordinated and as up to date as possible. As a piece of core infrastructure it is critical to our success. Funding it is a no brainer!    Could not agree more! Yes, I am involved in some of this work, but I would like to see this regardless of who does the work. We need a solid footing to build this extremely important part of the world\u2019s financial system & highly available censorship resistant open service worth tens of billions of dollars.     gcolvin:  My own ideal would be in three parts:       fubuloubu:  Here here! Triplex redundancy is the strongest architecture you can get for the least amount of complexity.   These quotes are about the test suite (I agree), bit to maybe expand on why the Jello Paper as the top-level canonical spec rather than competing specs\u2026  TL;DR Specs and implementations are different beasts. You don\u2019t want multiple sources of truth in your spec. A spec is more abstract and need to have as little ambiguity as possible. Redundancy on implementations are a really great practice, but that\u2019s a different layer in this process.  Rationale  Client Implementations Yes, TMR is extremely useful for mission critical implementations. Each implementation in the TMR gate is based on the same high level spec: they need to achieve some common goal. We have something like this built into Ethereum itself: the different clients have to reach consensus about state transitions, and are parallel implementations of the same underlying spec. TMR is great when you\u2019re interacting with empirical data and concrete implementations: chronometers, flight system computers, deployed blockchain clients, and so on. These are also automated systems, with very easy ways to distinguish the degree of disagreement (results are outside of some error threshold). To be clear: I fully support doing TMR for the actual EVM software. Super great idea, +1, 5/5 stars, would recommend   System Specification Specifications should be a priori and universal. (This is part of the push for a formalized spec). If you have multiple specs, have an unspoken, fuzzy, abstract spec somewhere in the collective consciousness of which the others are simulacra. The versions in everyone\u2019s head may or may not agree. Multiple competing top-level (canonical) specs aren\u2019t just inconvenient, they\u2019re often actively confusing. For instance, if a feature is added to the Blue Paper after going through the full EIP process, but the Red and Purple Paper maintainers haven\u2019t got around to adding it yet \u2014 is the feature available for use? What if the Red Paper is no longer being actively maintained? What if they all differ on parts of certain details in their description of the same feature? Which is the \u201cright\u201d one to base your concrete implementation off of? Should you have to read 3 versions of a tech spec and understand them to the point that you can compare every detail between them? Since client implementers are doing this by hand, it\u2019s a laborious process, and the likelihood of missing a subtlety between m/n specs is very high. With one canonical, formalized spec, you have a single  source of truth.     fubuloubu:  I\u2019d like to underscore that a canonical spec and test suite (that is maintained and updated with every EIP as it hits mainnet) is a great coordinating factor for all those who wish to use Ethereum and the EVM (compiler devs, tool makers, client devs, etc.) It is the one thing I believe led to the success of all those who built clients in the past year (ask @pipermerriam about Trinity and how the test suite helped)   Exactly!      gcolvin:  Note that the test suite should not be generated by the K, or else it will not serve as an independent check.   Yes, multiple test suites would be awesome (1x K-generated + 1x done by hand, + 1x other)  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.841668212739641
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "43",
                    "likes": "1",
                    "time": "31/01/2019-19:44:40",
                    "content": "I\u2019m not really calling for TMR per se, just the principle.  I\u2019m trying to reconcile the fact that people disagree (some strongly) as to whether a better Yellow Paper or a brand-new K spec or something else would be best, and there are strong arguments on all sides.     expede:  Multiple competing top-level (canonical) specs aren\u2019t just inconvenient, they\u2019re often actively confusing. For instance, if a feature is added to the Blue Paper after going through the full EIP process, but the Red and Purple Paper maintainers haven\u2019t got around to adding it yet \u2014 is the feature available for use? What if [\u2026]? What if [\u2026]? Which is the \u201cright\u201d one?   In my suggestion the specs aren\u2019t competing, they are reinforcing, and maintained by the same team. A feature is available for use as soon as hits the mainnet.  It will need to be implemented before that, but currently EIPs aren\u2019t merged with the Yellow Paper until after that, because we are moving too fast and haven\u2019t the resources to do better.  Once the Yellow Paper is updated future implementations can refer to it.  Until then you have to read the EIP and the Yellow Paper.  Tests get written partly before and partly after an EIP hits the mainnet, depending on how quickly we are moving. Having two top-level notations for a spec is not unusual. For instance, in the WebAssembly spec we find:  The prose and formal rules are equivalent, so that understanding of the formal notation is not required to read this specification. The formalism offers a more concise description in notation that is used widely in programming languages semantics and is readily amenable to mathematical proof.  This discussion goes back decades in our craft.  Probably all the way back to Mesopotamia or further in other crafts. Forgive me for a long quotation from Brooks\u2019 classic Mythical Man Month  English, or any other human language, is not naturally a precision instrument for such definitions. Therefore the manual writer must strain himself and his language to achieve the precision needed. An attractive alternative is to use a formal notation for such definitions. After all, precision is the stock in trade, the raison d\u2019etre of formal notations. Let us examine the merits and weaknesses of formal definitions. As noted, formal definitions are precise. They tend to be complete; gaps show more conspicuously, so they are filled sooner. What they lack is comprehensibility. With English prose one can show structural principles, delineate structure in stages or levels, and give examples. One can readily mark exceptions and emphasize contrasts. Most important, one can explain why. The formal definitions put forward so far have inspired wonder at their elegance and confidence in their precision. But they have demanded prose explanations to make their content easy to learn and teach. For these reasons, I think we will see future specifications to consist of both a formal definition and a prose definition. An ancient adage warns, \u201cNever go to sea with two chronometers; take one or three.\u201d The same thing clearly applies to prose and formal definitions. If one has both, one must be the standard, and the other must be a derivative description, clearly labeled as such. Either can be the primary standard.  Brooks takes the same lesson from the chronometers as you do @expede.  I\u2019m adding tests to get three co-equal chronometers.  But this only works if the work is coordinated.  Note that not so long ago Yoichi was meeting with Gavin weekly to better understand and edit the Yellow Paper, authored a Lem spec of the EVM, (and specs of other Ethereum components) and was team lead for a group including formalists and testing.  I don\u2019t know if the Foundation is still supporting that group. If we go with Brooks\u2019 take on things I have my preferences, but all this is just opinions until there is a working group.  For most people it shouldn\u2019t matter which spec is primary.  They will use the one that works for the purpose at hand, on the promise that they are equivalent.  It\u2019s the working group\u2019s job to keep that promise. ",
                    "links": [
                        "https://archive.org/details/mythicalmanmonth00fred/page/63",
                        "https://yoichihirai.com/",
                        "http://gavwood.com/",
                        "https://yoichihirai.com/malta-paper.pdf",
                        "https://gitter.im/ethereum/formal-methods",
                        "https://github.com/ethereum/tests",
                        "https://hackmd.io/uIW3cqMrR6uOyKutQ-BwiQ#"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.693661971830986
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "44",
                    "likes": "1",
                    "time": "01/02/2019-03:59:19",
                    "content": "    gcolvin:  I\u2019m adding tests to get three co-equal chronometers.   Yeah, this is what I basically meant by TMR. The three (written spec, K spec, and JSON test suite) work in unison, and if there\u2019s ever a disagreement usually 2 of them would disagree with the third (easier to debug!) They should absolutely be maintained in the same repo by the same maintainers: each proposed feature or fix (EIP) corresponds to a PR against the 3 items together. Tested together, deployed together, merged together. There should be a branch corresponding to each relevant network (at least mainnet and testnet/staging)\u2026 I think we can see the heirarchy. The most important thing to remember is that unlike a lot of the client libraries, this repo would be vastly referenced, so strong commit message practices and the like should be encouraged. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.628787878787879
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "45",
                    "likes": "1",
                    "time": "03/02/2019-01:26:59",
                    "content": "I hate to disagree with someone who agrees with me, @fubuloubu (at least until @expede convinces me otherwise  ) but single PRs against one repo seem unworkable, given that there are currently three repos, maintained by different teams working on different schedules.  I think I sketched out the current process above.  At best they can be synced up at some point after a release.  We don\u2019t operate on three-year release cycles with a well-compensated documentation team. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.904761904761904
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "46",
                    "likes": "0",
                    "time": "03/02/2019-03:08:42",
                    "content": "That is\u2026 Fair! For the record, this is exactly how a well-organized, well-compensated engineering team would handle documentation for a high-security, complex system that is safety-/mission-critical. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "47",
                    "likes": "0",
                    "time": "03/02/2019-03:39:33",
                    "content": "    fubuloubu:  this is exactly how   Not sure which this is that. Bryant, but of course we don\u2019t have any such teams.  And it\u2019s time to go dance to some reggae.  Later. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "48",
                    "likes": "0",
                    "time": "03/02/2019-03:54:00",
                    "content": "Good documentation, basically ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "49",
                    "likes": "2",
                    "time": "03/02/2019-03:55:34",
                    "content": "You have to pay people for good documentation, because no one wants to write it and maintain it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "50",
                    "likes": "4",
                    "time": "03/02/2019-16:34:18",
                    "content": "I like to write good documentation, and I\u2019m not alone.  The pros at it love to do it.  And lots of people like to get paid for whatever value they create, because they need food, shelter, and medicine. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 8.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pdaian",
                    "index": "51",
                    "likes": "4",
                    "time": "04/02/2019-17:01:09",
                    "content": "Obviously I have some interest in seeing the Jello Paper adopted, so take my $.02 with this in mind.  A feature is available for use as soon as hits the mainnet. It will need to be implemented before that, but currently EIPs aren\u2019t merged with the Yellow Paper until after that, because we are moving too fast and haven\u2019t the resources to do better. Once the Yellow Paper is updated future implementations can refer to it. Until then you have to read the EIP and the Yellow Paper. Tests get written partly before and partly after an EIP hits the mainnet, depending on how quickly we are moving.  I think this is emblematic of the problems with the Yellow Paper.  Few people understand it, fewer want to touch it, and at the end of the day it trails production because its utility is somewhat limited to being translational.  I think the Jello Paper provides a lot more value in the release cycle that makes it worth updating before releasing code to mainnet. For example, the Constantinople reentrancy probably would have been caught through a Jello Paper update, assuming KEVM had a re-entrancy model (it currently does not but AFAIK one is being actively investigated); a lot of existing contracts in integration tests likely would have failed symbolic re-entrancy safety checks under the new EIP changes.  For most people it shouldn\u2019t matter which spec is primary. They will use the one that works for the purpose at hand, on the promise that they are equivalent. It\u2019s the working group\u2019s job to keep that promise.  I think what the RV and K folks want to see from the Ethereum community is commitment to long-term maintenance of the Jello Paper and use in documentation / communications material.  The Jello Paper and KEVM should be independent of RV Inc., UIUC, or any of its other stakeholders such as smart contract auditors who are actively using it. A commitment to maintaining the spec would be just as useful as funding for R&D if managed appropriately, and could be even more useful for ensuring the independence and antifragility of the document. I totally agree with the Hydra approach\u2026 I don\u2019t think there should necessarily be one official specification, but the Yellow Paper has unfortunately grown to sort of inhabit that space, and some official guidance that this is not the case could be helpful. It\u2019s also worth noting that K specs can contain e.g. LaTeX, so you can have a branch of the KEVM repository or a flag on that project which also generates either the beige(/yellow?) paper, the Jello paper, or a combination of the two where both notations are presented in-line (to help serve as translational if you need to use one of the specs for some reason but only want to understand/make reference to the other). At the end of the day, my own personal goals would be:  Seeing commitment to maintaining formal specs actively. Updating specs at appropriate points in the release cycle (before mainnet, testnet, etc). Making all specs involved more readable; merging the Yellow and Beige paper could fall here. Ensuring some spec exists in every high level category of specification (purely mathematical/on-paper, executable, test-generating, usable in verification, etc.).  If multiple goals can be hit optimally by a single repo as KEVM attempts, that\u2019s great, if not, other specs can be merged in or included. Avoiding excessive redundancy.  I think for example KEVM/the Jello Paper provides some clear value over the Yellow Paper in its ability to be used for proofs.  The yellow/beige papers could probably be somehow consolidated, though someone of course needs to take ownership for that.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.573387854284081
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "52",
                    "likes": "0",
                    "time": "04/02/2019-17:56:13",
                    "content": "    pdaian:  I think this is emblematic of the problems with the Yellow Paper. Few people understand it, fewer want to touch it, and at the end of the day it trails production because its utility is somewhat limited to being translational. I think the Jello Paper provides a lot more value in the release cycle that makes it worth updating before releasing code to mainnet.   There are people maintaining the Yellow Paper, and that situation is improving since Gavin released the copyright.  I think the issue of whether we can get the specs ahead of the code is independent of the form of the specs. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.377551020408164
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "53",
                    "likes": "2",
                    "time": "04/02/2019-18:07:30",
                    "content": "    pdaian:  I think what the RV and K folks want to see from the Ethereum community is commitment to long-term maintenance of the Jello Paper and use in documentation / communications material.   I just want to see long-term commitment to a good specification, and a good process.  And I\u2019m seeing lots of good ideas here. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 8.499999999999998
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/grosu",
                    "index": "54",
                    "likes": "1",
                    "time": "04/02/2019-21:42:01",
                    "content": "We are on the same page, @gcolvin.  Cannot speak for everybody, but I can speak for the RV, UIUC and K teams: we would be glad to take the task of properly documenting the KEVM seriously.  You and @expede and anybody else who is interested are very welcome to help, even if only with suggestions for notation and working.  I know it, in particular, that you dislike the XML-like notation for semantic cells in K.  In fact, K is very flexible wrt syntax; you can literally choose whatever syntax you want for any symbol.  Moreover, as Philip pointed out, we can also generate Latex from K definitions, and you can pick whatever Latex macro you wish for any symbol.  See, for example, the bubbles in this paper: http://fsl.cs.illinois.edu/FSL/papers/2013/rosu-serbanuta-2013-k/rosu-serbanuta-2013-k-public.pdf.  For example, this is how the program configuration looks like in a C-like language:  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.9907407407407405
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/grosu",
                    "index": "55",
                    "likes": "1",
                    "time": "04/02/2019-21:43:22",
                    "content": "Here is how the semantics of variable lookup looks like:  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/grosu",
                    "index": "56",
                    "likes": "1",
                    "time": "04/02/2019-21:44:02",
                    "content": "And here is something more complicated, like exceptions in the same imperative language:  SIMPLE-Exceptions.PNG493\u00d7560 45.4 KB  The point is that this can be easily changed and we would be very glad to work with you and anybody interested to come up with the most appropriate notation for the KEVM.  Not everybody needs to see the textual definition, many can only read the PDF generated out of it, following whatever notation we all agree upon. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.287878787878788
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "57",
                    "likes": "2",
                    "time": "05/02/2019-22:58:56",
                    "content": "I think that this is a major advantage for K (and the Jello Paper). We can generate classic semantics (BMF, judgements, &c), a custom backend for YP-style idioms, and many more. Rather than duplicating a bunch of work N times to support N docs (in one or more repos \u2014 I really don\u2019t think that\u2019s the issue), we can have one canonical spec in K that generates whatever notation we want. It still leaves open the ability to write other specs by hand. I think that this conversation does need to distinguish between concerns of notation and TMR or n/m specs. For example, I strongly agree with the former, and hugely disagree with the later  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.098958333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "58",
                    "likes": "5",
                    "time": "08/02/2019-16:32:37",
                    "content": "I\u2019m just going to throw something out there having been previously un-involved in this conversation. To me, it seems obvious that the yellow paper is past its useful lifetime. I\u2019ve read it many times, and I can agree that it is dense. It\u2019s nearly impossible to update as well. (As is evidenced by the fact that it doesn\u2019t keep up with the code).  To the extent that the Jello Paper can be more easily updated, and that it can, over time, become the generating document for all sorts of things (Latex specs, test cases, formal verification), it seems to me an obvious choice. At this point, instead of asking if the Jello Paper should be the formal spec, I think we should all simply say \u201cThe Jello Paper is the official spec.\u201d  So: \u201cThe Jello Paper is the official spec.\u201d I would go further to propose that the magicians make a concrete statement (or \u201csense of the fellowship\u201d) at its next meeting to the same effect. The stated purpose of the magicians is to guide the technical direction of the ecosystem. This seems like a clear win. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.472222222222223
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "59",
                    "likes": "1",
                    "time": "08/02/2019-20:07:56",
                    "content": "    tjayrush:  I would go further to propose that the magicians make a concrete statement (or \u201csense of the fellowship\u201d) at its next meeting   It\u2019s not that easy in this decentralized community.  The current Yellow Paper editors operate independently of the Magicians, so such a statement wouldn\u2019t necessarily carry much weight, even if you could get a consensus behind it.   And the Yellow Paper editors operate independently of the EIP process, so the usual course of forming a Ring and getting to consensus on an EIP to improve the Yellow Paper isn\u2019t there.  The Yellow Paper being the current \u201cofficial spec\u201d that creates a bit of an impasse.  @jpitts is trying to start up a Specification working group to pull together interested people, so I hope he drops by and explains where that is going. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.106481481481482
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "60",
                    "likes": "3",
                    "time": "08/02/2019-20:21:25",
                    "content": "Why do \u201cthe current yellow paper editors operate independently of the Magicians\u201d? Why do \u201cthe current yellow paper editors operate independently of the EIP process\u201d? Why don\u2019t the future Jello paper editors work with the Magicians and the EIP process? Open question to anyone who can answer: are there known issues with the K Framework that allow for the possibility of an ill-defined spec? There is clearly the possibility of an ill-defined spec in the current methodology, so I would think we would be trying to move towards more rigor. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.2727272727272725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "61",
                    "likes": "4",
                    "time": "08/02/2019-22:01:16",
                    "content": "I think we\u2019re just going to start filing issues, specifying new EIPs in K, and doing the work. Not too complicated  If people want to maintain the Yellow Paper \u2014 great! It\u2019s all time and effort. Tightening the EIP process for Core EIPs to make it clear when the specs need to be done is also a good process. Especially if they can assist in testing process and so on. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.025974025974026
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "62",
                    "likes": "2",
                    "time": "09/02/2019-00:12:54",
                    "content": "    tjayrush:  Why do \u201cthe current yellow paper editors operate independently of the Magicians\u201d? Why do \u201cthe current yellow paper editors operate independently of the EIP process\u201d? Why don\u2019t the future Jello paper editors work with the Magicians and the EIP process?   Reasons the YP isn\u2019t a Magician\u2019s Ring yet:  We can\u2019t assume by default that YP or other important artifacts of Ethereum belong to any group AFAICT, Yellow Paper editors aren\u2019t organized enough to be called operating The YP is not an EIP, although it should be accumulating EIPs  I predict that YP, JP, and \u201cprotocol tests\u201d will be loosely maintained by a single group, each sub-project being somewhat independent, and that this single group will eventually become a Ring  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.018406593406594
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "63",
                    "likes": "1",
                    "time": "09/02/2019-01:48:51",
                    "content": "The Yellow Paper predates the Magicians by years. It didn\u2019t get updated well for quite a while because of copyright hassles.  Those are settled, more people are working on it\u2013with Nick Savers in the lead\u2013and it\u2019s keeping up with the EIPs better.  I\u2019d say they are as organized as most anything else around here   github.com/ethereum/yellowpaper     \t      Maintainer(s) for this repo            opened 03:25AM - 10 Jan 19 UTC             closed 05:20PM - 05 Feb 19 UTC               bmann               Hey all, trying to figure out who maintains this repo, and is reviewing PRs and other items on a regular basis. From...         ",
                    "links": [
                        "https://github.com/ethereum/yellowpaper/issues/725",
                        "https://github.com/bmann"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.910714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "64",
                    "likes": "1",
                    "time": "09/02/2019-02:01:58",
                    "content": "@grosu On notation, I think you know that getting rid of the pseudo-XML would remove about 90% of my distaste for the syntax.  And a complete K spec of Ethereum would be incredibly useful regardless of the fate of the Yellow Paper.  Funding is another matter, and you are not the only team lacking it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "65",
                    "likes": "2",
                    "time": "09/02/2019-17:06:58",
                    "content": "Yes. I\u2019m not disagreeing. I just want to stop talking and continue doing. There is no need to talk about one vs the other. People can just do the work. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 4.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ehildenb",
                    "index": "66",
                    "likes": "2",
                    "time": "09/02/2019-20:04:53",
                    "content": "Exactly my sentiment  People will vote with their time and code. I\u2019ll continue to help maintain KEVM, people are welcome to contribute PRs. With KIELE already existing, and KWASM around the corner, I think having a common spec language will yield increasing returns, in the sense that once you learn K once you can read all the specs that are developed in K. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.0625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ehildenb",
                    "index": "67",
                    "likes": "0",
                    "time": "09/02/2019-20:09:19",
                    "content": "Having a nicer presentation has been discussed many times, funding and/or devs would help turn discussions into action  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "68",
                    "likes": "2",
                    "time": "11/02/2019-08:50:19",
                    "content": "<die> xml </die>  Believe me, we are all looking for money for K.  Sort of a love/hate relationship for me, but at my age I\u2019m used to those. @grosu @ehildenb @expede @boris ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/grosu",
                    "index": "69",
                    "likes": "1",
                    "time": "14/02/2019-15:22:52",
                    "content": "In case the bubble notation above is too colorful, then here is another style for displaying/presenting K semantics, using a more mathematical notation. See, for example, Denis Bogdanas\u2019 thesis on the Java semantics, specifically the Appendix: https://fmse.info.uaic.ro/publication/a-complete-semantics-of-java/.  For example, here is a snapshot:  Capture.GIF780\u00d7144 10.7 KB  It is really easy to implement such variations; all it takes is to implement the K Latex macros differently in k.sty.         ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/7/783d60347b2c4b6cc40d3f887269246e24be4a89.gif"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.880952380952381
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "70",
                    "likes": "0",
                    "time": "14/02/2019-21:37:57",
                    "content": "    grosu:  In case the bubble notation above is too colorful, then here is another style for displaying/presenting K semantics, using a more mathematical notation   These are all better, depending on the audience.  What are the chances of generating (or in some way automatically aligning with) something like the ordinary math of the Yellow Paper from a K specification?  The math itself is no big deal: \u2018and\u2019, \u2018or\u2019, \u2018not\u2019, \u2018there exists\u2019, \u2018for all\u2019, \u2018if and only iff\u2019, \u2018is an element of\u2019 \u2026 It\u2019s the presentation of the math that hurts, and the presentation could easily be much better.  And as bad as it is I can follow the Yellow Paper\u2019s description of the EVM much more easily than I can KEVM.   (And yes, that\u2019s because I\u2019m too lazy to learn much K until I really have to, whereas I\u2019ve been dealing with bad math notation for over five decades  That is, I want the power of K, but I don\u2019t want to give up the familiarity of ordinary math to myself and most any other engineer or scientist. Failing that, I\u2019d go for a syntax closer to either Python or Solidity, as those are languages most used by the community for describing algorithms and interfaces. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.422348484848484
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "71",
                    "likes": "0",
                    "time": "14/02/2019-21:42:44",
                    "content": "    expede:  I think that this conversation does need to distinguish between concerns of notation and TMR or n/m specs. For example, I strongly agree with the former, and hugely disagree with the late   Sorry\u2026 what are TMR and n/m? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "72",
                    "likes": "0",
                    "time": "14/02/2019-21:58:11",
                    "content": "Correct me if I\u2019m wrong @grosu (you\u2019re more of an expert on K), but it\u2019s totally possible to generate any arbitrary notation, but there needs to be such a generator backend. I\u2019m not sure if one exist for the YP\u2019s notation as of yet, but we could always write one  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.708333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "73",
                    "likes": "0",
                    "time": "14/02/2019-22:03:16",
                    "content": "TMR is \u201ctriple modular redundancy\u201d (AKA the chronometer example from The Mythical Man Month) n/m (read \u201cen of em\u201d) is the generalization of the above. TMR is 2/3, but you can have other ratios depending on the tolerances in your system (ex. 7/9) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None"
                    ],
                    "Sentiment": 4.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "74",
                    "likes": "0",
                    "time": "15/02/2019-05:00:27",
                    "content": "Ah yes.  Yet another TLA  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "635"
}