{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/add-opcode-to-access-storage-trie-root-hash-for-account/6142",
            "title": "Add opcode to access storage trie root hash for account ",
            "index": 6142,
            "category": [
                "EIPs"
            ],
            "tags": [
                "opcodes",
                "trie"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "1",
                    "likes": "0",
                    "time": "03/05/2021-07:53:41",
                    "content": "I would like to propose to add an opcode that allows accessing the storage trie root hash for an account. This would allow to perform storage verification and gas optimizations.  Verification Currently it is impossible to verify that nothing has changed inside the storage tree of a specific account. There are some cases where this is very interesting to know. E.g. assuming you have a smart contract wallet and you want to ensure that nothing is changed in the storage tree during an execution of a internal transaction. Currently this would be quite expensive or impossible (as you would have to know all storage slots and compare them before and after). By comparing the storage tree root hash this could be simplified.  Gas optimizations A big chunk of gas costs are related to storage read. By adding read access to the storage trie root hash it is possible to write contracts in a \u201chybrid\u201d stateless manner. E.g. provide the state to the user still via view functions, but for function that do on chain computations the state could be provided via the calldata and verified against the root hash. This could be done even for other accounts than the own, potentially allowing contracts to \u201caccess\u201d state of other accounts.  Considerations  The gas costs should probably be similar to EXTCODEHASH If contracts perform verification on the root hash, they might break if a different hashing algorithm (instead of a merkle trie) is used. Should this be an opcode or rather a precompile.  Would love to hear some opinions on this opcode  ",
                    "links": [],
                    "GPT-summary": "The author proposes adding an opcode that allows accessing the storage trie root hash for an account, which would simplify storage verification and gas optimizations. The author also raises some considerations, such as the gas costs and the possibility of contracts breaking if a different hashing algorithm is used. The post does not contain any advertising or collaboration requests.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.966931216931217
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "2",
                    "likes": "0",
                    "time": "03/05/2021-18:45:20",
                    "content": "I get the impulse behind doing something like this, but it would unfortunately be a bad idea in practice imo, for forward-compatibility reasons. Namely, it would severely hamstring our ability to move from the current two-layer hexary patricia tree structure to a different and better tree structure (eg. single-layer Verkle trees like this proposal). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.4
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "3",
                    "likes": "0",
                    "time": "04/05/2021-16:10:34",
                    "content": "Yeah I talked with Artem from TurboGeth about it and I get the issues. Maybe I should rephrase the question. It would be nice to have a way to check or prevent storage changes of a specific address. E.g. staticcall will prevent any state changes on any address. I would be nice to limit it to the storage (excl balance) of the current address. To be fair that is super specific to my use case so I tried thinking of a way that also brings value to others. I am not sure what the best way would be, but I would assume that making guarantees about the whole storage of a contract (not just specific) could be very useful. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.488888888888889
                }
            ]
        }
    ],
    "group_index": "1328"
}