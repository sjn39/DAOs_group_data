{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2972-wrapped-legacy-transactions/4604",
            "title": "EIP-2972: Wrapped Legacy Transactions ",
            "index": 4604,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "1",
                    "likes": "0",
                    "time": "12/09/2020-10:16:37",
                    "content": "Simple Summary Two new transaction types for wrapping legacy transactions with and without a chain ID. Abstract Introduces two new EIP-2718 transactions that are signature compatible with legacy transactions and can be automatically upgraded by any client. 0x00 || yParity || r || s || 0x65000000 || rlp(nonce, gasPrice, gasLimit, to, value, data) 0x01 || yParity || r || s || 0x65000000 || rlp(nonce, gasPrice, gasLimit, to, value, data, chainId, 0, 0)  ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-1985-sane-limits-for-certain-evm-parameters/3224/42"
                    ],
                    "GPT-summary": "The post introduces two new EIP-2718 transactions that wrap legacy transactions with and without a chain ID. The proposal is explained in detail, and a third party provides constructive criticism and asks questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.454545454545454
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "2",
                    "likes": "0",
                    "time": "14/09/2020-15:31:22",
                    "content": "A few questions:  What is the goal of wrapping legacy transactions today? The legacy transaction will continue to be valid for a period of time. I think this idea should be pursued once it is deemed necessary, rather than just preemptive. Is supporting unprotected (no chain id) transactions necessary? It would be great to determine if this functionality is still used.  @pipermerriam has convinced me that some smart transitions to SSZ can provide a lot of benefits to eth1, particularly in the area of witnesses. It would be useful to understand how the choice of SSZ here is useful, as well as what areas of eth1 would be most beneficial to convert to SSZ. Hopefully doing so can help us avoid to using SSZ just to use it.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.16547619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "3",
                    "likes": "1",
                    "time": "14/09/2020-18:55:33",
                    "content": "    matt:  What is the goal of wrapping legacy transactions today ? The legacy transaction will continue to be valid for a period of time. I think this idea should be pursued once it is deemed necessary, rather than just preemptive.   That would be a discussion to have regarding mainnet inclusion, which I believe is now handled over at the eth1.0 specs repository now.    That being said, step 1 for deprecation is to provide a new option.  The sooner we do that, the sooner we can start the next steps of the deprecation process (such as defining an end of life date and a mechanism for slowly killing off stragglers).     matt:  Is supporting unprotected (no chain id) transactions necessary? It would be great to determine if this functionality is still used.   Yes, it is commonly used to create deployment transactions that can be executed on all chains at the same address via a vanity signature (create signature by hand, recover address, send ETH to address, submit transaction).  There are EIPs out there that provide a bettere way to achieve that, but they aren\u2019t available yet. Even if we didn\u2019t want that, in order to ensure that someone with a signature from before EIP-155 can still submit that transaction to the blockchain we have to continue supporting both formats.  There is a strong desire to ensure that someone who has an old hardware wallet or something doesn\u2019t lose the ability to sign transactions.     matt:  It would be useful to understand how the choice of SSZ here is useful, as well as what areas of eth1 would be most beneficial to convert to SSZ. Hopefully doing so can help us avoid to using SSZ just to use it.   Agreed! Unfortunately, I\u2019m not the right person to do this.  Would love to get some help fleshing out the Rationale by someone more knowledgeable than I on why SSZ! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.929859822716965
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "4",
                    "likes": "0",
                    "time": "14/09/2020-20:25:19",
                    "content": "I also see that yParity is expected to be either 0 or 1. What is the rationale for departing from the standard 27 or 28 used by Ethereum today (tbh, not sure where those numbers came from \u2013 best I\u2019ve only found this explanation by Peter)? Edit: from the yellow paper:  It is assumed that v is the \u2018recovery identifier\u2019. The recovery identifier is a 1 byte value specifying the parity and finiteness of the coordinates of the curve point for which r is the x-value; this value is in the range of [27, 30], however we declare the upper two possibilities, representing infinite values, invalid. The value 27 represents an even y value and 28 represents an odd y value.  Unless there is a strong motivation to deviate, I think it is best to v to continue being either 27 or 28. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.958333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "0",
                    "time": "16/09/2020-15:41:57",
                    "content": "    matt:  What is the rationale for departing from the standard 27 or 28 used by Ethereum today (tbh, not sure where those numbers came from \u2013 best I\u2019ve only found this explanation by Peter)?   The rationale is that it is a point of confusion and a source of bugs in integration software and there was no good reason for 27/28 in the first place.  It was an artifact of copying Bitcoin that just kind of meandered its way into Ethereum and has confused developers ever since.  One nice property of 0/1 is that you can treat it as a boolean in code, which results in code like yParity ? x : y rather than v == 27 ? x : y which is not only marginally simpler, but also more intuitive since the variable name now actually makes sense to anyone familiar with the concept of parity in mathematics. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.894230769230769
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tkstanczak",
                    "index": "6",
                    "likes": "0",
                    "time": "22/09/2020-22:39:10",
                    "content": "I think everywhere else we save signatures in the order of r, s, v (yParity) so maybe better to do the same here? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "7",
                    "likes": "0",
                    "time": "24/09/2020-10:17:04",
                    "content": "This EIP no longer specifies a new transaction type.  However, the feedback still applies to new EIPs that do.  In the transaction signatures previously, it was v,r,s I believe?  Also I think byte array encoded signatures also lead with the parity byte?  Where does parity byte come last? ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.132575757575758
                }
            ]
        }
    ],
    "group_index": "1144"
}