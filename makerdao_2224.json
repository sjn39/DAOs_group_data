{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/zksync-era-dai-bridge-and-zksync-era-platform-technical-assesment/19992",
            "title": "[zkSync Era] DAI Bridge and zkSync Era Platform Technical Assesment ",
            "index": 19992,
            "category": [
                "Core Units",
                "Protocol Engineering"
            ],
            "tags": [
                "pe-001",
                "multichain-domain-work",
                "zksync"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/bartek",
                    "index": "#1",
                    "likes": "9",
                    "time": "27/02/2023-19:05:16",
                    "content": " zkSync Era Dai Technical Bridge Risk Assessment  Introduction zkSync Era has just entered the \u201cFair Launch Alpha\u201d stage which will allow whitelisted applications to deploy on the mainnet zkSync Era rollup.  image1254\u00d7654 92.3 KB  As indicated in the previous forum post PECU through previous phases was actively involved in deep technical conversation with zkSync team and has developed a version of simple DAI bridge with the full suite of unit and end-to-end tests that cover full x-chain communication. zkSync is the first zkRollup that aims to be EVM compatible (at the language / tooling level). Given that zkRollups in general are considered the most advanced and secure scaling solutions for Ethereum, language-level EVM compatibility that zkSync Era offers for developers meant that PECU could develop the bridge using its own resources rather then forming a separate core unit, as was the case with Starknet where the technical expertise around developing L2 application in StarkNet native language, CAIRO, are required. This document explains the architecture of zkSync Era platform, DAI bridge and risks associated with both the platform and the actual bridge implementation. This is to be followed by the specific recommendations from Protocol Engineering CU and Risk CU of specific risk mitigation strategies if DAI zkSync Era bridge, and possibly later full MCD deployment (dss-bridge) are to be deployed on zkSync Era. The following risk assessment is based on the previous risk assessment of StarkNet. As the overall architecture of both zk rollups is very similar, many sections of this document are adapted from the previous post on StarkNet.  Summary of the zkSync Platform  Overview zkSync is a generalized computation platform that runs as a \u201cLayer 2\u201d on top of the Ethereum blockchain. It is implemented as a zkRollup, meaning that the result of the computation of L2 transactions (state root of a resulting L2 state) is periodically committed to the L1 Ethereum contract. The validity of the computation (and, hence, the resulting state root) is guaranteed by sending a zero-knowledge proof (SNARK proof) alongside the state update that is verified by L1 Verifier contract. The statement that is verified by the Verifier, and received from the Prover can be understood as \u201cI know a valid set of transactions, i.e. signed appropriately, etc\u2026 that, when executed taking the state of the last executed block as a starting point, result in a new state of which the state root is, e.g. 0x52324a4523e34234e55234dc5230058234245. It is worth noting that at no point does the Prover reveal (or needs to reveal) the transactions that are part of the L2 block. These can be retrieved from L2 full nodes assuming users trust them.  image1220\u00d7872 92.2 KB  The diagram above presents the broad architecture of L1 contracts that comprise zkSync on Ethereum:  zkSync 2.0 (Era) - The main Rollup contract. Validator commits blocks, provides zkProof which is validated by the Verifier contract and process transactions (executes blocks). During block execution it processes L1 \u2192 L2 and L2 \u2192 L1 transactions. It uses separate Verifier to validate zkProofs. Governance manages list of Validators and can set basic rollup parameters. zk Verifier - this is a Verifier contract that checks standard EC (Elliptic Curve) Pairings that are used to verify zkSnark statements. As such it it implements zkProof verification logic L1EthBridge - Standard bridge for depositing ETH to zkSync Era. This contract stores the following tokens: ETH.  Like most zkRollups, the L2 part of the zkSync system consists broadly of two main components - Sequencer responsible for accepting and verifying end-user transactions, and Prover that builds SNARK Proof of the transaction batch execution and sends that proof to L1 Verifier. Both Sequencer and Prover, at the time of writing, are closed source components, however zkSync intends to open source all code upon reaching the next milestone.  L1 \u2192 L2 Messaging To send a message to L2 from L1, a user (or a contract) invokes requestL2Transaction() method of a main zkSync contract passing the destination L2 contract address, method selector and a payload. On L1, the zkSync contract emits a NewPriorityRequest event. This event should be picked up by the L2 Sequencer and the destination contract should be invoked. At the moment there is no built-in protocol guarantee that L1 \u2192 L2 message will be processed by the Sequencer on L2 however this is intended to be built once zkSync reaches next milestones. Processing L1 \u2192 L2 message on L2 will generate so called l2Log which will be eventually committed by the Prover along with the L2 state and a zkProof of a valid L2 execution. What that means is that L1 contract (including L1 \u2192 L2 message sender) can inspect if the L1 \u2192 L2 message was successfully executed or it was perhaps reverted (because it e.g. ran out of gas on L2 or some other reason)  image1262\u00d7626 76.1 KB  See this twitter thread for more implementation details of the the L1 \u2192 L2 messaging mechanism.  L2 \u2192 L1 Messaging To send a message from L2 to L1, a user (or a contract) invokes sendToL1() call on special \u201csystem messenger\u201d contract on L2. This method should be processed by the Sequencer (again - we need to assume that Sequencer is not censoring user\u2019s requests at this point). The messenger contract allows L2 contract to send any arbitrary message to L1 without specifying the destination receiver (so in effect it is using publish-subscribe model). The message sent will be published eventually as calldata on L1 and the proof of message being sent will be available to any L1 contract. Once message is delivered to L1 it must be relayed (any external permissionless relayer can do it) to whatever contract may be expecting such message. It is therefore up to the receiving contract to make sure that the message is not delivered to it more than once (so that, for example, it does not handle twice the same withdrawal request).  image1262\u00d7662 82 KB  See this twitter thread for more information about L2 \u2192 L1 messaging mechanism.  Bridges Bridges to/from zkSync are permissionless and can be built by anyone for any token. Similarly to StarkNet project PECU have worked with zkSync team to make sure that end users will be provided with the common token bridge UI that will use specific bridges for given tokens.  Platform Risks  zkSync contracts receive malicious code upgrade zkSync, being still in the beta stage, is instantly upgradable by the 3/6 MultiSig with keys being managed currently by zkSync team. Depending on which system component is maliciously upgraded, it can result in fully draining all the funds kept in all L1 bridge escrows and a complete collapse of the whole platform.  zkSync maliciously upgrades verifier zkSync can upgrade the zkProof verifier. A malicious upgrade can potentially turn off zkProof system entirely, or introduce \u201csilent backdoor\u201d that will be difficult (although not impossible assuming the new contract is verified) for independent observer to detect.  Proof system is implemented incorrectly Zk-proof system used by zkSync is based on SNARKS and - as the final step - it checks the validity of Eliptic Curve Pairing equations using precompiles introduced by Ethereum to make it computationally possible in terms of gas usage. Compared to STARKS, proof system based on SNARKS use advanced cryptography Elliptic Curve Pairings), and it requires a trusted setup making it arguably more risky and not future quantum-computing resistant. More importantly the proof system, in the Verifiier contract, relies on proper setup and initialization as can be seen by the following code snippet:  image1264\u00d7630 229 KB  The \u201cmagic numbers\u201d seen above can be thought of as representing the program being verified by the Verifier. As of today we are not aware of any independent \u201creview\u201d that these numbers actually indeed correspond to the zkSync L2 \u201coperating system\u201d.  Sequencer censors L2 \u2192 L1 (withdrawal) message The Sequencer can censor any transaction from the L2 user (including a withdrawal transaction) and right now there is no mechanism to prevent that, similar to the mechanism that is used by both Optimism and Arbitrum, namely allowing users to post their L2 transactions via an uncensorable L1 Inbox. Individual transactions from individual users may be censored as well as, for example, any attempt to withdraw the DAI token from L2. The \u201cforce-inclusion\u201d mechanism is planned to be included in the next project milestone.  Sequencer censors L1 \u2192 L2 (deposit) message The Sequencer can ignore (censor) users L1 \u2192 L2 messages (including a request to mint L2 tokens as a result of a deposit transaction). Given the asynchronous nature of L1 \u2192 L2 calls this may result in users\u2019 tokens being stuck in L1 escrow w/out equivalent L2 tokens minted.  Sequencer stops posting new state updates for a given period of time The Sequencer can stop posting new state updates either as a result of a bug or a malicious intent. When the Sequencer is down no transaction can be processed including withdrawal requests.  Sequencer stops posting new state updates indefinitely When the Sequencer stops posting new state updates indefinitely, there is no mechanism to use an \u201cescape hatch\u201d L1 escrow even though zkSync state can be reconstructed from state diffs posted to L1. The escape hatch for zkSync is planned to be included in the next milestone.  zkSync DAI Bridge Implementation Specific Risks  Overview Bridge provides two main functions: deposit() and finalizeWithdrawal(). On deposit, bridge parks funds on the address of L1Escrow contract, then sends finalizeDeposit message to L2 side of the bridge where L2 DAI is minted to the destination address. On L2 withdrawal, L2 DAI is burned and a finalizeWithdraw message is sent to L1 where withdrawal should be finalized with finalizeWithdrawal method which will transfer DAI from escrow contract to the destination.  image1260\u00d7706 68.9 KB  Additionally there is a claimFailedDeposit() method that allows user to claim back DAI that may be stuck in a bridge if L2 message reverts (and - as a result - no DAI will be minted on L2). To claim back L2 DAI a user must present a cryptographic proof of a failed L2 transaction.  zkSync DAI zkSync execution environment does not significantly differ from EVM and zkSync DAI is functionally equivalent to its EVM counterpart. All default ERC20 functionality such as transfer, transferFrom, approve, allowance, balanceOf and totalSupply are implemented. Additionally there is a mint function which is used by the l2_dai_bridge to mint tokens after a deposit from L1. Symmetrically there is also a burn function which is used by the bridge during withdrawal from L2. Access to the mint function is restricted by the authorization system described below. Usage of burn function is restricted by token transfer allowances. One notable addition is the support for account abstraction that is used by zkSync Era. This feature allows smart wallets on L2 to implement their own validation primitives (as opposed to the uniform security scheme on L1 account which requires each transaction to be singed by an EOA address). This is reflected in the permit function of DAI on L2.  Authorization In a similar way to other Maker subsystems, bridge contracts use a very simple multi-owner authorization system that restricts access to certain functions of the contract interfaces:  L1DAITokenBridge: close L1Escrow: approve L1GovernanceRelay: approve dai: mint L2DAITokenBridge: close  It is expected that admin rights to the bridge contracts will be given to Maker Governance.  Upgradability DAI deposited on L1 are held by the L1Escrow contract. This separation of the funds from the bridge logic makes the system upgradable: the L1DAITokenBridge logic contract can be replaced independently of the escrow holding the DAI. Upgrades require deployment of new versions of the bridge contracts and closing of the old version. Due to the asynchronous nature of L1 <> L2 communication, it is a two step procedure. First close method on L2DAIBridge and L1DAIBridge should be called, so no new deposit or withdrawal requests can be initiated. Then after all async messages that were in transit are processed, the bridge is effectively closed. After that, escrow approval on L1 and token minting rights on L2 can be revoked. Upgrade procedure requires admin access to both bridge and escrow contracts. It is possible to irreversibly disable upgradability by revoking admin rights on core bridge contracts.  Risks  Minting uncollateralized L2 DAI Direct access to the mint method on L2 dai or to finalizeDeposit() on L2DAITokenBridge will result in a creation of uncollateralized L2 DAI.  Unauthorized Mints There are two cases which would allow the execution of unauthorized mints:  bug in authorization system implementation misconfiguration - authorization system is a very close copy of binary authorization system used in other parts of Maker system   Getting access to L1Escrow Getting direct access to L1Escrow via incorrectly assigned allowance or getting indirect access by having a fake entry in L2 \u2192 L1 message queue will allow to immediately drain L1 DAI from L1Escrow.  Incorrect L1Escrow Allowance Access to allow method of L1Escrow is guarded by the same simple authorization system used throughout the Maker system.  Fake L2 \u2192 L1 message Correct content of L2 \u2192 L1 message queue in zkSync depends on correctness of corresponding L2 contracts sending L2 \u2192 L1 messages and on general rollup correctness.  Malicious/Buggy Bridge Upgrade Any upgrade to the system poses risk of introducing bugs or malicious code.  Possibility of preventive actions Ultimate value at stake is DAI locked in L1Escrow contract. Since zkSync is expected to finalize its state on L1 at most every several hours, there is very little time to organize any preventive action in case of uncollateralized DAI is minted on L2. Maker Governance with its 2 day delay won\u2019t be able to respond in time. L1EscrowMom provides a refuse method that sets L1Escrow allowance to 0. It can be used to freeze withdrawals immediately. As soon as the problem is fixed, Governance could increase the allowance. Refuse access is controlled by the AuthorityLike contract. It is expected to be set to: DSChief to bypass the governance delay. ",
                    "links": [
                        "https://github.com/makerdao/xdomain/tree/add-zkSync",
                        "https://forum.makerdao.com/t/starknet-dai-bridge-and-starknet-platform-technical-risk-assessment/13950",
                        "https://blog.matter-labs.io/open-source-is-freedom-8b1b914daa98",
                        "https://twitter.com/bkiepuszewski/status/1600792830129016832?s=20&t=w0e433oDe5pVNFWdRyrJyg",
                        "https://twitter.com/bkiepuszewski/status/1601138527508393990?s=20",
                        "https://etherscan.io/address/0x4e4943346848c4867F81dFb37c4cA9C5715A7828",
                        "https://github.com/ethereum/EIPs/blob/master/EIPS/eip-197.md",
                        "https://v2-docs.zksync.io/dev/developer-guides/aa.html#introduction",
                        "https://github.com/makerdao/xdomain/blob/b5b113446c015e666e6aac39fb012d548aa0bd61/packages/zksync-dai-bridge/contracts/l2/dai.sol#L222",
                        "https://docs.makerdao.com/smart-contract-modules/governance-module/chief-detailed-documentation"
                    ],
                    "GPT-summary": "The post is a technical assessment of the zkSync Era platform and its DAI bridge. It explains the architecture of the platform, the risks associated with it, and the risks specific to the DAI bridge implementation. The post also provides recommendations for risk mitigation strategies. The assessment is based on the previous risk assessment of StarkNet, as the overall architecture of both zk rollups is very similar. The post is not asking for feedback, advertising, or collaboration.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.469237968617108
                }
            ]
        }
    ]
}