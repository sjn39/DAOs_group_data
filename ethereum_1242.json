{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-3298-removal-of-refunds/5430",
            "title": "EIP 3298: Removal of refunds ",
            "index": 5430,
            "category": [
                "EIPs"
            ],
            "tags": [
                "opcodes",
                "gas"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "1",
                    "likes": "2",
                    "time": "26/02/2021-14:01:13",
                    "content": " Simple Summary Remove gas refunds for SSTORE and SELFDESTRUCT.  Link   github.com/ethereum/EIPs         Removal of refunds   ethereum:master \u2190 ethereum:vbuterin-patch-1            opened 01:59PM - 26 Feb 21 UTC               vbuterin             +95 -0           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/3298",
                        "https://github.com/vbuterin",
                        "https://github.com/ethereum/EIPs/pull/3298/files"
                    ],
                    "GPT-summary": "The post is an explanation of a proposal called EIP 3298, which suggests the removal of gas refunds for SSTORE and SELFDESTRUCT. The author provides a link to the proposal on Github and mentions that it has been opened for review. The post may receive constructive criticism and auditing from third parties.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bgits",
                    "index": "2",
                    "likes": "1",
                    "time": "26/02/2021-15:36:01",
                    "content": "Rather than remove gas refunds it might be worth trying to educate developers on the usage first. Gas refunds seem like a viable solution to reduce user costs until L2 solutions are more established. For example there are DeFi protocols that issue contracts (both in the legal and onchain sense) whose operating period has an expiration date. Such protocols also issue new contracts periodically as old ones expire, having a strategy to SELFDESTRUCT expired contracts upon creating new ones will not only prevent state bloat but reduce gas costs for the users that make these calls. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.9015151515151505
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "3",
                    "likes": "2",
                    "time": "26/02/2021-20:57:06",
                    "content": "Relevant prior discussions: EIP-2751 As a holder of millions of dollars worth of refunds, tokenized and otherwise, I would be strongly interested in a compensation plan. I can prepare an EIP for this. The search for parties to compensate can coincide with cleanup, which would reduce the amount of state formerly dedicated to this purpose. Hence I suggest postponing this change until the ETH2 merge. My current refund compensation plan would use a 50,000-block average of the gastoken\u2019s Uniswap-V2 WETH token ratios pre-fork to determine their compensation eth value, then replace their contract with another holding that much ETH. The new contracts would replace the free, freeUpTo, freeFrom, and feeFromUpTo methods to \u201cburn\u201d those tokens and send ETH to sender according to the ratio of burned supply to the remaining. The mint function would become a no-op. Then, all of the gastoken state could be removed with the hard fork. The supply-weighted average of GST2 and CHI\u2019s resulting price can be used to value SSTORE refunds as well, such as GST1 and Cancel contracts. An alternative way to disable refunds gently would be to phase them out, with the refund decreasing by 1 every 1,000 blocks after activation. This approach would not require compensation, and they would clean themselves up automatically over time. Without compensation, I would be incentivized to floor the gas price to increase the likelihood that my refunds get purchased or used before they are deactivated, and/or seek legal action off-chain. But I suspect cleanup and compensation would be agreeable to all parties.  particularly in exacerbating state size  Quantitatively the space consumed is very minimal, several MB. There are ways to reduce this to about 1 MB that have been proposed in the past; they take advantage of the fact that gastoken contracts are all identical. I mentioned this optimization in the Motivation section of EIP-2185.  inefficiently clogging blockchain gas usage  They only \u201cclog\u201d blockchain gas usage during times of lesser congestion. During that time they are outbidding other activity that would also create space; but unlike that activity, the space is eventually cleaned up. Unlike a hypothetically-functional EIP-1559 variant, state growth is normalized and counter-balanced from the resulting block elasticity.  inefficiently  It can be made more efficient by increasing the refund    Refunds increase block size variance. The theoretical maximum amount of actual gas consumed in a block is nearly twice the on-paper gas limit (as refunds add gas space for subsequent transactions in a block, though refunds are capped at 50% of a transaction\u2019s gas used). This is not fatal, but is still undesirable, especially given that refunds can be used to maintain 2x usage spikes for far longer than EIP 1559 can.   It is not a problem that ethereum can use double it\u2019s current target because it\u2019s currently far below its capacity, which is good for sync times and state growth. But Binance Smart Chain is demonstrating that modern hardware can still sync the blockchain when the gasLimit/minute is >16x higher. It seems 4x is a recent concern due to EIP-1559, but since we are so very far below capacity I would pitch it as a strong advantage: block elasticity means lower highs during peak gas congestion from the additional capacity. Gastokens are also massively under-utilized, despite efforts to democratize their usage. Next, the duration that gastokens can be used to 2x capacity is limited by the current supply; gastokens are relatively scarce. Shortly, 4x is a non-issue because gas targets are coordinated around sync time and state-growth, not processing time. This is also why the miner-coordinated increase from 10m to 12.5m coincided with an unpredicted decrease in uncle rate. I\u2019m skeptical that EIP1559 will improve block elasticity, but that is another discussion. For the case that it doesn\u2019t, this should be delayed until after London. The gas price estimation user experience would be much worse with more volatility. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/2751#issuecomment-649855638",
                        "https://github.com/ethereum/EIPs/issues/911",
                        "https://github.com/ethereum/EIPs/pull/2185/files",
                        "https://notes.ethereum.org/@vbuterin/eip_1559_spikes",
                        "https://1inch-exchange.medium.com/1inch-introduces-chi-gastoken-d0bd5bb0f92b"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.368060860707919
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "4",
                    "likes": "2",
                    "time": "26/02/2021-21:09:43",
                    "content": "It has been suggested to keep metered refunds, where we refund SSTORE gas when you clear storage you set in the same transaction. I want to extend that suggestion: I suggest keeping a metered refund for SELFDESTRUCT so that if the contract is recreated in the same transaction, or destroyed in the same transaction it is created, the CREATE cost is offset. I suspect these would be the most-common use of SELFDESTRUCT post EIP-3298. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "5",
                    "likes": "0",
                    "time": "26/02/2021-23:07:18",
                    "content": "I have two points here: (1) If we do this EIP then eth_estimateGas will return the right gas values, since originally it returned the used gas minus the refunds, but now since the refunds are zero, it returns the actual gas limit value. So this is a good improvement. (Unless I am missing another point where EVM refunds gas, which is not removed in this EIP). (2) Currently, it is theoretically possible to run a block which executes (almost) twice the gas limit of the block. To do this, each transaction in the block has to have the maximum refund in gas (which is 50%), so we can execute twice as much gas in the block. If we remove the refunds, then this will definitely impact the amount of transactions which fit in a block, since any transaction which originally claimed a refund, will now use up more gas space of the block. This thus halves the amount of gas we can execute in the worst case of a block. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.280612244897958
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "6",
                    "likes": "1",
                    "time": "26/02/2021-23:08:00",
                    "content": "    jochem-brouwer:  (1) If we do this EIP then eth_estimateGas will return the right gas values, since originally it returned the used gas minus the refunds, but now since the refunds are zero, it returns the actual gas limit value. So this is a good improvement. (Unless I am missing another point where EVM refunds gas, which is not removed in this EIP).   You are mistaken. eth_estimateGas already returns the correct gas limit. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.221938775510204
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "7",
                    "likes": "1",
                    "time": "26/02/2021-23:09:31",
                    "content": "    jochem-brouwer:  (2) Currently, it is theoretically possible to run a block which executes (almost) twice the gas limit of the block. To do this, each transaction in the block has to have the maximum refund in gas (which is 50%), so we can execute twice as much gas in the block. If we remove the refunds, then this will definitely impact the amount of transactions which fit in a block, since any transaction which originally claimed a refund, will now use up more gas space of the block. This thus halves the amount of gas we can execute in the worst case of a block.   This is fine; miners can adjust the gas target. Historically tho, they haven\u2019t. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.070833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "8",
                    "likes": "1",
                    "time": "26/02/2021-23:12:45",
                    "content": " You are mistaken. eth_estimateGas already returns the correct gas limit.  Since when was this changed? Is there an EIP for this one or did clients just upgrade their estimate gas logic?  This is fine; miners can adjust the gas target. Historically tho, they haven\u2019t.  Hmm yeah you are right. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.170634920634921
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "9",
                    "likes": "1",
                    "time": "26/02/2021-23:14:52",
                    "content": "    jochem-brouwer:  Since when was this changed? Is there an EIP for this one or did clients just upgrade their estimate gas logic?   For go-ethereum it\u2019s been a gasLimit binary search since at least 2017. Perhaps it behaved differently on other clients tho. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 3.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thabaptiser",
                    "index": "10",
                    "likes": "5",
                    "time": "27/02/2021-00:07:05",
                    "content": "As of right now, refunds incentivize both the use of gastokens and the clearing of state when possible. The storage savings from breaking gastokens would be miniscule compared to the cost of de-incentivizing the clearing of state. When a user transfers their entire balance  of an ERC-20, they transfer balanceOf(...), that storage slot gets cleared, and they get a refund. However, if there were no refund, they would be incentivized to not clear the storage slot, and only transfer balanceOf(...) - 1, to save gas in case they ever wanted to re-acquire some of this ERC-20. The same logic can be applied to approvals, deposits/withdrawals into DeFi protocols, deployed contracts, and so on. Given how high gas prices are, and the competition to be \u201cgas efficient\u201d between DeFi projects, most projects would rush to implement patterns that keep storage slots open to save gas. The size of this state growth would likely be significantly larger than the impact gastokens have. In the worst case of no refunds, every storage slot a user touches would be permanently occupied, as clearing it would be inefficient with regards to gas. Additionally, gastokens are fairly sustainable. They are created with the purpose of deletion. Looking at CHI, the total supply today (1.6mm) is less thant it was on October 8th, 2020 (1.9mm). It peaked around December, at 3mm. The market cap of gastokens will be limited by gas volatility and the number of transactions per block. There is no reason to have excessive amounts of gastoken on-chain, as there is no profit to be had in minting gastokens that probably won\u2019t be used. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-3322-efficient-gas-storage/5470/21"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.031652661064426
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "11",
                    "likes": "0",
                    "time": "27/02/2021-00:37:56",
                    "content": "I wrote up the phase out alternative, now EIP-3300 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "12",
                    "likes": "1",
                    "time": "01/03/2021-22:40:22",
                    "content": " Additionally, gastokens are fairly sustainable. They are created with the purpose of deletion. Looking at CHI , the total supply today (1.6mm) is less thant it was on October 8th, 2020 (1.9mm). It peaked around December, at 3mm.  One other problem that I see with gastokens is that they are inherently inefficient. You need 20000 gas to make a gastoken but you only get 10000 gas from using it (the ratio for GST2 is similar), and so there\u2019s an extra 10000 gas that gets spent that provides no actual value to the network. Because the gas limit is bounded primarily by worst-case DoS attack limits, and not by average usage, we suffer the penalty of this wasted gas being part of the gas limit that everyone can use without getting any benefits out of it.  When a user transfers their entire balance of an ERC-20, they transfer balanceOf(...), that storage slot gets cleared, and they get a refund. However, if there were no refund, they would be incentivized to not clear the storage slot, and only transfer balanceOf(...) - 1, to save gas in case they ever wanted to re-acquire some of this ERC-20. The same logic can be applied to approvals, deposits/withdrawals into DeFi protocols, deployed contracts, and so on.  If we want to mitigate this, one idea is to just reduce the SSTORE gas cost in the nonzero -> zero case down to some very minimal value (eg. 100); note that the cold-storage-load cost introduced in EIP 2929 would still be applied on top of this. This would increase the worst-case write count to be about the same as the worst-case read count, but it would fix some of the mispricing issues. ",
                    "links": [
                        "https://gastoken.io/#comparison"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.130694444444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "13",
                    "likes": "1",
                    "time": "01/03/2021-22:56:05",
                    "content": "    vbuterin:  If we want to mitigate this, one idea is to just reduce the SSTORE gas cost in the nonzero -> zero case down to some very minimal value   This is insufficient because the difference is dwarfed by SSTORE_SET_GAS. Once you\u2019ve paid for that you should never give it up. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.286111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "14",
                    "likes": "0",
                    "time": "02/03/2021-21:08:59",
                    "content": "Here is a more comprehensive proposal. This does cut back some of the \u201csimplicity\u201d benefits of removing refunds, but OTOH it does allow us to retain most of the benefits of refunds while achieving the goals of (i) breaking gastoken, and (ii) removing block size variance.  Replace the \u201crefund\u201d counter with two counters: (i) a new_storage_slots_filled counter that increments every time a storage slot goes from zero to nonzero, and (ii) a storage_slots_cleared counter that increments every time a storage slot goes from nonzero to zero. At the end of a transaction, refund 15000 * max(storage_slots_cleared - new_storage_slots_filled, 0) gas. So every 15000 gas refunded must be matched by 15000 gas storage-increase gas paid, and so the maximum amount of gas spent on execution would not be able to exceed the gas limit. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.541666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "15",
                    "likes": "0",
                    "time": "04/03/2021-18:08:30",
                    "content": "    vbuterin:  (i) breaking gastoken   I should hope that\u2019s not the explicit goal, but you don\u2019t achieve it here; GST1 would still work.     vbuterin:  (ii) removing block size variance   You would still have block size variance because you have refunds.     vbuterin:  15000 * max(storage_slots_cleared - new_storage_slots_filled, 0)   Based on the text I think you got the subtraction backward but it\u2019s problematic either way.  Meaningful refunds seem necessary to incentivize good smart contract architectures where approvals and balances are zeroed when possible. These refunds currently introduce up to 2x block elasticity, which is good. From the Motivation it sounds like there is concern that 4x could be a DoS vector, but since Ethereum is so far under capacity, so-long as the opcodes are correctly priced I don\u2019t think DoS is an issue. With more than 2x elasticity we can have more stable gas prices, reliable confirmations, and handle the irregularities in demand. I agree that as a gas storage mechanism, current refunds are inefficient and waste storage, but if we had another refund mechanism that was slightly more efficient and didn\u2019t waste storage, classic gas tokens would be out-competed. We would lose the constant state growth property, but the elasticity would come much cheaper in both storage and computation. This can be done with three opcodes and a persistent account gas refund counter, which could implement a better gas token:   SELFGAS which pushed the current account\u2019s refund counter onto the stack  USEGAS which reduces the contract\u2019s refund count by up to the amount popped from the stack, adding the amount to the refund counter  STOREGAS which increases the current account\u2019s refund counter and consumes additional gas by the amount popped from the stack  This would preserve the gas market and the stability it provides, while phasing out usage of inefficient and wasteful alternatives. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.609307359307359
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "16",
                    "likes": "0",
                    "time": "04/03/2021-18:43:39",
                    "content": "I wrote up the efficient gas storage approach here. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "17",
                    "likes": "0",
                    "time": "04/03/2021-19:20:04",
                    "content": " I should hope that\u2019s not the explicit goal, but you don\u2019t achieve it here; GST1 would still work.  Now that I think about it, you are right; the refunds would be still able to cancel out the portion of gas usage that is new-storage-fills. The refund rule would have to be more restrictive (refund only if 0 = original = new != current) to solve that issue.  You would still have block size variance because you have refunds.  But this is not true, because the key invariant that remains is that gas spent on execution would not go above the gaslimit. Every 15000 gas refund would be matched by 15000 gas spent on filling a new storage slot.  Based on the text I think you got the subtraction backward but it\u2019s problematic either way.  I don\u2019t think it\u2019s backward! You refund only if you cleared more storage slots than you fill. Another thing worth considering is that clearing storage is going to be less useful in the future, if we are implementing either weak statelessness or state expiry. In fact, truly clearing storage would not even be possible; you would need to leave a stub to show that the value is zero, as opposed to the slot being not-yet-edited and the value needing to be dug up from the past. So in the longer term, having less good incentives to clear storage is not even such a useful thing. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.531164822831489
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "18",
                    "likes": "0",
                    "time": "19/03/2021-01:24:34",
                    "content": "The EIP 3403 discussions-to link points here. I do prefer 3403 to 3298 because it fixes 3298\u2019s storage misincentive, though my preference is still 3322 because I support block elasticity.  Remove the SSTORE refund in all cases except for one specific case: if new value and original value both equal 0 but current value does not, refund 15000 gas.  The 15000 number should probably be higher. I think the Istanbul refund for this scenario is 19800. Since this is a \u201cwarm read\u201d it should be cheap and also refund the bulk of the 20000 cost from SSTORE_SET. Since the proposal removes all refunds except for this case, it doesn\u2019t make sense to maintain a refund counter. Instead, the gas should be added to current gas counter. Should the gas used by a *CALL be negative, the surplus gas is returned to the gas counter, so that the cost negation works recursively. Then the refund counter can be removed entirely. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.430681818181818
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/saurik",
                    "index": "19",
                    "likes": "0",
                    "time": "01/04/2021-08:47:35",
                    "content": " You are mistaken. eth_estimateGas already returns the correct gas limit.  Huh\u2026 if I have a case where this isn\u2019t true\u2013due to refunds\u2013is this a bug I could thereby file and it would get fixed? I\u2019d looked through other issues and I was under the impression that the eth_estimateGas issues were just \u201cthis is known to not work and we aren\u2019t going to fix it\u201d ;P. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/saurik",
                    "index": "20",
                    "likes": "1",
                    "time": "01/04/2021-09:04:26",
                    "content": "So, I work on a layer 2 payments system that has to use storage to prevent replays (and the order is intrinsically arbitrary, so it can\u2019t use a monotonic nonce). I use one storage slot per payment. Right now, I\u2019ve got everything set up so that everyone would naturally \u201cwant to\u201d delete expired replay prevention slots. (Yes: I also added a way to \u201cforge\u201d replay prevention slots, as it also forms a gas token ;P. I don\u2019t care at all about this behavior.) The result of this is that, over time, usage of the contract is going to result in O(number of users) storage, as it will be something like \u201cthe only storage slots in use are for the payments that haven\u2019t yet been expired, and each user has some small number of payments in flight at any one moment\u201d. Without refunds of any form, this is going to be O(number of payments), which is much much much bigger (something Ethereum obviously itself avoids with its account model). FWIW, the \u201cviability\u201d of a gas token is strongly related to the \u201cpower\u201d of the refund. Have you considered making it so that deleting a storage slot just makes the storage cost non-existent and gives you maybe a tiny 500-800 gas refund? This wouldn\u2019t be viable for a gas token, as you\u2019d need ~500 gas to even specify and find/calculate the storage slot that is storing the gas token you are freeing: the goal of this refund (and associated subsidy) is just to make it economically reasonable to be a bit altruistic and clean up old state. Put differently, I think there\u2019s something valuable in strategies that don\u2019t necessarily \u201creward\u201d people for messing with storage state in potentially-weird ways but at least doesn\u2019t penalize people for cleaning up state: without refunds\u2013and with deletions costing thousands of gas\u2013I\u2019d actually be punished pretty hard for bothering to clean up state, and I feel like I should want to clean up state even if it isn\u2019t making me money, as long as it isn\u2019t hurting me. (edit: And like, I appreciate that maybe in the future state doesn\u2019t matter as much, or it will naturally expire and I won\u2019t need strategies for expiring it myself; I definitely think maintenance of state perpetually isn\u2019t sustainable\u2026 but, given the speed of how changes happen, it could be years before we get there, and I want to think that systems like mine should have at least not be disincentivized from avoiding spamming state ;P.) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.184082892416225
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "21",
                    "likes": "0",
                    "time": "02/04/2021-15:23:44",
                    "content": "3403 still ruins any incentive to clean up state outside of the same transaction. The misalignment of incentives should offset any perceived gains on the storage-bloat motivation, but with real storage that would need to be rented under any state rent scheme. The concerns described by @thabaptiser have only been addressed in the same-transaction case. Here are some specifically incentivized behaviors, which I listed in ACD.  Storage arrays should use 1-indexing such-that length-zero is stored as 1 so adding anther element does not incur SSTORE_SET. Additionally, popped elements should not be cleared for the same reason UI-prompted approvals should always be infinite. When selling all tokens you should leave 1 in your wallet, which will change the \u201cSell MAX\u201d behavior on most DEX interfaces.  I\u2019m also opposed to 3403\u2019s motivation because I favor elasticity. 4x is the best part of 1559 and as a power user who transacts during congestion I don\u2019t want to see larger spikes. In ACD, @holiman mentioned that miners have been mining blocks that are only gas tokens. F2Pool clarified this was because this is their default candidate block and it is only mined if they have not yet sealed another. In ACD it was mentioned that miners may increase the gas limit under 1559 to fight against the base fee. The possibility of 4x may discourage that behavior since they will struggle to capitalize on MEV if 4x exceeded their full capacity. Because of this and sync-time concerns for the node failure case, I don\u2019t expect miners to target the gas limit above 4x their capacity. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.359375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "22",
                    "likes": "1",
                    "time": "02/04/2021-20:27:19",
                    "content": "Here is a copy of the prepared statement I read during today\u2019s ACD. I didn\u2019t read it very well (8 charisma), and Tim said on Twitter that some asked for the text.  First, the proposal removes any incentive to clear state, except for the same-transaction case. When smart contract engineers build around such incentives we will see more state bloat. Approving less than infinite will be phased out in the UX. Selling all of your tokens on most interfaces will leave 1 unit behind. Storage arrays will be cleared by setting the size field to 1 (which will mean 0) and leaving all entries dirty as it would be foolish to clear them. And these are only a few of the design implications. The proposal also sacrifices current elasticity, which smooths gas price spikes during peak congestion. 1559 does not provide sufficient elasticity because peak congestion lasts hours not minutes. By sacrificing refund elasticity concurrently with 1559 we should expect a net increase in volatility that would counteract the anticipated improvements in signature-time gas price estimation. While the motivations for the proposal cite brief 4x sprints as possibly dangerous, I believe them to be the top feature of 1559. Grocers don\u2019t raise their prices during peak hours; they hire part-time workers, so their customers don\u2019t complain and flee to other stores. The long-term costs of potential 4x blocks are amortized during periods of lower congestion. But all nodes should be able to verify the consecutive 4x blocks smoothly, else they wouldn\u2019t be able to sync the blockchain in any reasonable timeframe. As proof that the network can handle 4x today I present Binance Smart Chain, which sets a higher gas limit of 30 million every 3 seconds, approximately 11 times the current Ethereum capacity. My devnode, which runs on an older low-end processor, gets 70 mgas per second in Berlin, so I would still be able to sync Binance Smart Chain even if all of their blocks were 4x. In the previous meeting we agreed to table 3403 if 4x wasn\u2019t a security concern. There have been some better ideas floated in the discord, such as separate markets for computation gas and storage growth. A less-rushed solution might do more good than harm, and we could free up London engineering bandwidth for more-important work.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.554836309523809
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "23",
                    "likes": "0",
                    "time": "02/04/2021-21:03:57",
                    "content": "I\u2019m in support of this EIP.  It cleans up EVM mechanics in a way that feels worth the downsides that I\u2019ve seen thus far. Addressing some specific points:     wjmelements:  As a holder of millions of dollars worth of refunds, tokenized and otherwise, I would be strongly interested in a compensation plan    I am empathetic to what appears to be a significant financial downside that you may face with this change, but this type of reason isn\u2019t compelling to me.  You should probably start looking now at how you can reduce your financial risk from this change.     wjmelements:  3403 still ruins any incentive to clean up state outside of the same transaction. The misalignment of incentives should offset any perceived gains on the storage-bloat motivation   Refunds have been shown to not be a viable mechanism for mitigating state growth in a meaningful way.  Thus, the argument that this will make state growth/bloat worse is not compelling here.  See this other post on \u201cstate expiry\u201d for how we intend to meaningfully address state growth: Resurrection-conflict-minimized state bounding, take 2 - #17 by vbuterin - Eth1.x Research - Ethereum Research .  The \u201cstate expiry\u201d plans will be effective with or without refunds or incentives to clear state. ",
                    "links": [
                        "https://ethresear.ch/t/resurrection-conflict-minimized-state-bounding-take-2/8739/17"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.716666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "24",
                    "likes": "0",
                    "time": "02/04/2021-21:27:37",
                    "content": "    pipermerriam:  Refunds have been shown to not be a viable mechanism for mitigating state growth in a meaningful way.   citation needed; refuted several times with specific examples. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-3298-removal-of-refunds/5430/21",
                        "https://ethereum-magicians.org/t/eip-3298-removal-of-refunds/5430/21"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pipermerriam",
                    "index": "25",
                    "likes": "1",
                    "time": "02/04/2021-21:52:54",
                    "content": "    wjmelements:  citation needed; refuted several times with specific examples.   We have had refunds since the beginning of the chain.  State growth is a problem and continues to be a problem\u2026  Removing refunds willmake the problem worse.  My intuition is that the amount worse is going to be insignificant when compared to the overall rate of growth.  Without firm economic bounds, state growth/bloat will continue to be a problem  Refunds do not provide economic bounds for the overall state size.  State expiry fully solves this.  With state expiry, state clearing incentives no longer matter with respect to limiting total state size.  Thus, the added benefit of having some incentive to clear state feel insignificant compared to the complexity cleanup that removal of refunds provides. Please let me know if something is unclear here. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-3298-removal-of-refunds/5430/21",
                        "https://ethereum-magicians.org/t/eip-3298-removal-of-refunds/5430/21"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.772727272727273
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/saurik",
                    "index": "26",
                    "likes": "4",
                    "time": "06/04/2021-01:51:16",
                    "content": " I\u2019m in support of this EIP. It cleans up EVM mechanics in a way that feels worth the downsides that I\u2019ve seen thus far.  FWIW, I don\u2019t have any skin in the game here (so to the extent to which anyone is looking at \u201cthese arguments are motivated\u201d: I\u2019m immune). My goal is only to make it so that my contracts are as gas efficient as possible; to such end, all of my test cases report how much gas they used, so I can attempt to optimize whatever I can. I try try try to not fret tens of gas, but I consider the tradeoffs carefully for hundreds of gas, I consider thousands of gas to be worthy of going to great lengths to avoid, and when I see tens of thousands of gas I will spend a full week figuring out if I can somehow remove it. The current specification\u2013the status quo\u2013thereby has a kind of beauty to it: developers like me are incentivized to minimize storage. If you think I am simply not doing that, you are being needlessly hyperbolic. Meanwhile, users are also likewise incentivized: they are encouraged to delete their accounts and clean up their state, rather than leave it to rot. The idea that\u2013as @wjmelements points out\u2013users are going to get no refund (or even discount) for setting a storage slot to 0 and yet are dinged 15,000 gas for setting it from 0 to not 0 feels really horrible. It is the kind of ridiculous special case\u2013one that absolutely will change the way I develop contracts, as that 15,000 gas \u201ctransition through 0\u201d penalty will light up my test cases as a very large and annoyingly-avoidable (by using \u201c1 is the new 0\u201d) cost\u2013that should make one pause and realize \u201cwe have incorrectly modeled this\u201d. If one wants to make new rules, those rules need to at least be consistent! Here is thereby another suggestion (which actively leans into the idea of what you want): if the cost for changing a storage slot away from 0 is going to somehow cost money in a way that isn\u2019t later consistent with changes back and forth through 0, it sounds like what you actually want to charge for is something like \u201cstorage allocation\u201d. As such, you should make it only 5000 (not 20000) to re-write to a storage slot that has ever been written to before. Obviously, this means that nodes essentially no longer get to reallocate anything, as they will need to remember this storage slot for all time\u2026 but that\u2019s their\u2013and this idea of not giving people refunds\u2013fault, and cannot just be avoided by not doing this: doing what you want without this change still does this, because \u201c1 is the new 0\u201d: only an idiot contract developer will ever clear a storage slot to 0 anyway in your model (due to having to pay 15,000 every time it is reset from 0), and so that storage is effectively burned. What this alternation to your mechanism does, though, is it makes the development process a bit less \u201cdisgusting\u201d: it internalizes to the platform this really horrible behavior you want to incentivize of avoiding clearing state\u2013even if you semantically needed to clear state!!!\u2013so that I don\u2019t have to go through my contract and remove every single place where I not only purposefully, but even accidentally, set anything to 0 (which is such a sufficiently obviously \u201cbad for the developer\u201d incentive that I don\u2019t understand how this proposal is getting as far as it seems to have gotten). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.198778753925812
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/BoringCrypto",
                    "index": "27",
                    "likes": "3",
                    "time": "06/04/2021-06:45:56",
                    "content": "Just as @saurik described here, as a gas conscious developer, I will start avoiding setting to 0 in all contracts if this goes live. If/when I get involved in SushiSwap AMM V2 I will make sure it\u2019s lean on gas usage, because this is a competitive advantage. In this era of very high gas prices, protocols will compete on gas efficiency. 1 will be the new 0 for me. The constant changing of gas costs is a real PITA from a dev point of few, because many contracts can\u2019t be changed after being deployed. With this EIP you\u2019re helping protocols built by lazy devs and penalizing those who have taken great care to preserve gas and clean up state. I\u2019m all for improvements, and if gas tokens are a real issue, finding a way to get rid of them\u2026 but this proposal seems half baked. P.S. I hold 0 gas tokens, I just like optimized code. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.90383116883117
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "28",
                    "likes": "2",
                    "time": "16/04/2021-16:02:18",
                    "content": "The following is the prepared statement I read in today\u2019s ACD regarding security.  Previously we agreed that, with present gas limits, brief spurts of 4x throughput would not be an issue. But the concern was raised that miners will increase the gas limit in London to minimize the base fee, perhaps to an unsafe level. The initial proposal to fix this was to hardcode the block gas limit. That proposal was defeated in part because miners have responsibly managed the gas limit. If that is changing with 1559, a hard limit would be better DoS protection than this proposal. But if we expect miners to continue to be responsible, they would have to consider their capacity to handle brief 4x spurts in their gas limit voting, and this would limit the extent to which they could maximize the gas limit, thereby securing the base fee. If we believe miners will push an infinite gas limit, it won\u2019t matter if the elasticity is 2x or 4x. If this is a major security concern we should revisit the hard cap, though I would recommend a much higher limit than the original proposal. On the other hand, if we assume miners will want to prevent each other from submitting DoS blocks, the BASE_FEE would be more secure with the possibility of 4x than just 2x.  I also read the following excerpts from this forum, citing the author.     saurik:  The idea that\u2013as @wjmelements points out\u2013users are going to get no refund (or even discount) for setting a storage slot to 0 and yet are dinged 15,000 gas for setting it from 0 to not 0 feels really horrible. It is the kind of ridiculous special case\u2013one that absolutely will change the way I develop contracts, as that 15,000 gas \u201ctransition through 0\u201d penalty will light up my test cases as a very large and annoyingly-avoidable (by using \u201c1 is the new 0\u201d) cost\u2013that should make one pause and realize \u201cwe have incorrectly modeled this\u201d.       BoringCrypto:  In this era of very high gas prices, protocols will compete on gas efficiency. 1 will be the new 0 for me.   I concluded:  Therefore, the storage bloat motivation for 3403 should be replaced with an acknowledgement that the proposal incentivizes protocols, interfaces, and users to bloat storage.  @shemnon mentioned an alternative proposal, to count gas used before refund against the total gas limit. This would eliminate what @holiman called the refund stipend, which would reduce elasticity. It may incentivize miners to reprioritize transactions according to total gas used instead of just gas price, but it would fix all currently-known issues, and seems slightly simpler than 3403. The only downside to this approach seems to be the reduced elasticity during congestion. It seems the real issue is that the block gas limit includes long-term storage costs and rebates. If we could somehow isolate those costs from the block gas limit such that the user still pays for them but throughput gas remains constant, it would likely be the best solution. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.237992694805195
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/BoringCrypto",
                    "index": "29",
                    "likes": "0",
                    "time": "18/04/2021-15:44:03",
                    "content": "One alternative is to make updating storage a fixed cost and no refund for selfdestruct. This will obviously deal with the inefficiency of gas tokens for the system overall. Not ideal for coders like me who spend time optimizing their contracts, but at least if doesn\u2019t lead to weird contracts trying to never go back to 0 (I\u2019d probably end up writing a uint255 library, with one bit always set to 1). As part of this it would be nice to introduce storage costing on transaction basis, so if a storage slot has the same value at the start of the tx and at the end you pay some minimal fee for updating a memory variable and an SLOAD fee. From a developers perspective it would be nice if docs somewhere could be updated (in plain English and not math notation) to have the current gas math and approved EIP changes and when they\u2019ll go live. It\u2019s hard enough to optimize for gas, but even harder to keep up to date with the ever changing rules. (If this already exists, please point me in that direction\u2026) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.855669793169794
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "30",
                    "likes": "0",
                    "time": "06/07/2021-08:30:32",
                    "content": "I see an issue with the following flow within single transaction:  Write non-zero to zero storage slot Write zero to the same storage slot Revert both actions  Gas cost of the following solution would be approximately 25k without any gas refund (revert erases gas refunds). But actual job of doing nothing should not cost that high. I propose instead of erasing gas refund on revert keep it equal to cost of all the reverted SSTORE operations. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 4.805357142857143
                }
            ]
        }
    ],
    "group_index": "1242"
}