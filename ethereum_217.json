{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5920-pay-opcode/11717",
            "title": "EIP-5920: PAY opcode ",
            "index": 11717,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "evm",
                "opcodes",
                "cancun-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "1",
                    "likes": "1",
                    "time": "11/11/2022-18:18:51",
                    "content": "  Ethereum Improvement Proposals   EIP-5920: PAY opcode Introduces a new opcode, PAY, to send ether to an address without calling any of its functions      Although I am an EIP editor, I do not specialize in core EIPs, and this is my first core EIP. Any feedback is appreciated! ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5920",
                        "https://ethereum-magicians.org/t/eip-5065-instruction-for-transferring-ether/9107/14"
                    ],
                    "GPT-summary": "The author introduces a new Ethereum Improvement Proposal (EIP-5920) that suggests adding a new opcode, PAY, to send ether to an address without calling any of its functions. The author, who is an EIP editor, requests feedback on the proposal and admits that this is their first core EIP. The post may be of interest to those who want to learn about the proposed changes to the Ethereum network and provide feedback on the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 6.0606060606060606
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "2",
                    "likes": "3",
                    "time": "11/11/2022-18:44:22",
                    "content": "There are a number of such proposals, the latest one being    EIP-5065 Instruction for transferring ether EIPs   Abstract Add a new instruction that transfers ether to a destination address without handing over the flow of execution to it. It should work similarly to how SELFDESTRUCT transfers ether to the destination without making a call to it.   Motivation From an architectural point of view, execution flow should never be handed over to an untrusted contract. Ethereum currently does not have any ideal way to transfer ether without transferring the flow of execution. People have come up with reentrancy\u2026     ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.28030303030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "3",
                    "likes": "0",
                    "time": "20/12/2022-14:23:44",
                    "content": "EIP-5065 is Stagnant (and should have been stagnant when you sent that message - it wasn\u2019t due to an EIP-bot bug). In addition, there are quite a few issues with the linked EIP, such as the hexadecimal being invalid. I\u2019ll ping @maxsam4, and move this EIP to review if there isn\u2019t a response in two weeks. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.458333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "4",
                    "likes": "0",
                    "time": "04/01/2023-21:08:52",
                    "content": "There has not been a response in >14 days. @axic would you mind taking a closer look before I move this to review? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "5",
                    "likes": "0",
                    "time": "08/01/2023-00:07:59",
                    "content": "Adding the cancun-candidate tag. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mikebolt",
                    "index": "6",
                    "likes": "0",
                    "time": "15/01/2023-09:05:28",
                    "content": "Could we throw in a burn opcode too? There is an actual benefit to having one because you could leave the address out and it would shorten the contract bytecode. If you search on solidity forum I suggested send and burn keywords. These could be the opcodes generated by those keywords. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "7",
                    "likes": "0",
                    "time": "15/01/2023-13:39:54",
                    "content": "According to the current spec, sending ether to address(0) is currently allowed. How about we make that a special case that burns ether? EDIT: Done ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.595238095238095
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mikebolt",
                    "index": "8",
                    "likes": "0",
                    "time": "15/01/2023-18:49:56",
                    "content": "I think the EVM implementations could subtract the amount from the balance of the burner without adding it to the balance of the 0 address (or other burn address), which would be very slightly more efficient. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "9",
                    "likes": "1",
                    "time": "15/01/2023-19:44:38",
                    "content": "That\u2019s what I just added:   Transfers val wei from the executing address to the address addr. If addr is the zero address, instead, val wei is burned from the executing address.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/horsefacts",
                    "index": "10",
                    "likes": "0",
                    "time": "20/01/2023-03:05:26",
                    "content": "I\u2019m a big fan of this idea and the earlier EIP-5065. Any insight as to why these earlier proposals stagnated? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "11",
                    "likes": "1",
                    "time": "20/01/2023-17:13:14",
                    "content": "The author went AWOL, and the proposal also had some issues, such as assigning the opcode to the \u201chexadecimal\u201d value 0xFG. Ceci n\u2019est pas hexadecimal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Tointer",
                    "index": "12",
                    "likes": "1",
                    "time": "24/02/2023-05:45:32",
                    "content": "I support this EIP because:  Reentrancy attacks are very frequent and dangerous, reducing attack surface for them is great It is consistent with ERC20 tokens, most of which not providing any ability to react to balance changes. It\u2019s common (and costly) practice to wrap ether into WETH and transfer it this way. Gas optimizations are nice, especially for smart contract wallets. This would also stack nicely with eip-3651 I don\u2019t see that much use cases in having contracts being able to fully control their ETH balance in post-SELFDESTRUCT EVM Creating opcode that would guarantee succesfull transfer through all hardforks would resolve confusion about different ways to send ether that exist today  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.113186813186813
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "13",
                    "likes": "0",
                    "time": "02/03/2023-15:47:25",
                    "content": "I\u2019d like to raise a concern for this OPCODE, and ask the authors solicit the advice of Solidity devs and some sampling of security auditors before this proceeds to be eligible for inclusion in Cancun. Using the PAY opcode would enable bypassing the fallback functions of smart contracts, and the default coding of non-payable functions is to revert on function calls unexpectedly sending Ether to a smart contract.  This subverts that protection.  It is possible for a smart contract to configure itself so that no valid invocation results in Ether being deposited in the account.  The motivation section of the EIP speaks to stoping reentrancy attacks, but a smart contract could configure their fallback function to accept payment and exit if they desired that ability.  Enabling the PAY opcode prevents contracts from rejecting all payments. One alternative to preserve this behavior would be to allow PAY to only work when sending value to accounts with no code in their account, but that isn\u2019t much different from the existing CALL mechanisms. Another concern is the gas schedule, it is not in harmony with the warm account/cold account pattern established in EIP-2929 (which it cites) and instead proposes a different handling.  If it proceeds I would ask the gas be set up as a premium (100 gas or so) on top of the warm/cold cost, and that it interacts with the warm/cold lists like the CALL and SSTORE series opcodes do.  Specifically, i think adopting the gas pattern used in CALL would be the best pricing strategy and present the most maintainable code for clients. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.270408163265307
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "14",
                    "likes": "0",
                    "time": "07/03/2023-15:45:09",
                    "content": "    shemnon:  Using the PAY opcode would enable bypassing the fallback functions of smart contracts, and the default coding of non-payable functions is to revert on function calls unexpectedly sending Ether to a smart contract. This subverts that protection.   It\u2019s already possible to do this with SELFDESTRUCT and coinbase payments, as mentioned in the motivation. This introduces no new security concerns. See SWC-132 \u00b7 Overview     shemnon:  Another concern is the gas schedule, it is not in harmony with the warm account/cold account pattern established in EIP-2929 (which it cites) and instead proposes a different handling. If it proceeds I would ask the gas be set up as a premium (100 gas or so) on top of the warm/cold cost, and that it interacts with the warm/cold lists like the CALL and SSTORE series opcodes do. Specifically, i think adopting the gas pattern used in CALL would be the best pricing strategy and present the most maintainable code for clients.   As mentioned in the specification, the EIP-2929 costs are applied. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.391086186540732
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "15",
                    "likes": "0",
                    "time": "07/03/2023-16:41:37",
                    "content": " As mentioned in the specification, the EIP-2929 costs are applied.  New account costs are not being applied (25K when paying to an address with an empty account) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.09090909090909
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "16",
                    "likes": "0",
                    "time": "07/03/2023-16:42:16",
                    "content": "    shemnon:  New account costs are not being applied (25K when paying to an empty address)   Are they not? Oops then, I\u2019ll fix that. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.09090909090909
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mikebolt",
                    "index": "17",
                    "likes": "0",
                    "time": "13/03/2023-21:56:11",
                    "content": "This is a good point but I would argue that fallbacks are potentially dangerous and should be deprecated. However, this should definitely be noted as a big caveat in the documentation for the new PAY opcode. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.236363636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/asdnlasdlkj",
                    "index": "18",
                    "likes": "0",
                    "time": "14/03/2023-03:30:17",
                    "content": "What reason would someone have to burn ETH? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "19",
                    "likes": "0",
                    "time": "14/03/2023-21:45:08",
                    "content": "Beats me. Now that I think about it, it would probably make more sense for the call to fail, to avoid potential bug-related losses. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/asdnlasdlkj",
                    "index": "20",
                    "likes": "0",
                    "time": "14/03/2023-23:35:35",
                    "content": "It\u2019s probably best not to make any kind of special exemption for the zero address, that\u2019s how all the call opcodes already operate ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.261904761904761
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "21",
                    "likes": "0",
                    "time": "15/03/2023-14:22:33",
                    "content": "The zero address should not have a nonzero balance. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/asdnlasdlkj",
                    "index": "22",
                    "likes": "0",
                    "time": "15/03/2023-22:14:10",
                    "content": "It already does. And adding a single special case for reversion just replaces one class of potential bugs with another. If an address gets set to zero and is unchangeable, then any function that calls PAY on that address will always revert and effectively be uncallable. If that function needs to be called as some necessary phase of the contract, then your contract is now permanently frozen and the ETH is inaccessible. E.g. imagine a lottery contract where people can set their payout address when they buy a ticket. A function called startNewRound() checks if the last round is over, PAYs out ETH to the winner, and starts the next round anew. If the winner sets their payout address to 0, then startNewRound() will always revert when attempting to make the payout, and the lottery is now frozen with no future rounds possible. It makes PAY a lot easier to reason about if it succeeds no matter what, as long as you pass in a valid address and ETH amount. If you want your contract to prevent payouts to the zero address, just add in some custom check like require(addr != address(0)). This is semantically equivalent to how people already make payouts with call(), transfer(), and send(), and there is no reason to change it for just this single opcode. Even less so, in fact, since the point of PAY is pretty much to bypass any checks and force an address to receive ETH. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.392682072829132
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "23",
                    "likes": "0",
                    "time": "16/03/2023-18:09:52",
                    "content": "That makes sense. What\u2019s currently written probably makes more sense then. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/asdnlasdlkj",
                    "index": "24",
                    "likes": "0",
                    "time": "17/03/2023-02:59:09",
                    "content": "burning for payments to address(0) is still a bad idea for a few reasons:  when a contract PAYs to some address, it might operate under the assumption that the balance of that address will increase. E.g. the contract PAYs some amount ether to some receiving address, then at a later point checks that the receiving address\u2019s balance has increased by that amount. If the receiver is address(0), then that check will fail, even though the payment was made. the existing CALL opcode does not burn ETH when the recipient is address(0); changing the semantics of ETH transfers for this new opcode will be confusing it\u2019s pointless; the only reason I can think of for someone to burn ETH is executing a malicious attack using the situation described in (1)  Again, it\u2019s best for no exceptions to be made for the zero address. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.5479797979797985
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "25",
                    "likes": "0",
                    "time": "17/03/2023-03:00:27",
                    "content": "    asdnlasdlkj:  when a contract PAYs to some address, it might operate under the assumption that the balance of that address will increase. E.g. the contract PAYs some amount ether to some receiving address, then at a later point checks that the receiving address\u2019s balance has increased by that amount. If the receiver is address(0), then that check will fail, even though the payment was made.   Why would that possibly need to be done?     asdnlasdlkj:  the existing CALL opcode does not burn ETH when the recipient is address(0); changing the semantics of ETH transfers for this new opcode will be confusing   The call still fails. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 4.03030303030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/asdnlasdlkj",
                    "index": "26",
                    "likes": "0",
                    "time": "17/03/2023-03:28:46",
                    "content": " The call still fails.  Just checked on Goerli, and CALL does not fail when the receiver is address(0). Here\u2019s my tx sending 0.01 ETH there from a contract: https://goerli.etherscan.io/tx/0x785a1484424779a040b3c6213e01f162b43c5fc4c5d9780d8ed117d332b595b4 And it increased the balance of address(0) from \u201c11,090.383\u2026\u201d to \u201c11,090.393\u2026\u201d, so no burn. So to bring the opcodes semantically in-line would require not giving address(0) any special treatment.  Why would that possibly need to be done?  Dunno, but someone might still end up doing it. Like, if there\u2019s a bunch of complicated conditional code that  decides whether or not to make a payment, so the dev decides that the simplest way to check whether or not the payment was made is just to query the receiver\u2019s balance. My point stands that a burn is pointless, and (hypothetically at least) could lead to bugs. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.326530612244897
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "27",
                    "likes": "1",
                    "time": "17/03/2023-03:29:15",
                    "content": "    asdnlasdlkj:  Just checked on Goerli, and CALL does not fail when the receiver is address(0). Here\u2019s my tx sending 0.01 ETH there from a contract:   Never mind then. It seems that the special case is not needed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.517857142857143
                }
            ]
        }
    ],
    "group_index": "217"
}