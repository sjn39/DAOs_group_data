{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-6384-readable-eip-712-signatures/12752",
            "title": "EIP-6384: Readable EIP-712 signatures ",
            "index": 12752,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "1",
                    "likes": "1",
                    "time": "30/01/2023-15:24:39",
                    "content": "The use case of Web3 off-chain signatures intended to be used within on-chain transaction is gaining traction and being used in multiple leading protocols (e.g. OpenSea) and standards (EIP-2612), mainly as it offers a fee-less experience. Attackers are known to actively and successfully abuse such off-chain signatures, leveraging the fact that users are blindly signing off-chain messages, since they are not humanly readable. The idea: EIP-712 already formally binds an off-chain signature to a contract, with the \u201cverifyingContract\u201d parameter. We suggest adding a \u201cview\u201d function (\u201cstateMutability\u201d:\u201cview\u201d) to such contracts, that returns a human readable description of the meaning of this specific off-chain buffer. We are looking to get feedback from the community and especially from Smart Contract implementors, Wallets developers and security practitioners. ",
                    "links": [],
                    "GPT-summary": "The author proposes adding a \"view\" function to EIP-712 contracts to provide a human-readable description of off-chain signatures. The proposal aims to prevent attackers from abusing off-chain signatures. The author seeks feedback from the community, especially from Smart Contract implementors, Wallets developers, and security practitioners.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Privacy, Security and risk management",
                        "Community and engagement"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.179563492063492
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "2",
                    "likes": "2",
                    "time": "30/01/2023-16:41:42",
                    "content": "Some non-editorial comments (meaning you\u2019re free to ignore them and your PR will still be merged):  I\u2019m really not in love with the name evalEIP712Buffer. To me, \u201ceval\u201d implies \u201cevaluate\u201d which is exactly what this function doesn\u2019t do. Maybe something like describeEIP712, or descriptionOf? How does this differentiate between two or more functions on the same contract that accept an EIP-712 signature? Imagine an ERC721 token with a permit function (for approval), and a gaslessMint function (so the buyer pays gas fees.) Should this interface be exposed with EIP-165? What should the implementing contract do if it doesn\u2019t understand the signature? Revert? I assume there\u2019s some way to tell if the contract doesn\u2019t implement this EIP? Probably just try to call the function. What if there\u2019s a selector id collision?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.8999999999999995
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "3",
                    "likes": "0",
                    "time": "31/01/2023-09:42:13",
                    "content": " Good suggestion per name. Let\u2019s leave it open for a period, to collect other people ideas on best name. differentiation of two or more functions on the same contract that accept an EIP-712 signature is done by using the primaryType parameter that is passed to the function Seems like a good suggestion. we will update the EIP to reflect it reverting makes sense. we will update the EIP to reflect it We will use EIP-165 as suggested  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.982142857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "4",
                    "likes": "1",
                    "time": "31/01/2023-14:51:42",
                    "content": "As part of our process to encourage peer review, we assign a volunteer peer reviewer to read through your proposal and post any feedback here. Your peer reviewer is @mayowa! Please note that this review is NOT required to move your EIP through the process. When you\u2014the authors\u2014feel ready, just open a pull request. If any of this EIP\u2019s authors would like to participate in the volunteer peer review process, shoot me a message!  @mayowa please take a look through EIP-6384 and comment here with any feedback or questions. Thanks! ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-6384"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thebensams",
                    "index": "5",
                    "likes": "1",
                    "time": "02/02/2023-20:59:27",
                    "content": "I think it would be a good idea to implement this as an EIP-712 extension where the \u201clocalization contract\u201d can be specified explicitly. When the frontend calls eth_signTypedData, the address to the localization contract is passed explicitly as an additionalProperty, ie: [...] additionalProperties: [     {     \"name\": \"EIP-6384-Localization\",     \"type\": \"address\",     \"value\": \"0xdeadbeef\"     } ] [...]  This would benefit the proposal in two ways;  The wallet software can determine whether the request is EIP-6384 without sending an RPC request/EIP-165 The logic for localization won\u2019t have to live in the same contract as the verifier address. I suspect a lot of protocols would want to update their localization without having to update a core contract or add localization logic to dozens of EIP-6384-compliant contracts. I suspect most implementations would just proxy evalEIP712Buffer requests to a single contract, so using additionalProperty will simplify things for implementers.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.832096474953618
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "6",
                    "likes": "1",
                    "time": "03/02/2023-14:18:17",
                    "content": "This an option we had considered. But we were worried extending EIP-712 will cause backward compatibility issues in all parties that used to get the older version of EIP-712. Changing the EIP-712 format will require changing the current verifyingContract, as the signature verification will change. Having said that, your point #1 is definitely an advantage. We are pragmatic and very open to get the implementers\u2019 feedback and if they feel EIP-712 extension is the easier way to go, we will change to that course. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.208333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/agostbiro",
                    "index": "7",
                    "likes": "1",
                    "time": "05/02/2023-20:00:29",
                    "content": "Thanks for submitting this EIP! It addresses a very important problem that doesn\u2019t receive enough attention. I love the idea being able to get a human readable description of an EIP-712 payload from the verifying contract, but I\u2019m concerned about returning natural language messages from the evalEIP712Buffer method. I\u2019d like to propose returning structured data instead of strings, which would have the following advantages:  Wallets could build their own display format based on the structured data to ensure consistency for UX and security reasons. Structured data would enable localization (display in different languages) on the wallet side. Receiving token contract addresses and quantities in the structured data would let wallets display balances and dollar values of tokens when approving the signature.  I imagine using the standard token transfer and approval events as the basis of the structured data format. If this is too limiting or too complex to implement, an alternative option could be for the verifying contract to provide a single entry point where all EIP-712 messages can be submitted for execution which would enable running transaction simulation on the payloads. The transaction simulation approach could make sense, since wallets have to do transaction simulation anyway to learn the outcome of on-chain signature requests, and it might be easier to implement for smart contract developers than the alternatives. As an added benefit, the transaction simulation approach would eliminate the potential for mistakes in mapping EIP-712 payloads to explanations. I\u2019m unsure about the security implications though. Looking forward to hearing your thoughts! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.770952380952381
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "8",
                    "likes": "1",
                    "time": "06/02/2023-19:58:56",
                    "content": "Returning structured data is indeed a good idea, for all the reasons mentioned. We thought about it, but we were worried that would add additional complexity and would make it even harder to adopt by smart contract devs. If smart contract devs are open to such extra complexity we would love to include it. BTW, we can make this extensible by adding versioning, setting this to be version \u201c1\u201d and allow future upgrades in a backward compatible manner. We can also have both: a string as a fallback that includes some data and added structured data, that the wallet can parse and show if the wallet supports it. As for executing and simulating, I believe it would make the function not a \u201cview\u201d and will also must revert in the end to avoid actually executing (some idea as implemented in EIP-4337), which requires changes to simulation provider logic and might be dangerous if not implemented correctly in smart contract. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.476190476190476
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "9",
                    "likes": "3",
                    "time": "07/02/2023-08:13:26",
                    "content": "Thanks for bringing up this discussion. I was wondering if a more \u201coff-chain\u201d based solution was considered. Building strings (especially for more complex EIP-712 types) can be quite complex. It would be possible to include it as part of the ABI/Natspec documentation. Then it could be possible to use it via the \u201cSourcify\u201d approach. Another alternative could be something like the tokenlist standard where for each primary type you can find a decoding function (i.e. a wasm module). This would also allow to be more flexible in the future for adding multi-language support. Also it would make it possible that a \u201ctrusted\u201d party (i.e. like for the tokenlists Uniswap) extends/maintains the list. ",
                    "links": [
                        "https://uniswap.org/blog/token-lists"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.576923076923077
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "10",
                    "likes": "0",
                    "time": "07/02/2023-10:09:21",
                    "content": "I have a pretty strong preference for the token-list approach, since it\u2019s (1) compatible with all existing contacts using ERC-712 and (2) allows users to choose which list curators they trust. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.708333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "11",
                    "likes": "1",
                    "time": "07/02/2023-14:46:37",
                    "content": "The solution is \u201coff-chain\u201d in the sense this is a \u201cview\u201d function that does not need to be executed on chain, but locally on node. Natspec-like solutions can only give static information (\u201cyou are going to list something on OpenSea\u201d), and not actually tell what would the specific message would do (\u201cyou are going to list your BAYC #4562 on OpenSea for 0.001 ETH\u201d) As for curated list by a \u201ctrusted\u201d party, sounds like a centralized solution that we\u2019d like to avoid, if possible. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "12",
                    "likes": "0",
                    "time": "07/02/2023-14:49:17",
                    "content": "With our current suggested solution you don\u2019t need to trust anyone except the contract your are signing to, that you already trust. Adding additional \u201ctrusted\u201d curators is not helpful and adding another possible point of failure. Also see the reply above. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.604166666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Michaels",
                    "index": "13",
                    "likes": "0",
                    "time": "08/02/2023-01:35:15",
                    "content": "Nice suggestion @agostbiro When using structured data, what if the data to be displayed isn\u2019t necessarily related to token approvals? I\u2019m assuming wallets will check if the return data is of that type and if not just display the plain string? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.642857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "14",
                    "likes": "0",
                    "time": "08/02/2023-18:47:24",
                    "content": "    talbeerysec:  Natspec-like solutions can only give static information (\u201cyou are going to list something on OpenSea\u201d), and not actually tell what would the specific message would do (\u201cyou are going to list your BAYC #4562 on OpenSea for 0.001 ETH\u201d)   That is not true (see NatSpec Format \u2014 Solidity 0.8.17 documentation) .     talbeerysec:  The solution is \u201coff-chain\u201d in the sense this is a \u201cview\u201d function that does not need to be executed on chain, but locally on node.   That is not really off-chain as the whole string building and type conversion is done on evm level (so the logic is stored on chain). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.265625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "15",
                    "likes": "0",
                    "time": "08/02/2023-21:42:35",
                    "content": " (see NatSpec Format \u2014 Solidity 0.8.17 documentation ) .  I learned something new about NatSpec today. Thank you for sharing. I am not sure it will be expressive enough for our needs, but I will give it a try.  That is not really off-chain as the whole string building and type conversion is done on evm level (so the logic is stored on chain).  I assume most of this code already exists in the smart contract as it\u2019s needed for the actual evaluation of the signature. And having the code stored on chain is more of a feature than a bug, in my eyes ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.000324675324675
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "16",
                    "likes": "0",
                    "time": "09/02/2023-04:12:12",
                    "content": "    talbeerysec:  As for curated list by a \u201ctrusted\u201d party, sounds like a centralized solution that we\u2019d like to avoid, if possible.   Have you checked out tokenlists? I\u2019d say it\u2019s anything but centralized. Rather, it allows anyone to create and curate a list (individuals, organisations, smart contracts, etc) and then it\u2019s up to apps and users to decide which lists they trust and want to use. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5357142857142865
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Vazi",
                    "index": "17",
                    "likes": "0",
                    "time": "09/02/2023-20:00:17",
                    "content": "Hey, I\u2019m looking into Tokenlists, not sure I understand how it can help with the suggested problem, it seems like it aims to curate a \u2018Whitelist\u2019 for legit tokens ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 3.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "18",
                    "likes": "0",
                    "time": "09/02/2023-21:11:06",
                    "content": "If I understand the high-level goal of this EIP, it is to provide canonical, human-readable, descriptions of what a given EIP-712-like signature does, to make it more secure for users to interact with systems requesting these signatures. Essentially, a user\u2019s wallet needs to be able to display a human-readable interpretation of what a given signature will do on-chain. As you said, @Vazi, Tokenlists is a system for curating lists of tokens. Not just which tokens are legit, but also the correct metadata for each token. @rmeissner and I were not proposing to use Tokenlists for this use-case, rather that a tokenlists-like approach could be used to solve for the problem identified. Essentially, rather than storing this information on-chain in the verifyingContract, which is not backward compatible with existing contracts leveraging EIP-712, this information would be independently curated in a similar fashion to how tokenlists works. There would be many competing lists, curated with different mechanisms, and it would be up to each app and user to decide which list of EIP-712 metadata they would like to make signature requests in their wallet more readable. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.2
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "19",
                    "likes": "2",
                    "time": "09/02/2023-22:02:25",
                    "content": "With all due respect, these problems are not similar and hence require different solutions. With tokens the contract cannot attest for itself, as the contract might be malicious (this is the original problem to be solved). Therefore, we must resort to solution in which others should attest to it and in this context tokenlist-like solution makes a lot of sense. In the case of EIP-712 signatures, the contract is already trusted as it\u2019s the verifyingContract. Therefore it is best suited to attest for itself and not require another list that has to be curated and maintained by 3rd parties. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.041666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "20",
                    "likes": "1",
                    "time": "15/02/2023-19:09:04",
                    "content": "I recommend checking out Trustless Signing UI Protocol \u00b7 Issue #719 \u00b7 ethereum/EIPs \u00b7 GitHub for additional discussion/ideas on how something like this could be designed.  IIUC, it requires less data on chain than what is proposed here, and is a bit more flexible when it comes to things like localization. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "21",
                    "likes": "0",
                    "time": "16/02/2023-20:14:16",
                    "content": "Thanks. We will look into it. Quite amazing you were thinking about such solutions back in 2017! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "22",
                    "likes": "0",
                    "time": "17/02/2023-03:00:08",
                    "content": "To be fair, I wasn\u2019t thinking about it for off-chain signatures specifically, but rather contract calls.  I think both are more or less the same problem though.  We need a trustless way to present human understandable data to the user in their signing tool. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.861111111111112
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "23",
                    "likes": "0",
                    "time": "22/02/2023-03:56:17",
                    "content": "    talbeerysec:  these problems are not similar and hence require different solutions.   I\u2019d argue that they are only different problems in future cases where the contract in question supports the proposed standard. For all existing (non-upgradable) contracts, and any future contracts that don\u2019t conform the proposed on-chain standard, the problem is the same. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "24",
                    "likes": "0",
                    "time": "22/02/2023-13:27:08",
                    "content": "The security threat model is already different today, regardless of which solution gets implemented.  With tokens the contract cannot attest for itself, as the contract might be malicious (this is the original problem to be solved). Therefore, we must resort to solution in which others should attest to it and in this context tokenlist-like solution makes a lot of sense. In the case of EIP-712 signatures, the contract is already trusted  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/talbeerysec",
                    "index": "25",
                    "likes": "0",
                    "time": "22/02/2023-13:33:53",
                    "content": "These problem may share some similarities but are not identical. In general transactions, the contract cannot be trusted and the results can be simulated. With EIP-712 the verifying contract can be, and in fact is already, trusted (see the EIP https://eips.ethereum.org/EIPS/eip-6384#the-threat-model for a more detailed discussion) and on the other hand cannot be simulated. Therefore a different solution is required. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.825
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hieronymus777",
                    "index": "26",
                    "likes": "0",
                    "time": "22/02/2023-22:12:49",
                    "content": "Glad to hear you\u2019re thinking about localization/i18n! For now, would you be open to a pr on the eip-6384 that takes as input the iso-639 language code in addition to the other parameters. So /**  * @dev Returns the expected result of the offchain message. */  function evalEIP712Buffer(     bytes32 domainHash,     string memory primaryType,     bytes memory typedDataBuffer ) external view returns (string[] memory) {    ... }  becomes function evalEIP712Buffer(     bytes32 domainHash,     string memory primaryType,     string memory locale,     bytes memory typedDataBuffer ) external view returns (string[] memory) {    ... }  If you are actively considering other alternatives to the i18n problem please ignore but it seems this change would be part of a minimally viable solution (otherwise there\u2019s no way to display the strings in the user\u2019s language). The implementation of the method could ignore the locale variable and return a default set of strings if it doesn\u2019t support the chosen locale. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.023148148148148
                }
            ]
        }
    ],
    "group_index": "333"
}