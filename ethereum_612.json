{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/root-contract-for-governed-sidechains/2278",
            "title": "Root contract for governed sidechains ",
            "index": 2278,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/rumkin",
                    "index": "1",
                    "likes": "1",
                    "time": "22/12/2018-21:56:56",
                    "content": "Today any account can create any contract and transfer tokens to anyone on blockchain. This is good for general blockchain but not for something special like corporate or community chain, which need to have more control. This suggestion provide description of the Root contract which is using to resolve permissions:  who can transfer coins, who can create contract, which contract code could be deployed.  As an option root contract can be located at pseudo-address 0x00, that will solve missed funds problem. Contract interface: contract Root {     function canTransfer(address _from, address _to, uint256 _amount) returns(bool) {}     function canCreateContract(address _from, bytes _code, bytes _args) returns(bool) {}     function withdraw(address _to, uint256 _amount) public {} }  This allows to create full specter of chains from centralized to fully decentralized. Simple example Suppose I\u2019m going to create a chain which driven by group of experts like TC39 or WhatWG. All contracts should be specified and published only by this group. This is what for canCreateContract() exists. This group creates contracts factories and publish to the network. Then this group grants permission to create contracts to this factory contract. When user decided to publish a contract he call one of the factory\u2019s methods instead of directly publishing contract code. The other limitation that could be realized is payments. For example this network supports only account-to-contract and contract-to-account transactions. This is possible with canTransfer() which receives sender and receiver of the transfer and decide is payment allowed. ",
                    "links": [],
                    "GPT-summary": "The author of the post is explaining a proposal for a Root contract that would provide more control for corporate or community chains. The proposal includes a contract interface that allows for the creation of a full spectrum of chains, from centralized to fully decentralized. The post also includes a simple example of how the proposal would work. A 3rd party could give constructive criticism of the proposal or ask questions about it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Law and regulations",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.743131868131868
                }
            ]
        }
    ],
    "group_index": "612"
}