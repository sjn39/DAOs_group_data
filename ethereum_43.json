{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-5453-endorsement-standard/10355",
            "title": "ERC-5453 Endorsement Standard ",
            "index": 10355,
            "category": [
                "EIPs"
            ],
            "tags": [
                "erc"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "1",
                    "likes": "2",
                    "time": "12/08/2022-20:30:20",
                    "content": " See latest version of EIP-5453: EIP-5453: Endorsement - Permit for Any Functions  Reference Implementation ercref-contracts/ERCs/eip-5453 at main \u00b7 ercref/ercref-contracts \u00b7 GitHub   ",
                    "links": [
                        "https://github.com/ercref/ercref-contracts/blob/main/ERCs/eip-5453",
                        "https://ethereum-magicians.org/t/erc-4337-account-abstraction-via-entry-point-contract-specification/7160/59",
                        "https://ethereum-magicians.org/t/suggesting-erc20-and-erc721-on-time-off-chain-approval-for-safer-nft-trading/9347/2",
                        "https://ethereum-magicians.org/t/eip-1202-voting-interface-discussion-thread/11484"
                    ],
                    "GPT-summary": "The post is an explanation of the ERC-5453 Endorsement Standard proposal, with a reference to the latest version and implementation on GitHub. It also serves as an advertisement for the proposal and extends an invitation to interested parties to learn more about it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 6.111111111111112
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/onjas",
                    "index": "2",
                    "likes": "1",
                    "time": "12/09/2022-14:20:28",
                    "content": "We\u2019re developing something along this line! DM me if ur interested ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "3",
                    "likes": "0",
                    "time": "02/10/2022-04:42:56",
                    "content": "Great to hear. Are you still developing this implementation? @onjas ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 9.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "4",
                    "likes": "0",
                    "time": "12/10/2022-23:10:55",
                    "content": "Hi @frangio, just wanna sincerely invite you to comment on EIP-5453 (Endorsement) given that you are driving #5782 as well as you are the main author of open-zeppelin. I think EIP-5453 can be a more general way to signal approval of a transaction. A working reference implementation is in [WIP] Create RefImpl for ERC-5453 Smart Endorsement by xinbenlv \u00b7 Pull Request #1 \u00b7 ercref/contracts \u00b7 GitHub (Work-In-Progress) ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5782",
                        "https://github.com/ercref/contracts/pull/1/files#diff-54f126299c368b8aa4279bb1cbb0d7e87c98cd9129f70ea0438ca77d357aedfb"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.43095238095238
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "5",
                    "likes": "0",
                    "time": "13/10/2022-22:37:10",
                    "content": "How does this compare to EIP-712 signatures? As far as I can tell EIP-712 signatures by themselves already serve as a general way to signal approval for things. What does this EIP offer on top of that? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.083333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "6",
                    "likes": "0",
                    "time": "14/10/2022-20:58:41",
                    "content": "Hi @frangio, Thank you for the question. To give an immediate brief answer:  EIP-712 regulates how to hash and sign a general struct. EIP-5453 regulates how to allow functions to take in a digital signature from arbitrary user to authenticate behaviors. EIP-5453 is a way to indicate \u201can intent to permit\u201d. When used with ERC20, it directly compete with EIP-2612. But EIP-5453 also applies to other functions not just ERC20 transfer. It supports all functions that have an ending bytes _data. Sitenote: This behavior already exist in many existing ERCs\u2018 function e.g. ERC721 and ERC1150. I am propose to recognize this behavior with EIP-5750).  Let me use a metaphor: If you happen to be familiar with the \u201cbank check\u201d concept:  712 regulates what the signature look like (also we to get data) 5453 regulates \u201cassuming there is a check, let\u2019s designate the top 20% of white area in the back of the check to be endorsement area, and put a signature there. By the way, there should be a date\u201d  image1200\u00d7500 59.1 KB    And here is why: 5453 focus on defining function behavior, so it can use 712 in some part of the payload, but not all. Also it solves a problem that 712 doesn\u2019t solve: how to identify where the endorsement is, and what happen if there are nested endorsements when it\u2019s a nested function call, e.g. 5453 is expected to be used with 712 in a lot of case. The implementer of 5453 usually will (can / might need)  use 712\u2019s spec for generating a msgDigest for any particular non-trivial function parameter. 712 didn\u2019t determine how and where a function call will use the signature. 5453 also have a very strict and specific schema that is tailored towards being used in function extra data for endorsement(authorization). This is not as flexible as 712.  For example, such specific schema includes consideration of nonce, valid_since and valid_by. In 712, such thing can be an implementation choice when implementers a choosing a struct. In 5453, with the goal of \u201cendorsement\u201d in mind, it asks for a very specific format to encode nonce, valid_since and valid_by to avoid replay-attack, and also so that endorsers have a clear expectation when will their endorsement be valid. One may ask, then why just say \u201cPut a 712 structure of \u201d in the ending of an extra-data function then you are good. Yes, that\u2019s pretty much what we are doing here except for we might choose a simpler and rigid struct to reduce implementers\u2019 chance of error, because the \u201cendorsement\u201d are usually used for authorization so the simpler the better. There are still some WIP details that author (me for, any co-author welcome too) needs to consider and design. Your feedback&advice is greatly appreciated. We will modify \u201cSpec\u201d and \u201cRationale\u201d sections accordingly if changed. Let me know if this help explain your question.  It might still be a bit unclear, I am currently writing a few coding reference implementation examples to demonstrate what I mean.  Likely to publish in ERCRef repo.  Relationship with other EIPs Also maybe worth mention,  we expect 5453 implementations to be used with 1271 too, just in case one might wonder. we expect 5453 to be able to replace EIP-2612: Permit Extension for EIP-20: Signed Approval but 5453 can be used as Permit Extension in more general way: it supports all other functions, not just ERC20 transfer  Some early RefImp Example (pseudo code)  Example 0: Permit for ERC721 contract Foo20 is ERC721 {    const uint256 EDMT_LEN = ...; //      function transferFrom(address from, address to, uint256 tokenId, bytes calldata _data) {       address endorserMaybe = _isEndorsedBy(_data); // for simplicity assume entire data is endorsment       require(from == msg.sender || from == endorser); // ignore Approval for simplicity       _owner[tokenId] = to;       emit...    }    function _isEndorsedBy(bytes _endorsement) returns (address) {       if (!endorsements[:8] ==ASCII\"ENDORSED\") return address(0);       else {          byte eType = endorsement[endorsement.length - 8];       }    } // It can be more graceful represented as modifier if solidity supports lambda }   Example 1: Nested endorsement used in multi-hop function call contract FooNFT {   function swap(address tokenHolder, uint256 tokenId, bytes calldata data) {     require(isEndorsedBy(data, tokenHolder));     require(ownerOf(tokenId, tokenHolder));     _burn(tokenId);     destContract.mint(tokenId, tokenHolder, data[subsetlenth:]); // pseudo code, just to demonstrate ways to call the mint.   } }   contract BarNFT { ... // dest contract   function mint(address to, uint256 tokenId, bytes calldata data) {      require(isEndorsedBy(data, minterAdmin));     _mint(to, tokenId, data[remainlength:]);   }   function _mint(... bytes calldata reason) {     .. using the rest data as \"reason\"...   } }  In this way, user Alice could get the BarNFT\u2019s minterAdmin\u2019s endorsement to mint a token. user Bob could help user Charlie to call the swap function with Charlie\u2019s endorsement if the same minterAdmin also permit with an endorsement.  Example 2: Two endorsements in one call Here is another example MergeNFT using endorsements from two people at the same call, two token in, merge and create a third NFT function mergeTwoNFTs(uint256 tokenIn1, uint256 tokenIn2, bytes calldata data) returns (uint256 tokenOut) {   parse and verify endorsement 1 from data[datalength - 1*endorselength:]   parse and verify endorsement 2 from data[datalength - 2*endorselength:datalength - 1*endorselength];   verify endorser1 owns tokenIn1;   verify endorser2 owns tokenIn2;   _burn(tokenIn1);   _burn(tokenIn2);   _mint(tokenOut);   return tokenOut; }  ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5750",
                        "https://en.wikipedia.org/wiki/Blank_endorsement",
                        "https://ethereum-magicians.org/uploads/default/original/2X/2/269b0349cd56f16b7eeb664ce373921522155fe3.jpeg",
                        "https://github.com/ercref/contracts",
                        "https://github.com/ethereum/EIPs/pull/5782/files"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.677517361111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "7",
                    "likes": "0",
                    "time": "15/12/2022-09:22:08",
                    "content": "@frangio I updated the EIP-5453 and a reference implementation is shared in ercref-contracts/ERCs/eip-5453 at main \u00b7 ercref/ercref-contracts \u00b7 GitHub Your feedback is greatly appreciated. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.916666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "8",
                    "likes": "0",
                    "time": "05/01/2023-11:15:17",
                    "content": "Most recent version ercref-contracts/AERC5453.sol at main \u00b7 ercref/ercref-contracts \u00b7 GitHub and a simple usage example   github.com   ercref/ercref-contracts/blob/376b6b098a11cdf659f40fdd987cab9954b8df79/ERCs/eip-5453/contracts/EndorsableERC721.sol#L31                       require(owners[msg.sender], \"EndorsableERC721: not owner\");               owners[_owner] = true;           }                       function mint(               address _to,               uint256 _tokenId,               bytes calldata _extraData           )               external               onlyEndorsed(                   _computeFunctionParamHash(                       \"function mint(address _to,uint256 _tokenId)\",                       abi.encode(_to, _tokenId)                   ),                   _extraData               )           {               _mint(_to, _tokenId);           }                              @frangio for comment~ ",
                    "links": [
                        "https://github.com/ercref/ercref-contracts/blob/376b6b098a11cdf659f40fdd987cab9954b8df79/ERCs/eip-5453/contracts/EndorsableERC721.sol#L31",
                        "https://github.com/ercref/ercref-contracts/blob/376b6b098a11cdf659f40fdd987cab9954b8df79/ERCs/eip-5453/contracts/EndorsableERC721.sol#L31"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.847222222222222
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "9",
                    "likes": "0",
                    "time": "12/01/2023-01:48:22",
                    "content": "Cross posting a comment from ERC 4337: Account Abstraction via Entry Point Contract specification - #58 by yoavw    ERC 4337: Account Abstraction via Entry Point Contract specification   This 5453 solves a different problem. Namely, approval of specific method calls. This saves round trips for separate transactions so it close to batching. But batching is only one feature of 4337 . With 5453, You must sign with your account, so it \u201censhrines\u201d eoa accounts. EIP 4337 is about accounts, and about abstracting them, so that any account can have it\u2019s own execution model, signing model, recovery model, replay mechanism and also different gas model. In addition, we define the rpc and protocol used by users and nodes to communicate, and make sure UserOperations are as decentralized as normal Ethereum transactions.   ",
                    "links": [
                        "https://ethereum-magicians.org/t/erc-4337-account-abstraction-via-entry-point-contract-specification/7160/60"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.583333333333334
                }
            ]
        }
    ],
    "group_index": "43"
}