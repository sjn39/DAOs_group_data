{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/evm-equivalence-eip-6269-and-ethereum-stack-compatibility-definition/10044",
            "title": "EVM Equivalence (EIP-6269) and Ethereum Stack Compatibility Definition ",
            "index": 10044,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/pcaversaccio",
                    "index": "1",
                    "likes": "5",
                    "time": "22/07/2022-09:46:58",
                    "content": "In light of the recent zkEVM announcements of various projects and the ongoing discussion & confusion on how EVM Equivalence is defined, I propose to create an informational EIP that defines properly EVM Equivalence and Ethereum Stack Compatibility. This discussion thread is intended to collect the community\u2019s opinions that will be used to draft an initial EIP. I will start with my (maybe controversial) opinion on how to define EVM Equivalence and Ethereum Stack Compatibility:   EVM Equivalence is complete compliance with the Ethereum yellow paper. Period.  Ethereum Stack Compatibility = EVM Equivalence + JSON-RPC Compatibility + Node Architecture Compatibility + Design Pattern Compatibility Design Pattern Compatibility = Consensus/Execution Client Separation + (\u2026 what else should we put here?)  Now it\u2019s your turn - please share your thoughts on my idea about creating an information EIP as well as your thoughts on defining EVM Equivalence and / or Ethereum Stack Compatibility.  Update 1 (10 January 2023) I have drafted a first meta EIP that defines the term Full EVM Equivalence: Add EIP-6269: Full EVM Equivalence . This thread however covers still the additional topic with respect to Ethereum Stack Compatibility or Full Ethereum Equivalence. My aim is still to draft an additional meta EIP on Full Ethereum Equivalence. ",
                    "links": [],
                    "GPT-summary": "The author proposes to create an informational EIP that defines EVM Equivalence and Ethereum Stack Compatibility. The author shares their opinion on how to define EVM Equivalence and Ethereum Stack Compatibility and asks for the community's opinions to draft an initial EIP. The author provides an update on the progress of the EIP and the thread covers the additional topic of Full Ethereum Equivalence.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and scalability",
                        "Token economics",
                        "Law and regulations",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.038461538461538
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sergio_lerner",
                    "index": "2",
                    "likes": "2",
                    "time": "28/07/2022-17:12:40",
                    "content": "I find 2 issues with this definition:  The yellow paper is not updated at the same time of Ethereum hard-fork activations, so Ethereum can become non EVM-equivalent for some time. Even if we define EVM-equivalence in relation with the EIPs that are activated, EVM-equivalent blockchains may activate Ethereum EIPs later than Ethereum, which makes them suddenly non-equivalent.  I prefer EVM-equivalence to be a property of the evolution of a blockchain: it is EVM equivalent if it follows all activated EIPs of Ethereum, even if this is delayed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sergio_lerner",
                    "index": "3",
                    "likes": "0",
                    "time": "28/07/2022-17:20:34",
                    "content": "Most smart contract blockchains are EVM-Stack equivalent and EVM-equivalent with the exception of exact opcode gas costs. I don\u2019t need exact gas costs to consider a blockchain or rollup Ethereum compatible. Therefore EVM-equivalence definition is not useful. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.064285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "4",
                    "likes": "1",
                    "time": "28/07/2022-18:05:53",
                    "content": "Whether equal gas costs are required for EVM equivalence is an important thing to clarify. Defining it as \u201ccompliance with yellow paper\u201d or even \u201ccompliance with activated EIPs\u201d seems to imply that gas costs should be the same. I think we should explicitly exclude gas costs from the basic definition of \u201cEVM equivalence\u201d, and when desired make it explicit such as \u201cEVM equivalence down to gas costs\u201d or so. If we\u2019re being truly precise, the cost of an operation is a part of its semantics. The behavior of a contract can definitely change with different opcode pricing, and we\u2019ve seen this happen on Ethereum itself with hard forks. However, that same precedent shows that Ethereum itself doesn\u2019t consider pricing a \u201ccore\u201d part of EVM semantics. We should expect smart contract developers to know by now to design their contracts in a way that their semantics are independent of pricing, although I don\u2019t know if we can say that this is always feasible. Moreover, if we want to truly explore the scalability design space we have to consider that some chains will have entirely different cost models, and this has to be reflected in opcode pricing. For example, there is no reason to think a zkEVM should be priced the same as e.g. geth, given that it runs on a completely different \u201csubstrate\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.166783380018675
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pcaversaccio",
                    "index": "5",
                    "likes": "1",
                    "time": "29/07/2022-08:36:41",
                    "content": "Just as an example (a test contract) where \u201cWe should expect smart contract developers to know by now to design their contracts in a way that their semantics are independent of pricing\u201d does not hold: seaport/ExcessReturnDataRecipient.sol. If memory expansion costs change (even though it hasn\u2019t changed since the release of the Yellow Paper) there will be a problem. Generally, with the release of Huff language and further low-level initiatives, I feel that the smart contract semantics will be dependent to a certain extent at least on the specific pricing (whether this is good or not is another question). So if we take the EVM running on Ethereum as the benchmark and the semantics can depend on the pricing, we should probably include the gas costs into the definition of EVM Equivalence. For the scalability design space, where gas costs are not the same by design, we could define it as EVM Adherence. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.496753246753246
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "6",
                    "likes": "0",
                    "time": "05/09/2022-20:21:53",
                    "content": "Gas costs have to be able to change, as if they are too far off they are become an attack vector.  And whether they are an attack vector depends, as @frangio puts it, on the \u201csubstrate\u201d.  Some systems systems might not need gas at all. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/david",
                    "index": "7",
                    "likes": "4",
                    "time": "27/12/2022-16:29:42",
                    "content": "Right now, the most popular classification of different types of zkEVMs is probably Vitalik\u2019s August blog post:   vitalik.ca    The different types of ZK-EVMs      Perhaps an EIP could enshrine this 4-tier classification system with additional technical defintions? ",
                    "links": [
                        "https://vitalik.ca/general/2022/08/04/zkevm.html"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.154761904761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pcaversaccio",
                    "index": "8",
                    "likes": "1",
                    "time": "07/01/2023-00:18:00",
                    "content": "I have drafted a first meta EIP that defines the term \u201cFull EVM Equivalence\u201d: Add EIP-6269: Full EVM Equivalence. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/protolambda",
                    "index": "9",
                    "likes": "1",
                    "time": "07/01/2023-23:17:00",
                    "content": "Feedback on the EIP draft: Do you intent to capture the meaning of the whole EL, or just the EVM? From this magicians post I see you also mention \u201cEthereum Stack compatibility\u201d, but the EIP completely ignores that. The Ethereum Execution Layer as defined in the execution specs encompasses more than just the EVM. It includes the EVM as one of its main features. The transaction-types are not strictly part of the EVM. In go-ethereum for example the transaction-types are abstracted into a generic Message before being applied to the EVM, and no tx-typing can be introspected by the EVM. Yet, the equivalence of tx-encoding and signing with L1 mainnet is still a requirement for a significant part of existing ethereum tooling to work out of the box on alternative networks, something some ZK rollups that claim EVM-equivalence don\u2019t support. This is worth highlighting in the EIP. Another part that\u2019s not technically \u201cEVM\u201d but definitely part of the EL specs is the state-trie-format: L1 uses an account model backed by a Merkle-Patricia-Trie. Is this part of EVM equivalence? Probably not, but by just pointing at the EL specs it appears as if it is. And many ZK-rollups choose an alternative ZK-friendly state format anyway. And mainnet L1 may change it in the next few years to Verkle trees. And although event-logs are part of the EVM, tx-receipts are not; they are part of the EL storage format and only referenced in the block-header. Are these included in EVM equivalence? And then comes the execution-layer RPC APIs, which are an expectation around the EL and specified too: GitHub - ethereum/execution-apis: Collection of APIs provided by Ethereum execution layer clients Are these part of EVM equivalence? I would say no, but also worth calling out, as again A LOT of tooling depends on these, and this includes EVM-traces! I would define \u201cEVM equivalence\u201d as conformance to the processing of a single abstracted transaction onto an abstracted accounts-state and conforming to all mainnet L1 EVM features: EVM-context (memory, callstack, stack, gas, etc.), instructions and precompiles. And a mention of the origin of the term \u201cEVM equivalence\u201d would be appropriate: it\u2019s was not the ZK-EVMs who first popularized the meaning. Optimism has posted about the difference with \u201cEVM compatibility\u201d and \u201cEVM equivalence\u201d as early as in Sept 17 2021: The Future of Optimistic Ethereum | by Optimism | Optimism PBC Blog | Medium and described it as \u201cBy precisely enforcing the Ethereum Yellow Paper\u201d (which at the time of the post was more of a canonical source for EVM spec, this was pre-Merge and pre-EL-specs readiness). And Optimism then introduced it in more detail on Oct 26 2021: Introducing EVM Equivalence. Or, Ethereum All the Way Down: How We\u2026 | by Optimism | Optimism PBC Blog | Medium and followed up with an upgrade end 2021 dedicated to these described changes. L2 users expect tx-typing & state format & receipts & RPCs to also be there, so I support the definition of something like \u201cEthereum Stack Compatibility\u201d, although it definitely needs more detail. Does this include consensus part of the stack with proof-of-stake? That too has formatted blocks, state, APIs, etc. And FWIW, Optimism is nearing its launch of Bedrock, which will go far beyond EVM-equivalance to fully include all of these non-EVM Ethereum features, by using the Engine API and almost using Geth as-is, with the exception of minor additions to function as a rollup at all (deposit-tx type, payment for L1-data usage, and ability to reproduce exact blocks from inputs only with engine API). And with multi-client support planned as well (already have an Erigon prototype). By using this API and Geth and other clients with so few modifications, you could maybe even call it \u201cethereum stack equivalence\u201d instead of just \u201cethereum stack compatibility\u201d  ",
                    "links": [
                        "https://github.com/ethereum/execution-apis/",
                        "https://medium.com/ethereum-optimism/the-future-of-optimistic-ethereum-7f22d987331",
                        "https://ethereum.github.io/yellowpaper/paper.pdf",
                        "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.752294146825396
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pcaversaccio",
                    "index": "10",
                    "likes": "1",
                    "time": "09/01/2023-16:47:37",
                    "content": "@protolambda appreciate your extended feedback. Let me try to address your points separately:  Do you intent to capture the meaning of the whole EL, or just the EVM? From this magicians post I see you also mention \u201cEthereum Stack compatibility\u201d, but the EIP completely ignores that.  The short answer is yes. The long answer is this: I\u2019ve been watching these (marketing) battles between you guys at Optimism and other projects like Polygon zkEVM for some time now, and I\u2019m convinced that someone impartial (in this case me) should write an EIP on how Full EVM Equivalence and possibly Full Ethereum Equivalence is defined. When I started this discussion 6 months ago, I thought I would put both terms in one EIP, but after careful thought, I decided to split these two topics into two EIPs for simplicity. I now started with the first EIP on Full EVM Equivalence. So having this discussion in one thread is more of a legacy issue, but I don\u2019t see any problems with addressing it here. Edit: I updated the description of this thread to reflect the concern accordingly.  Yet, the equivalence of tx-encoding and signing with L1 mainnet is still a requirement for a significant part of existing ethereum tooling to work out of the box on alternative networks, something some ZK rollups that claim EVM-equivalence don\u2019t support. This is worth highlighting in the EIP. Another part that\u2019s not technically \u201cEVM\u201d but definitely part of the EL specs is the state-trie-format: L1 uses an account model backed by a Merkle-Patricia-Trie. Is this part of EVM equivalence? Probably not, but by just pointing at the EL specs it appears as if it is. And many ZK-rollups choose an alternative ZK-friendly state format anyway. And mainnet L1 may change it in the next few years to Verkle trees. And although event-logs are part of the EVM, tx-receipts are not; they are part of the EL storage format and only referenced in the block-header. Are these included in EVM equivalence? And then comes the execution-layer RPC APIs, which are an expectation around the EL and specified too: GitHub - ethereum/execution-apis: Collection of APIs provided by Ethereum execution layer clients Are these part of EVM equivalence? I would say no, but also worth calling out, as again A LOT of tooling depends on these, and this includes EVM-traces! I would define \u201cEVM equivalence\u201d as conformance to the processing of a single abstracted transaction onto an abstracted accounts-state and conforming to all mainnet L1 EVM features: EVM-context (memory, callstack, stack, gas, etc.), instructions and precompiles.  Those are all very valid points and worth discussing. So here is some background: What I understand is that the Ethereum Execution Client Specifications is a superset of the Ethereum Yellow Paper. In my first draft version of the EIP I was only referring to the Ethereum Yellow Paper. Because how I see it is that Full EVM Equivalence is the complete compliance with the latest version of the Ethereum Yellow Paper. Full stop. However, as @matt pointed out here, the Yellow Paper is considered a deprecated source and I should please refer to the execution-specs repository for the latest definitions of the EVM. That\u2019s why @Pandapip1 changed the reference to the execution-specs in this commit da87c92. I believe the discussion points to the question what reference is the single source of truth. IMHO it\u2019s the latest version of the Ethereum Yellow Paper, and if this is located in the execution-specs repository, we have to link it of course. Now the natural problem arises what does the repository cover more than the Ethereum Yellow Paper (you correctly mentioned the examples of transaction-types or the state-trie-format and there are even further specs that could be included there as well) and what do we need to exclude? I feel that this approach will lead to never-ending circles of discussion. I feel more that we should agree on the fact whether the Ethereum Execution Client Specifications should be considered as the new complete reference for the EVM (even though this goes beyond the original definition of the EVM we know from the Yellow Paper). I strongly support this notion since the EIP is written in a completely backward-compatible way where I define the change of the single source of truth at the Bellatrix hard fork date.  And a mention of the origin of the term \u201cEVM equivalence\u201d would be appropriate: it\u2019s was not the ZK-EVMs who first popularized the meaning. Optimism has posted about the difference with \u201cEVM compatibility\u201d and \u201cEVM equivalence\u201d as early as in Sept 17 2021: The Future of Optimistic Ethereum | by Optimism | Optimism PBC Blog | Medium and described it as \u201cBy precisely enforcing the Ethereum Yellow Paper\u201d (which at the time of the post was more of a canonical source for EVM spec, this was pre-Merge and pre-EL-specs readiness). And Optimism then introduced it in more detail on Oct 26 2021: Introducing EVM Equivalence. Or, Ethereum All the Way Down: How We\u2026 | by Optimism | Optimism PBC Blog | Medium and followed up with an upgrade end 2021 dedicated to these described changes.  While I understand your motivation, I don\u2019t think an EIP is a place to name-drop a project (that\u2019s why I didn\u2019t mention specific projects in the draft EIP). It is always a matter of debate as to what the exact origin is. I would like to keep this EIP unbiased and therefore do not support such an addendum.  L2 users expect tx-typing & state format & receipts & RPCs to also be there, so I support the definition of something like \u201cEthereum Stack Compatibility\u201d, although it definitely needs more detail. Does this include consensus part of the stack with proof-of-stake? That too has formatted blocks, state, APIs, etc.  IMHO Full Ethereum Equivalence involves definitely the consensus part. But for this part, I haven\u2019t drafted the EIP yet, but I keep you posted on this. ",
                    "links": [
                        "https://github.com/ethereum/execution-specs",
                        "https://github.com/ethereum/yellowpaper/blob/1016c0603062b76388e3c3c19786cd5f9ca9ac61/paper.pdf",
                        "https://github.com/ethereum/EIPs/pull/6269#issuecomment-1373819342",
                        "https://github.com/ethereum/execution-specs",
                        "https://github.com/ethereum/execution-specs",
                        "https://github.com/ethereum/EIPs/pull/6269/commits/da87c922b6ccfcb5033e23fe29c946e0ac1f994f",
                        "https://github.com/ethereum/execution-specs",
                        "https://github.com/ethereum/execution-specs",
                        "https://medium.com/ethereum-optimism/the-future-of-optimistic-ethereum-7f22d987331",
                        "https://ethereum.github.io/yellowpaper/paper.pdf",
                        "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.845317350999169
                }
            ]
        }
    ],
    "group_index": "2"
}