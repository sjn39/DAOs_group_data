{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1380-reduced-gas-cost-for-call-to-self/1242",
            "title": "EIP-1380: Reduced gas cost for call to self ",
            "index": 1242,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "1",
                    "time": "04/09/2018-17:37:05",
                    "content": "This topic is intended be the discussion for EIP-1380. Any comment or feedback is very much appreciated!   github.com/ethereum/EIPs       Reduced gas cost for call to self     by axic   on 05:30PM - 04 Sep 18 UTC   7 commits   changed 1 files   with 57 additions   and 0 deletions.       ",
                    "links": [
                        "https://github.com/axic",
                        "https://github.com/ethereum/EIPs/pull/1380",
                        "https://github.com/axic",
                        "https://github.com/ethereum/EIPs/pull/1380"
                    ],
                    "GPT-summary": "The author of the post is introducing a proposal called EIP-1380, which aims to reduce the gas cost for call to self. The author is asking for feedback on the proposal. The post also welcomes comments and feedback from third parties, who can ask questions, provide constructive criticism, or audit and review the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lrettig",
                    "index": "2",
                    "likes": "0",
                    "time": "05/09/2018-21:10:38",
                    "content": "Seems like a common sense win to me. @axic is there truly zero cost associated with resetting the state/memory in a call to self? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maurelian",
                    "index": "3",
                    "likes": "1",
                    "time": "06/09/2018-00:02:54",
                    "content": "Vyper has been using calls to self for memory safety, cost has been pushing them to move away from that approach. I\u2019m glad to see there is interest from other projects in this.   github.com/ethereum/vyper      Issue: VIP: Cost and usability Improvements to internal function calls  \t \topened by maurelian \ton 2018-06-16 \t \t \tclosed by jacqueswww \ton 2018-09-27 \t  Preamble VIP: <to be assigned> Title: reduce the cost and difficulty of code reuse in common situations Author: maurelian Status: Draft Created: 2018-06-16 Requires (*optional): <VIP number(s)> Replaces...   \tApproved  \tdiscussion       ",
                    "links": [
                        "https://github.com/maurelian",
                        "https://github.com/ethereum/vyper/issues/901",
                        "https://github.com/maurelian",
                        "https://github.com/ethereum/vyper/issues/901",
                        "https://github.com/jacqueswww",
                        "https://github.com/ethereum/vyper/issues/901"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.09375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "4",
                    "likes": "0",
                    "time": "06/09/2018-00:37:03",
                    "content": "The proposed use case is cited as a contract calling itself to achieve memory safety while reducing gas cost. If that is the case, I would like to ask to see an example contract implemented using current best practice of JUMP with the same contract implemented using CALL. This will help find practical contract development issues using this new approach. Also it will help quantify the benefit. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.420454545454546
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "5",
                    "likes": "0",
                    "time": "06/09/2018-00:46:18",
                    "content": "Additionally, the unstated assumption in EIP 1380 is that having a contract CALL itself would serve a useful purpose. Currently I cannot think of useful purposes for this feature. Specifically, there is ABI function call (OUTER) that wants to do something and it relies on another ABI function call (INNER) to help it. In this case, INNER will not be able to authenticate the beneficial message caller. Will the proposer please offer several contracts that are deployed to mainnet to be analyzed? I will be surprised if any meaningful contracts actually on mainnet would be useful if deployed using CALL to self. If compensating workarounds are required to make CALL to self work then let\u2019s discuss this in our analysis of these specific contracts. It may be that additional SSTORES are required to do any meaningful tasks. If that is the case then I would consider EIP1380 a case of premature optimization. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.964285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jacqueswww",
                    "index": "6",
                    "likes": "0",
                    "time": "06/09/2018-07:55:12",
                    "content": "I am not sure this is something that we can do, vyper uses CALL (except my work that was done for #901) and solidity uses JUMP. The underlying architecture being a layer lower, we cannot say implement two examples showing one above the other unless we alter the compilers\u2026 which I can show you once the 901 is completed and passes all tests - still not sure what this would achieve then? It would be the job of the separate languages to make the switch the CALL not change anything from the perspective of the contract writer. For vyper the msg.sender being different to solidity, is still an issue I would address (but is outside the scope I would say). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.479166666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jacqueswww",
                    "index": "7",
                    "likes": "0",
                    "time": "06/09/2018-08:01:31",
                    "content": "If compensating workarounds are required to make CALL to self work then let\u2019s discuss this in our analysis of these specific contracts. It may be that additional SSTORES are required to do any meaningful tasks. If that is the case then I would consider EIP1380 a case of premature optimization.  Just to clarify no SSTORES will ever be required as we can just pass information to the internal/private functions as parameters. The only issue would be the concept of msg.sender. INNER function call could easily do any form of authentication using a parameter (but to keep the behaviour of solidity the same msg.sender the same as previous versions it could be passed through as a parameter, with minimal gas cost). As the proposal motivates, there are significant benefits in having a clean VM state every time you enter a new function, especially because the VM already has the mechanics in place to do actual function calls, having to re-implement call logic on the bytecode level of a contract, because of gas costs, adds just another layer of complexity, and therefore just another layer of issues that could occur. Also there is the issue of filling up the stack with context variables/memory state. I will hopefully have the vyper branch done soon, and we can then do some more comparisons if that is useful? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.732717803030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "8",
                    "likes": "0",
                    "time": "06/09/2018-13:01:06",
                    "content": "    fulldecent:  If that is the case, I would like to ask to see an example contract implemented using current best practice of JUMP with the same contract implemented using CALL.   In the case of JUMP the compiler has to ensure that the called function will not change memory (e.g. the entire memory before the operation and after it is equivalent, but the during the function it may change\u2026). Doing this currently is not implemented in Solidity as it requires a more comprehensive static analyzer or as a simple solution it can disallow anything which uses mstore. That in practice however severely restricts the usefulness of such functions. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.111111111111112
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "9",
                    "likes": "1",
                    "time": "06/09/2018-13:07:30",
                    "content": "    fulldecent:  Additionally, the unstated assumption in EIP 1380 is that having a contract CALL itself would serve a useful purpose. Currently I cannot think of useful purposes for this feature.   The EIP may not have been clear enough, but the reduction happens for all CALL* instructions, including DELEGATECALL, etc. where the context remains mostly the same (with the exception of msg.sender). ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.857142857142858
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/karalabe",
                    "index": "10",
                    "likes": "1",
                    "time": "07/08/2019-10:31:40",
                    "content": "This EIP would enable quite a deep recursion, are we sure this won\u2019t be a DoS vector? 8M gas with this EIP would permit 200K nestings vs. <12K currently. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "11",
                    "likes": "0",
                    "time": "08/08/2019-08:46:49",
                    "content": "Call depth is limited to 1024. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.642857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "12",
                    "likes": "0",
                    "time": "11/08/2019-13:13:51",
                    "content": "This was discussed on ACD#46 (in September 2018) where it was suggested that optionally this could be more generalized:  Going as far as saying, gas cost for accessing an account already accessed in same block goes down from 700 to 40, potential to do this in the long term  ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-2929-gas-cost-increases-for-state-access-opcodes/4558/8"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.328703703703703
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "13",
                    "likes": "1",
                    "time": "22/08/2019-18:34:18",
                    "content": "I did some benchmarking on geth: https://gist.github.com/holiman/0662916aab57fb9a3b5d74703c0620cd . TLDR; I don\u2019t think 40 is sufficiently conservative ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "14",
                    "likes": "0",
                    "time": "22/08/2019-20:20:16",
                    "content": "Thanks for doing this @holiman! I\u2019ve mentioned on ACD yesterday that geth seems to not have a quickest path for precompiles and instead goes through some of the state db abstraction. As a result I wasn\u2019t hopeful to keep the numbers proposed in the EIP. @holiman your gist shows the time post-change (1.18s and 1.24s), but doesn\u2019t for pre-change. What is the time spent currently? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "15",
                    "likes": "1",
                    "time": "23/08/2019-06:50:41",
                    "content": "    axic:  @holiman your gist shows the time post-change (1.18s and 1.24s), but doesn\u2019t for pre-change. What is the time spent currently?   I reran it now, invoking it twice (to warm up some cache pools). The 1380 variant Time elapsed: 1.141062849s Time elapsed: 1.050492986s  The current (700 gas) variant: Time elapsed: 105.225522ms Time elapsed: 94.752792ms  I also took a cpu profile of the execution for 1380, result is below:  profile001.png3017\u00d73263 1.08 MB  I\u2019m sure we can optimize it, but it\u2019s hard to say how much. It appears a lot of the time is spent on garbage collection Note: the large time spent on time.Now may be related to https://github.com/golang/go/issues/24142#issuecomment-368713200 (my os is qubes, so all machines are virtual) ",
                    "links": [
                        "https://github.com/golang/go/issues/24142#issuecomment-368713200"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.419372294372295
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "16",
                    "likes": "0",
                    "time": "23/08/2019-07:30:29",
                    "content": "Here\u2019s more info about it, which makes it possible for anyone to play with it: https://github.com/holiman/goevmlab/tree/master/examples/calltree ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "17",
                    "likes": "0",
                    "time": "23/08/2019-08:10:05",
                    "content": "    axic:  that geth seems to not have a quickest path for precompiles and instead goes through some of the state db abstraction.   Damn, I keep confusing EIP numbers \u2013 the above stands for EIP-2046: Reduced gas cost for static calls made to precompiles ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "18",
                    "likes": "0",
                    "time": "23/08/2019-08:49:19",
                    "content": "    axic:  Damn, I keep confusing EIP numbers \u2013 the above stands for EIP-2046: Reduced gas cost for static calls made to precompiles   The funny thing is that you first confused it on ACD gitter, then you did the exact same thing again here  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.34375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "19",
                    "likes": "0",
                    "time": "23/08/2019-09:06:11",
                    "content": "My mind is on benchmarking 2046 and not 1380  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MrChico",
                    "index": "20",
                    "likes": "0",
                    "time": "17/10/2019-14:48:28",
                    "content": "It would be interesting to see how geth performs in a repeated call to different addresses, for comparison. To get accurate readings for this we would probably need to perform the testing in a setting with a large db though. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.392857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "21",
                    "likes": "0",
                    "time": "07/11/2019-14:06:03",
                    "content": "One simple test (for CALL only) https://github.com/ethereum/tests/commit/b7dfd94d252714f53557260421e52eed8d76c0e2 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PhABC",
                    "index": "23",
                    "likes": "0",
                    "time": "30/04/2020-18:15:28",
                    "content": "As requested by @axic here, an example of where such a change would be useful is for our Smart Contract Wallet implementation. Basically, every method in the wallet has a modifier called onlySelf() and each method needs to be executed from a function called execute(): /**  * @notice Allow wallet owner to execute an action  * @param _txs        Transactions to process  * @param _nonce      Signature nonce (may contain an encoded space)  * @param _signature  Encoded signature  */ function execute(   Transaction[] memory _txs,   uint256 _nonce,   bytes memory _signature ) {    ... }  This simplifies the writing of this contract because we don\u2019t want to have to pass these arguments to every method in the if these methods can only be called within execute(). This allows us to write the remaining methods with the onlySelf() modifier instead of also passing a signature + nonce arguments there as well. Here\u2019s an example: /**  * @notice Adds a new hook to handle a given function selector  * @param _signature Signature function linked to the hook  * @param _implementation Hook implementation contract  */ function addHook(bytes4 _signature, address _implementation) external onlySelf {   require(hooks[_signature] == address(0), \"ModuleHooks#addHook: HOOK_ALREADY_REGISTERED\");   hooks[_signature] = _implementation; }  Where onlySelf() is defined as modifier onlySelf() {   require(msg.sender == address(this), \"ModuleBase#onlySelf: NOT_AUTHORIZED\");   _; }  Unfortunately, while this is a simpler implementation, it does end-up being more costly for the exact reasons outlined in EIP-1380, which is unfortunate as this added cost shouldn\u2019t be present. ",
                    "links": [
                        "https://github.com/arcadeum/wallet-contracts/blob/fb499e2d2be5fa9e63b1cead7afec4cc864c3a31/contracts/modules/commons/ModuleCalls.sol#L64",
                        "https://github.com/arcadeum/wallet-contracts/blob/fb499e2d2be5fa9e63b1cead7afec4cc864c3a31/contracts/modules/commons/ModuleBase.sol#L6"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.000231910946197
                }
            ]
        }
    ],
    "group_index": "294"
}