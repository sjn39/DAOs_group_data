{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/is-there-a-dynamic-nft-eip-in-the-work/7687",
            "title": "Is there a 'dynamic NFT' EIP in the work? ",
            "index": 7687,
            "category": [],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/jeromelecoq",
                    "index": "1",
                    "likes": "0",
                    "time": "04/12/2021-19:58:08",
                    "content": "is there an ERC standard for a dynamic NFT in the work? A simple upgrade of ERC721 with a state struct (no constrains on how it is structured inside) a standard get_state solidity function a standard  set_state solidity function a set of associated event functions to allow external DAPs to listen I think that would be really impactful. It would allow external smart contracts to standardize linkage of data with a dynamic NFT (similar to relational databases) as well as help develop the growing gaming NFT ecosystem (but this applies beyond gaming) and store on chain important state states. ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.339285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jeromelecoq",
                    "index": "2",
                    "likes": "0",
                    "time": "04/12/2021-20:12:35",
                    "content": "After some digging This is related to https://ethereum-magicians.org/t/erc-1948-non-fungible-data-token/3139 I can see the EIP was merged but has become stagnant : https://eips.ethereum.org/EIPS/eip-1948 Sorry if I am new to this process. Anybody has insights as to why? ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-1948"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.393939393939394
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jeromelecoq",
                    "index": "3",
                    "likes": "0",
                    "time": "04/12/2021-21:46:38",
                    "content": "Pinging @johba whether he would be able to comment on status ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wschwab",
                    "index": "4",
                    "likes": "2",
                    "time": "07/12/2021-15:06:06",
                    "content": "I\u2019m not sure how much of this you\u2019d want to have living on the contract (in a setup where the metadata is off-chain) - it seems like a lot of the time this would be better handled in the JSON itself. tbh, you\u2019d really like to have as little as possible on chain. For games, the question is really what is handled on-chain by the game and what not, which is likely case-by-case. Can you talk about the usecases you\u2019re looking at? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.145833333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sbauch",
                    "index": "5",
                    "likes": "2",
                    "time": "07/12/2021-19:13:47",
                    "content": "I\u2019ve done quite a bit of work and experimentation with stateful NFTs and have some suggestions. First, you might be interested in Michael Feldstein\u2019s ideas around mutable ERC721. It\u2019s a bit different than what you\u2019re suggesting, where state is assumed to be returned as part of tokenUri metadata and the proposal imagines a system for invalidating metadata caches. Proposal: ERC721Mutable by msfeldstein \u00b7 Pull Request #1 \u00b7 msfeldstein/blockheads-contracts \u00b7 GitHub My first project CryptOrchids are NFT flowers that persist some state to determine if a flower is alive. Owners must perform a transaction water every 7 days to keep it alive. In this case, I would be more keen to use the get_state function, but the set_state function is less suitable I think? In an ideal world, marketplaces would utilize the get_state function to show current state of a token. But setting state feels like something more specific to the project that needs things like access control. My more recent work however goes in a bit different direction. If I were to redo CryptOrchids today, I would not put the state on the token contract. I think that we can start to better use composability of contracts and add dynamism or state to tokens through additional contracts or protocols. Generally I feel like the ERC721 spec should primarily be used for ownership related data and functions. I published a piece that goes into what these additional protocols could look like - \ud83c\udf51 ASSPLayers for Open NFT Gaming \u26d3 \u2014 Mirror So I suppose my suggestion would be that I see the most value in a standard function for \u201cgetting state\u201d of a stateful token, but I also would encourage exploring whether this must be an ERC721 extension, or whether this is actually some new type of standard protocol independent of ERC721. ",
                    "links": [
                        "https://mirror.xyz/sammybauch.eth/AWEOcldh_K_Lm1ohj3awMQWBaXRWB0Nc45FHmPcu8Co"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.985129068462402
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jeromelecoq",
                    "index": "6",
                    "likes": "0",
                    "time": "07/12/2021-19:14:06",
                    "content": "1/ Well say that your NFT becomes a key piece of an \u201cavatar\u201d with dynamic associated metadata controlled by the owner. If you want to share it in a decentralized way so that multiple external services can rely on it. I don\u2019t think having all the metadata hosted on an AWS running virtual machine will fulfill the spirit of web3. That machine can go down at any point depending on the original NFT creator thereby impacting the initial purchase of a dynamic NFT. 2/ The ethereum chain is expensive yes but various L2 options are bringing down gas cost that  makes this very practical. For example Minting an NFT on Polygon costs couple $ cents at today\u2019s price making it practical to add a little more info on chain. 3/I understood that all associated ethereum L2 chains are somehow following L1 EIP standards (perhaps even L1 solidity-compatible chains).  So I thought this was the right place to start this as scaling cost is improved. 4/ I want to add that you can make this very reasonably cheap by using integers to store the state of each NFT in a given collection and have a short on-chain lookup table to associate that integer value with a given longer description of the state in the lookup table. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.211695326278659
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jeromelecoq",
                    "index": "7",
                    "likes": "0",
                    "time": "07/12/2021-19:28:36",
                    "content": "thanks I will look it over. Somehow I like for this to be an extension of ERC721 because you can make this entirely back-ward compatible thereby allowing for stateful NFT to be immediately tradable across all existing platforms along with the other stateless NFTs. I have already implemented working versions of these smart contracts in various forms but I think it would be beneficial to standardize it for this approach to grow. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.289285714285715
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sbauch",
                    "index": "8",
                    "likes": "0",
                    "time": "07/12/2021-19:37:21",
                    "content": "i actually think doing it outside of ERC721 is more backwards compatible? i.e. any stateful NFT that exists now won\u2019t be able to utilize this standard. whereas if you push statefulness to a protocol, any existing NFT project could be registered for that statefulness. But yes I am a fan of standardizing approach, the primary value i see in standardization is reading the state. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jeromelecoq",
                    "index": "9",
                    "likes": "0",
                    "time": "07/12/2021-19:45:50",
                    "content": "Yes, this is true. But then there could be several states associated with a given NFT (in separate smart contracts) ? I am not sure I fully understand your idea. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.392857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wschwab",
                    "index": "10",
                    "likes": "1",
                    "time": "08/12/2021-18:18:44",
                    "content": "I feel like there\u2019s a bit of an issue here that should get discussed directly, though pretty much everyone in this conversation seems deeper in the technicals of this than I am, so I might just be missing something. Assuming we\u2019re talking about metadata being stored off-chain (let\u2019s use IPFS as an example), I think any dynamic/mutable metadata touches three things:  The actual IPFS link needs to be changed (or if it uses IPNS, then the metadata at that hash needs to change) Which means there\u2019s something off-chain interacting with IPFS to make that happen The contract needs to be updated that either the metadata hash has changed, or in the IPNS case, I would still think that it should issue an event to alert platforms that the metadata has been updated  Number 2 is the one that concerns me the most. I\u2019d like to see us steer towards transparency and trustlessness, but how can we decentralize the middle layer interacting with IPFS? I think what is on-chain and what is off-chain (and what triggers state changes in what) is a dynamic here that should be addressed, but like I said, maybe I missed some of the context above. In terms of 3, I see ideas here for new functions on top of 721, but perhaps I\u2019m not understanding why we need new functions, and the standard token URI can\u2019t be used. I could understand a new specific event for triggering a URI update, maybe a new UpdatedURI event or the like, I don\u2019t feel like I\u2019ve fully understood why we\u2019d need new state functions. What do you see these functions adding? I think this is also a part of the whole on-chian vs. off-chain since the metadata is (in general, ofc there are also projects like Loot) off-chain, and I\u2019m assuming whatever is consuming the metadata can read it and pull out the bits that it wants. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.620454545454545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jeromelecoq",
                    "index": "11",
                    "likes": "1",
                    "time": "08/12/2021-18:57:17",
                    "content": "Good thoughts. So the way I got this to work was based on several observation/experimentations:  I found that most NFT smart contracts actually do NOT store a hash of the image. They just create a json/image server (on heroku or AWS) and add URI as base_uri in the smart contract to this server. In general, because the image is not stored on chain, this one-way dependency is rather weak. In fact, I think the hashing part is not even part of the standard openzeppelin implementation. Many NFT collections actually allow this base_uri to be changed by the contract owner so as to be able to move data storage around. In my implementation, the smart contract did not need to talk to the image server. It acts as the source of ground truth for the state of the NFT for ALL external uses of the NFT. The image server can pull the latest state of the NFT by fetching the latests events on the contract and adjust its json / image accordingly. This is trivial web3/javascript work. Storing the critical metadata on-chain is actually intended to address this state disconnect between the NFT image server and the smart contract. Having it on chain guarantees that the state of the NFT cannot be hacked or changed by anyone else than the owner thereby opening up truly decentralized owned NFT metadata. In some ways, I find that dynamic NFTs with on-chain metadata is actually more interesting and useful than most current image static NFTs because the data would actually be on-chain so that the owner can trust this to be his/her (as opposed to an image that is not actually stored on-chain and he/she doesn\u2019t really have the IP for).  Does that provide better context? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.074507389162562
                }
            ]
        }
    ],
    "group_index": "1533"
}