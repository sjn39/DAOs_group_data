{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/idea-nft-entanglement/8038",
            "title": "Idea: NFT entanglement ",
            "index": 8038,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/cyrus",
                    "index": "1",
                    "likes": "0",
                    "time": "19/01/2022-17:22:12",
                    "content": "When you buy a car, you don\u2019t buy the hood, and then the steering wheel and then the rear axle\u2026 you buy it all together as one piece. In Ethereum NFT land, there\u2019s no option to bundle things together permanently. NFTs that should go together have to be transferred 1-by-1, which is messy, expensive and limiting. This idea is to create \u201cNFT Entanglement\u201d where a new NFT can be minted but instead of having normal transfer mechanisms, it is immediately and permanently wedded to some existing NFT, specified at mint time. Anytime the underlying NFT changes owners, the network would enforce that this new entangled NFT immediately and atomically does as well, possibly by simply sharing the same memory slot on the chain that holds the owner address. I\u2019m an application-level guy, mostly (see: Etheria, https://etheria.world), and am seeking feedback/assistance in formalizing this EIP proposal from folks more familiar with lower-level workings. Questions:   If the new NFT is to be linked to the memory slot holding the owner address of the existing NFT, by what mechanism should that linkage made?   Above, I described an NFT type that is linked permanently at creation time, but maybe the spec should allow for creation, then permanent linkage at some later time?   Is it possible to create two-way entanglement such that the EOA owning the old NFT could authorize the new NFT to manage ownership of the old NFT (i.e. in the reverse direction)?   Background The need for this comes from my desire to add new features to the existing NFTs in the project I manage, specifically to direct royalties to the old NFT owners via 1155 token mechanics. I could create a new NFT \u201cemblem\u201d (as I call it) inside the 1155 where the normal transfer mechanisms are disabled and replaced with a \u201ctouch()\u201d function that always sets the new NFT owner to the underlying owner address. Anytime the set of NFT ownership is out of sync (via sale or transfer), anyone can call \u201ctouch()\u201d to sync one or more of the \u201cemblem\u201d NFTs to the correct address. But obviously this is (a) hacky, (b) non-atomic, (c) expensive and probably issues (d-z) I can\u2019t even imagine immediately. Thoughts and assistance greatly appreciated! ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-4671-non-tradable-token/7976/21"
                    ],
                    "GPT-summary": "The author proposes the creation of \"NFT Entanglement\" to bundle NFTs together permanently. The author seeks feedback and assistance in formalizing the EIP proposal from people more familiar with lower-level workings. The proposal is motivated by the author's desire to add new features to the existing NFTs in the project they manage. The author also asks questions about the mechanism of linkage, the possibility of two-way entanglement, and the timing of permanent linkage.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.410266457680251
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/omaraflak",
                    "index": "3",
                    "likes": "0",
                    "time": "01/02/2022-18:23:06",
                    "content": "When you say NFTs with an \u201cs\u201d, am I right to assume you\u2019re talking about different tokenIds in one same contract ? Also, what happens if two different persons own \u201centangled\u201d NFTs, and then one is sold ? The one that did not sell will lose his NFT ? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.885714285714285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cyrus",
                    "index": "4",
                    "likes": "0",
                    "time": "01/02/2022-20:36:00",
                    "content": "I think the best way to do this is to have a \u201csource\u201d 721 NFT and then any entangled NTT would be permanently wedded to it at mint time. So the entangled NTTs would not be directly transferrable. They would always go wherever the linked NFT goes. This is doable now: make an NFT, remove the transferability and make getOwner() simply return getOwner() of the source NFT. Question is how to codify this? Should it be included in the NTT discussion? On the source NFT side, could there be a 721 extension that is aware of its entangled NFT add-ons? Does the source 721 get a choice as to whether tokens can be entangled to it? Can the source NFT detach add-ons? Clear as mud, right? Does this help at all? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.446428571428572
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/earizon",
                    "index": "5",
                    "likes": "1",
                    "time": "04/02/2022-17:35:54",
                    "content": "This is a very good point from my point of view in terms of UX / usability. Maybe a \u201cdependency tree\u201d of ownership could be more practical than entanglement. I am thinking about the scenario when a real-state property is tokenized. Initially it contains an NFT with a house, a \u201cchild\u201d swimming pool as well as a two \u201cchildren\u201d garages. When changing ownership of the house all children tokens must change ownership atomically, but original owner can be interested in changing ownership of just one garage (that will vanish from the tree). Entanglement will correspond to the addition of an NFT as child of a parent (and potentially grand parents). Children will need to contain a pointer to their parents, (maybe codified in some compact form) so that in a complex ownership-tree changing a node parent will automatically change ownership of children, grand children, \u2026 for free. Only when the pointer has some sort of special value ( ~keccak256(\u201croot_of_ownership\u201d))  the real owner will be used. A tree like structure also means that  complexity of search-for-ownership given a child would be LOG_y(N), with N being the number of \u201centangled\u201d NFTs and y the average children per parent, in normal scenarios (N in the case corner scenarios of a linear-like tree from root to leaf). This also helps in other use cases. For example I want to organize my NFT collection into folders with the idea of reselling / atomically swapping a subset of them atomically. For example I have some NFT related to some video-game and I want to swap them for some other collection of NFT from a new video-game with  another user. My two cents! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.0034992784992784
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cyrus",
                    "index": "6",
                    "likes": "0",
                    "time": "06/02/2022-14:11:32",
                    "content": "Ultimately, I think what we\u2019re talking about is codifying NFT relationships in some way, transferable or otherwise, and I agree that parent-child is the correct direction for our thought processes. The base case is a transferable NFT parent (~721) and children tokens that become permanently and non-destructively attached at mint time. (My original need, basically.) This is very easy to handle; getOwner() of the child is just getOwner() of the parent and each token gets a concise pointer to the other (an append-only array of children in the parent and a single \u201cparent\u201d variable in the child). After that, though, it gets much more complicated:  Children tokens that can be attached or detached Grandparent (etc) relationships Children tokens that can be created, transferred, but when attached, are permanently attached Children tokens that are permanently attached unless some condition is met Children tokens that are destroyed if some condition is met  These additional cases come with the additional variables of transferability, permanence, and multiple levels of hierarchy. And I can imagine gas determination would become challenging. So I think the question is what is the real, immediate need and what is realistic to get adopted in short order? Could the base case be codified and added first in such a way that the later needs could be added later? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.094360902255639
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poria-cat",
                    "index": "7",
                    "likes": "0",
                    "time": "09/02/2022-13:20:52",
                    "content": "It looks like I\u2019ve done something relevant, At this EIP-4786, One interesting thing I did was to connect/combine different NFTs to each other, and of course to connect the ERC20/ERC1155 to the NFT. Of course it can also be discussed here: EIP-4786: Link Common Token to ERC-721 ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-4786-link-common-token-to-erc-721/8245"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.475
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/earizon",
                    "index": "8",
                    "likes": "0",
                    "time": "20/03/2022-19:46:36",
                    "content": "I\u2019m just thinking that a different approach is a degree of indirection between NFTs owner address and NFT ownership that will allow different relationship (entangled, tree, \u201ccherry-pick\u201d, related-by-business-logic, \u2026) be implemented outside the hardcoded smart-logic. By adding this degree of indirection among identity and ownership and creating well-defined identity patterns we can assign a given set of FT/NFT to a given address, and another set of FT/NFT to another given address with all those addresses owned by the same user/identity (nothing new here). Such user  \u201cgroup\u201d different tokens in different addresses controlled by himself (again, nothing new here). An entagled group of NFT will just be assigned to a given address representing the entanglement, that can be moved at will to a new ownership. This of course is already possible right now, and anyone can do it by just \u201cjuggling\u201d with its wallets. The problem is that this \u201cjuggling\u201d can be out-of-reach for 99.999% of users and how to do it in with a beautiful and standarized \u201cUX\u201d is also undefined. There are HD standards to define hierarchies of addresses on the wallet \u201cside\u201d, but nothing related to how mapping those HD wallets (or maybe some other sort of future wallet schema) to entanglement or hierarchy trees of tokens. The effort will then move to create a set of well-defined \u201cbest-patterns\u201d for such address-to-identity mechanism in an standard way to simplify token management (standard way == well documented and defined interfaces that everybody agree to). Related token management EIP can then be extended to PROMOTE those \u201cbest-patterns\u201d, basically ensuring for example that market places and wallets use the same nomenclature. Not sure about how those \u201cbest-patterns\u201d must look like, but for example it must be easy for a user to define which set of tokens are entangled or related to each other and users\u2019s wallet must help their users to create new sub-addresses by just \u201cguessing\u201d the user intention for the new addresses and the current capabilities of the underlying smart-contract managing the token (querying its ERC165 interface for example). It must be easy for users to see a set of entangled tokens as belonging to the same creator/author as another set of entangled tokens.  SC controlling tokens can impose \u201cquality-assurance\u201d restrictions. For example, a given SC can impose to register a well defined \u201cparent\u201d address for the full set of tokens defined by the same owner, and force to use a new set of \u201cchildren\u201d addresses for a new subset of  children-and-entangled tokens, and maybe also imposing such addresses to comply with some well defined rules. Transfers that now indicate movements with the (from, to) parameters can force a (from_parent, from_child, to_parent, to_child) instead (with the \u201cfrom_parent\u201d, \u201cto_parent\u201d being sort of inmutables entities), and differentiating standard transfers from \u201cregroup\u201d transfers using just (parent, from_child, to_child). Wallets aware of the \u201cbest-pattern\u201d standard will check that \u201cfrom_parent\u201d/\u201cfrom_child\u201d and \u201cto_parent\u201d/\u201cto_child\u201d match some rules or feedback users otherwise aborting any transfer. This can allow for a much better \u201cUX\u201d experience and also increase the security of transactions, considering for example that the immutable \u201cparent\u201d address must be registered first and treated as a mostly immutable entity. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.525234927673952
                }
            ]
        }
    ],
    "group_index": "1571"
}