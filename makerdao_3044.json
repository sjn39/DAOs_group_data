{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/ns2drp-ns-drop-mip22-token-smart-contract-domain-team-assessment/5517",
            "title": "[NS2DRP] NS-DROP/MIP22 Token Smart Contract Domain Team Assessment ",
            "index": 5517,
            "category": [
                "Collateral Onboarding",
                "Domain Work"
            ],
            "tags": [
                "real-world-finance",
                "sc-domain-work",
                "mips",
                "ns-drop",
                "centrifuge",
                "new-silver",
                "ns2drp"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/cmooney",
                    "index": "#1",
                    "likes": "7",
                    "time": "07/12/2020-03:19:04",
                    "content": "General Information This assessment, like the MIP21 assessment, also deviates from the standard smart contract technical assessment format because of the idiosyncratic nature of the RWA collateral types. This assessment is a final technical evaluation of MIP22 prior to deployment in the Maker Protocol, and is intended to be a more thorough assessment of all the features.  This assessment may be re-used, in part, for other RWA assessments that follow the pattern of MIP22. For this assessment, we will be focusing on the New Silver NS2DRP token, as well as the infrastructure for all centrifuge tokens.   Symbol: NS2DRP  Address(es):   NS2DRP: 0xE4C72b4dE5b0F9ACcEA880Ad0b1F944F85A9dAA0    Relevant MIP information:  [NS-DROP] MIP6 Application: New Silver DROP: Real Estate-Backed Loans Vault Liquidation Mechanism for Centrifuge Trade Finance Assets: A Pre-MIP Discussion MIP22: Centrifuge Direct Liquidation Module    Total supply: 100,044.211751766894967619  Github repository:  https://github.com/centrifuge/tinlake-maker-lib    Can use existing MCD collateral type adapter?  This collateral comes with its own authed join and exit functions.  These functions are similar to other RWA onboarding that uses this framework.    Technical Information   Does the contract implement the ERC20 token standards? Yes.  Decimals: 18.  Overflow checks: Yes.  Mitigation against allowance race-condition: No, but there is a  permit() interface.  Upgradeable contract patterns: No.  Access control or restriction lists: Yes.  There is a memberlist.  Non-standard features or behaviors: Yes.  Above mentioned memberlist  addition of the permit() approval pattern (minor bug in version)    Key addresses:  The wards can call mint() and depend().  Wards are  The deployer address, which cannot be called again (dead) The TinlakeRoot which can call depend() and is controlled by a multisig The Tranche which can call mint()       Additional notes:  In addition to the NS2DRP token, this collateral comes with its own sandbox (much like MIP21).  This comes with authed join(), exit(), draw(), and wipe() calls that allow the owner to call them.  We will review these, and other aspects of the architecture below.    Reviewing the Architecture The core RWA architecture consists of the following contracts:  LibNote TinlakeManager  The following are considered out of scope for this assessment, and if needed, are subject to governance approval via an executive vote:  DssSpell  LibNote contract Source code This is the same LibNote we use in the core of DSS. TinlakeManager contract Source code Vault Operations  join(uint) exit(uint) draw(uint) wipe(uint)  join(uint) Join takes a uint wad as an argument and can only be called by the owner.  It only functions if the Vault is in a safe, glad, and live state.  The manager transfers from the owner to the manager some wad, gives itself a gem balance in the vat, and calls frob() to place that gem into vat.  The join() in this case combines a traditional join without the adapter, and a lock().  This method requires the owner to toss an approval to the manager so it can transfer gem. exit(uint) Exit takes a uint wad as an argument and can only be called by the owner.  It only functions if the Vault is in a safe, glad, and live state.  The manager calls frob() to remove the gem from the vat.  The gem balance is removed from the vat and transferred from the manager to the owner.  The exit() in this case combines a traditional free() with an exit() to the owner. draw(uint) Draw takes a uint wad as an argument and can only be called by the owner.  It only functions if the Vault is in a safe, glad, and live state.  The manager calculates the rate adjusted amount of wad it needs to frob() from the Vault and then calls DaiJoin.exit() to send that amount of DAI to the owner. wipe(uint) Wipe takes a uint wad as an argument and can only be called by the owner.  It only functions if the Vault is in a safe, glad, and live state.  The manager first transfers DAI from the owner to itself and calls DaiJoin.join() to get a vat DAI balance.  It then calculates the rate adjusted amount of wad it needs to repay the Vault. The owner must toss an approval to allow the manager to transfer DAI tokens. Administration  setOwner(address) migrate(address)  setOwner(address) This allows the current owner to reassign the ownership to another contract. Reminder, the owner can call join(), exit(), draw(), wipe(), and take(). migrate(address) Periodically, changes may be made to the Maker Protocol that require module upgrades.  Some of these changes may impact an interface or add a feature that could be required in the manager.  For this reason, the smart contract domain team suggested the addition of migrate().  This function can only be called by a GSM delayed Maker governance to perform the following actions:  call vat.hope() on a new manager  give the new manager an infinite DAI approval give the new manager an infinite gem approval and cage() the old manager  NOTE: Because this cages the existing manager, it also means the owner could call tell() and take() after.  For this reason, it\u2019s best to take the following steps in the same block after a call to migrate():  move the vault deny the manager on the vat move the vault and any erc20 balances to a new manager  Liquidation  tell() unwind(uint) sink() recover()  tell() Tell kicks off a liquidation.  Typically in MCD this would occur via the cat.bite() or dog.bark(); however, in MIP22 there are much longer liquidations with a chance to recover DAI.  tell() starts the process.  Once started, tell() liquidates the entire Vault irreversibly changing the state of safe to false.  This means, if governance triggers a tell, it must be followed to completion. unwind(uint) This is the primary liquidation function.  Unwind performs the function of a flip.tend() for the protocol.  Anyone can call this function.  It will recover DAI, paying down the debt for the Vault and removing the corresponding gem amounts. sink() Sink is called when the liquidation process has failed, and we must accrue the bad debt to sin.  This function sets glad to false, cleans up the Vault, and adds the balance to bad debt in the system.  This bad debt will later be resolved with either the surplus buffer if available, or flop() auctions. recover(uint) Recover is a public function similar to unwind(), but it can only be called after the debt has been written off with sink().  This allows any possible long tail of recoverable debt to be collected and sent back to the surplus.  We do this here because we already accounted for the remaining debt as bad when sink() was called.  This function can be called until the adapter is no longer live() (the result of calling migrate() or cage()). Global Settlement  take(uint) cage()  take(uint) Take only functions once the adapter has been caged with cage() or the migrate() call.  It allows the owner to finish up any pending liquidations.  A call to tell() must happen first.  Also, see the note in migrate() about the actions one should take after a migration. cage() This function can be called by governance after the GSM delay to disable the manager.  Only tell() and take() to facilitate a liquidations may be called after a cage(). Additional Comments This does not use a typical Maker oracle. Instead, it uses a DSValue contract that is periodically updated by governance with the correct price.  Since the price of the asset doesn\u2019t change, and is instead related to the amount of debt taken against the position by the owner and the fees, this collateral can go a number of weeks without an update.  Just like with MIP21, MIP22 doesn\u2019t currently have an oracle attack surface beyond the DSValue authorization, which is just governance behind the GSM pause. Contract Risk Summary There is a medium amount of risk in this contract as the mint() and memberlist are under the control of other contracts.  The token, however, is always passed between the Maker Protocol, the owner, and the liquidation pool. On liquidation, MIP22 liquidates the entire Vault.  It remains an open question as to how effective this liquidation will be given it\u2019s a longer term process handled by the given pool. Similar to MIP21 governance must update the price feed for the Vault. Supporting Materials Architecture Diagram 543\u00d71356 87.6 KB Inheritance Diagram  Contracts Description Table     Contract Type Bases       \u2514 Function Name Visibility Mutability Modifiers          ERC20 Implementation      \u2514 rely Public    auth   \u2514 deny Public    auth   \u2514 add Internal       \u2514 sub Internal       \u2514  Public    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom Public    NO\u2757\ufe0f   \u2514 mint External    auth   \u2514 burn External    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f   \u2514 push External    NO\u2757\ufe0f   \u2514 pull External    NO\u2757\ufe0f   \u2514 move External    NO\u2757\ufe0f   \u2514 permit External    NO\u2757\ufe0f          MemberlistLike_2 Implementation      \u2514 hasMember Public    NO\u2757\ufe0f   \u2514 member Public    NO\u2757\ufe0f          RestrictedToken Implementation ERC20     \u2514 hasMember Public    NO\u2757\ufe0f   \u2514  Public    ERC20   \u2514 depend Public    auth   \u2514 transferFrom Public    checkMember    Legend     Symbol Meaning      Function can modify state    Function is payable     ",
                    "links": [
                        "https://forum.makerdao.com/t/mip22-centrifuge-direct-liquidation-module/3930",
                        "https://etherscan.io/address/0xE4C72b4dE5b0F9ACcEA880Ad0b1F944F85A9dAA0",
                        "https://forum.makerdao.com/t/ns-drop-mip6-application-new-silver-drop-real-estate-backed-loans/3477",
                        "https://forum.makerdao.com/t/vault-liquidation-mechanism-for-centrifuge-trade-finance-assets-a-pre-mip-discussion/3737",
                        "https://forum.makerdao.com/t/mip22-centrifuge-direct-liquidation-module/3930",
                        "https://github.com/centrifuge/tinlake-maker-lib",
                        "https://github.com/centrifuge/tinlake-maker-lib/blob/105ded78229168182a1147a581c0c69448fe6b1a/src/mgr.sol#L167-L182",
                        "https://github.com/centrifuge/tinlake-maker-lib/blob/105ded78229168182a1147a581c0c69448fe6b1a/src/lib.sol",
                        "https://github.com/makerdao/dss/blob/master/src/lib.sol",
                        "https://github.com/centrifuge/tinlake-maker-lib/blob/105ded78229168182a1147a581c0c69448fe6b1a/src/mgr.sol",
                        "https://forum.makerdao.com/t/maker-relay-ep-29-en-espanol/6220",
                        "https://forum.makerdao.com/t/blocktower-credit-commercial-and-legal-risk-assessment-part-i/18790/14",
                        "https://forum.makerdao.com/t/agenda-discussion-scientific-governance-and-risk-135-thursday-april-1-17-00-utc/7206/2",
                        "https://forum.makerdao.com/t/mip6-application-rfa-canadian-mortgage-originator/17303",
                        "https://forum.makerdao.com/t/maker-relay-ep-29/6214",
                        "https://forum.makerdao.com/t/on-the-priority-of-real-world-assets-where-do-we-stand/5424/41",
                        "https://forum.makerdao.com/t/collateral-onboarding-and-mip-updates-2020-12-18/5726",
                        "https://forum.makerdao.com/t/collateral-onboarding-and-mip-updates-2020-12-11/5661",
                        "https://forum.makerdao.com/t/maker-relay-ep-24-en-espanol/5574",
                        "https://forum.makerdao.com/t/maker-relay-ep-24/5534",
                        "https://forum.makerdao.com/t/on-the-priority-of-real-world-assets-where-do-we-stand/5424/38"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.271089349718382
                }
            ]
        }
    ]
}