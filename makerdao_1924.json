{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/inconsistencies-on-decimals-type-was-ray-rad/1878",
            "title": "Inconsistencies on decimals type WAS, RAY, RAD ",
            "index": 1878,
            "category": [
                "Miscellaneous",
                "Site Feedback"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/sirhill",
                    "index": "#1",
                    "likes": "0",
                    "time": "03/04/2020-15:22:55",
                    "content": "The following documentation mention RAY 27 and RAD 45: https://docs.makerdao.com/other-documentation/system-glossary#vat-vault-engine However, it is mentionned to the link below that RAY is 36, and WAS 18. https://makerdao.com/purple/#sec-3-1 What are the correct expected values ? ",
                    "links": [
                        "https://makerdao.com/purple/#sec-3-1"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://forum.makerdao.com/u/jernejml",
                    "index": "#2",
                    "likes": "1",
                    "time": "03/04/2020-15:39:56",
                    "content": "Disclaimer: I am not a maker dev Single source of truth principle. And that is the code (contracts in solidity) There are 2 repos: https://github.com/dapphub/ https://github.com/makerdao I don\u2019t have time for detailed \u201cinvestigation\u201d atm, but quick search in https://github.com/dapphub/ds-math and you get: uint constant WAD = 10 ** 18; uint constant RAY = 10 ** 27;  I was assuming this code gets used, but after checking vat code, i am not sure anymore  \u2026 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.343253968253968
                },
                {
                    "author_link": "https://forum.makerdao.com/u/sirhill",
                    "index": "#3",
                    "likes": "0",
                    "time": "03/04/2020-16:03:22",
                    "content": "Thanks lot @jernejml it\u2019s already a strong hint. But I am always happy to have multiple confirmations when there are inconsistencies. It may hidding other inconsistencies elsewhere. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.791666666666666
                },
                {
                    "author_link": "https://forum.makerdao.com/u/banteg",
                    "index": "#4",
                    "likes": "0",
                    "time": "04/04/2020-05:20:26",
                    "content": " Dai has three different numerical units:  wad ,  ray  and  rad   wad : fixed point decimal with 18 decimals (for basic quantities, e.g. balances)  ray : fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)  rad : fixed point decimal with 45 decimals (result of integer multiplication with a  wad  and a  ray )  wad  and  ray  units will be familiar from SCD.  rad  is a new unit and exists to prevent precision loss in the core CDP engine.  source ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.7571022727272725
                },
                {
                    "author_link": "https://forum.makerdao.com/u/marcuswin",
                    "index": "#5",
                    "likes": "0",
                    "time": "04/04/2020-06:29:49",
                    "content": "Purple paper is an old specification. You can find [draft; 2018-02-06] line in the beginning. Actual documentation in DSS repo from Github or MCD Docs. WAD is 18 decimals, for example USDC Gem use type coercion from 6 to 18 decimals:         uint wad18 = mul(wad, 10 ** (18 - dec)); Vat test contract has type coercion for checking RAY and RAD decimals:     function ray(uint wad) internal pure returns (uint) {         return wad * 10 ** 9;     }     function rad(uint wad) internal pure returns (uint) {         return wad * 10 ** 27;     } ",
                    "links": [
                        "https://docs.makerdao.com/",
                        "https://etherscan.io/address/0xA191e578a6736167326d05c119CE0c90849E84B7#code",
                        "https://github.com/makerdao/dss/blob/master/src/test/vat.t.sol"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.44047619047619
                }
            ]
        }
    ]
}