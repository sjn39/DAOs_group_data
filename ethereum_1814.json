{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5219-discussion-contract-resource-requests/9907",
            "title": "EIP-5219 Discussion: Contract Resource Requests ",
            "index": 9907,
            "category": [
                "EIPs"
            ],
            "tags": [
                "http"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "1",
                    "likes": "0",
                    "time": "11/07/2022-19:07:27",
                    "content": "  github.com/ethereum/EIPs         PR-5219: Contract Resource Requests   ethereum:master \u2190 Pandapip1:pandapip1-eip-dhttp            opened 07:06PM - 11 Jul 22 UTC               Pandapip1             +82 -0       When opening a pull request to submit a new EIP, please use the suggested templa\u2026te: https://github.com/ethereum/EIPs/blob/master/eip-template.md  We have a GitHub bot that automatically merges some PRs. It will merge yours immediately if certain criteria are met:   - The PR edits only existing draft PRs.  - The build passes.  - Your GitHub username or email address is listed in the 'author' header of all affected PRs, inside <triangular brackets>.  - If matching on email address, the email address is the one publicly listed on your GitHub profile.       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5219",
                        "https://github.com/Pandapip1",
                        "https://github.com/ethereum/EIPs/pull/5219/files",
                        "https://github.com/ethereum/EIPs/pull/5219"
                    ],
                    "GPT-summary": "The post is a discussion about a new Ethereum Improvement Proposal (EIP-5219) related to Contract Resource Requests. The author provides a link to the EIP template and mentions a GitHub bot that automatically merges some pull requests. The post does not contain entirely positive or negative feedback on the proposal, but rather provides information and guidelines for submitting a new EIP. The author is not extending or collaborating on the proposal, but is asking for feedback and answering questions.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Grants, Funding and resource allocation",
                        "Not a proposal"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal",
                        "None"
                    ],
                    "Sentiment": 5.438311688311687
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "2",
                    "likes": "0",
                    "time": "21/07/2022-15:00:54",
                    "content": "I think the proposal is grammatically incorrect. What does \u201cdecentralized\u201d mean in this proposal when you are eventually sending http request already to a pre-occupied RPC node? Isn\u2019t this just worthless when we already have http connection physically on top of TCP? Why would you make another http on http itself? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 3.9791666666666665
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "3",
                    "likes": "0",
                    "time": "21/07/2022-15:17:39",
                    "content": "What I mean is that you are \u201csending\u201d an HTTP-like request to a smart contract. Yes, it\u2019s not a true HTTP request, and will likely involve using actual HTTP to connect to an RPC. This EIP is all about being able to access smart contracts as if they were websites / HTTP servers. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.315051020408164
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "4",
                    "likes": "0",
                    "time": "23/07/2022-20:56:25",
                    "content": "If you mean that, I think you have to eventually add a new RPC endpoint to Ethereum node as smart contract communicates with ABI. If RPC logic processes the Post method with request url then generate function signature then it would work. but it is definitely not smart contract that needs to be changed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.913758116883117
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "5",
                    "likes": "0",
                    "time": "23/07/2022-21:12:05",
                    "content": "This proposal is very similar to EIP-4804: Web3 URL to EVM Call Message Translation (which I was unaware of when I was writing this EIP). An HTTP request to a smart contract actually just calls a view function of that smart contract. It doesn\u2019t actually change anything about smart contracts (which is why this is an ERC, not a Core EIP!) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.497448979591837
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "6",
                    "likes": "0",
                    "time": "23/07/2022-22:36:42",
                    "content": "Yeah but it is core EIP.  You need to check the tech. If this is going to work, the contract has to not mark itself as sender when calling other contracts. Finding that this is similar to EIP-4804, Isn\u2019t this an reiteration of it, and plagiarism? You should have included this in your reference, otherwise you are stealing their idea. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "7",
                    "likes": "0",
                    "time": "23/07/2022-22:42:19",
                    "content": "This proposal is very similar to EIP-4804: Web3 URL to EVM Call Message Translation 1 (which I was unaware of when I was writing this EIP). An HTTP request to a smart contract actually just calls a view function of that smart contract. It doesn\u2019t actually change anything about smart contracts (which is why this is an ERC, not a Core EIP!)  EIP-4804 is just giving an idea of entrypoint string where a parser can parse those urls into rawCall form. It does not specify whether it is an Core EIP. Your rebuttal is grammatically incorrect. You are also misunderstanding the concept of HTTP. HTTP is a protocol to parse raw byte data from a sending computer to do something, not a view function. Your assumption that your \u201cHTTP\u201d call can be a view function is wrong, as the call can actually alter the state of a contract(e.g. ERC20 transfer). Stop glorifying terms like \u201cHTTP\u201d or \u201cDecentralized\u201d and start studying definition of it. Make logical sentences based on its use cases and background. period. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.098026973026974
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "8",
                    "likes": "0",
                    "time": "23/07/2022-22:45:49",
                    "content": "After you understand:   how view function and other contract functions differ   how to clarify your \u201cHTTP\u201d with vs EIP-4804 and its network sequence or logic flow in Ethereum state machine   how to really implement your EIP in the real code   how to clarify \u201cdecentralization\u201d or compare with \u201cusability\u201d   why plagiarism is bad and reference is good   We can proceed with productive discussion. More intellectual effort without feelings is required for this. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.767857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "9",
                    "likes": "0",
                    "time": "24/07/2022-17:47:32",
                    "content": " I am aware enough of how they differ. View functions are unable to make state-changing transactions, but their return value can be determined without needing to submit a transaction. I will not pretend I know everything about view functions, but I believe that I know enough. If there is a specific concern here, please state it.  I should repeat: I learned about of EIP-4804 yesterday, while I was watching the latest URL/URI specs meeting. I have not yet had the time to update my EIP to add a comparison.  I have described it in the specification. Is this interface sufficient? If not, may you please suggest an improvement?  I consulted with another editor (@MicahZoltu) and he said \u201c[the EIP describes something] closer to RESTful contract calls.\u201d While that\u2019s not entirely what the intent is (there\u2019s only one function here that could be called), I would be okay with a name change. What would be your suggestion?  I agree that plagiarism is bad. The EIP process is a bit special, however, in that work that informed the design decisions of the EIP shouldn\u2019t be referenced (source). This is not plagiarism.   ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/5274#issuecomment-1193049343#issuecomment-1193049343"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.1850649350649345
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "10",
                    "likes": "0",
                    "time": "24/07/2022-18:08:56",
                    "content": "    hskang9:  EIP-4804 is just giving an idea of entrypoint string where a parser can parse those urls into rawCall form. It does not specify whether it is an Core EIP. Your rebuttal is grammatically incorrect. You are also misunderstanding the concept of HTTP. HTTP is a protocol to parse raw byte data from a sending computer to do something, not a view function. Your assumption that your \u201cHTTP\u201d call can be a view function is wrong, as the call can actually alter the state of a contract(e.g. ERC20 transfer). Stop glorifying terms like \u201cHTTP\u201d or \u201cDecentralized\u201d and start studying definition of it. Make logical sentences based on its use cases and background. period.        EIP-4804 is just giving an idea of entrypoint string where a parser can parse those urls into rawCall form. It does not specify whether it is an Core EIP. Your rebuttal is grammatically incorrect. EIP-4804 is objectively not a core EIP. Its category is ERC: EIP-4804: Web3 URL to EVM Call Message Translation. Core EIPs are generally EIPs that require a hard fork. I\u2019m sorry I misunderstood you, I thought that you were saying I was changing the way that smart contracts work.       ou are also misunderstanding the concept of HTTP. HTTP is a protocol to parse raw byte data from a sending computer to do something, not a view function.  I understand what HTTP is. Throughout the draft, I very explicitly mention that this allows sending \u201cHTTP-like\u201d requests. Here are all the relevant instances of the string \u201cHTTP\u201d in the PR diff: EIPS/eip-5219.md L3: title: Decentralized HTTP L4: description: Allows the sending of HTTP-like requests to smart contracts L16: ... To solve these issues, this EIP introduces an interface allowing \"Web3 Browsers\" to make HTTP-like requests (containing a method, a resource to request, a request body, and headers) to smart contracts, and to receive HTTP-like responses (containing headers and a body).  assets/eip-5219/IDecentralizedApp.sol L5: /// @notice                     Send an HTTP-like request to this contract L6: /// @param  method              The HTTP method to use (e.g. GET, POST, PUT, DELETE)       Your assumption that your \u201cHTTP\u201d call can be a view function is wrong, as the call can actually alter the state of a contract(e.g. ERC20 transfer).  I am well aware of this issue. I will point to the relevant section from the draft: The `request` method was chosen to be readonly because all data should be sent to the contract from the parsed DApp. Here are some reasons why:  - Submitting a transaction to send a request would be costly and would require waiting for the transaction to be mined, resulting in quite possibly the worst user-experience possible. - Complicated front-end logic should not be stored in the smart contract, as it would be costly to deploy and would be better ran on the end-user's machine. - Separation of Concerns: the front-end contract shouldn't have to worry about interacting with the back-end smart contract.  I am well aware that the HTTP PUT, POST, PATCH, and DELETE methods are very typically state-changing. And technically, the following is a valid return value according to the current draft: statusCode: 303 body: web3://<url> resultHeaders: [] resultHeaderValues: []  Which then prompts the wallet to submit a transaction. Simple, and allows for all use-cases to be covered with a single view function. 4.  Stop glorifying terms like \u201cHTTP\u201d or \u201cDecentralized\u201d and start studying definition of it.  HTTP: HyperText Transfer Protocol. I can\u2019t think of a rigorous definition off the top of my head, but for the purposes of this EIP it suffices as a way to request data from another computer. In this EIP, \u201canother computer\u201d can be a smart contract instead. (The chain is deliberately left unspecified so that implementations can feel free to include every chain the user has added). Decentralized: No single entity (where entity depends on context) has the power to significantly affect the thing that is being described. In this case, entity refers to a person, a company, or an Ethereum address other than the ones responsible for name resolution. Again, the name of HTTP makes it explicit that the RFC is about the transfer of information. State-changing operations are a happy side-effect and are not needed to create a functional replacement for it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0267590936195585
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "11",
                    "likes": "0",
                    "time": "24/07/2022-18:15:42",
                    "content": "    hskang9:  Yeah but it is core EIP. You need to check the tech. If this is going to work, the contract has to not mark itself as sender when calling other contracts. Finding that this is similar to EIP-4804, Isn\u2019t this an reiteration of it, and plagiarism? You should have included this in your reference, otherwise you are stealing their idea.        Yeah but it is core EIP. You need to check the tech.  No, it is not a Core EIP: - A **Standards Track EIP** describes any change that affects most or all Ethereum implementations, such as\u2014a change to the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Ethereum. Standards Track EIPs consist of three parts\u2014a design document, an implementation, and (if warranted) an update to the [formal specification](https://github.com/ethereum/yellowpaper). Furthermore, Standards Track EIPs can be broken down into the following categories:   - **Core**: improvements requiring a consensus fork (e.g. [EIP-5](./eip-5.md), [EIP-101](./eip-101.md)), as well as changes that are not necessarily consensus critical but may be relevant to [\u201ccore dev\u201d discussions](https://github.com/ethereum/pm) (for example, [EIP-90], and the miner/node strategy changes 2, 3, and 4 of [EIP-86](./eip-86.md)).   ...   - **ERC**: application-level standards and conventions, including contract standards such as token standards ([EIP-20](./eip-20.md)), name registries ([EIP-137](./eip-137.md)), URI schemes, library/package formats, and wallet formats.  EIP-4804 explicitly has the ERC category: type: Standards Track category: ERC  I\u2019ve already discussed that however, so I will move on,      If this is going to work, the contract has to not mark itself as sender when calling other contracts.  It can\u2019t call other contracts, except for view ones, where msg.sender is undefined or meaningless anyways.      Finding that this is similar to EIP-4804, Isn\u2019t this an reiteration of it, and plagiarism?  Independently creating a work that is similar to another work that has already been created is something that happens. In fact, there\u2019s an entire Wikipedia article about it!      You should have included this in your reference, otherwise you are stealing their idea.  This is straight-up false. See Proposal for EIP preamble: include separate `relates-to:` as an optional field \u00b7 Issue #5274 \u00b7 ethereum/EIPs \u00b7 GitHub for more information. Note that all EIPs are licensed under CC0-1.0. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/5274#issuecomment-1193049343"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.892361111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "12",
                    "likes": "0",
                    "time": "24/07/2022-22:50:24",
                    "content": " You do not understand that your \u201chttp\u201d request can also change states in other contracts and claims that your every \u201chttp\u201d request is processed as view function. I gave you this question to rethink, but it seems you dont. Learning this yesterday does not mean that you don\u2019t put reference. You put this asap. Unnecessary, headers are not really needed and you do not put any specification on some of the interfaces. You just copy/pasted http request in solidity. You need to remove unneeded properties as this is the protocol on top of HTTP. Also, as I repeat, if you are going to send through http request interacting with that contract, the sender is marked as the interacting contract, not the original sender. If each dapp provider can make a custom controller contract with the interface and some custom library on top of ethers.js or web3.js to interact with the contract with function signature, it would be feasible. If there is one-stop solution, it is definitely change in Core RPC. The term \u201cdecentralized\u201d must be removed. The term is just showing one\u2019s unprofessionalism to describe their ideas and show their low commitment hidden with it. I suggest \u201cREST-compatible smart contract interface for usability\u201d. I am not sure about this as each EIP is protected with Creative Commons(CC) license. I think you still need to refer the previous works.  Now that answering 4), I suggest you refer your interface not \u201chttp\u201d. Rather \u201cRESTful\u201d interface is better fit as @MicahZoltu refers. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.599177170868347
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "13",
                    "likes": "0",
                    "time": "25/07/2022-00:06:57",
                    "content": "    hskang9:   You do not understand that your \u201chttp\u201d request can also change states in other contracts and claims that your every \u201chttp\u201d request is processed as view function. I gave you this question to rethink, but it seems you dont.     I very explicitly stated exactly why I am not allowing state-changing modifications in this EIP. Unless someone provides me with a solution I deem better, I will have the function remain a view function. The rules are explicit, and I will only put the reference there if they can be. As of right now, they cannot be. There\u2019s a lot to unpack here.   Unnecessary, headers are not really needed and you do not put any specification on some of the interfaces.  I could get behind removing the headers. I personally kept them in for one reason: to keep the spec more backward-compatible with real HTTP. I agree that this could use more discussion.  You just copy/pasted http request in solidity.  Objectively false, but I accept the compliment nontheless.  Also, as I repeat, if you are going to send through http request interacting with that contract, the sender is marked as the interacting contract, not the original sender.  There is no reliable msg.sender when you are dealing with view functions anyways.  If each dapp provider can make a custom controller contract with the interface and some custom library on top of ethers.js or web3.js to interact with the contract with function signature, it would be feasible.  I\u2019m not sure I understand you, but I believe that is roughly what I am proposing,  If there is one-stop solution, it is definitely change in Core RPC.  Core != RPC. In fact, RPC version changes specifically fall into the Interface category. I originally had the EIP listed as an Interface EIP, but it was determined that the content of the EIP meant that it was better categorized as an ERC.  Using a term correctly is not a sign of unprofessionalism. However, I will consider that title, as at least one other person has suggested a similar one.  CC0 does not require attribution: CC0 FAQ - Creative Commons.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.497252747252748
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "14",
                    "likes": "0",
                    "time": "25/07/2022-00:49:21",
                    "content": "  You do not define Ethereum here. It is not you allowing state-changing modifications. It is EVM to decide. Not you. You need to understand world does not revolve around you and this technology does not rely on trust on you nor someone you look for to have enough trust. This technology exists because of cryptographic proof. Read and understand the code. How is all other PUT, DELETE, POST request processed as view function? Your proof that all requests are processed in view function is delusional in that you do not provide enough detail on how the request is processed in EVM but just specify result message from it. You just do not allow state-chainging modifications because you do not want to get criticized. This is the reason why you do not get attention. This explanation is just unacceptable.   You confirm yourself that you do not put reference on EIP-4804, because you simply don\u2019t want to.   A lot to unpack here.   I could get behind removing the headers. I personally kept them in for one reason: to keep the spec more backward-compatible with real HTTP. I agree that this could use more discussion.  3-1) To correct your perspective, real HTTP is already working in the background, so there is no such thing as backward compatibility. You are making a protocol on top of HTTP. I seriously recommend to take CS course around Coursera or just watch a youtube video briefly describing it before having discussion. Objectively false, but I accept the compliment nontheless.  3-2) Objectively true, there are headers and most of required properties in HTTP data structure, and you said that you are saying that you are keeping backward compatibility. There is no reliable msg.sender when you are dealing with view functions anyways.  3-3) Fair point. but what about your oxymoron that state-changing methods that you say it is processed \u201cwell\u201d? I\u2019m not sure I understand you, but I believe that is roughly what I am proposing,  You never proposed nor understood anything on your proposal. Core != RPC. In fact, RPC version changes specifically fall into the Interface category. I originally had the EIP listed as an Interface EIP, but it was determined that the content of the EIP meant that it was better categorized as an ERC.  I am not sure if I understood this from your \u201cspecial\u201d perspective, but Core == RPC when RPC involves getting Core data(e.g. DB).   You used term wrong. you showed unprofessionalism. This EIP is about RESTful, but this is not related to decentralization at all.   Ok   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.469551282051281
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "15",
                    "likes": "0",
                    "time": "25/07/2022-01:30:12",
                    "content": " Again, state-changing operations are supported, just indirectly through redirects. I see no need to complicate the specification. No, it\u2019s because the EIP editors (including me) have come to the consensus that this is unnecessary.     We\u2019re at cross purposes here. We both understand that this EIP builds on top of HTTP. Therefore, I felt it necessary to mimic HTTP as much as possible. I think that\u2019s what you\u2019re saying, and I agree with this sentiment. I meant that I didn\u2019t literally do a google search for \u201cHTTP in solidity,\u201d but that I was honored to think that it was good enough to be mistaken for a top result. (Side note: Sorry if I offended you with my sarcasm, my apologies). State-changing methods are deliberately outside of the scope of this EIP, but I have provided an example flow above to demonstrate how they could be implemented. Would you like me to include it in my EIP? (This would probably give me an excuse to reference EIP-4804) How the browsers fetch the data from the chain is outside the scope of this EIP.  It would be like the HTTP spec describing how to connect to a router (bad example, but I hope it gets the point across).       I think I\u2019m getting to the root of the misunderstanding here. REST, to my very limited knowledge, is typically about changing state as well as reading it (\u201cREpresentational State Transfer\u201d), but this doesn\u2019t have to be the case. This EIP is specifically about smart contracts transferring state to the clients (not the other way round), whereas REST is typically used to transfer state from clients to servers (or the analogy here would be smart contracts). Crucially here, a different EIP (4804) can be used to provide the missing piece and actually change the state. (Personally, I normally wouldn\u2019t consider a blog (for example) a \u201cRESTful API,\u201d but considering it can transfer a representation (HTML) of an object (the text a user wrote), I guess it satisfies the definition.) While I would argue that this EIP still describes decentralized something (as everything that is fully built on Ethereum is by necessity decentralized), I can definitely see how it might start to blur the line. To avoid any more unnecessary litigation, I will remove that word from the EIP unless it is essential (such as when describing decentralized applications). With that in mind, how about \u201cContract REST\u201d as a title? It\u2019s a bit brief, but I think it gets the point across. Thoughts?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.965215773809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "16",
                    "likes": "0",
                    "time": "25/07/2022-02:25:32",
                    "content": "  Again, stop saying bullshit and answer the question. It is not right because you say it is right. You just answer the question. It is simple as 5 year old can understand. You are like Machinsky saying bitcoin generates yields without process, Do Kwon saying has 20% yield without source. You are also one of them saying that these things have to be \u2018simple\u2019.   So EIP editors do not want to include a reference. Nice to know.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 5.842857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "17",
                    "likes": "0",
                    "time": "25/07/2022-14:07:50",
                    "content": "The question has already been answered:   I am well aware that the HTTP PUT, POST, PATCH, and DELETE methods are very typically state-changing. And technically, the following is a valid return value according to the current draft: statusCode: 303 body: web3://<url> resultHeaders: [] resultHeaderValues: []  Which then prompts the wallet to submit a transaction. Simple, and allows for all use-cases to be covered with a single view function.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 4.145502645502646
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "18",
                    "likes": "0",
                    "time": "25/07/2022-16:58:16",
                    "content": "I think I\u2019m starting to see your point of view with regards to point 1. Since, in general terms, this EIP is trying to enable smart contracts to serve websites, upon reflection I see no need to support any HTTP status other than GET, nor do I see a particular need for query parameters or request headers in this scenario. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.305952380952381
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "19",
                    "likes": "0",
                    "time": "26/07/2022-07:28:40",
                    "content": " Think about this EIP as standardizing a way for smart contracts to become websites. HTTP just happens to be the current standard for that, and so this EIP tries to mimic that.  Perhaps there is some \u201cbigger picture\u201d I\u2019m missing here, but I don\u2019t understand how this specification would help make it so contracts can become websites?  If you wanted to serve a website from Ethereum storage (which I recommend against because it is too expensive to be practical), presumably you will need some middleware to convert an HTTP GET request to ethereum://domain/path/query=string into a contract call on Ethereum, and it seems that middleware could simply convert that to domain.path(string) just as easily as it could break up the URI into its components and pass them to a contract method. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.904761904761904
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "20",
                    "likes": "0",
                    "time": "26/07/2022-11:34:26",
                    "content": " presumably you will need some middleware to convert an HTTP GET request to ethereum://domain/path/query=string into a contract call on Ethereum, and it seems that middleware could simply convert that to domain.path(string) just as easily as it could break up the URI into its components and pass them to a contract method.  That\u2019s my proposition, but the other part of this is that not all the stoage does need to be on Ethereum. A later EIP I will be proposing will add a \u201capplication/ipfs-multihash\u201d content-type (the advantage of this over plain IPFS is that the URLs can later be changed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.078373015873016
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "21",
                    "likes": "0",
                    "time": "26/07/2022-12:43:43",
                    "content": "I must be misunderstanding something then because it looks like your proposition is to turn an HTTP GET request into a single contract call where you pass a bunch of strings to it, rather than dispatching it to the appropriate function directly and doing the string to  type conversion elsewhere.  By doing it the way you have it specified, you are putting a lot of work on the EVM that could be done in some middleware component which feels like a bad trade since EVM execution is many many many orders of magnitude more costly than middleware execution. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.142857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "22",
                    "likes": "0",
                    "time": "26/07/2022-15:36:21",
                    "content": "The idea here is that there will be minimal computation performed inside the request function. Take the following rapidly made request function that may or may not work, for example. I expect that most of the request functions that will be made will look extremely similar to the following: function request(string[] memory resource) external view returns (uint8 statusCode, string memory body, KeyValue[] headers) {     bytes32 hash = keccak256(abi.encode(resource));     if (bodyMap[hash] == \"\") {         return 404, someIPFSMultihashFor404, standardIPFSReturnHeaders;     }     return 200, bodyMap[hash], standardIPFSReturnHeaders; }  Considering it\u2019s a view function that is meant to never be called by an external contract, the only noticeable cost will be during deployment (to store the bytecode in the contract and initialize someIPFSMultihashFor404 and standardIPFSReturnHeaders) and when updating bodyMap. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "23",
                    "likes": "0",
                    "time": "26/07/2022-15:46:28",
                    "content": "For example, I have pandapip1.eth (well, I don\u2019t, but I would like to), and decide to point it to address 0x1234567..., a smart contract implementing this EIP. When a web browser visits pandapip1.eth, assuming I have no A, AAAA, CNAME, or SRV DNS records, the request function will be called with a resource of [] (no path). Say I have a link to /my-cool-project, and the user clicks on it. Then, the request function will be called with a resource of ['my-cool-project']. With the proposed IPFS content type, the whole website doesn\u2019t need to be stored on Ethereum, but has all the advantages of this EIP, minus the permanence/ ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.523809523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "24",
                    "likes": "0",
                    "time": "27/07/2022-05:13:23",
                    "content": "What is the advantage of this over just adding a record to pandapip1.eth that points at an IPFS root? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "25",
                    "likes": "0",
                    "time": "27/07/2022-15:27:23",
                    "content": "The ability to add more complex logic if it is needed. Most of the time, it isn\u2019t (yay!), but I could imagine a use-case (such as a blockchain explorer) that could benefit from this functionality. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.03125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "26",
                    "likes": "0",
                    "time": "28/07/2022-07:35:11",
                    "content": "Do you have an example of adding more complex logic (even a contrived example would be fine for this purpose)? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.145833333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "27",
                    "likes": "0",
                    "time": "29/07/2022-20:17:38",
                    "content": "A balance explorer. The resource would be the string representation of the address you\u2019re inspecting. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "28",
                    "likes": "0",
                    "time": "30/07/2022-09:03:06",
                    "content": "What would that look like if this EIP was implemented? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "29",
                    "likes": "0",
                    "time": "30/07/2022-23:26:02",
                    "content": "So, there would be a mix. The best example would be SPAs (single-page applications) with their front-end code fully on the Ethereum mainnet. While it would cost a fortune to push updates, the website will remain for the rest of time. Alternatively, with the new content type, they could host the code on IPFS. While it might eventually disappear, the advantage of this over returning a tree would be that any URL would be resolved, not just ones in the tree. While I can imagine a block explorer being written as a SPA, the fact that an infinite number of URLs need to be resolved to the same thing means that this standard is flexible enough for that use-case. Things get interesting when you consider rollups or cheap sidechains. While initially, hosting a website fully on a sidechain might seem like a stupid idea, I argue it\u2019s superior to the current system for two reasons:  It might actually be more cost-efficient than the current hosting situation It\u2019s more decentralized than hosting on a single fully centralized hosting platform like Hostinger.  I hope to see the first two scenarios most frequently, but I would argue even the third (\u201cworst-case\u201d) scenario is better than what we have currently. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.003555967841682
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "30",
                    "likes": "0",
                    "time": "31/07/2022-08:07:44",
                    "content": "One could host a blockchain explorer as an IPFS SPA and just use anchor or query string routing for data.  There is no need to have a separate IPFS page for every block/transaction/whatever. That being said, I don\u2019t see how a block explorer would fit into this paradigm as much of the information one would want can\u2019t be acquired from a contract (but can be acquired from an Ethereum client).  As a more high level argument, something with a replication factor of Y where Y < X will necessarily always be cheaper to host than something with a replication factor of X.  Ethereum is a database with an RF of like 10,000 while IPFS is a database with an RF of 0-n (where n is the number of people who have recently browsed the site plus people who have pinned the site).  With the introduction of Filecoin, RF changes to m-n, where m is the RF that IPFS has determined is enough to provide robust availability guarantees (I don\u2019t actually know what m is, but it is > 1). While this isn\u2019t a blocker for the EIP, I\u2019m not convinced there exists a future where this EIP would make sense for anyone as I think it is better in basically all scenarios to use something purpose built for data storage like IPFS than to use something like Ethereum which is an insanely expensive database. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.572727272727272
                }
            ]
        }
    ],
    "group_index": "1814"
}