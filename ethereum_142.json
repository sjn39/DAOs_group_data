{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5725-transferable-vesting-nft/11099",
            "title": "EIP-5725 Transferable Vesting NFT ",
            "index": 11099,
            "category": [
                "Tokens"
            ],
            "tags": [
                "nft"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "1",
                    "likes": "1",
                    "time": "29/09/2022-09:07:07",
                    "content": " EIP-5725 Vesting NFT  Table of Contents   EIP-5725 Vesting NFT  Table of Contents Simple Summary Abstract  Motivation  Use Cases   Specification Rationale Backwards Compatibility Reference Implementation Test Cases Security Considerations Extensions References Copyright Citation     Simple Summary A Non-Fungible Token (NFT) standard used to vest tokens (EIP-20 or otherwise) over a vesting release curve.  Abstract The following standard allows for the implementation of a standard API for NFT based contracts that hold and represent the vested and locked properties of any underlying token (EIP-20 or otherwise) that is emitted to the NFT holder. This standard is an extension of the EIP-721 token that provides basic functionality for creating vesting NFTs, claiming the tokens and reading vesting curve properties.  Motivation Vesting contracts, including timelock contracts, lack a standard and unified interface, which results in diverse implementations of such contracts. Standardizing such contracts into a single interface would allow for the creation of an ecosystem of on- and off-chain tooling around these contracts. In addition of this, liquid vesting in the form of non-fungible assets can prove to be a huge improvement over traditional Simple Agreement for Future Tokens (SAFTs) or Externally Owned Account (EOA)-based vesting as it enables transferability and the ability to attach metadata similar to the existing functionality offered by with traditional NFTs. Such a standard will not only provide a much-needed EIP-20 token lock standard, but will also enable the creation of secondary marketplaces tailored for semi-liquid SAFTs. This standard also allows for a variety of different vesting curves to be implement easily. These curves could represent:  linear vesting cliff vesting exponential vesting custom deterministic vesting   Use Cases  A framework  to release tokens over a set period of time that can be used to build many kinds of NFT financial products such as bonds, treasury bills, and many others. Replicating SAFT contracts in a standardized form of semi-liquid vesting NFT assets  SAFTs are generally off-chain, while today\u2019s on-chain versions are mainly address-based, which makes distributing vesting shares to many representatives difficult. Standardization simplifies this convoluted process.   Providing a path for the standardization of vesting and token timelock contracts  There are many such contracts in the wild and most of them differ in both interface and implementation.   NFT marketplaces dedicated to vesting NFTs  Whole new sets of interfaces and analytics could be created from a common standard for token vesting NFTs.   Integrating vesting NFTs into services like Gnosis Safe  A standard would mean services like Gnosis Safe could more easily and uniformly support interactions with these types of contracts inside of a multisig contract.   Enable standardized fundraising implementations and general fundraising that sell vesting tokens (eg. SAFTs) in a more transparent manner. Allows tools, front-end apps, aggregators, etc. to show a more holistic view of the vesting tokens and the properties available to users.  Currently, every project needs to write their own visualization of the vesting schedule of their vesting assets. If this is standardized, third-party tools could be developed aggregate all vesting NFTs from all projects for the user, display their schedules and allow the user to take aggregated vesting actions. Such tooling can easily discover compliance through the EIP-165 supportsInterface(IVestingNFT) check.   Makes it easier for a single wrapping implementation to be used across all vesting standards that defines multiple recipients, periodic renting of vesting tokens etc.   Specification The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119. // SPDX-License-Identifier: GPL-3.0 pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";  /**  * @title Non-Fungible Vesting Token Standard  * @notice A non-fungible token standard used to vest tokens (EIP-20 or otherwise) over a vesting release curve  *  scheduled using timestamps.  * @dev Because this standard relies on timestamps for the vesting schedule, it's important to keep track of the  *  tokens claimed per Vesting NFT so that a user cannot withdraw more tokens than alloted for a specific Vesting NFT.  */ interface IVestingNFT is IERC721 {     event PayoutClaimed(uint256 indexed tokenId, address indexed recipient, uint256 _claimAmount);      /**      * @notice Claim the pending payout for the NFT      * @dev MUST grant the claimablePayout value at the time of claim being called      * MUST revert if not called by the token owner or approved users      * SHOULD revert if there is nothing to claim      * @param tokenId The NFT token id      * @return amountClaimed The amount of tokens claimed in this call      */     function claim(uint256 tokenId) external returns (uint256 amountClaimed);      /**      * @notice Total amount of tokens which have been vested at the current timestamp.      *   This number also includes vested tokens which have been claimed.      * @dev It is RECOMMENDED that this function calls `vestedPayoutAtTime` with      *   `block.timestamp` as the `timestamp` parameter.      * @param tokenId The NFT token id      * @return payout Total amount of tokens which have been vested at the current timestamp.      */     function vestedPayout(uint256 tokenId) external view returns (uint256 payout);      /**      * @notice Total amount of vested tokens at the provided timestamp.      *   This number also includes vested tokens which have been claimed.      * @dev `timestamp` MAY be both in the future and in the past.      * Zero MUST be returned if the timestamp is before the token was minted.      * @param tokenId The NFT token id      * @param timestamp The timestamp to check on, can be both in the past and the future      * @return payout Total amount of tokens which have been vested at the provided timestamp      */     function vestedPayoutAtTime(uint256 tokenId, uint256 timestamp) external view returns (uint256 payout);      /**      * @notice Number of tokens for an NFT which are currently vesting (locked).      * @dev The sum of vestedPayout and vestingPayout SHOULD always be the total payout.      * @param tokenId The NFT token id      * @return payout The number of tokens for the NFT which have not been claimed yet,      *   regardless of whether they are ready to claim      */     function vestingPayout(uint256 tokenId) external view returns (uint256 payout);      /**      * @notice Number of tokens for the NFT which can be claimed at the current timestamp      * @dev It is RECOMMENDED that this is calculated as the `vestedPayout()` value with the total      * amount of tokens claimed subtracted.      * @param tokenId The NFT token id      * @return payout The number of vested tokens for the NFT which have not been claimed yet      */     function claimablePayout(uint256 tokenId) external view returns (uint256 payout);      /**      * @notice The start and end timestamps for the vesting of the provided NFT      * MUST return the timestamp where no further increase in vestedPayout occurs for `vestingEnd`.      * @param tokenId The NFT token id      * @return vestingStart The beginning of the vesting as a unix timestamp      * @return vestingEnd The ending of the vesting as a unix timestamp      */     function vestingPeriod(uint256 tokenId) external view returns (uint256 vestingStart, uint256 vestingEnd);      /**      * @notice Token which is used to pay out the vesting claims      * @param tokenId The NFT token id      * @return token The token which is used to pay out the vesting claims      */     function payoutToken(uint256 tokenId) external view returns (address token); }   Rationale vesting terms   vesting: Tokens which are locked until a future date  vested: Tokens which have reached their unlock date. (The usage in this specification relates to the total vested tokens for a given Vesting NFT.)  claimable: Amount of tokens which can be claimed at the current timestamp.  timestamp: The unix timestamp (seconds) representation of dates used for vesting.  vesting functions   vestingPayout() and vestedPayout() add up to the total number of tokens which can be claimed by the end of of the vesting schedule, which is also equal to vestedPayoutAtTime() with type(uint256).max as the timestamp.  vestedPayout() will provide the total amount of tokens which are eligible for release (including claimed tokens), while claimablePayout() provides the amount of tokens which can be claimed at the current timestamp.  vestedPayoutAtTime() provides functionality to iterate through the vestingPeriod() and provide a visual of the release curve. This allows for tools to iterate through a vesting schedule and create a visualization using on-chain data. It would be incredible to see integrations such as hot-chain-svg to be able to create SVG visuals of vesting curves directly on-chain.  timestamps Generally in Solidity development it is advised against using block.timestamp as a state dependant variable as the timestamp of a block can be manipulated by a miner. The choice to use a timestamp over a block is to allow the interface to work across multiple Ethereum Virtual Machine (EVM) compatible networks which generally have different block times. Block proposal with a significantly fabricated timestamp will generally be dropped by all node implementations which makes the window for abuse negligible. The timestamp makes cross chain integration easy, but internally, the reference implementation keeps track of the token payout per Vesting NFT to ensure that excess tokens alloted by the vesting terms cannot be claimed.  Backwards Compatibility  The Vesting NFT standard is meant to be fully backwards compatible with any current EIP-721 standard integrations and marketplaces. The Vesting NFT standard also supports EIP-165 standard interface detection for detecting EIP-721 compatibility, as well as Vesting NFT compatibility.   Test Cases The reference vesting NFT repository includes tests written in Hardhat.  Reference Implementation A reference implementation of this EIP can be found in this repository.  Security Considerations timestamps  Vesting schedules are based on timestamps. As such, it\u2019s important to keep track of the number of tokens which have been claimed and to not give out more tokens than alloted for a specific Vesting NFT.   vestedPayoutAtTime(tokenId, type(uint256).max), for example, must return the total payout for a given tokenId     approvals  When an approval is made on a Vesting NFT, the operator would have the rights to transfer the Vesting NFT to themselves and then claim the vested tokens.   Extensions  Vesting Curves Rental Beneficiary   References Standards   EIP-20 Token Standard.   EIP-165 Standard Interface Detection.   EIP-721 Token Standard.   Timestamp Dependence The 15-second Rule.   hot-chain-svg On-chain SVG generator. Could be used to generate vesting curves for Vesting NFTs on-chain.    Copyright Copyright and related rights waived via CC0.  Citation Please cite this document as: Apeguru(@Apegurus), Marco, Mario, DeFiFoFum, \u201cEIP-5725: Vesting NFT,\u201d Ethereum Improvement Proposals, no. XXXX, September 2022. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-XXXX. ",
                    "links": [
                        "https://github.com/w1nt3r-eth/hot-chain-svg",
                        "https://eips.ethereum.org/EIPS/eip-721",
                        "https://eips.ethereum.org/EIPS/eip-165",
                        "https://github.com/ApeSwapFinance/eip-5725-vesting-nft-implementation",
                        "https://eips.ethereum.org/EIPS/eip-20",
                        "https://eips.ethereum.org/EIPS/eip-165",
                        "https://eips.ethereum.org/EIPS/eip-721",
                        "https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/timestamp-dependence/#the-15-second-rule",
                        "https://github.com/w1nt3r-eth/hot-chain-svg",
                        "https://eips.ethereum.org/EIPS/eip-XXXX"
                    ],
                    "GPT-summary": "The post introduces the EIP-5725 Vesting NFT standard, which allows for the implementation of a standard API for NFT based contracts that hold and represent the vested and locked properties of any underlying token. The post explains the motivation behind the proposal, its use cases, and the specification of the standard. The post also mentions the security considerations, extensions, and references related to the proposal. The post does not advertise the proposal, give entirely positive or negative feedback, or audit and review the proposal.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.433770098948671
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "2",
                    "likes": "0",
                    "time": "04/10/2022-15:30:43",
                    "content": "I\u2019m a little worried that vestedPayoutAtTime might be difficult/expensive to compute. Is that a reasonable concern? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.03125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "4",
                    "likes": "0",
                    "time": "05/10/2022-09:51:39",
                    "content": "That is indeed a reasonable concern, nevertheless it will depend a lot on the business logic behind the vesting scheme. As you can see in the reference implementations: https://github.com/ethereum/EIPs/pull/5725/files#diff-a4572304a6a812f0520147259c19c757cc16801c1db9bced504544d54b6afa37R79 https://github.com/ethereum/EIPs/pull/5725/files#diff-a4572304a6a812f0520147259c19c757cc16801c1db9bced504544d54b6afa37R79 The computation required to calculate them is trivial. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pxrv",
                    "index": "5",
                    "likes": "0",
                    "time": "05/10/2022-09:57:49",
                    "content": "Are there any current projects that could benefit from this standardisation or is this just a nice-to-have? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/OxMarco",
                    "index": "6",
                    "likes": "0",
                    "time": "16/10/2022-09:10:17",
                    "content": "Basically any VC or community-backed protocol that needs to distribute vested tokens at the token generation event. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DeFiFoFum",
                    "index": "7",
                    "likes": "0",
                    "time": "17/10/2022-15:49:51",
                    "content": "    Apeguru:  Add EIP-5725: Transferable Vesting NFT by Apegurus \u00b7 Pull Request #5725 \u00b7 ethereum/EIPs \u00b7 GitHub   As far as gas is concerned, as long as VestingNFT.vestedPayoutAtTime() uses a direct formula to calculate the payout (as in the reference implementation) the gas estimation comes out to around 85k for VestingNFT.claim() which calls vestedPayoutAtTime within the function. The estimator is calculating 46k just for an ERC-20 approval. Considering VestingNFT.claim() also includes a transfer, I would not consider the gas expensive. It\u2019s comparable to calculating the value of a swap using a constant product function. Of course, this depends on how the implementation is written. If it requires a for loop to calculate then I would start to get VERY concerned about gas.  vesting-nft-gas1522\u00d7710 191 KB  ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/e/e76ec3357737ad5203d6ee7de77b96efb2eb4702.jpeg"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "8",
                    "likes": "0",
                    "time": "18/10/2022-20:33:44",
                    "content": "That sounds reasonable! I was just concerned that requiring the function in the interface might make it impractical for some vesting schemes because of gas. As long as you\u2019re okay with that risk, I have no objections. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 6.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "9",
                    "likes": "3",
                    "time": "25/11/2022-19:22:46",
                    "content": "We\u2019re trying a new process where we get a volunteer peer reviewer to read through your proposal and post any feedback here. Your peer reviewer is @drgorilla.eth! If any of this EIP\u2019s authors would like to participate in the volunteer peer review process, shoot me a message!  @drgorilla.eth please take a look through EIP-5725 and comment here with any feedback or questions. Thanks! ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5725"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.157670454545454
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/drgorilla.eth",
                    "index": "10",
                    "likes": "0",
                    "time": "26/11/2022-10:05:35",
                    "content": "Heya! Will edit/add as I go, sorry if it\u2019s a bit of a mess at first\u2019   Timestamp dependency: since the merge, ethereum uses the beaconchain slots which are 12 seconds long. Block.timestamp is constrained and doesn\u2019t rely on a third-party/miner anymore (worst that can happen is a slot without a block, ie a 12 second delay). consensus-specs/beacon-chain.md at v0.10.0 \u00b7 ethereum/consensus-specs \u00b7 GitHub   What if a vesting should remain associated to a given eoa/non-transferability? I guess a mapping initialized in createVesting() (or similar function) is the easiest   Style/nit:     event PayoutClaimed(uint256 indexed tokenId, address indexed recipient, uint256 _claimAmount);  why the underscore only in _claimAmount? Iic, _ for the args and no underscore for the returned values (see EIP-20 for instance EIP-20: Token Standard) ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-20#specification"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 3.921875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "11",
                    "likes": "1",
                    "time": "22/12/2022-15:08:18",
                    "content": "Hey! Thanks a lot for reviewing and working with us to push this forward   Unsure if there is anything to address on your first comment regarding timestamp. Let me know if I am missing something Same on second comment  Syle Good catch! We will address it as soon as the review is finalized. Is there anything else you think we should be looking for? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "12",
                    "likes": "0",
                    "time": "22/12/2022-15:09:04",
                    "content": "Thank you and @drgorilla.eth! Please let us know what can we do to move this into the next stage ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "13",
                    "likes": "0",
                    "time": "22/12/2022-15:32:35",
                    "content": "Once you\u2019re reasonably happy with your draft, you can make a PR to move it to Review. Once in review, try and get buy-in from relevant people/organizations. One of the best things you can do is get a third party interested enough to try and implement their own version of the standard. After all that, you can open a PR to move the proposal into Last Call, and finally Final. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.386363636363637
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "14",
                    "likes": "0",
                    "time": "09/01/2023-14:56:13",
                    "content": "Thanks a lot for sharing this! We will keep it in mind. I hope you are having a great start of 2023  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DeFiFoFum",
                    "index": "15",
                    "likes": "0",
                    "time": "13/01/2023-17:11:46",
                    "content": "After messing around with the standard some more by integrating it into a Treasury Bills product, these would be my questions about updates to IERC5725. Technically all of these can be derived, but I\u2019m curious if others feel they should be included. If they are not included, another approach would be to create IERC5725 Extensions similar to [IERC20Metadata](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#IERC20Metadata).  Should we add vestingPayoutAtTime?  /// @notice Amount of tokens vesting/locked in Bill at the timestamp provided.  function vestingPayoutAtTime(uint256 tokenId, uint256 timestamp) external view returns (uint256 payout);  OR refactor vestedPayoutAtTime \u2192  payoutsAtTime /// @notice Find the different payout amounts for a Bill a the timestamp provided.  function payoutsAtTime(uint256 tokenId, uint256 timestamp) external view returns (uint256 vestedPayout, uint256 vestingPayout, uint256 claimablePayout);   A function which shows how much time left until vesting ends could be helpful?  /// @notice Returns the remaining vesting in seconds of the `tokenId` until the `vestingEnd` timestamp. function pendingVesting(uint256 tokenId) external view returns (uint256 pendingSeconds);   A function which shows the total tokens left to be claimed  /// @notice Returns the total payout held for the given Bill ID. i.e.: `vestingPayout` + `claimablePayout` function pendingPayout(uint256 tokenId) external view returns (uint256 payout);  January 13, 2023 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.2
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boyuanx",
                    "index": "16",
                    "likes": "0",
                    "time": "29/01/2023-08:29:05",
                    "content": "Hey, first of all this is a very cool EIP and we are interested in performing a prototype implementation in our upcoming product (EthSign TokenTable). I have a question: in the EIP, it\u2019s mentioned that \u201cthis standard also allows for a variety of different vesting curves to be implement easily\u201d. However, I see no mention of any curves in the actual interface functions, which makes this sentence a little confusing. Do you think we should incorporate a generic quadratic formula and 1D cubic equation as a basis for all curves? Or is that a tad too specific? But I think the two formulas mentioned above pretty much covers all possible curves. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 5.327678571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boyuanx",
                    "index": "17",
                    "likes": "0",
                    "time": "29/01/2023-08:30:43",
                    "content": "Also, not to be pedantic, but I believe there is a significant difference between vesting and unlocking, and what\u2019s being described in this EIP is actually unlocking instead of vesting. Vesting is the act of releasing tokens into an unlocking pool for the recipient, and unlocking is the act of releasing tokens in said pool to the recipient, and they can happen at different rates (obviously vesting must happen first, otherwise there is nothing to unlock). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "18",
                    "likes": "0",
                    "time": "02/02/2023-16:48:19",
                    "content": "Hello good ape! As no one has shared opinions so far I will share mine: I am of a school of keeping everything as simple as possible. As you noted all of this information can be easily derived from already existing methods, hence why I would advice against adding this functionality into the core standard. If needed it can be added as an extension as you mention. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.173611111111112
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "19",
                    "likes": "1",
                    "time": "02/02/2023-16:53:40",
                    "content": "Hey! I am glad you are looking forward on working on this. Feel free to reach out to further discuss. In terms of what you bring up in regards of the curves being present in the implementation: This is meant to be a standard interface to create token-lock and vesting contracts that are represented with NFTs. The goal of it is to keep it as flexible and adaptable as possible, hence why there isn\u2019t any specific vesting curve or approach included directly in the standard. The specific curves are purposely left out of the standard, so to allow maximum flexibility, as it is expected to be implemented by each specific use case or developer. If you want to further see how different vesting curves interact and integrate with the standard I suggest you look into the example implemetation:   github.com   ethereum/EIPs/blob/master/assets/eip-5725/README.md # EIP-5725: Transferrable Vesting NFT - Reference Implementation This repository serves as a reference implementation for **EIP-5725 Transferrable Vesting NFT Standard**. A Non-Fungible Token (NFT) standard used to vest tokens (ERC-20 or otherwise) over a vesting release curve.  ## Contents - [EIP-5725 Specification](./contracts/IERC5725.sol): Interface and definitions for the EIP-5725 specification. - [ERC-5725 Implementation (abstract)](./contracts/ERC5725.sol): ERC-5725 contract which can be extended to implement the specification.  - [VestingNFT Implementation](./contracts/reference/LinearVestingNFT.sol): Full ERC-5725 implementation using cliff vesting curve. - [LinearVestingNFT Implementation](./contracts/reference/VestingNFT.sol): Full ERC-5725 implementation using linear vesting curve.      Here you can find a linear vesting curve and non-linear examples. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/blob/master/assets/eip-5725/README.md"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.3809523809523805
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "20",
                    "likes": "0",
                    "time": "02/02/2023-16:55:10",
                    "content": "Thanks a lot for the lesson, appreciated! We can say this standard helps for both. Releasing the tokens over time and unlocking them, though when I put it like this it even sounds like the same!  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boyuanx",
                    "index": "21",
                    "likes": "0",
                    "time": "06/02/2023-10:55:07",
                    "content": "Apologies for the unclear explanation, differentiating vesting vs. unlocking is mainly important in the context of Restricted Stock Units. In the traditional world, unlocking is called distributing. From Fidelity:   When do RSUs vest? Depending on your company\u2019s plan rules, vesting requirements may be met by the passage of time, or by company or individual performance. If you do not meet the requirements set forth by your company prior to the end of the vesting period, your units are typically forfeited to the company. Vesting may occur prior to the vesting date shown, contingent upon your company\u2019s satisfaction with your compliance with the company\u2019s performance criteria set forth in your company\u2019s plan rules.  What is a distribution schedule? A distribution schedule is the schedule for actual payment to you under your company\u2019s plan.  What happens to my restricted stock units once they vest? Once your restricted stock units vest, your rights become non-forfeitable. You will receive actual payment according to the distribution schedule under your company\u2019s plan. If you have not elected to defer distribution, the distribution date and the vesting date are the same.  From the above, we can clearly see how vested RSUs don\u2019t immediately become available all at once to the employee, it just means the employer can no longer take them away. Instead, another distribution schedule must be followed for employees to actually receive those stock units. In the context of tokens, vested tokens don\u2019t necessarily mean they are immediately claimable by the stakeholder. The act of tokens actually being claimed by the stakeholder is an act of distribution (unlocking), not vesting. Hope this helped clarify things more! Very few web3 entities properly distinguish vesting and unlocking. I think we can include this differentiation in the standard. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.171458333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "22",
                    "likes": "1",
                    "time": "06/02/2023-22:53:30",
                    "content": "Thanks a lot you really went a long way to make your point! For this particular thread and the scope of the Ethereum improvement proposal, we refer to vesting using the general definition and understanding within the Web3 and crypto ecosystem. Let me help you out with some context on how vesting is used in the industry that pertains us:    Medium \u2013 15 Nov 22    Token Vesting: The Complete Guide to Creating Vesting in Tokenomics How To Create Token Vesting Schedule  Reading time: 9 min read          Ekoios    Token Vesting Can Be Confusing, Here Is A Thorough Explanation The building of each blockchain project requires fundraising to ensure that it survives buoyantly after it has been launched. On this note, token vesting is not only [\u2026]         Eqvista    Token Vesting - Everything you need to know | Eqvista There are two approaches to implementing token vesting- automatically or manually. Learn more about each token vesting process here.  Est. reading time: 10 minutes       These are some industry specific articles that refer to vesting as the process of locking and distributing purchased tokens within a given timeframe which is the same definition we are using here and pretty much the one whole industry uses. Lucky for us this standard doesn\u2019t intend to address Restricted Stock Units, neither it pertains the \u2018traditional world\u2019 of finance. I still appreciate the lesson, cheers! ",
                    "links": [
                        "https://medium.com/coinmonks/token-vesting-the-complete-guide-to-creating-vesting-in-tokenomics-bf211b999f2f",
                        "https://ekoios.vn/vesting-can-be-confusing-here-is-a-thorough-explanation",
                        "https://ekoios.vn/vesting-can-be-confusing-here-is-a-thorough-explanation",
                        "https://eqvista.com/company-valuation/valuation-crypto-assets/token-vesting/",
                        "https://eqvista.com/company-valuation/valuation-crypto-assets/token-vesting/"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.57421875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DeFiFoFum",
                    "index": "23",
                    "likes": "1",
                    "time": "09/02/2023-21:50:29",
                    "content": "Sometimes traditional finance doesn\u2019t map one-to-one with decentralized finance because the trust-less nature of smart contracts and the lack of intermediary party holding funds. I believe this could be where there is confusion and possibly we can explain it better in the EIP for future readers. Based on your definitions of vesting and unlocking in posts above I\u2019m curious how we can better describe these in the EIP. Based on the LinearVestingNFT  we can clearly see how vested RSUs don\u2019t immediately become available all at once to the employee, it just means the employer can no longer take them away  I believe these comments are based on these definitions below: - _vesting_: Tokens which are locked until a future date. - _vested_: Tokens which have reached their unlock date. (The usage in this specification relates to the **total** vested tokens for a given Vesting NFT.) - _claimable_: Amount of tokens which can be claimed at the current `timestamp`. - _timestamp_: The unix `timestamp` (seconds) representation of dates used for vesting.  In the case of the LinearVestingNFT.sol reference implementation, vestedPayoutAtTime will return 0 before the cliff (i.e. unlock time), but the other thing to consider is that with this implementation, a third party cannot decide to take tokens back before the end of the vesting period. For example, the ApeSwap Treasury Bills feature uses a linear vesting schedule where tokens are immediately unlocked as they are vested. Is there a better way to describe vesting schedules which operate like this? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5850840336134455
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DeFiFoFum",
                    "index": "24",
                    "likes": "1",
                    "time": "09/02/2023-22:32:09",
                    "content": "Re: vesting curves to be implement easily In the LinearVestingNFT.sol reference implementation, the function vestedPayoutAtTime(uint256 tokenId, uint256 timestamp) is a central location where vesting curves can be easily updated for new contracts. I am in agreement with @Apeguru that we wanted to keep the standard very flexible to allow for different contract architectures which is why it doesn\u2019t include vesting curve standards.  easily changeable vesting curves To expand on the idea of easily changeable vesting curves, I was personally experimenting with an IVestingCurve standard in another project to allow for drop in vesting curves. It was using an externally deployed IVestingCurve contract, but it\u2019s probably best as a Library or also any contract could extend IVestingCurve. This approach does add some complexity, but it would be useful if you wanted to build a crowd sourced repository of vesting curves. // SPDX-License-Identifier: GPL-3.0 pragma solidity 0.8.17;  /// @notice VestingCurve interface to allow for simple updates of vesting release schedules. interface IVestingCurve {     /**      * @notice Returns the vested token amount given the inputs below.      * @param totalPayout Total payout vested once the vestingTerm is up      * @param vestingTerm Length of time in seconds that tokens are vesting for      * @param startTimestamp The timestamp of when vesting starts      * @param checkTimestamp The timestamp to calculate vested tokens      * @return vestedPayout Total payoutTokens vested at checkTimestamp      *      * Requirements      * - MUST return 0 if checkTimestamp is less than startTimestamp      * - MUST return totalPayout if checkTimestamp is greater than startTimestamp + vestingTerm,      * - MUST return a value including or between 0 and totalPayout      */     function getVestedPayoutAtTime(         uint256 totalPayout,         uint256 vestingTerm,         uint256 startTimestamp,         uint256 checkTimestamp     ) external view returns (uint256 vestedPayout); }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.925757575757576
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/RobAnon",
                    "index": "25",
                    "likes": "0",
                    "time": "28/02/2023-21:30:52",
                    "content": "Hey, we did this several years ago with Revest. Suggest you include backwards compatibility, though to be honest, this sort of thing works better as a protocol over an EIP. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DeFiFoFum",
                    "index": "26",
                    "likes": "0",
                    "time": "22/03/2023-20:34:55",
                    "content": "Can you provide a link to the interface you are using? I believe that the fact that you are using a different implementation in your protocol calls for this to be standardized better. It means that multiple types of vesting vehicles would not be easily integrated in a single marketplace, for example. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.8619047619047615
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Apeguru",
                    "index": "27",
                    "likes": "0",
                    "time": "22/03/2023-21:56:43",
                    "content": "As DeFiFoFum says, please share with us the interface and implementation specifics, so backward compatibility can be assessed. Also please feel free to provide a pull request and contribute into making this a better standard. I will also double down on saying that the fact that there are countless of vesting factories, token-lock protocols and things like Revest. Is more than enough to justify creating a standard. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party or author wants to collaborate on proposal",
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.6913580246913575
                }
            ]
        }
    ],
    "group_index": "142"
}