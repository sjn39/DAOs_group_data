{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/starknet-dai-bridge-and-starknet-platform-technical-risk-assessment/13950",
            "title": "[StarkNet] DAI Bridge and StarkNet Platform Technical Risk Assessment ",
            "index": 13950,
            "category": [
                "Core Units",
                "Protocol Engineering"
            ],
            "tags": [
                "pe-001",
                "starknet",
                "multichain-domain-work"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/bartek",
                    "index": "#1",
                    "likes": "15",
                    "time": "16/03/2022-10:44:23",
                    "content": " StarkNet Dai Technical Bridge Risk Assessment  Introduction StarkNet Dai bridge allows DAI to be moved both ways between Ethereum and StarkNet. It is the first necessary component on the roadmap that leads to full deployment of MCD on StarkNet. It follows the concept of other similar DAI bridges to Optimism and Arbitrum. It also includes contracts for sending governance spells from layer 1 to layer 2. For more documentation check its GitHub repository. Bridge implementation underwent an initial audit by ChainSecurity. Final audit will be conducted after StarkNet 0.8.0 is delivered and missing features are added to the bridge. This document explains the architecture of StarkNet platform, DAI bridge and risks associated with both the platform and the actual bridge implementation. This is to be followed by the specific recommendations from Protocol Engineering CU, Risk CU and StarkNet CU of specific risk mitigation strategies, specifically:  Setting appropriate ceiling for the bridge that will minimise potential loss to DAI holders in case any of the StarkNet platform risk materialises. For future components (i.e. Wormhole and MCD deployment) further debt ceilings will be set to minimise potential loss to MKR holders Implementing specific measures in the actual bridge implementation, specifically anti-censorship measures, escape hatch and circuit breaker  The document has been prepared by @bartek from PECU CU (StarkNet platform section) and @maciejka from StarkNet Eng CU (StarkNet DAI Bridge section)  Summary of the StarkNet Platform  Overview StarkNet is a generalized computation platform that runs as a \u201cLayer 2\u201d on top of the Ethereum blockchain. It is implemented as a zkRollup, meaning that the result of the computation of L2 transactions (state root of a resulting L2 state) is periodically committed to the L1 Ethereum contract. The validity of the computation (and, hence, the resulting state root) is guaranteed by sending a zero-knowledge proof (STARK proof) alongside the state update that is verified by L1 Verifier contract. The statement that is verified by the Verifier, and received from the Prover can be understood as \u201cI know a valid set of transactions, i.e. signed appropriately, etc\u2026 that, when executed taking the state of the last executed block as a starting point, result in a new state of which the state root is, e.g. 0x52324a4523e34234e55234dc5230058234245. It is worth noting that at no point does the Prover reveal (or needs to reveal) the transactions that are part of the L2 block. These can be retrieved from L2 full nodes assuming users trust them.  1600\u00d7978 121 KB  The diagram above presents the broad architecture of L1 contracts that comprise StarkNet on Ethereum:   StarkNet - main contract responsible for receiving periodically new state roots from L2 and for processing communication between L1 and L2. The frequency of these updates can very, at the time of the writing it is roughly 10 hours  STARK Verifier - this is a collection of contracts with STARK Verification logic. They receive proof from the Prover. This proof has to be positively verified before the new state update can be received by the StarkNet contract  MemoryPageFactRegistry - this auxiliary contract receives all state diffs from the Prover that are the result of the transaction batch execution. Having all state diffs from the genesis allows independent observer to trustlessly re-create full L2 state just by observing L1 contract. It is important to understand that Verifier does not check the integrity nor completeness of the state diffs - it just verifies that they have been sent to L1 as specified in a CAIRO program being verified. To make sure that state diffs are correct one needs to verify that CAIRO program (in this case StarkNet CAIRO program) that outputs them does so in a correct way.  The L2 part of the StarkNet system consists broadly of two main components - Sequencer responsible for accepting and verifying end-user transactions, and Prover that builds STARK Proof of the transaction batch execution and sends that proof to L1 Verifier. Both Sequencer and Prover, at the time of writing, are closed source components which Starkware intends to open source Q1 2023.  L1 \u2192 L2 Messaging To send a message to L2 from L1, a user (or a contract) invokes sendMessageToL2() method of a main StarkNet contract passing the destination L2 contract address, method selector and a payload. On L1, the StarkNet contract emits a LogMessageToL2 event and notes in its internal storage that a message has been sent. This event should be picked up by the L2 Sequencer and the destination contract should be invoked. Note that this is not guaranteed by the protocol and the Sequencer can choose to skip the message (either because it acts maliciously or there are technical reasons that do not allow it to process the message, e.g. the method execution on L2 cannot be proven). There is a L1\u2192L2 message cancellation mechanism planned to be added in the next release of StarkNet. It will allow one to cancel, from L1, a L1\u2192L2 message that was not picked up by the sequencer for some time.  L2 \u2192 L1 Messaging To send a message from L2 to L1, a user (or a contract) invokes send_message_to_L1() call on L2. This method should be processed by the Sequencer. Note that the Sequencer does not guarantee that it will process any call, either because it acts maliciously or there are technical reasons that do not allow it to process the message, e.g. the method execution on L2 cannot be proven). When the send_message_to_L1() is called, it eventually gets proven by the Prover and the new L2 state root is committed to L1. At that point a message can be consumed on L1 by calling consumeMessageFromL2() method of the main StarkNet contract. The StarkNet contract, at this point, simply notes that the message is consumed (to avoid \u201cdouble spending\u201d a single message) and emits ConsumedMessageToL1 event.  Bridges Bridges to/from StarkNet are permissionless and can be built by anyone for any token. Having said that, StarkNet will provide end users with the common token bridge UI that will use specific bridges for given tokens (approach similar to Optimism) curating themselves a token-bridge mapping. Basic bridge follows a simple pattern:   Depositing token:  On L1: Pull token from user and store it in bridge Escrow and send L1 \u2192 L2 message requesting L2 token mint L2: Upon receiving L1 \u2192 L2 message, mint L2 token    Withdrawing token:  On L2: Burn L2 token and send L2 \u2192 L1 message requesting L1 token release L1: Upon receiving L2 \u2192 L1 message, release L1 token from escrow    Generic bridges GitHub repository: GitHub - starkware-libs/starkgate-contracts.  Platform Risks  StarkNet contracts receive malicious code upgrade In a system that potentially secures billions of funds it is difficult to allow for upgradability (especially when quick response to a critical situation is needed) and, at the same time, make the system fully trustless (ideally, not upgradable at all) (see e.g. On Managing Secure Upgradability. How our security systems are prepared\u2026 | by Matter Labs | Matter Labs). StarkNet as of today has to be seen as an early beta, it is far from being mature and ossified and future upgrades are not only possible but are expected. Each upgrade may introduce new bugs, it is also possible that key holders perform malicious upgrades. Depending on which system component is maliciously upgraded, it can result in fully draining all the funds kept in all L1 bridge escrows and a complete collapse of the whole platform. Upgrades can be performed by an account defined as the Proxy\u2019s Governor(s). The Governor may appoint new Governors, it may upgrade implementation of StarkNet contract, it may change program hash of the CAIRO code that is used by the Verifier, and may perform any other administrative action allowed by the current Proxy\u2019s Implementation. So far we have observed the following changes to the StarkNet\u2019s Governors:  Initial: 0x194e22f49bc3f58903866d55488e1e9e8d69b517 (EOA), set up during Proxy creation on 15th Nov 2021 0x53a02284fd4f8abb79ec54f11e9d49c24e080245 (EOA), set up on 6th Dec 2021  0x16c8b90390468c1aa81f68b2fb9fcc3d46e0ea3e (EOA), set up on 29th Dec 2021. This EOA address is the current Governor Proxy contract has an upgrade delay defined, which is currently set to zero allowing for instantaneous upgrades. Note that there are no delays to the changes of other important system parameters (such as CAIRO program hash) and even if there were, the new Proxy\u2019s implementation may change them.  StarkNet Governor upgrades StarkNet CAIRO program version StarkNet Governor can upgrade the StarkNet CAIRO program version (program hash) that instructs the L1 Verifier what program is being Verified. Each upgrade, while presumably adding new features to the StarkNet platform, can introduce potential new bugs. So far a few such upgrades have been performed, for example:  26 Jan 2022: https://etherscan.io/tx/0xff91d349579fccb973dbabc46d1c0650ee3a4141d005b49196baf01ceb400be2  21 Feb 2022: https://etherscan.io/tx/0x25f6cd21fafd76ede4cf00c3b43143c270a04c75bc95c3c08acb28edcf5ef081    Proof system is implemented incorrectly STARK proof system is relatively new as it was introduced formally by Eli Ben-Sasson et al in 2018. Compared to older zkProof systems based on SNARKs, it does not use advanced cryptography (for example Elliptic Curve Pairings), it relies on very few cryptographic assumptions (i.e. anti-collision hash function) and it does not require a trusted setup making it arguably not only less risky but also future quantum-computing resistant. Having said that it is worth noting that the security of the system relies on the sound and bug-free implementation of various components, namely:  arithmetization formulas for the CAIRO CPU and their proper implementation on both Prover and Verifier (https://etherscan.io/address/0xf8b8d5193ce4e9edc734b3638b3dbcc5b7d1ab93#code) proper implementation of the polynomial consistency check subsystem of the Verifier (https://etherscan.io/address/0x85c0fc13f92020851c4710cc6a00c5c0877726c2#code) proper implementation of the FRI protocol as well as other auxiliary functions of the Verifier soundness and completeness of the whole STARK proof system from the mathematical point of view finally, bug free implementation of the StarkNet program which is written in CAIRO language alongside CAIRO compiler and associated standard libraries that are used  A bug in each of the components may result in two kinds of errors:  A valid execution may be impossible to be proven. This situation will likely result in a temporary halt of StarkNet as the Sequencer will not be able to update L2 state root to L1. When the cause of the problem is found it is very likely that StarkNet operations will be resumed. During Sequencer downtime no transactions on L2 will be processed, including withdrawals. An invalid execution may be accepted by the Verifier. This situation is much more problematic and can result in either a bug or malicious intent (a backdoor) from the authors of StarkNet. In this case the situation may result in fully draining all the funds kept in all L1 bridge escrows and a complete collapse of the whole platform.   Sequencer censors L2 \u2192 L1 (withdrawal) message The Sequencer can censor any transaction from the L2 user (including a withdrawal transaction) and right now there is no mechanism to prevent that, similar to the mechanism that is used by both Optimism and Arbitrum, namely allowing users to post their L2 transactions via an uncensorable L1 Inbox. Individual transactions from individual users may be censored as well as, for example, any attempt to withdraw the DAI token from L2.  Sequencer censors L1 \u2192 L2 (deposit) message The Sequencer can ignore (censor) users L1 \u2192 L2 messages (including a request to mint L2 tokens as a result of a deposit transaction). Given the asynchronous nature of L1 \u2192 L2 calls this may result in users\u2019 tokens being stuck in L1 escrow w/out equivalent L2 tokens minted.  Sequencer stops posting new state updates for a given period of time The Sequencer can stop posting new state updates either as a result of a bug or a malicious intent  843\u00d7272 40.8 KB  When the Sequencer is down no transaction can be processed including withdrawal requests.  Sequencer stops posting new state updates indefinitely When the Sequencer stops posting new state updates indefinitely, there is no mechanism to use an \u201cescape hatch\u201d equivalent to StarkEx (i.e. dYdX, DeversiFi, Sorare, ImmutableX) to withdraw funds from L1 escrow even though StarkNet state can be reconstructed from state diffs posted to L1. New state will be required and useful when StarkNet eventually allows other entities to act as Sequencers - decentralization is an important milestone for StarkNet roadmap for Q42022  StarkNet DAI Bridge Implementation Specific Risks  Overview Bridge provides two main functions: deposit and withdraw. On deposit, bridge parks funds on the address of L1Escrow contract, then sends finalize_deposit message to L2 side of the bridge where L2 DAI is minted to the destination address. On L2 withdrawal, L2 DAI is burned and a finalizeWithdraw message is sent to L1 where withdrawal should be finalized with finalizeWithdrawal method which will transfer DAI from escrow contract to the destination. Amount of DAI that can be bridged to L2 can be limited by setting the bridge ceiling.  1040\u00d7640 102 KB   StarkNet DAI Although StarkNet execution environment is significantly different than EVM, Starknet DAI is functionally equivalent to its EVM counterpart. All default ERC20 functionality such as transfer, transferFrom, approve, allowance, balanceOf and totalSupply are implemented. Additionally there is a mint function which is used by the l2_dai_bridge to mint tokens after a deposit from L1. Symmetrically there is also a burn function which is used by the bridge during withdrawal from L2. Access to the mint function is restricted by the authorization system described below. Usage of burn function is restricted by token transfer allowances.  Authorization In a similar way to other Maker subsystems, bridge contracts use a very simple multi-owner authorization system that restricts access to certain functions of the contract interfaces:  L1DAIBridge: setCeiling, close  L1Escrow: approve  L1GovernanceRelay: approve  dai: mint  l2_dai_bridge: close   It is expected that admin rights to the bridge contracts will be given to Maker Governance.  Bridge Ceiling The amount of bridged DAI can be restricted by setting a ceiling property on the L1DAIBridge. Setting it to Uint256.max will make it effectively unlimited, setting it to anything lower than the amount currently bridged will temporarily disable deposits.  Deposit Limit To make DAI bridge compatible with generic StarkNet token bridges a single deposit limit was added. Setting it to a value above the ceiling will make deposits unlimited, setting it to 0 will temporarily disable the bridge.  Upgradability DAI deposited on L1 are held by the L1Escrow contract. This separation of the funds from the bridge logic makes the system upgradable: the L1DAIBridge logic contract can be replaced independently of the escrow holding the DAI. Upgrades require deployment of new versions of the bridge contracts and closing of the old version. Due to the asynchronous nature of L1 <> L2 communication, it is a two step procedure. First close method on l2_dai_bridge and L1DAIBridge should be called, so no new deposit or withdrawal requests can be initiated. Then after all async messages that were in transit are processed, the bridge is effectively closed. After that, escrow approval on L1 and token minting rights on L2 can be revoked. Upgrade procedure requires admin access to both bridge and escrow contracts. It is possible to irreversibly disable upgradability by revoking admin rights on core bridge contracts.  Risks  Minting uncollateralized L2 DAI Direct access to the mint method on L2 dai or to finalize_deposit on l2_dai_bridge will result in a creation of uncollateralized L2 DAI.  Unauthorized Mints There are two cases which would allow the execution of unauthorized mints:  bug in authorization system implementation misconfiguration - authorization system is a very close copy of binary authorization system used in other parts of Maker system   Direct call to finalize_deposit  Calling directly finalize_deposit without sending a corresponding L1->L2 message and parking funds in L1Escrow first would require either a bug in the logic of deposit method of L1DAIBridge or cooperation from sequencer as in current implementation only it is allowed to call l1_handlers. What is more, the existence of corresponding message on L1 is verified during the L1 state update.  Getting access to L1Escrow Getting direct access to L1Escrow via incorrectly assigned allowance or getting indirect access by having a fake entry in L2toL1 message queue will allow to immediately drain L1 DAI from L1Escrow.  Incorrect L1Escrow Allowance Access to allow method of L1Escrow is guarded by the same simple authorization system used throughout the Maker system.  Fake L2toL1 message Correct content of L2toL1 message queue in StarkNet depends on correctness of corresponding L2 contracts sending L2toL1 messages and on general rollup correctness.  Malicious/Buggy Bridge Upgrade Any upgrade to the system poses risk of introducing bugs or malicious code.  L2 DAI losing peg When bridge ceiling is enabled, the amount of L2 DAI is artificially limited, which might result, in case of high demand, in L2 DAI losing its peg.  Censorship In case of rollup emergency that would result in funds being frozen, a governance assisted escape hatch mechanism is planned. It consists of two phases:  DAO needs to detect or be informed about rollup emergency, be it either individual censorship or rollup unavailability governance assisted evacuation procedure is initiated, DAI escrowed in the L1Escrow is distributed on L1 back to users, effectively L2 DAI is abandoned   Emergency detection In the case that a user believes they are censored, there is a forceWithdraw helper method on L1DAIBridge that initiates withdrawal from L1. If the withdrawal request is not handled, then the user might request the DAO to initiate an evacuation procedure. The DAO can verify the withdrawal request was not fulfilled by checking the StarkNet L1toL2 message queue on L1. It is important to note that in order for the forceWithdraw to effectively work, L2 user needs to give allowance to l2_dai_bridge and register its L1 reimburse address prior to calling forceWithdraw. This may no longer be possible when the L2 network is acting maliciously, hence this should be done by the users before receiving DAI on L2.  Evacuation procedure To reimburse L2 DAI users on L1, the last valid L2 state of DAI balances needs to be calculated. Since at that moment rollup data might be unavailable, L2 state needs to be reconstructed from state diffs available on L1. It is important to note that there is no general way to map StarkNet addresses to Ethereum addresses and that only L2 addresses that registered an L1 reimburse address in the L2 registry contract will be included in the evacuation procedure. What is more there might be pending deposits that have not reached L2. If not canceled with deposit cancellation, those should also be included in evacuation and returned based on the state of the L1toL2 message queue.  Deposit censorship If the DEPOSIT message for some reason is not processed by the sequencer, user funds will be stuck in the L1 escrow. Since this situation is detectable from data available on L1(L1 to L2 message queue is in the L1 StarkNet contract) Governance Assisted Escape Hatch described above will work. Yet there is another solution to this very problem that is fully permissionless. The upcoming L1 to L2 message cancellation mechanism will allow adding a deposit cancellation functionality to L1DAIBridge.  Possibility of preventive actions Ultimate value at stake is DAI locked in L1Escrow contract. Since StarkNet is expected to finalize its state on L1 at most every several hours, there is very little time to organize any preventive action in case of uncollateralized DAI is minted on L2. Maker Governance with its 2 day delay won\u2019t be able to respond in time. L1EscrowMom provides a refuse method that sets L1Escrow allowance to 0. It can be used to freeze withdrawals immediately. As soon as the problem is fixed, Governance could increase the allowance. Refuse access is controlled by the AuthorityLike contract. It is expected to be set to: DSChief to bypass the governance delay. ",
                    "links": [
                        "https://github.com/makerdao/arbitrum-dai-bridge",
                        "https://github.com/makerdao/starknet-dai-bridge",
                        "https://chainsecurity.com/security-audit/makerdao-starknet-dai-bridge/",
                        "https://github.com/starkware-libs/starkgate-contracts",
                        "https://matterlabs.medium.com/upgradability3-934db4433b0c",
                        "https://etherscan.io/tx/0xff91d349579fccb973dbabc46d1c0650ee3a4141d005b49196baf01ceb400be2",
                        "https://etherscan.io/tx/0x25f6cd21fafd76ede4cf00c3b43143c270a04c75bc95c3c08acb28edcf5ef081",
                        "https://eprint.iacr.org/2018/046",
                        "https://etherscan.io/address/0xf8b8d5193ce4e9edc734b3638b3dbcc5b7d1ab93#code",
                        "https://etherscan.io/address/0x85c0fc13f92020851c4710cc6a00c5c0877726c2#code",
                        "https://medium.com/starkware/starknet-on-to-the-next-challenge-96a39de7717",
                        "https://docs.makerdao.com/smart-contract-modules/governance-module/chief-detailed-documentation",
                        "https://forum.makerdao.com/t/forum-at-a-glance-march-10-16-2022/13977",
                        "https://forum.makerdao.com/t/mip69-l2-to-l1-fast-withdrawals/14041/7",
                        "https://forum.makerdao.com/t/starknet-simple-bridge-limit-poll-risk-assessment-mitigation/14158",
                        "https://forum.makerdao.com/t/pecu-month-in-review-march-2022/14493",
                        "https://forum.makerdao.com/t/zksync-era-dai-bridge-and-zksync-era-platform-technical-assesment/19992",
                        "https://forum.makerdao.com/t/forum-at-a-glance-march-17-23-2022/14191"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.355091727585831
                },
                {
                    "author_link": "https://forum.makerdao.com/u/flipflopflapdelegate",
                    "index": "#2",
                    "likes": "0",
                    "time": "16/03/2022-14:02:21",
                    "content": "Thank you for writing up this assessment\u2013informative and it reminds me of the reasons why I love this ecosystem\u2013its challenging and innovative, the latter is why I signed-up      bartek:  bug free implementation of the StarkNet program which is written in CAIRO language alongside CAIRO compiler and associated standard libraries that are used   Do you believe that every time there\u2019s an upgrade to the proof system, there will be a need to stop/freeze the DAI bridge in order to review the transpiler success of taking EVM bytecode to Cairo VM bytecode? I\u2019m thinking out loud, since Cairo uses felt versus 256-bit integers, there will be a need to review the code upgrade \u2013 as you mentioned in your post, \u201ceach upgrade may introduce new bugs\u201d     bartek:  Note that the Sequencer does not guarantee that it will process any call, either because it acts maliciously or there are technical reasons that do not allow it to process the message, e.g. the method execution on L2 cannot be proven).   When going L2 \u2014> L1 if what you described above  occurs, the user will lose custody of their DAI forever, correct? Is there a way to cancel L1 \u2014> L2 messaging if this were to occur? Also, how many block confirmations are needed for L1 to L2 and vice versa? And after the confirmations, does the Provers have to also update L1? Or, is that what you me by \u201cL1 is verified during L1 state update\u201d      bartek:  Compared to older zkProof systems based on SNARKs, it does not use advanced cryptography (for example Elliptic Curve Pairings)   Is Cairo a zkEVM implementation, or totally different? (similar to what zkSync uses). And is the zkEVM open sourced? Thanks again Bartek! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.042508417508418
                },
                {
                    "author_link": "https://forum.makerdao.com/u/bartek",
                    "index": "#3",
                    "likes": "3",
                    "time": "17/03/2022-17:33:35",
                    "content": "Hey @flipflopflapdelegate, to clarify:  transpiler success of taking EVM bytecode to Cairo VM bytecode?  Current StarkNet DAI implementation and Bridge is not using transpiler. There is an existing transpiler from Solidity to Cairo, but I do consider it to be still highly experimental. There is no transpiler of EVM bytecode to Cairo and I highly doubt there will ever be. You can have a look at the Cairo code of the bridge here: starknet-dai-bridge/l2_dai_bridge.cairo at main \u00b7 makerdao/starknet-dai-bridge \u00b7 GitHub  Is Cairo a zkEVM implementation, or totally different?  I am not entirely sure what you mean by \u201czkEVM\u201d - both StarkNet and zkSync are using their custom VMs that are optimised for zero-knowledge proofs. Somewhat confusingly zkSync is calling their VM zkEVM, but it is not EVM. There are projects aiming at providing zero-knowledge proofs for EVM, but they are still relatively immature. Think about it this way: StarkNet: Cairo language \u2192 Cairo VM zkSync:  Solidity \u2192 Yul \u2192 zkSync VM Nothing is open source as far as I know, right now.  Do you believe that every time there\u2019s an upgrade to the proof system, there will be a need to stop/freeze the DAI bridge  Every upgrade to the system introduces potential new risks. I don\u2019t believe there will be a need to stop/freeze DAI bridge, but it would be certainly prudent to analyse what has changed during the upgrade, and how does it impact the risk of users funds. It is not that different from being on top of any change in EVM which can necessitate smart contract upgrades on Ethereum, it\u2019s just that the rate of change can be higher  Is there a way to cancel L1 \u2014> L2 messaging if this were to occur?  There is a proposed mechanism to cancel L1 \u2192 L2 message on StarkNet (L1 to L2 message cancellation - Starknet Development - StarkNet Shamans).  When going L2 \u2014> L1 if what you described above occurs, the user will lose custody of their DAI forever, correct?  Sequencer - in theory - can ignore any message, both user\u2019s request (e.g. withdrawal) and L1 \u2192 L2 message. If the withdrawal is ignored/censored, users\u2019 will not loose control of their assets, they will still be on L2. If the withdrawal is not ignored, DAI on L2 will be burned AND L2 \u2192 L1 message will be sent  Also, how many block confirmations are needed for L1 to L2 and vice versa? And after the confirmations, does the Provers have to also update L1?  I am not sure how many confirmations are needed for the Sequencer to process L2 \u2192 L1 message, let me get back to you on that  ",
                    "links": [
                        "https://community.starknet.io/t/l1-to-l2-message-cancellation/212"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.452553376111069
                },
                {
                    "author_link": "https://forum.makerdao.com/u/flipflopflapdelegate",
                    "index": "#4",
                    "likes": "1",
                    "time": "17/03/2022-18:41:08",
                    "content": "    bartek:  Current StarkNet DAI implementation and Bridge is not using transpiler. There is an existing transpiler from Solidity to Cairo, but I do consider it to be still highly experimental. There is no transpiler of EVM bytecode to Cairo and I highly doubt there will ever be.   Got it. I was under the impression the code was written in solidity in order to initiate the transfer from L1\u2014>L2. TY for the clarification.     bartek:  zkSync: Solidity \u2192 Yul \u2192 zkSync VM   Understood. I believe there was an earlier attempt by StarkWare to go Solidity \u2192 Yul \u2192 Cairo VM in September 2021 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.324999999999999
                },
                {
                    "author_link": "https://forum.makerdao.com/u/bartek",
                    "index": "#5",
                    "likes": "1",
                    "time": "18/03/2022-10:37:56",
                    "content": "    flipflopflapdelegate:  Got it. I was under the impression the code was written in solidity in order to initiate the transfer from L1\u2014>L2. TY for the clarification.   Transfers from L1 \u2192 L2 require smart contract components on L1 (this is Ethereum, so it is Solidity compiled to EVM) and components on L2 (in this case StarkNet, so it\u2019s Cairo compiled to CairoVM) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.071428571428571
                },
                {
                    "author_link": "https://forum.makerdao.com/u/Puzzler",
                    "index": "#6",
                    "likes": "0",
                    "time": "21/03/2022-00:52:09",
                    "content": "This risk assessment is good? Or bad? Sorry. It is difficult for me to follow detailed Thank you  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.4
                },
                {
                    "author_link": "https://forum.makerdao.com/u/system",
                    "index": "#7",
                    "likes": "0",
                    "time": "19/06/2022-00:53:00",
                    "content": "This topic was automatically closed 90 days after the last reply. New replies are no longer allowed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0606060606060606
                }
            ]
        }
    ]
}