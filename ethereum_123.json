{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-5679-mint-and-burn-tokens/10913",
            "title": "ERC-5679: Mint and Burn Tokens ",
            "index": 10913,
            "category": [
                "Tokens"
            ],
            "tags": [
                "erc-721",
                "erc",
                "erc-20",
                "erc1155"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "1",
                    "likes": "1",
                    "time": "18/09/2022-05:07:58",
                    "content": "Hi all, I am proposing a new ERC to extend the ERC-20, ERC-721 and ERC-1155 with ability to Mint and Burn. See the ERC here ERC-5679: Token Minting and Burning Your feedback is appreciated. Reference Implementations Version 0x1002 https://goerli.etherscan.io/address/0x72D9c2D49F5A2915D7A3c23B1FD5d645dFe492ac#code https://goerli.etherscan.io/address/0x8965B739DF91eB621D9FF06af4A48198f711BbD9#code https://goerli.etherscan.io/address/0xE45072F6ee31cBE07FC232f61c61C6Bd000d9ea2#code ",
                    "links": [
                        "https://goerli.etherscan.io/address/0x72D9c2D49F5A2915D7A3c23B1FD5d645dFe492ac#code",
                        "https://goerli.etherscan.io/address/0x8965B739DF91eB621D9FF06af4A48198f711BbD9#code",
                        "https://goerli.etherscan.io/address/0xE45072F6ee31cBE07FC232f61c61C6Bd000d9ea2#code"
                    ],
                    "GPT-summary": "The author of the post is proposing a new ERC to extend the ERC-20, ERC-721 and ERC-1155 with the ability to Mint and Burn. The author is asking for feedback on the proposal and has provided reference implementations for version 0x1002. A third party could provide constructive criticism of the proposal.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.840909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "2",
                    "likes": "2",
                    "time": "29/09/2022-13:40:38",
                    "content": "I find this proposal very applaudable, especially as I had been calling out not standardizing mint and burn in a previous post on this forum: EIP-4973 - Account-bound Tokens - #129 by TimDaub However, I think the proposal would be stronger if it rigorously created separate documents for EIP-721, EIP-1155, and EIP-20\u2019s mint functions. E.g., I have no knowledge whatsoever about EIP-1155 and only very limited knowledge about EIP-20. Hence, although I\u2019d like to help you review and improve the document, my knowledge is mainly in EIP-721 - but I don\u2019t feel like being able to make suggestions for the lack of the other standard document\u2019s inclusion. Still, thanks for taking this on, I think it\u2019s an important step in the right direction! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.895535714285715
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "3",
                    "likes": "1",
                    "time": "29/09/2022-19:19:33",
                    "content": "Thank you for the feedback @TimDaub I was thinking of the same thing. I hesitate because there is also ways to devide this EIP to more finegrain, e.g. by EIP-20Mint EIP-20Burn, EIP-721Mint, EIP-721Burn etc. And it seems harder for implementers to understand they actually are the same standard and shall follow the same behavior. So, while I am open or even weakly lean towards agreeing with you, let\u2019s wait for other community members to see what they think, WDYT? In the meanwhile, it\u2019d be great if you could start reviewing it it from EIP-721 perspective ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.318181818181818
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "4",
                    "likes": "0",
                    "time": "04/10/2022-00:29:07",
                    "content": "@fulldecent I think this EIP is a perfect example of what you describe in the What kinds of things should be standardized? \u2013 William Entriken Blog which adoptions has come before. Love to hear what you think ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 8.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "5",
                    "likes": "1",
                    "time": "04/10/2022-04:11:21",
                    "content": "Here is the key quote:  A standard only deserves to be written if multiple people adhere to it and people depend on its surface area.  The missing part in the justification for ERC-5679 (DRAFT) is I don\u2019t see any software that depends on performing an ERC-721 mint across any arbitrary contract. Minting is nearly always attached to payment, randomness, referral fees, auctions, and other complicated mechanisms. This is why every NFT project has its own website to onboard the customers and charge money in a way that is appropriate for that project. Conceptually, ERC-5679 (DRAFT) is saying that it should be valuable for somebody (who?) to make a website called MINT NFT where you can paste in any Ethereum address and if that address is a compliant ERC-5679 (DRAFT) contract then it will mint you that token. Such a website does not strike me as feasible, much less current best practice. Therefore this surface area is not worth standardizing. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.299479166666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "6",
                    "likes": "0",
                    "time": "04/10/2022-05:49:15",
                    "content": " Minting is nearly always attached to payment, randomness, referral fees, auctions, and other complicated mechanisms. This is why every NFT project has its own website to onboard the customers and charge money in a way that is appropriate for that project. Conceptually, ERC-5679 (DRAFT) is saying that it should be valuable for somebody (who?) to make a website called MINT NFT where you can paste in any Ethereum address and if that address is a compliant ERC-5679 (DRAFT) contract then it will mint you that token. Such a website does not strike me as feasible, much less current best practice.  Just curious, with the same argument the recently finalized EIP-5313: Light Contract Ownership, is conceptually arguing that somebody (who?) would like to check owner of a given contract. Does that happen very often when owner is not the specific project? At least for now owner checking is as specialized as minting and burning as far as I can see. I am not questing that EIP-5313 shall not be finalized. I am questioning that by your own standard, EIP-5313 doesn\u2019t seem to pass. The standardization act for the purpose of drive consensus, and sometimes that consensus need to happen before people can start using it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.607456140350877
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "7",
                    "likes": "0",
                    "time": "04/10/2022-17:59:52",
                    "content": "Yes, this is a good one to review. EIP-5313: Light Contract Ownership is related to a tool checking the ownership of any arbitrary compliant NFT contract\u2014and where the tool requires those compliant contracts to work in a specific way. Such a tool does exist and is widely used. OpenSea is one of them. OpenSea interrogates every NFT contract using EIP-5313 to find who the owner is and then grant them permissions to administer where royalties are paid to. Other marketplaces use this information as well. OpenSea has been using the mechanism documented in EIP-5313 for years before I wrote EIP-5313. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.484375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "8",
                    "likes": "0",
                    "time": "04/10/2022-18:24:50",
                    "content": "Given the EIP-5313 is a subset of EIP-173, one could argue that OpenSea is just using EIP-173. Otherwise, if the argument (that OpenSea is using EIP-5313) holds, the same apply to arbitrary subset of existing widely adopted EIPs. Maybe one should go ahead and create \u201cLight Transfer\u201d for just one single method transfer... I am not saying EIP-5313 is not valuable. I am just saying author of EIP-5313 has to proof that EIP-5313 has merit despite that EIP-173 exists, in which by your article that What kinds of things should be standardized? \u2013 William Entriken Blog it should test that a wide interest exists to ONLY use owner() but NOTHING else in the EIP-173. But I fail to see any discussion in EIP-5313 addressed that. I wouldn\u2019t be surprised that once EIP-5313 is proposed, new clients might lean to adopt it and only care about owner() method an nothing else, but in this case it would be adoption after standardization. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.682467532467532
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "9",
                    "likes": "1",
                    "time": "04/10/2022-19:05:21",
                    "content": "OpenSea has documented that it was required to use ERC-173 to have your contract automatically validated. Actually worse, they used confusing language about what might be required and then just linked to an implementation in OpenZeppelin. OpenSea is the largest and most notable consumer of ERC-173/ERC-5313 data. Unfortunately, using ERC-173 has the side effect of restricting types of contract ownership, such as where it is dynamically looked up (since dynamic lookup cannot emit an event. I reviewed with OS documentation engineers, performed experiments and confirmed that the only surface area that is used or required was ERC-5313 and the existing documentation about requiring ERC-173 was wrong\u2026 that was my motivation to write ERC-5313. The ERC-5313 discussion does note OpenSea\u2019s existing well-known implementation as the primary motivation for ERC-5313. You are right, there is only mention of another implementation, this is Light.art, a deployed sold out NFT series, that benefits from the smaller surface area not possible with ERC-173. Other implementations of the owner() exist in the wild and we failed to bring these up in discussion (sadly only looking at the whale in the room, OS).  Of course, once anything is standardized (or not!) it can be copied and implemented elsewhere. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.100198412698412
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "10",
                    "likes": "0",
                    "time": "04/10/2022-19:57:36",
                    "content": "For this thread, I think we have drift off a bit from the original goal to get feedback about Mint and Burn token interfaces whether that EIP, specifically the specs shall be revised in anyway. I\u2019d be more than happy to continue the conversation and friendly debate with you. I think our discussion in the past a few days are mainly now about whether the criteria of \u201cwhat should be standardized\u201d. Can I suggest that we create a separate post in the FEM to get feedback of \u201cwhat should be standardized\u201d. Let\u2019s continue the debate about the article in a new thread, and keep this thread focusing on the ERC-5679? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.1893939393939394
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "11",
                    "likes": "0",
                    "time": "05/10/2022-20:25:18",
                    "content": "Hi @TimDaub thanks for reaching out. Do you have further feedback for the EIP? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "12",
                    "likes": "0",
                    "time": "05/10/2022-20:44:37",
                    "content": "Regarding the previous discussion, while I can see the issue of nobody wanting to have a mint-open EIP721 token because today it\u2019s obvious that this functionality has to be permissioned, I\u2019d ask commenters to refrain from discouragement. In case it is truly useless to have a document standardizing minting and burning, I guess this work will simply be irrelevant and forgotten - but won\u2019t do any harm. Still, as I\u2019ve already mentioned in EIP-4973 - Account-bound Tokens - #129 by TimDaub, I\u2019m skeptical of both mint and burn not being canonically (at least optionally) available. I\u2019d see this effort as explorative programming. In my own experience, merely expressing one self can spawn new ideas elsewhere, so I can only encourage you to continue working on this. IMO a problem that is potentially solveable is this: When everybody can call mint as much as they want, how can EIP-721 tokens have value? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.565268065268065
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "13",
                    "likes": "0",
                    "time": "06/10/2022-18:18:51",
                    "content": "That\u2019s very good question and concern. And I think I am confident to also give you a good answer: There is multiple ways to do permission. Centralized admin-role based permission is only one way. here are other ways  Allowing auto-sale via native ETHs or exchange of other ERC721 / ERC20  contract SomeNFT { const uint256 CHARGE = ...; fallback() {   require(msg.value > CHARGE);   mint(nextId, ...);   // increase nextId etc; } }   In this contract above, anyone who send a native ETH of that evm chain above the CHARGE will be minted one NFT, no admin permission is involved. 1b. Variant of 1, auto-sale via receiving ERC20*/ERC721/ERC1155. assuming the name of token is called \u201cGoldToken\u201d contract SomeNFT is ERC1155TokenReceiver { function OnERC1155TokenReceived( address operator, address from, address to, uint256 tokenId, uint256 amount, bytes calldata data) { require(operator == intendedAddressOfGoldToken); require(amount >= CHARGE); mint(\u2026); } }  Authorized Minting via a Smart Proposal(EIP-5247)   struct Proposal {   uint256 id;   address contract;   bytes memory txForMint; }  contract SomeDAO {   function execute(Proposal proposal) public onlyPassed  {     require(_isProposalPassedAndLocked(proposal.id));     address erc721 = proposal.contract;     erc721.call(txForMint);   } }  In this contract, a DAO can agree to mint one or many tokens but based on a Smart Proposal which can be voted upon.  Allow a mint but endorsed by Admin via Smart Endorsement(EIP-5453)   contract SomeNFT {   function mint(...) public onlyEndorsedByAdmin() {     ...   } }  In this contract, an admin can sign an offchain endorsement message but the claimer will actually create the transaction TX.  Mint NFT via auctions  contract SomeNFT {   function commit() {     ...   }   function bid(tokenId) { }      function mint(...) public onlyWonAuction() {     ...   }   modifier onlyWonAuction {     // Code logic for msg.sender has valid committed bid price     // Code logic for msg.sender has bid highest price within the a deadline   } }  ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5453",
                        "https://ethereum-magicians.org/t/idea-p2p-soulbound-token-call-for-a-better-name/11262/3"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.883193277310924
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xtools-at",
                    "index": "14",
                    "likes": "2",
                    "time": "23/02/2023-13:59:23",
                    "content": "hey, i think i\u2019ve spotted a typo in the spec, could anyone confirm please? so all interface methods have this input param bytes calldata _data  all but {IERC5679Ext1155-burn} which takes bytes[] calldata _data -> function burn(address _from, uint256 _id, uint256 _amount, bytes[] calldata _data) external;  it doesn\u2019t make sense to me to have a different data type for this particular case, anyone know more? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/radek",
                    "index": "15",
                    "likes": "0",
                    "time": "27/02/2023-13:43:39",
                    "content": "Can @xinbenlv elaborate why bytes calldata _data is mandatory? For ERC20 mint/burn? When you look on OZ implementation: openzeppelin-contracts/ERC20.sol at master \u00b7 OpenZeppelin/openzeppelin-contracts \u00b7 GitHub mint and burn just have (address account, uint256 amount). I assume most ERC20 will have that. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "16",
                    "likes": "1",
                    "time": "27/02/2023-19:16:45",
                    "content": "    xtools-at:  hey, i think i\u2019ve spotted a typo in the spec, could anyone confirm please? so all interface methods have this input param bytes calldata _data  all but {IERC5679Ext1155-burn} which takes bytes[] calldata _data  it doesn\u2019t make sense to me to have a different data type for this particular case, anyone know more?   Hi, @xtools-at This is a good finding! It shall actually be bytes instead of bytes[]. That\u2019s a typo. Let me fix it and update the ERC draft.      radek:  Can @xinbenlv elaborate why bytes calldata _data is mandatory? For ERC20 mint/burn?   Yes, this is a convention started by ERC721 and followed by ERC1155 and many others. By adding a bytes _extraData field it allows extension. For more details you could see ERC-5750: General Extensibility for Method Behaviors for the motivation and rationale sections. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.717592592592593
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/radek",
                    "index": "17",
                    "likes": "1",
                    "time": "01/03/2023-21:13:21",
                    "content": "I understand the convention for extensibility. My point is whether for ERC20 the calldata _data param must be mandatory. Since most ERC20 tokens have mint / burn without this. So my proposal is to make that optional within the standard for ERC20 and to have declared 2 kinds of interfaces. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "18",
                    "likes": "0",
                    "time": "01/03/2023-22:39:15",
                    "content": "Could you share some of these contracts\u2019s deployed address that you mentioned? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/radek",
                    "index": "19",
                    "likes": "0",
                    "time": "03/03/2023-14:20:43",
                    "content": "Example: USDC: https://etherscan.io/address/0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf#code line: 697 function mint(address _to, uint256 _amount) Not having the overall chain statistics here, but since this is the outcome of the OZ ERC20 wizard:     function mint(address to, uint256 amount) public onlyOwner {         _mint(to, amount);     } I really assume most existing  ERC20 will have it just like that. Note to others - this is only discussing ERC20 - I am not discussing 721 or 1155. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.699999999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/radek",
                    "index": "20",
                    "likes": "0",
                    "time": "15/03/2023-16:20:01",
                    "content": "For the future reference - conclusions related to ERC20: Option for ERC20 reflecting common no calldata approach by radeksvarz \u00b7 Pull Request #6685 \u00b7 ethereum/EIPs \u00b7 GitHub  This EIP is in the Final state, and may only be modified to correct errata. I would recommend standardizing this interface in its own EIP if you feel it can stand alone.  This means ERC20 with common mint/burn functions having (address account, uint256 amount) MUST NOT declare being compatible with ERC-5679: Mint and Burn Tokens. I assume there is no demand to have the additional EIP for common mint/burn (address account, uint256 amount) as the PR comment suggested. ",
                    "links": [
                        "https://ethereum-magicians.org/t/erc-5679-mint-and-burn-tokens/10913"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.8125
                }
            ]
        }
    ],
    "group_index": "123"
}