{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/rfc-limiting-provider-object-injection-to-secure-contexts/10670",
            "title": "RFC: Limiting provider object injection to secure contexts ",
            "index": 10670,
            "category": [
                "Interfaces"
            ],
            "tags": [
                "wallet"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "1",
                    "likes": "0",
                    "time": "04/09/2022-22:18:42",
                    "content": "At Brave, we\u2019ve been thinking more about what\u2019s necessary to secure wallets and limit attack vectors with wallets. Recently we\u2019ve implemented our wallet to align with the secure contexts web API. We\u2019d like to propose this being standardized as a common implementation point for wallets so that dApps can have a level of certainty about how they can use iframes and minimum requirements of HTTP(s) etc. Where do other wallet providers fall on this? Implementation for this should be rather simple given that all major browsers have already implemented window.isSecureContext so a check just needs to be added before injecting the provider object. ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.86875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "2",
                    "likes": "0",
                    "time": "07/09/2022-08:16:43",
                    "content": "Note, @rekmarks I\u2019ve added an additional optional test case to handle additional backward compatibility for the 3P iframe case. Here\u2019s the commit where that was added. With that in mind, I made this a MAY given that most wallets are extensions at this point and won\u2019t be able to support it. Additionally, I did kick off a discussion at W3C to try and get the permissions API extensible for browser extensions here. For any implementers who are following this discussion and have implemented as an extension I\u2019d suggest subscribing to that thread. ",
                    "links": [
                        "https://github.com/w3c/permissions/issues/383"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "3",
                    "likes": "0",
                    "time": "20/09/2022-15:57:58",
                    "content": " Provider objects SHOULD NOT be accessible in private (incognito) windows.  Should this be up to the user? I know firefox lets me choose which addons run in private browsing mode. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "4",
                    "likes": "0",
                    "time": "20/09/2022-21:06:28",
                    "content": "We were debating this internally as well. I think there\u2019s some wiggle room here. Originally I went with MUST NOT as we don\u2019t actually inject this into incognito (chrome refers to these as off-the-record) windows so I figured stronger language would produce better webcompat across wallets. I looked into the original discussions that occurred when we originally shipped this. It looks like we took the more conservative approach to avoid debate around the privacy impact here and what sorts of fingerprinting risks we may introduce by doing so. However, our team was open to reviewing this and allowing this to be exposed in incognito windows. However, given that most extension based wallets are going to require the extension be toggled on by the browser first this will fundamentally be an \u201copt in\u201d scenario. For this reason I think the best we could do here is a MAY in order to provide the most accurate reflection of what might happen if the dApp is in an Incognito window. WDYT about changing to MAY? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.836538461538462
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "0",
                    "time": "21/09/2022-16:48:01",
                    "content": "This needs a better motivation/security considerations than \u201cpeople at some point in history thought it was a good idea to limit access to extended resources to secure contexts only\u201d.  There may be very good reasons for it, but those should be listed here rather than just saying \u201cother people do it\u201d.  In browsers, *.localhost and localhost should be tightly coupled to the loopback device (you shouldn\u2019t do a hostname lookup), and as a consequence it should be considered a secure context.  See the fourth paragraph of Secure contexts - Web security | MDN along with the note about pre-FF 84.  Because of this, the security considerations section should be adjusted to account for this (and separately, Brave should implement this if they haven\u2019t yet, though I thought it came with Chromium latest). Edit: Hmm, looks like you mention the localhost issue in the backwards compatibility section.  Can we just say that browsers implementing this MUST implement localhost as secure context as a prerequisite?  They all should be doing that anyway, and I would rather have that requirement than add complexity to every wallet having to deal with localhost not being secure. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.82372448979592
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "6",
                    "likes": "0",
                    "time": "21/09/2022-16:54:00",
                    "content": "I\u2019m not a fan of this:   Provider objects SHOULD NOT be accessible in private (incognito) windows.   As a user, I often want to use my wallet from a private window (sometimes behind TOR as well) because I want to minimize tracking and fingerprinting.  I can appreciate that the use of a wallet probably fingerprints me (a wallet could avoid this fingerprinting, but it would be complex/hard), but disallowing all wallet interactions in private browsers feels overly limiting to me. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.975
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "7",
                    "likes": "0",
                    "time": "22/09/2022-00:15:05",
                    "content": " This needs a better motivation/security considerations than \u201cpeople at some point in history thought it was a good idea to limit access to extended resources to secure contexts only\u201d. There may be very good reasons for it, but those should be listed here rather than just saying \u201cother people do it\u201d.  Do you mean the EIP as a whole or something specific to the content in there? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.262499999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "8",
                    "likes": "0",
                    "time": "22/09/2022-00:16:31",
                    "content": " Can we just say that browsers implementing this MUST implement localhost as secure context as a prerequisite?  I don\u2019t think that\u2019s possible. How would a wallet detect if they\u2019re operating in a browser that\u2019s done this or not?  They all should be doing that anyway, and I would rather have that requirement than add complexity to every wallet having to deal with localhost not being secure.  This is why I went with optional normative language here is because it should be up to the implementers to decide what sorts of security stance they want to take on this. In the case of Brave we have certainty around this so we didn\u2019t need to consider implementation concerns around this. We have additional capabilities to do this because we hook our wallet into the browser directly where as pretty much everyone else other than Opera is limited to what\u2019s exposed via the extensions API and the web platform. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0853174603174605
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "9",
                    "likes": "0",
                    "time": "22/09/2022-00:22:37",
                    "content": "    MicahZoltu:  As a user, I often want to use my wallet from a private window (sometimes behind TOR as well) because I want to minimize tracking and fingerprinting. I can appreciate that the use of a wallet probably fingerprints me (a wallet could avoid this fingerprinting, but it would be complex/hard), but disallowing all wallet interactions in private browsers feels overly limiting to me.   Sounds good, I think most people here seem to be in line with this thinking. Will update it to a MAY as that\u2019s the best we can do given extension wallets require a user to opt in to using the wallet in a private tab. This makes it so dApps should assume by default that it\u2019s possible that it won\u2019t be injected in the first place. Most fail on this case properly anyways because they assume that a user may not have a wallet at all. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.854166666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "10",
                    "likes": "0",
                    "time": "22/09/2022-10:13:24",
                    "content": "    kdenhartog:  Do you mean the EIP as a whole or something specific to the content in there?   The EIP as a whole.  The abstract and motivation section at the moment just basically says \u201cit is considered industry best practice to do X, so we should do X\u201d.  I have been in the industry long enough to have a mild distrust of \u201cindustry best practices\u201d as often they are born out of regulation, a different environment, or with good intent originally but bent out of shape over time. In the motivation/abstract of this EIP it should establish what attack vectors are present against users that are prevent/mitigated if this standard is followed.  At the moment, there are no attack vectors described so one cannot effectively evaluate whether this standard would actually protect against anything. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.189950980392157
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "11",
                    "likes": "0",
                    "time": "22/09/2022-10:17:23",
                    "content": "    kdenhartog:  I don\u2019t think that\u2019s possible. How would a wallet detect if they\u2019re operating in a browser that\u2019s done this or not?   Hmm, reading over this EIP again I think maybe this should be Informational rather than Interface?  IIUC, this is basically a recommended set of best practices for wallet authors, but if a wallet doesn\u2019t comply there is no interoperability breakage that would occur?  Essentially this EIP is \u201cif you implement this you are better able to protect users from bad things\u201d rather than \u201cif you implement this you\u2019ll be able to interop with third parties more efficiently/better\u201d? If this understanding is correct, then my original comment doesn\u2019t make sense. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.3375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "12",
                    "likes": "0",
                    "time": "22/09/2022-10:20:52",
                    "content": "    kdenhartog:  Sounds good, I think most people here seem to be in line with this thinking. Will update it to a MAY as that\u2019s the best we can do given extension wallets require a user to opt in to using the wallet in a private tab. This makes it so dApps should assume by default that it\u2019s possible that it won\u2019t be injected in the first place. Most fail on this case properly anyways because they assume that a user may not have a wallet at all.   Kind of separate from this EIP, it would be nice if extensions in private mode were off by default but trivial to enable (e.g., by clicking on the extension icon).  This could perhaps be achieved by having a separate setting for \u201cAlow this extension to \u2026\u201d for normal and private browsing windows, and it would default to \u201cOn all sites\u201d for normal windows and \u201cOn click\u201d for private windows. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.234375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "13",
                    "likes": "0",
                    "time": "22/09/2022-11:00:37",
                    "content": "I mean, it\u2019s pretty trivial to enable it in private/incognito even now:  image781\u00d7140 12.9 KB  I suggest that the EIP use the following wording:   Provider objects SHOULD NOT be accessible in private (incognito) windows, unless the user explicitly opts-in, in which case provider objects MUST be accessible in private (incognito) windows.   ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.491071428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "14",
                    "likes": "0",
                    "time": "26/09/2022-23:27:04",
                    "content": "Is there a way to detect whether it\u2019s a private window from a web pages perspective? Ideally we should be making these statements reflect things that can be tested in code so that we can automatically check compliance rather than requiring someone to manually test it. The purpose in this would be so that we can use test suites to automatically identify areas of incompatibility between different implementations. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "15",
                    "likes": "0",
                    "time": "27/09/2022-17:17:18",
                    "content": " Is there a way to detect whether it\u2019s a private window from a web page\u2019s perspective?  There are only indirect methods. See GitHub - Joe12387/detectIncognito: JavaScript detection of Incognito & other private browsing modes on Chrome, Edge, Safari, Firefox and MSIE. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.84375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "16",
                    "likes": "0",
                    "time": "30/09/2022-03:54:49",
                    "content": "I think the wording in the EIP should be:  Provider objects MUST NOT be accessible in private (incognito) windows until enabled by the end user.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "17",
                    "likes": "0",
                    "time": "30/09/2022-07:03:37",
                    "content": "I believe @Pandapip1 suggested similar wording in the PR and my reasoning for not chasing it was that it\u2019s not something that can be tested easily making it hard to identify if implementations are actually complying with this statement. As this moves into the later stages I intend to write a test suite for this so It doesn\u2019t make sense to me to write normative language that requires manual testing for developers to check. I\u2019ve chosen the language for this pretty precisely in this case to account for these aspects of the text. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.565476190476191
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "18",
                    "likes": "0",
                    "time": "03/10/2022-13:27:52",
                    "content": " I intend to write a test suite for this  I would highly suggest not doing this. I find that most problems with EIPs that contain test suites are with the test suites themselves. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.65
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kdenhartog",
                    "index": "19",
                    "likes": "0",
                    "time": "03/10/2022-21:11:19",
                    "content": "I may be miss-reading into your comment here, so please correct me if I\u2019m wrong, but this seems to lead me to the conclusion that the focus of EIPs is on writing potential design specs down for public comment rather than shipping interoperable code. I\u2019m less interested in the former and extremely interested in the latter. I\u2019m surprised to hear you say the risks out weigh the benefits here as that exact process has been used to ship numerous web browsers. Without these test suites I doubt we\u2019d even be able to talk on this website right now. Surely I must be misunderstanding what you\u2019re saying here as test suites have proven invaluable in terms of shipping interoperable code. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.437830687830688
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "20",
                    "likes": "0",
                    "time": "04/10/2022-13:14:01",
                    "content": "    Pandapip1:  I would highly suggest not doing this. I find that most problems with EIPs that contain test suites are with the test suites themselves.   You should write tests, I think what @Pandapip1 is referring to is that you shouldn\u2019t include entire testing infrastructure in the EIP itself.  A simple list of inputs and expected outputs is sufficient, you shouldn\u2019t include a package.json, files written in JS (or whatever language), etc. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5600000000000005
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "21",
                    "likes": "0",
                    "time": "12/10/2022-11:44:28",
                    "content": "I wouldn\u2019t go so far as to make it a \u2018should.\u2019 Most EIPs don\u2019t include them, and I find it encourages slightly vaguer specs (thankfully this isn\u2019t the case in this EIP). Just make the tests self-contained and simple, such as a plain html file with no dependencies and inline JS. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.182539682539683
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/agostbiro",
                    "index": "22",
                    "likes": "0",
                    "time": "09/03/2023-16:14:22",
                    "content": "I\u2019m a little bit confused by these two restrictions:   By default the Ethereum Provider APIs MUST NOT be exposed to third-party iframes. \u2026 If the iframe is a third party to the top-level secure origin, it SHOULD be blocked.   Should third party iframes always be blocked? Note that this requirement would break dapps like Gnosis Safe and Dhedge that embed exchanges in their web apps to facilitate trading on them with their smart contract wallet/investment pool. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.376275510204081
                }
            ]
        }
    ],
    "group_index": "90"
}