{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5169-client-script-uri-for-token-contracts/9674",
            "title": "EIP-5169: Client Script URI for Token Contracts ",
            "index": 9674,
            "category": [
                "EIPs"
            ],
            "tags": [
                "token",
                "nft",
                "tokenscript"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesB",
                    "index": "1",
                    "likes": "2",
                    "time": "19/06/2022-11:41:59",
                    "content": "Abstract This EIP provides a contract interface adding a scriptURI() function for locating executable scripts associated with the token. Motivation Often, smart contract authors want to provide some user functionality to their tokens through client scripts. The idea is made popular with function-rich NFTs. It\u2019s important that a token\u2019s contract is linked to its client script, since the client script may carry out trusted tasks such as creating transactions for the user. This EIP allows users to be sure they are using the correct script through the contract by providing a URI to an official script, made available with a call to the token contract itself (scriptURI). This URI can be any RFC 3986-compliant URI, such as a link to an IPFS multihash, GitHub gist, or a cloud storage provider. Each contract implementing this EIP  implements a scriptURI function which returns the download URI to a client script. The script provides a client-side executable to the hosting token. Examples of such a script could be:  A \u2018miniDapp\u2019, which is a cut-down DApp tailored for a single token. A \u2018TokenScript\u2019 which provides TIPS from a browser wallet. An extension that is downloadable to the hardware wallet with an extension framework, such as Ledger.  Script location While the most straightforward solution to facilitate specific script usage associated with NFTs, is clearly to store such a script on the smart contract. However, this has several disadvantages:   The smart contract signing key is needed to make updates, causing the key to become more exposed, as it is used more often.   Updates require smart contract interaction. If frequent updates are needed, smart contract calls can become an expensive hurdle.   Storage fee. If the script is large, updates to the script will be costly. A client script is typically much larger than a smart contract.   For these reasons, storing volatile data, such as token enhancing functionality, on an external resource makes sense. Such an external resource can be either be  hosted centrally, such as through a cloud provider, or privately hosted through a private server, or decentralized hosted, such as the interplanetary filesystem. While centralized storage for a decentralized functionality goes against the ethos of web3, fully decentralized solutions may come with speed, price or space penalties. This ERC handles this by allowing the function scriptURI to return multiple URIs, which could be a mix of centralized, individually hosted and decentralized locations. While this ERC does not dictate the format of the stored script, the script itself could contain pointers to multiple other scripts and data sources, allowing for advanced ways to expand token scripts, such as lazy loading. The handling of the integrity of such secondary data sources is left dependent on the format of the script. For example, HTML format uses the integrity property, while signed XML format has <Manifest/>. Overview With the discussion above in mind, we outline the solution proposed by this ERC. For this purpose, we consider the following variables:   SCPrivKey: The private signing key to administrate a smart contract implementing this ERC. Note that this doesn\u2019t have to be a new key especially added for this ERC. Most smart contracts made today already have an administration key to manage the tokens issued. It can be used to update the scriptURI.   newScriptURI: an array of URIs for different ways to find the client script.   We can describe the life cycle of the scriptURI functionality:  Issuance   The token issuer issues the tokens and a smart contract implementing this ERC, with the admin key for the smart contract being SCPrivKey. The token issuer calls setScriptURI with the scriptURI.   Update scriptURI    The token issuer stores the desired script at all the new URI locations and constructs a new scriptURI structure based on this. The token issuer calls setScriptURI with the new scriptURI structure.   Specification The keywords \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119. We define a scriptURI element using the string[]. Based on this, we define the smart contract interface below: interface IERC5169 {     /// @dev This event emits when the scriptURI is updated,      /// so wallets implementing this interface can update a cached script     event ScriptUpdate(string[] memory newScriptURI);      /// @notice Get the scriptURI for the contract     /// @return The scriptURI     function scriptURI() external view returns(string[] memory);      /// @notice Update the scriptURI      /// emits event ScriptUpdate(scriptURI memory newScriptURI);     function setScriptURI(string[] memory newScriptURI) external; }  The interface MUST be implemented under the following constraints:   The smart contract implementing IERC5169 MUST store variables address owner in its state.   The smart contract implementing IERC5169 MUST set owner=msg.sender in its constructor.   The ScriptUpdate(...) event MUST be emitted when the setScriptURI function updates the scriptURI.   The setScriptURI(...) function MUST validate that owner == msg.sender before executing its logic and updating any state.   The setScriptURI(...) function MUST update its internal state such that currentScriptURI = newScriptURI.   The scriptURI() function MUST return the currentScriptURI state.   The scriptURI() function MAY be implemented as pure or view.   Any user of the script learned from scriptURI MUST validate the script is either at an immutable location, its URI contains its hash digest, or it implements ERC 5169, which asserts authenticity using signatures instead of a digest.    Rationale This method avoids the need for building secure and certified centralized hosting and allows scripts to be hosted anywhere: IPFS, GitHub or cloud storage.  Backwards Compatibility This standard is compatible with all Token standards (ERC20, 721, 777, 1155 etc.)  Examples We here go through a couple of examples of where an authenticated script is relevant for adding additional functionality for tokens.   A Utility NFT is an event ticket and the authenticated script is a JavaScript \u2018minidapp\u2019 which asks the user to sign a challenge message that shows ownership of the key controlling the ticket. The dapp would then render the signature as a QR code which can be scanned by a ticketing app, which could then mark the ticket as used.   Smart Token Labs uses a framework called TokenScript; one element of which is a user interface description for contract interaction through tokens. Consider a simple \u2018mint\u2019 verb associated with an already existing NFT. The associated script can for example allow the owner to mint a derivative through a contract already holding enough ether for the minting fee, without needing to connect their wallet.   An NFT Script which controls a Smartlock. For example consider the lock  being linked to a digital NFT twin and being controlled with the verbs \u201clock\u201d and \u201cunlock\u201d, each of which has an associated JavaScript. Each of these scripts could be executed after the user signs a challenge in a web-view. This is an off-chain example that uses on-chain assets for functionality.    Tests  Test Contract import \"@openzeppelin/contracts/access/Ownable.sol\"; import \"./IERC5169.sol\"; contract ERC5169 is IERC5169, Ownable {     string[] private _scriptURI;     function scriptURI() external view override returns(string[] memory) {         return _scriptURI;     }      function setScriptURI(string[] memory newScriptURI) external onlyOwner override {         _scriptURI = newScriptURI;          emit ScriptUpdate(newScriptURI);     } }   Test case const { expect } = require('chai'); const { BigNumber, Wallet } = require('ethers'); const { ethers, network, getChainId } = require('hardhat');  describe('ERC5169', function () {   before(async function () {     this.ERC5169 = await ethers.getContractFactory('ERC5169');   });    beforeEach(async function () {     // targetNFT     this.erc5169 = await this.ERC5169.deploy();   });    it('Should set script URI', async function () {     const scriptURI = [       'uri1', 'uri2', 'uri3'     ];      await expect(this.erc5169.setScriptURI(scriptURI))       .emit(this.erc5169, 'ScriptUpdate')       .withArgs(scriptURI);          const currentScriptURI = await this.erc5169.scriptURI();      expect(currentScriptURI.toString()).to.be.equal(scriptURI.toString());   });   Security Considerations When a server is involved When the client script does not purely rely on connection to a blockchain node, but also calls server APIs,  the trustworthiness of the server API is called into question. This ERC doesn\u2019t provide the mechanism to assert the authenticity of the API access point. Instead, as long as the client script is trusted, it\u2019s assumed that it can call any server API in order to carry out token functions. This means the client script can mistrust a server API access point. When the scriptURI doesn\u2019t contain integrity (hash) information We separately authored ERC5170 to guide on how to use digital signatures to efficiently and concisely to ensure authenticity and integrity of scripts not stored at an URI which is a digest of the script itself. ",
                    "links": [
                        "https://www.w3.org/TR/xmldsig-core2/#sec-Manifest"
                    ],
                    "GPT-summary": "The post introduces EIP-5169, which proposes a contract interface adding a scriptURI() function for locating executable scripts associated with the token. The post explains the motivation behind the proposal and outlines the solution proposed by the ERC. The post also provides examples of where an authenticated script is relevant for adding additional functionality for tokens. The post also discusses the security considerations related to the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Interoperability and Scalability",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.468845760980593
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesB",
                    "index": "2",
                    "likes": "1",
                    "time": "19/06/2022-12:14:11",
                    "content": "The main purpose of the EIP is to improve functionality for tokens, \u201cmaking tokens smart\u201d. The EIP improves the flow of using tokens when thinking from the token perspective. EG: Alice\u2019s office is operated by a smart lock operated by NFT tokens. Alice wants to collaborate with Bob who will need to use the office. Alice sends Bob an NFT to operate the office door. A wallet which recognises EIP-5169 will use the scriptURI function to download a simple javascript to provide the \u2018unlock\u2019 function, which would consist of an API to provide a challenge which the wallet can do a signPersonalMessage on, and return the signature via an endpoint provided by the script to operate the lock. ERC20 Token A is swappable for Token B, at a rate provided by an endpoint. Token A implements a script which an EIP-5169 enabled wallet can download from the scriptURI in Token A. This script will supply the authorised swap path, even if it\u2019s just a link to a decentralised exchange with the required URI switches. This could make interacting with the tokens simpler and more secure; as assuming Token A is an established token and that we trust the authors we can trust the swap script. Clearly, EIP5169 only applies to new tokens or tokens that can be proxy-updatable. There is an additional proposal EIP5170 which allows authorised scripts to be supplied in any way to existing contracts. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.954064454064454
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "3",
                    "likes": "0",
                    "time": "05/08/2022-17:21:42",
                    "content": "Most EIPs omit set functions, because setting is usually a dapp specific action, while getting needs to be standardized across all dapps so third parties can read the information. I\u2019d omit the setScriptURI function, and simply require that when the script URI changes, ScriptUpdate is emitted. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.291666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesB",
                    "index": "4",
                    "likes": "0",
                    "time": "25/08/2022-06:20:26",
                    "content": "Hi Sam, if the script is hosted on IPFS (without a certificate infrastructure this is the best way to provide a validated script) we\u2019d be unable to update the script without the setScriptURI. It\u2019s intended that the script is stored offchain in much the same way as ERC721\u2019s tokenURI() or contractURI() is usually handled. EDIT: Ok I think I got your point now - the script update could be implemented by the developer in whichever way they like but that method MUST emit the ScriptUpdate event if the script is updated. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.791666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vrypan",
                    "index": "5",
                    "likes": "0",
                    "time": "19/11/2022-10:09:31",
                    "content": "Is there an overlap with EIP 5559? \u201cThe cross chain write deferral protocol provides a mechanism to defer the storage & resolution of mutations to off-chain handlers\u201d ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "6",
                    "likes": "0",
                    "time": "25/02/2023-05:03:15",
                    "content": "The proposal is interesting but I it is easy to work-around it. I can write a perfect smart contract that set correctly the script URI then the script URI points to a dynamic generated file that I can change when I want bypassing any control on the smart contract, fooling the user. I suggest you should force the user to set only URIs that point to immutable files, like on IPFS or Arweave, that can be easily checked in the smart contract. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.6719576719576725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "7",
                    "likes": "0",
                    "time": "09/03/2023-21:31:34",
                    "content": "Hey just came across this interesting EIP. QQ: was it intentional that scriptURI() carries no input parameters? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesB",
                    "index": "8",
                    "likes": "1",
                    "time": "13/03/2023-23:39:59",
                    "content": "Hi @sullof yes that should be covered in the detail of the EIP. You can do 2 approaches:  Store on IPFS, this is accepted as a validated script, because it\u2019s immutable and must be the file that the developer set using the deployment key. Store on FTP: This will be treated as untrusted, unless the script contains a signature from an approved key. This key management system will probably use EAS.  This EIP has a sister EIP which is still in progress: EIP5160 - this provides means to enable trust in the served file, either through a contained signature or separately bundled signature. The implementation is largely left to the implementer but within certain guidelines. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.214285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesB",
                    "index": "9",
                    "likes": "0",
                    "time": "13/03/2023-23:41:04",
                    "content": "Hi @xinbenlv yes it is intentional: there should only be one script per contract. Any nuances between tokenIds should be handled within the script itself. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesB",
                    "index": "10",
                    "likes": "0",
                    "time": "14/03/2023-00:28:07",
                    "content": "    vrypan:  EIP 5559   I hadn\u2019t seen EIP5559 - it looks quite interesting and in theory there is an overlap - it may be possible to achieve 5169 using 5559 but I think 5169 is a lot more focused - it serves a trusted interface script that wallets, applications etc. can quickly check for, whereas 5559 is a catch-all for any offchain and L2 data. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "11",
                    "likes": "0",
                    "time": "22/03/2023-02:50:02",
                    "content": "This EIP is now in \u201cStagnant\u201d status. If you want to continue driving this EIP to final, first step is to send a GitHub PR to move it back to \u201cDraft\u201d and fix all linter errors if needed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JamesB",
                    "index": "12",
                    "likes": "0",
                    "time": "22/03/2023-06:53:32",
                    "content": "Thanks, we will follow that advice - was it the linter issues that prevented it going to \u2018final\u2019 ? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                }
            ]
        }
    ],
    "group_index": "1786"
}