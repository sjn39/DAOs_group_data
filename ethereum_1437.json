{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-3855-push0-instruction/7014",
            "title": "EIP-3855: PUSH0 instruction ",
            "index": 7014,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "evm",
                "opcodes",
                "shanghai-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "4",
                    "time": "06/09/2021-21:09:20",
                    "content": "This is the discussion topic for  Ethereum Improvement Proposals   EIP-3855: PUSH0 instruction Introduce a new instruction which pushes the constant value 0 onto the stack      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-3855"
                    ],
                    "GPT-summary": "The post is an explanation of a proposal for Ethereum Improvement Proposal EIP-3855, which suggests introducing a new instruction that pushes the constant value 0 onto the stack. The post also invites discussion and feedback on the proposal, including questions and constructive criticism.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.340909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "2",
                    "likes": "2",
                    "time": "06/09/2021-22:53:48",
                    "content": "Thank you for putting this forward! I was thinking about the need for a push0 instruction just the other day. Based on your stats, the impact of it is even larger than I expected! Out of curiosity, did you collect stats on any other small numbers, such as 1, 2, and 32? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.479166666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "3",
                    "likes": "1",
                    "time": "07/09/2021-00:25:18",
                    "content": "    Arachnid:  Out of curiosity, did you collect stats on any other small numbers, such as 1, 2, and 32?   We haven\u2019t, but we could do that. Would take a couple of days though. Instead of a special \u201cPUSH 1\u201d, I think something like INC/DEC would be a more interesting instruction, as that has multiple uses, especially around loops and rounding. I think 2 and 32 may be more common, though Solidity does rounding using both 31 and 32, which can also be optimised to a combination of shits. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.5910714285714285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "4",
                    "likes": "0",
                    "time": "07/09/2021-13:35:02",
                    "content": "In the EIP we reason for this opcode:  0x5f means it is in a \u201ccontiguous\u201d space with the rest of the PUSH implementations and potentially could share the implementation.  If this argument is not strong enough, then 0x5c seems like a good alternative choice. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.604166666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "5",
                    "likes": "0",
                    "time": "07/09/2021-20:16:40",
                    "content": "    axic:  Instead of a special \u201cPUSH 1\u201d, I think something like INC/DEC would be a more interesting instruction   So we can do PUSH0 INC instead of PUSH1 1?      axic:  I think 2 and 32 may be more common, though Solidity does rounding using both 31 and 32, which can also be optimised to a combination of shits.   A combination of whatnow? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.557142857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "6",
                    "likes": "0",
                    "time": "07/09/2021-22:18:34",
                    "content": "    Arachnid:      axic:  Instead of a special \u201cPUSH 1\u201d, I think something like INC/DEC would be a more interesting instruction   So we can do PUSH0 INC instead of PUSH1 1?    Yes, isn\u2019t that so much nicer?!  In fairness my hunch is that the constant 1 is mostly used for loops, in the form of PUSH1 1 ADD, so instead of that INC seems better. That is if we are willing to go into the direction of CISC. (PUSH0 is still inspired by the constant 0 register in RISC machines.)     Arachnid:      axic:  I think 2 and 32 may be more common, though Solidity does rounding using both 31 and 32, which can also be optimised to a combination of shits.   A combination of whatnow?   EVM hardcore mode  Discounting the typo, I meant \u201ccombination of shifts and other bitwise instructions\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.221726190476192
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ricmoo",
                    "index": "7",
                    "likes": "1",
                    "time": "08/09/2021-16:34:42",
                    "content": "Love the idea, but maybe we should use a different mnemonic, like IPUSH0 (for immediate) so that if we add others, we have room to grow?  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hugo-dc",
                    "index": "8",
                    "likes": "1",
                    "time": "08/09/2021-21:30:56",
                    "content": "I have posted the results here: https://gist.github.com/hugo-dc/1ca4682d60098282d7e499bdd0b01fca Includes analysis of:  Occurrences of PUSHn opcodes pushing the values 1, 2, 8, 31, and 32. Occurrences of pushing the specific values 1, 2, 8, 31, and 32, by any of the PUSH opcodes. A comparison between PUSH1 for the specific values 1, 2, 8, 31, and 32 vs any other values.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.791666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "9",
                    "likes": "0",
                    "time": "13/09/2021-15:49:56",
                    "content": "My hunch is that the majority of cases using the constant 1 are for-loops. And likely a large number of the uses of the constant 32 is for such loops too, which operate on word sizes. (Though a significant number of occurrences should be for memory operations.) And for these use cases I think this is a better direction to go:     axic:  In fairness my hunch is that the constant 1 is mostly used for loops, in the form of PUSH1 1 ADD, so instead of that INC seems better. That is if we are willing to go into the direction of CISC. (PUSH0 is still inspired by the constant 0 register in RISC machines.)   ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.974702380952381
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dankrad",
                    "index": "10",
                    "likes": "0",
                    "time": "17/09/2021-15:17:42",
                    "content": "My intuition is that saving a 1 byte is a very marginal improvement and needs a pretty strong justification for actually reserving an opcode for it (which are after all limited)? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.811904761904762
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "11",
                    "likes": "1",
                    "time": "17/09/2021-15:56:55",
                    "content": "    dankrad:  My intuition is that saving a 1 byte is a very marginal improvement   It is not only about saving 1 byte. The main motivation is runtime cost and avoiding that contracts use weird optimisations because they have no better option, and that optimisation limiting us in introducing other features. Please read the motivation in the EIP and if it is fails to present convincing points, then we need to improve it.     dankrad:  and needs a pretty strong justification for actually reserving an opcode for it (which are after all limited)?   They are not limited, one can have extension bytes and two-byte opcodes, but even if someone mentally limits it to one byte, then we still have over 100 of them left. Technically speaking all the PUSHn opcodes are not one byte opcodes  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.01155462184874
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "12",
                    "likes": "0",
                    "time": "22/09/2021-17:38:30",
                    "content": "These stats are taken from a histogram of several thousand blocks at the end of last year\u2019s chain.  One-byte pushes account for almost half of the pushes and over 10% of the instructions.  So from @hugo-dc\u2019s numbers about 4% of instructions are PUSH1 0, and about 6% are a push of 1, 2, or 32.     OP Count %     All PUSH 78,137,163 22.94%   PUSH1 37,886,773 11.12%     ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.722222222222222
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ekpyron",
                    "index": "13",
                    "likes": "1",
                    "time": "03/02/2022-19:38:50",
                    "content": "FYI - this would save us some headache for solidity code generation - for once, in some situations we have to create stack balance between branches (we sometimes choose an awkward codesize for doing so\u2026), and apart from that we constantly have to seek balance between keeping zeroes on stack or repushing them, both of which would be made easier, simpler and cleaner using a PUSH0. I\u2019ve even had a draft for an optimizer step once that analysed which code paths are only executed prior to any external call and replaced zeroes with returndatasize in those paths - and considered something similar with callvalue for non-payable functions after their callvalue check - all of which is extremely awkward and it\u2019d be nice to be able to drop crazy ideas like that with this EIP. Not that it\u2019s crucial for us, but definitely a nice-to-have. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.708333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "14",
                    "likes": "0",
                    "time": "09/02/2022-18:59:10",
                    "content": "All PUSH, DUP, and SWAP operations should cost base gas. It\u2019s weird that they don\u2019t. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 1.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "15",
                    "likes": "0",
                    "time": "09/02/2022-22:40:23",
                    "content": "We have some benchmarks about them, and it is not as clear cut. We do plan to share these with some recommendations, but I do not think this strictly is related to this EIP. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "16",
                    "likes": "1",
                    "time": "08/04/2022-14:22:32",
                    "content": "PEEPanEIP-3855: PUSH0 instruction with @axic @chfast @hugo-dc      ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "17",
                    "likes": "0",
                    "time": "13/04/2022-20:30:53",
                    "content": "    axic:  We have some benchmarks about them, and it is not as clear cut. We do plan to share these with some recommendations, but I do not think this strictly is related to this EIP.   It\u2019s related to the motivation, because people are only using those opcodes instead of PUSH0 because they are cheaper. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.125
                }
            ]
        }
    ],
    "group_index": "1437"
}