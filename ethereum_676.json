{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/precompile-for-general-elliptic-curve-linear-combinations/2581",
            "title": "Precompile for general elliptic curve linear combinations ",
            "index": 2581,
            "category": [
                "EIPs"
            ],
            "tags": [
                "security",
                "eip"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "1",
                    "likes": "2",
                    "time": "04/02/2019-07:20:40",
                    "content": "Precompile for Elliptic Curve Linear Combinations EIP here: https://github.com/ethereum/EIPs/blob/af94e5498b9db0ee32f96bdba199a76b138906bc/EIPS/eip-ecmul-precompile.md PR here: https://github.com/ethereum/EIPs/pull/1829 I have removed redundant content posted here. Questions Q4. Accepting points in compressed form adds extra overhead to every call, but allows caller to work with compressed coordinates. Is it worth it? Q5. Cleverness allows you to use this precompile for modular square root. Is it possible to extract a modular inversion? Q6. While a transaction has no assumption of privacy, this could be an issue when used in eth_call. A constant time implementation also allows more code-reuse with applications that require more side-channel protection such as wallets. Should we implement constant time algorithms? Q8. Is it worth exploring some hash to a curve point function or a generic pairing function? References  List of elliptic curve parameters. https://safecurves.cr.yp.to/index.html  Database of optimal addition formulas. http://www.hyperelliptic.org/EFD/index.html  Mater Inc. Rust Finite Field implementation. https://github.com/matterinc/ff/blob/master/src/lib.rs  And Elliptic Curve. https://github.com/matterinc/pairing/blob/master/src/bn256/ec.rs  Parity Finite Field Implementation. https://github.com/paritytech/bigint/blob/master/src/uint.rs  Standards for Efficient Cryptography 1 (SEC 1). http://www.secg.org/sec1-v2.pdf  Weierstrudel implementation of BN254. https://medium.com/aztec-protocol/huffing-for-crypto-with-weierstrudel-9c9568c06901   ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/1829",
                        "https://safecurves.cr.yp.to/index.html",
                        "http://www.hyperelliptic.org/EFD/index.html",
                        "https://github.com/matterinc/ff/blob/master/src/lib.rs",
                        "https://github.com/matterinc/pairing/blob/master/src/bn256/ec.rs",
                        "https://github.com/paritytech/bigint/blob/master/src/uint.rs",
                        "http://www.secg.org/sec1-v2.pdf",
                        "https://medium.com/aztec-protocol/huffing-for-crypto-with-weierstrudel-9c9568c06901",
                        "https://ethereum-magicians.org/t/generalised-precompile-for-elliptic-curve-arithmetics-and-pairings-working-group/3208"
                    ],
                    "GPT-summary": "The post explains a proposal for a precompile for elliptic curve linear combinations and provides links to the EIP and PR. The author also asks several questions related to the proposal, such as whether it is worth accepting points in compressed form and whether a constant time implementation is necessary. The post also includes references to relevant resources.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Privacy, Security and risk management",
                        "Token economics",
                        "Interoperability and Scaleability",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.51923076923077
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "2",
                    "likes": "2",
                    "time": "04/02/2019-12:56:21",
                    "content": "Nice! We do currently collect some precompile ideas under https://github.com/ewasm/ewasm-precompiles/issues, but since the above proposal doesn\u2019t utilise any ewasm-specific behaviour (such as the potential to avoid using the current ABI encoding), I\u2019d suggest the best would be proposing this as an EIP, which can be implemented and tested on ewasm. The other newly implemented precompiles in the ewasm repository all have a corresponding EIP. What do you think? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.978535353535354
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cdetrio",
                    "index": "3",
                    "likes": "2",
                    "time": "04/02/2019-19:09:55",
                    "content": "This seems to be an outline, if fleshed out it would become an EIP. A (the?) major use case for this precompile, if I understand correctly, is for doing Pedersen commitments inside contracts, cheaply. So it would supersede a pedersen commitment precompile. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.15625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "4",
                    "likes": "1",
                    "time": "06/03/2019-12:20:52",
                    "content": "I created a Draft EIP and made a pull request. It links back here for discussion.  @axic  since the above proposal doesn\u2019t utilise any ewasm-specific behaviour (such as the potential to avoid using the current ABI encoding), I\u2019d suggest the best would be proposing this as an EIP, which can be implemented and tested on ewasm  Yes, I realized this and I don\u2019t want to add technical risk to this proposal by making it unnecessarily dependent on eWASM. The current implementation strategy is to use the excellent Rust libraries developed by ZCash and have both native and ewasm as a compilation target. We can then test and compare. It is then up to Node developers to either use the Rust library, native library, webassembly library, or develop their own.  @cdetrio  A (the?) major use case for this precompile, if I understand correctly, is for doing Pedersen commitments inside contracts, cheaply.  The goal of this EIP is to subsume a class of problems, including but not limited to   EWASM issue 25: Pederson commitments for altbn128.  EIP issue 603: ecadd/ecmul for SECP256k1.  EIP665: Ed25519 signature verification. Edit: maybe not, requires Montgomery curve, not short Weierstrass.  EIP196: altbn128 ecadd/ecmul which is inefficient for linear combinations. Existing 256-bit ECDSA signature schemes. New ECDSA Signature schemes used inside proof protocols like S[n/t]arks and. Pederson commitment schemes. BLS Signature aggregation.  All of these would benefit from either 1) allowing generic curves or 2) doing a linear combination. ECRECOVER can also be reimplemented using this proposal, but I doubt that leads to an advantage. ",
                    "links": [
                        "https://github.com/ewasm/ewasm-precompiles/issues/25",
                        "https://github.com/ethereum/EIPs/issues/603",
                        "https://eips.ethereum.org/EIPS/eip-665",
                        "https://eips.ethereum.org/EIPS/eip-196"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.815160533910534
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "5",
                    "likes": "0",
                    "time": "06/03/2019-12:39:28",
                    "content": "@boris What do I do next to get this on the HF agenda? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "6",
                    "likes": "3",
                    "time": "06/03/2019-12:43:53",
                    "content": "Thank you very much for writing this down! I agree that perhaps dependency eWASM is too early to build in. I think the next steps would be to build a proof of concept and generate test cases for this precompile. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.206944444444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "7",
                    "likes": "1",
                    "time": "06/03/2019-13:11:29",
                    "content": "Add it to https://en.ethereum.wiki/roadmap/istanbul I\u2019m going to work with @axic on updating 233. I think we want to see a PR against 1679 to have a \u201cproposed\u201d section that includes your EIP. The wiki can be a placeholder for this or you can go ahead and do the PR now. As we discussed, how you plan to implement \u2014 eg a single C or Rust or ??? implementation that can be linked into clients \u2014 might be good to hear. Client devs will have opinions  (Apologize for lack of links, mashing my phone) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.571428571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "8",
                    "likes": "1",
                    "time": "06/03/2019-13:43:07",
                    "content": "    boris:  The wiki can be a placeholder for this or you can go ahead and do the PR now.   I updated the wiki and submitted a PR on 1679.     boris:  As we discussed, how you plan to implement \u2014 eg a single C or Rust or ??? implementation that can be linked into clients \u2014 might be good to hear. Client devs will have opinions    It\u2019s described in the EIP section Implementation:  There will be a reference implementation in Rust based on the existing libraries (in particular those by ZCash and The Matter Inc.). The reference implementation will be production grade and compile to a native library with a C api and a webassembly version. Node developers are encouraged to use the reference implementation and can use either the rust library, the native C bindings or the webassembly module. Node developers can of course always decide to implement their own.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 6.7440476190476195
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cdetrio",
                    "index": "9",
                    "likes": "1",
                    "time": "06/03/2019-19:19:08",
                    "content": "Great to see a draft EIP! I want to highlight question 8:     Recmo:  Q8. Is it worth exploring some hash to a curve point function or a generic pairing function?   How much would it benefit Pedersen commitments for rollup, to do this computation inside the precompile? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/HarryR",
                    "index": "10",
                    "likes": "3",
                    "time": "11/03/2019-18:12:34",
                    "content": "I started work on a simple implementation for EIP-1829:    GitHub    HarryR/eip-1829 Contribute to HarryR/eip-1829 development by creating an account on GitHub.      Hopefully I will generate some test cases which can verify the functionality and ensure that implementations match each other.  How much would it benefit Pedersen commitments for rollup, to do this computation inside the precompile?  Hash To Curve would be good to add to this builtin, as while you can do Y coordinate recovery using the precompile it would REVERT if you gave it an invalid parameter X coordinate (something you may have to do in a loop several times) - so doing it in practice would be annoying / tedious from Solidity. It isn\u2019t possible to use this builtin for pairing operations, and I don\u2019t think it should be extended for that use case\u2026 ",
                    "links": [
                        "https://github.com/HarryR/eip-1829"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.671875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "11",
                    "likes": "0",
                    "time": "12/03/2019-22:59:02",
                    "content": "Idea: The largest prime less than $2^{256}$ is $2^{256} - 189$. This means the top 189 values can not be valid field elements and we could use them as flag values for the point at infinity, compressed points, or number of tries for try-and-increment value-to-point mapping. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.388888888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "12",
                    "likes": "0",
                    "time": "12/03/2019-23:03:12",
                    "content": "Modular square root only has efficient deterministic algorithms when $p = 3 mod 4$ or $p = 5 mod 8$, which applies to nearly all curves. The algorithms are simple and fail gracefully when $p$ is composite. There are no simple algorithms for other values of $p$. I suggest we disallow any form of point recovery when neither $p = 3 mod 4$ or $p = 5 mod 8$. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.1375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "13",
                    "likes": "1",
                    "time": "14/03/2019-18:28:07",
                    "content": "Questions from eWASM call:  Which practical application (ECDSA, Pederson, Bulletproofs, etc.) are there? How many points and scalars are required for each? Look at EVM-C for the C bindings, there\u2019s also Rust bindings under development.  Questions to eWASM team:  Benchmarking procedure and framework.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "14",
                    "likes": "1",
                    "time": "14/03/2019-18:37:18",
                    "content": " @vbuterin : The thing that has always stopped me from proposing a similar thing is, what happens if someone submits a non-prime modulus? There are different ways to implement elliptic curve addition and multiplication, and in general I don\u2019t expect that the different libraries have been tested to ensure that they fail in the same cases when the modulus ends up being composite, and this seems like a large and deep potential source of consensus failures. Unfortunately primality tests that take into account weird edge cases like Carmichael numbers but are also clean and efficient don\u2019t really exist.  So if the modulus is composite you end up with a Ring instead of a Field. The only difference being that inversion fails on more values than just zero. Elliptic curve linear combinations, when implemented in the standard efficient way using Jacobi coordinates use only Ring operations (i.e. no inversion). So the whole computation is safe. What will go wrong is converting back to Affine coordinates, which requires a single inversion. If this inversion fails, this would normally indicate the point at infinity. No new control flow. No edge cases being hit harder than otherwise, except for the last one. Garbage in, garbage out still applies of course. Throw in a composite modulus and the thing you are computing is not guaranteed to be an elliptic curve. Existing libraries do not seem particularly useful here. Most are designed for a particular curve. The remaining ones are mostly for research purposes and are not security hardened. (They would rely on probabilistic algorithms like Miller-Rabin or Tonelli\u2013Shanks). The current implementation strategy is to develop a Rust library specific for this EIP which is generic and efficient, but only uses deterministic algorithms. This library will be available as Rust, C bindings and a eWASM module. Currently the design allows you to use compressed coordinates as input. This gives developers some advantages, but requires us to compute modular square roots. Modular square root has similar issues as inversion. Simple deterministic procedures involving only Ring operations exist when p = 3 mod 4 or p = 5 mod 8 . Most field moduli used in practice satisfy this by design. My current thinking is to simply reject compressed coordinates when the field modulus does not satisfy and make compressed points optional. Lastly, there\u2019s a feature request to do a form of hash-to-curve point. I think this can be incorporated elegantly and safely as well. I\u2019ll update the EIP soon to incorporate these ideas. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.276327414082516
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "15",
                    "likes": "0",
                    "time": "14/03/2019-18:37:46",
                    "content": "The EVMC Rust bindings are here: https://github.com/ethereum/evmc/tree/master/bindings/rust The evmc-vm crate will provide an API for \u201cVMs\u201d to implement. @chfast and I are considering to provide precompiles as EVMC modules to be used with aleth. If this works out, it would be possible to also provide EIP1829 as an EVMC module.     Recmo:  Benchmarking procedure and framework.   Some of that is available in https://github.com/ewasm/benchmarking, but @cdetrio will need to publish the framework he has been using. For creating ewasm contracts, please have a look at https://github.com/ewasm/ewasm-rust-api. ",
                    "links": [
                        "https://github.com/ewasm/benchmarking",
                        "https://github.com/ewasm/ewasm-rust-api"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "16",
                    "likes": "0",
                    "time": "15/03/2019-01:33:09",
                    "content": "Ah, I see. If the edge cases are that manageable, then I suppose it could work.     Recmo:  Existing libraries do not seem particularly useful here. Most are designed for a particular curve.   I think py_ecc might actually be generic enough to implement this fairly easily, or at least with a few tweaks. So there\u2019s at least one other thing that the rust library could be checked against. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.023148148148148
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "17",
                    "likes": "0",
                    "time": "15/03/2019-10:32:41",
                    "content": "@Recmo Montgomery form (and implementations are likely to use it) is not defined in case of GCD != 1. But garbage in - garbage out should work. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "18",
                    "likes": "1",
                    "time": "12/04/2019-07:17:14",
                    "content": "In addition to the separate Telegram chat I also post a link here, cause now this implementation is at the point where more help is needed with test vectors and pricing, then in actual implementation. For the code here https://github.com/matter-labs/eip1829/tree/pairings the following works:  runtime curve creation check on curve add two points multiply single point by a scalar (double-and-add or wnaf) multiexponentiation (trivial and peppinger) extension towers pairings for BLS12 family  There is a set of benchmarks, but only for quite limited set of curves. Can support fields of arbitrary size in principle. Limitations:  have to specify scalar field size for a curve (needed to try Ben-Coster algorithm, didn\u2019t work out) field elements larger than a field are errors scalars larger than an order are errors only fields up to 319 bits are supported, but this only requires to extend a \u201cswitch\u201d statement further  Plans:  pairings for BN, MNT4 and MNT6. May be KSS too cleanup by removing a scalar fields check if pairings for Cocks-Pinch method generated curves can be easily implemented chose multiexp and multiplication methods based on benchmarks implement Twisted Edwards arithmetics (this one is trivial, but low priority)  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.063492063492063
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "19",
                    "likes": "0",
                    "time": "12/04/2019-14:51:30",
                    "content": "Was just looking through the EIP. I couldn\u2019t quite figure out what the gas cost calculation/specification is? Could you clarify that in the EIP \u2013 the eip should be a full specification, and it\u2019s currently lacking that. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/virgil",
                    "index": "20",
                    "likes": "0",
                    "time": "27/04/2019-08:43:13",
                    "content": "In the recent Core Devs Call, I said that ENS would like to have one of these precompiles:  https://eips.ethereum.org/EIPS/eip-665 https://eips.ethereum.org/EIPS/eip-1829  Where EIP1829 is a superset of EIP665.  Based on meeting feedback, my current understanding is that:  EIP665 is ready-to-go but not obviously worth including. EIP1829 is not ready-to-go but is reasonably likely to be accepted at some future point.  Although it would obviously be welcome, ENS doesn\u2019t need this to go into Istanbul.  Ergo, if it\u2019s plausible that EIP1829 will go in at some point, we have no need for EIP665 and ENS will patiently wait for EIP1829. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-1829"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving feedback on proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.821428571428572
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/virgil",
                    "index": "21",
                    "likes": "1",
                    "time": "27/04/2019-08:47:20",
                    "content": "An unrelated aside, given this is fairly complex crypto, I suggest writing this library in conjunction with Hyperledger Ursa.  https://www.hyperledger.org/projects/ursa Although I am completely confident in our ability to do a bug-free implementation this EIP, Ursa is very interested in becoming a generic library for everyone (including Ethereum).  And given IBM/Hyperledger willingness to put substantial resources behind the Ursa project, it seems pro-social as well as financially sensible to avail ourselves to their generosity. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party suggesting collaboration on proposal",
                        "3rd party giving positive feedback on proposal"
                    ],
                    "Sentiment": 5.410714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "22",
                    "likes": "0",
                    "time": "27/04/2019-13:37:02",
                    "content": "Thanks Virgil. I had a good chat with the Burrow folks and will touch base with them. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.166666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "23",
                    "likes": "0",
                    "time": "20/07/2019-04:46:58",
                    "content": "The EIP linked in the original post of this thread is a 404. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DDT",
                    "index": "24",
                    "likes": "2",
                    "time": "04/08/2020-13:08:39",
                    "content": "Is there a link to a github repository? I would like to contribute on this issue, but I don\u2019t know where to start.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "676"
}