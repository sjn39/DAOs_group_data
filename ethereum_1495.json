{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-4399-supplant-difficulty-opcode-with-random/7368",
            "title": "EIP-4399: Supplant DIFFICULTY opcode with RANDOM ",
            "index": 7368,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "eth1-eth2-merge"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "1",
                    "likes": "2",
                    "time": "30/10/2021-06:52:57",
                    "content": "This is the discussion topic for EIP-4399: Supplant DIFFICULTY opcode with RANDOM. This EIP proposes to supplant the DIFFICULTY opcode with the RANDOM opcode within the upgrade to PoS (a.k.a. the Merge)   github.com/ethereum/EIPs         EIP-4399: Supplant DIFFICULTY opcode with RANDOM   ethereum:master \u2190 mkalinin:eip-4398            opened 06:45AM - 30 Oct 21 UTC               mkalinin             +110 -0       A proposal to supplant the `DIFFICULTY` opcode with the `RANDOM` opcode during t\u2026he upgrade to PoS (a.k.a. the Merge): - enshrine the output of the beacon chain randomness beacon into the block header structure by supplanting the value of the deprecated `mixHash` field - make the instruction with the number of the `DIFFICULTY` opcode return the value of the `mixHash` field - rename the `mixHash` field and the `DIFFICULTY` opcode to `random` field and `RANDOM` opcode respectively       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/4399",
                        "https://github.com/mkalinin",
                        "https://github.com/ethereum/EIPs/pull/4399/files",
                        "https://github.com/ethereum/EIPs/pull/4399",
                        "https://ethereum-magicians.org/t/eip-4788-beacon-state-root-in-evm/8281/6",
                        "https://ethereum-magicians.org/t/eip-4399-how-to-use-prevrandao-in-evm/10905/2"
                    ],
                    "GPT-summary": "The post is a proposal to replace the `DIFFICULTY` opcode with the `RANDOM` opcode during the upgrade to PoS. The proposal suggests enshrining the output of the beacon chain randomness beacon into the block header structure and renaming the `mixHash` field and the `DIFFICULTY` opcode to `random` field and `RANDOM` opcode respectively. The post is not seeking feedback or advertising the proposal, but rather explaining the proposal and answering questions about it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Not a proposal"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 2.8125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "2",
                    "likes": "1",
                    "time": "08/11/2021-01:40:13",
                    "content": "I think strong consideration should be given to adding a new RANDOM opcode instead of replacing the DIFFICULTY opcode.  When writing solidity contracts that use the difficulty and random field it would make it easier to audit when code may depend on the semantics of one over the other. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.444696969696969
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "3",
                    "likes": "0",
                    "time": "08/11/2021-10:49:17",
                    "content": "The changes introduced by this EIP are applied beginning with TRANSITION_POS_BLOCK (the first PoS block in the network). Beginning with TRANSITION_POS_BLOCK, the DIFFICULTY opcode will start to return 0 as per the deprecation of the difficulty field introduced by EIP-3675. The idea of preserving the DIFFICULTY instruction number for the new RANDOM opcode is in removing backwards incompatible change introduced by EIP-3675 with respect to existing smart contracts. Existing smart contracts will be able to use the EVM instruction with the same number as a source of randomness outputs disregarding the Merge has happened or not. Although, they will have to take in account the change in the size and the nature of these outputs post-Merge as it\u2019s stated in the EIP. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.582096474953618
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PatrickAlphaC",
                    "index": "4",
                    "likes": "0",
                    "time": "08/11/2021-22:28:55",
                    "content": "This improvement seems like it will lead developers down a disingenuous path. As I understand it, the current method of randomness in ETH 2 is RANDAO (correct me if I\u2019m wrong). This would mean:  We are baking an application built on top of ETH into ETH itself (seems incorrect) We are leaking a potential security vulnerability to developers. One hack of the DAO and every application using this randomness is potentially corrupted. Additionally, we\u2019ve seem hacks perivously of people using block.difficulty so changing the name I\u2019m not sure makes sense on ETH 1 either. See a previous hack. Obviously, something like this is not even in consideration for ETH 1, since it would give the miners too much power.  Imagine someone being able to hack every single randomness-based application on ETH, lotteries, raffles, etc in a single go. Like a defi protocal hack times infinity. We are talking billions of dollars here. Seems like a small change, but I think the naming convention would be drastically misleading, and a massive threat to the entire system. This is my current understanding, but maybe I\u2019m missing something. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal (although the post itself is not advertising)",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.7953738512949045
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "5",
                    "likes": "1",
                    "time": "09/11/2021-06:36:15",
                    "content": "The mechanism of accumulating randomness in the beacon chain is inspired by the RANDAO, there is no DAO that is used to obtain randomness seeds. The detailed explanation of how does it work in the beacon chain is here. The power of each validator with respect to the randao computation is significantly limited on the beacon chain. Security Considerations section of the EIP states that the randomness output that is exposed by the RANDOM opcode becomes known to network participants when the parent block gets published, application developers MUST take this into consideration. In that regard the new opcode doesn\u2019t differ much from the DIFFICULTY as block.difficulty is known to the miner of the block in advance and should there be an incentive the difficulty value could easily be shared or even sold. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-4399#security-considerations"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.498556998556998
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/alexroan",
                    "index": "6",
                    "likes": "2",
                    "time": "09/11/2021-09:54:43",
                    "content": "Since DIFFICULTY will not return anything meaningful in POS (there is no block difficulty in POS), contracts that use block.difficulty will break after the merge. Therefore, the DIFFICULTY opcode has to be changed to return something. So the question becomes, \u201cWhat do we replace it with?\u201d. The EIP states that:  Given prior analysis on the usage of DIFFICULTY, the value returned by the opcode mixed with other values is a common pattern used by smart contracts to obtain randomness.  In other words, given that pseudo-randomness generation is the most common use of block.difficulty in contracts, and pseudo-randomness is generated as part of the beacon chain, changing DIFFICULTY to return the RANDOM value is reasonable for backwards compatibility. Furthermore, under \u201cSecurity Considerations\u201d, it states:  The RANDOM opcode in the PoS network should be considered as a source of randomness output of a higher strength than the output provided by either the BLOCKHASH or the DIFFICULTY opcode in the PoW network. However, the randomness output returned by the RANDOM opcode is revealed to the network within the parent block.  So if anything, it\u2019s slightly improving the pseudo-randomness generated in contracts using block.difficulty. However, it\u2019s still not a true source of randomness in much the same way as block.difficulty is not. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.770171957671957
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PatrickAlphaC",
                    "index": "7",
                    "likes": "0",
                    "time": "12/11/2021-19:41:57",
                    "content": "Thanks for the context Alex, and thanks for the info @mkalinin. It sounds like PRANDOM would be a better opcode then since this is a pseudo-randomness method. I think having the opcode be purely RANDOM would be incredibly dangerous. I\u2019ve seen enough hacks from projects thinking that the difficulty is a secure method of randomness, and I\u2019d rather not bake a bad practice into Ethereum. Ideally, we choose a different name entirely. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.181818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "8",
                    "likes": "1",
                    "time": "15/11/2021-09:46:46",
                    "content": "I don\u2019t think that adding a P prefix to the name of this opcode changes anything. Careful implementer like you are would read and grok all the implications before using a thing. Others would rely on DIFFICULTY and BLOCKHASH as a source of randomness (thinking that they are strong enough) despite of warnings made here and there. Additionally, is there a system that uses true randomness? It seems like pseudo randomness is used in most of the cases. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.183333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PatrickAlphaC",
                    "index": "9",
                    "likes": "0",
                    "time": "16/11/2021-17:05:27",
                    "content": "\u201cCareful implementer like you\u201d I don\u2019t think we should be implementing conventions that make things more complicated. Developer experience is death by 1,000 cuts, and this is one of those things that could be easily avoided. \u201cOh wait, the RANDOM opcode isn\u2019t actually random?\u201d I\u2019d really rather us not introduce concepts that are confusing. And yes, there are systems that use True randomness like Chainlink VRF. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.114583333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "10",
                    "likes": "1",
                    "time": "17/11/2021-09:02:05",
                    "content": "VRF is pseudo-random by its definition. In the beacon chain what is called randao_reveal is basically the output of VRF. And the output that is proposed to be exposed in the EVM is a mix of VRF outputs of different oracles for millions of slots starting from genesis. There are two weaknesses. 1) validator may skip its reveal by refusing to propose a block and reduce the strength of the output by a bit 2) privacy issue, randao_reveal hence accumulated randomness output becomes known to the validator in a slight advance. These two weaknesses are presented in Chainlink VRF as well. There is no issue with respect to the pseudo-random nature of the output. And I don\u2019t understand how P prefix or any other prefixes would emphasise the existing weaknesses. They should be written in the spec and learned by developers who is going to use it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.635416666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PatrickAlphaC",
                    "index": "11",
                    "likes": "1",
                    "time": "17/11/2021-14:20:50",
                    "content": " They should be written in the spec and learned by developers who is going to use it.  I think we will just disagree on that point and see what others think. To me, it seems naming something that we know to be misleading is counterproductive. As per your two points against Chainlink VRF, this may be true in the current implementation, but new versions are being worked on, including threshold signatures which will remove these weaknesses, and other similar devices could also be created that are better versions of randomness for smart contracts than those built into the ETH system. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.768320964749536
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/haltman-at",
                    "index": "12",
                    "likes": "0",
                    "time": "03/12/2021-02:58:20",
                    "content": "So, I\u2019m wondering what disassemblers and debugging tools should report on seeing this opcode.  This isn\u2019t the first time an opcode has been renamed, but it\u2019s the first time it\u2019s been renamed to something with such a different meaning.  It\u2019s like, are these tools now going to have to be aware of what hardfork a given contract was written for\u2026? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "13",
                    "likes": "0",
                    "time": "14/01/2022-18:06:15",
                    "content": "An overview of the proposal by @mkalinin EIP-4399: Supplant DIFFICULTY opcode with RANDOM      ",
                    "links": [
                        "https://www.youtube.com/watch?v=wwfOqmCbPNU"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 2.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/haltman-at",
                    "index": "14",
                    "likes": "0",
                    "time": "21/01/2022-14:45:31",
                    "content": "Oh, here\u2019s a possibility: What if a duplicate opcode were added?  That could solve the tooling issue. Suppose that 0x44 is changed from returning difficulty to returning random, but also, 0x49 were added which would have exactly the same function.  Then we could have 0x49 be called RANDOM, while 0x44 would continue to be called DIFFICULTY (even though it would actually also return random), and post-merge compilers would make a point to use 0x49 for random. I\u2019d like to propose this as a solution to the problem. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 3.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/a2468834",
                    "index": "15",
                    "likes": "0",
                    "time": "25/01/2022-15:53:13",
                    "content": "I agree with the idea that adding another opcode RANDOM rather removing/replacing DIFFICULTY. (Keeping compiler/opcode set backward compatible is important!) However according to EIP-3675, after \u201cthe merge\u201d phase, the block field difficulty should return a constant value 0. So, I believe that letting only RANDOM returns (pseudo-) random numbers could be more suitable. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.03125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "16",
                    "likes": "0",
                    "time": "17/02/2022-07:51:21",
                    "content": "There is an RFC to reconsider the opcode name and probably use anything else than RANDOM: Beacon chain RANDAO mixes are much less biasable than difficulty and blockHash values in PoW network. But they are still biasable up to a limited extent which is expanded in the Security Considerations section of the EIP. One of nice to have things limiting biasability is to have a RANDOM(n) instruction, where n is a slot number, which returns a RANDAO mix produced in a specified slot disregarding whether this slot is empty or not (if empty, RANDAO mix from latest non-empty slot is returned). It prevents an attack where proposer/builder pushes back transaction that rolls the dice until a mix with desired outcome is met. Security properties of return value of this instruction may be hardened up by returning a recent VDF result. So, we might want RANDOM instruction to have a parameter in the future and this is where the RANDOM name proposed in EIP-4399 may become a source of confusion. Options:  Keep DIFFICULTY -> RANDOM renaming, and name the future opcode if that need be SECURE_RANDOM(n) or RANDOM2(n) (the latter is a sort of a joke as it looks terrible). Or any reserve any other name for the future \u2013 we have a plenty of time for this Rename DIFFICULTY -> ?, we need to define ? in the next few days. RANDOM stays reserved for the future Keep DIFFICULTY to reflect how difficult it is to pick up a name  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.203674948240166
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "17",
                    "likes": "0",
                    "time": "17/02/2022-08:18:38",
                    "content": "I recommend something like BARELY_RANDOM, RANDOMISH, SORTA_RANDOM, etc. for the colloquial rename of DIFFICULTY.  The reason for this is because it is nearly impossible to securely use this opcode as a source of randomness in any real-world setting, and that should be made very clear to any developer.  If we introduce RANDOM(n) in the future like @mkalinin suggests, then we can have something that can be secure if used appropriately (especially when combined with VDFs). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.219444444444444
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/yperbasis",
                    "index": "18",
                    "likes": "0",
                    "time": "17/02/2022-08:31:32",
                    "content": "WEAK_RANDOM perhaps? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "19",
                    "likes": "0",
                    "time": "17/02/2022-08:47:41",
                    "content": "This is certainly better than RANDOM, but I do worry that it is used too frequently in computer science to just mean \u201cpseudo-random\u201d which these days means \u201cpretty good random, but not as good as radioactive decay\u201d.  In this case what we have is far far far worse than that. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.267045454545455
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "20",
                    "likes": "0",
                    "time": "17/02/2022-09:35:06",
                    "content": "Why not just keep it as DIFFICULTY and call it a day? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "21",
                    "likes": "0",
                    "time": "17/02/2022-10:19:11",
                    "content": "I think keeping DIFFICULTY is a reasonable option, though I do worry that people will colloquially name it RANDOM if we don\u2019t give them an alternative. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "22",
                    "likes": "0",
                    "time": "17/02/2022-10:22:45",
                    "content": "Renaming and clarifying behaviours is at best effort basis and the broader ecosystem can start calling it as they like despite all the efforts put in there. Perhaps having an EIP in CFI for the \u201creal\u201d RANDOM instruction @mkalinin describes would be a good deterrent from others starting to call this one RANDOM? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.699999999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "23",
                    "likes": "0",
                    "time": "18/02/2022-05:04:42",
                    "content": "    axic:  Renaming and clarifying behaviours is at best effort basis and the broader ecosystem can start calling it as they like despite all the efforts put in there.   While I agree that we don\u2019t have any direct power to control the colloquial naming here, I do think that we have quite a bit of indirect power.  If we name an opcode X in the specification, it is almost certain that Solidity will use that name, and various EVM documentation sources will use that name.  This will result in people seeing X in all of the places they look, and that becomes a defacto shelling point for communication. If we continue to call this DIFFICULTY, there is a chance that people pick a new more appropriate name colloquially because DIFFICULTY is definitely wrong.  For example, Solidity may decide to name it RANDOM or EVM docs may name it DIFFICULTY (RANDOM) or something.  This has potential to lead to people using it incorrectly compared to if we call it NOT_RANDOM or whatever in the specification (and that then propagates out). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.43211334120425
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "24",
                    "likes": "1",
                    "time": "18/02/2022-12:16:07",
                    "content": "    mkalinin:  One of nice to have things limiting biasability is to have a RANDOM(n) instruction, where n is a slot number, which returns a RANDAO mix produced in a specified slot disregarding whether this slot is empty or not (if empty, RANDAO mix from latest non-empty slot is returned). It prevents an attack where proposer/builder pushes back transaction that rolls the dice until a mix with desired outcome is met. Security properties of return value of this instruction may be hardened up by returning a recent VDF result.   How about the following:  Introduce BEACONSLOT for querying the current slot number Introduce RANDAO(n) for querying the nth slot Name DIFFICULTY  as LASTRANDAO, and make it an alias of RANDAO(BEACONSLOT)   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.5625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "25",
                    "likes": "0",
                    "time": "18/02/2022-13:43:19",
                    "content": "LASTRANDAO would technically be RANDAO(BEACONSLOT-1), and if that was an empty slot then it would be RANDAO(BEACONSLOT-2), etc. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "26",
                    "likes": "0",
                    "time": "18/02/2022-14:03:35",
                    "content": "Yes, I took the liberty to not duplicate the older explanation  I assumed that LASTRANDAO will do the \u201cfind latest valid randao\u201d lookup, but RANDAO(n) returns 0 on missing slot. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.777777777777777
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "27",
                    "likes": "0",
                    "time": "18/02/2022-15:07:24",
                    "content": "On ACD#132 the PREVRANDAO name was agreed on. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/connorwstein",
                    "index": "28",
                    "likes": "0",
                    "time": "14/03/2022-17:47:02",
                    "content": "@mkalinin Could you articulate the security difference between PREVRANDAO in eth2 and BLOCKHASH in eth1? It seems like they are both biasable in the same way: an attack gets the option to throw away a number of non-advantageous blocks the more capital (bribing or increasing stake/hashpower) they have. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "29",
                    "likes": "0",
                    "time": "15/03/2022-08:28:54",
                    "content": "This is largely true.  There is an additional new attack vector as well though in that someone who produces multiple blocks in a row can know what a future RANDAO will be, and the more consecutive blocks in a row they produce (or collude with), the more foresight they have.  Missing blocks can break this chain.  It also means that someone who produces multiple blocks in a row can, in advance, try out different combinations of missing blocks to see what works out best for them in terms of future RANDAO generation. On the flip side, there are no longer uncle blocks which means block producers who entirely miss their slot don\u2019t get just a 1/16+fees decrease in block reward, they miss the whole block reward plus fees. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.816558441558442
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/connorwstein",
                    "index": "30",
                    "likes": "0",
                    "time": "15/03/2022-16:41:43",
                    "content": " additional new attack vector as well though in that someone who produces multiple blocks in a row can know what a future RANDAO will be, and the more consecutive blocks in a row they produce (or collude with), the more foresight they have  I\u2019m not sure how that is different from a miner in eth1 producing a chain of mined blocks? That miner knows the \u201cfuture\u201d blockhash.  It also means that someone who produces multiple blocks in a row can, in advance, try out different combinations of missing blocks  This does indeed seem like a unique PoS attack vector. In PoW a miner controlling majority hash power for some period of time has to commit to a particular string of blocks ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.511679292929292
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "31",
                    "likes": "1",
                    "time": "15/03/2022-18:56:17",
                    "content": "    connorwstein:  I\u2019m not sure how that is different from a miner in eth1 producing a chain of mined blocks? That miner knows the \u201cfuture\u201d blockhash.   Under PoW, the miner would have to shadow mine a long chain and then throw it away (or at least uncle it) if it doesn\u2019t pan out, and they cannot pragmatically gain that information faster than the chain would advance to that point naturally.  Under PoS, the validator can just spend 100ms to see what the future RANDAO would be.  It costs them nothing to read future random numbers (limited to the number of blocks in a row that they have access to the proposer of). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.404761904761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "32",
                    "likes": "1",
                    "time": "16/03/2022-09:22:26",
                    "content": " Under PoW, the miner would have to shadow mine a long chain and then throw it away (or at least uncle it) if it doesn\u2019t pan out  A miner may get a chance to mine 2-3 canonical blocks in a row, it depends on its hashpower, how lucky it is, and a network delay. It\u2019s not necessarily needed to be thrown or uncled in the end. Likewise, a staker may get the same chance and if there is no desirable payout in any combination of empty slots it may induce, it may just propose blocks in a regular fashion. In general, assuming the chance of a party to produce n consecutive canonical blocks in a row is equal in PoW and PoS networks, the party gains n bits of influence power disregarding the network, i.e. from this perspective an attack looks pretty similar in both networks. Though, the size of a capital required to reach a certain probability to produce n blocks in a row and factors influencing this size depend a lot on the type of the network. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.165674603174604
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bliss",
                    "index": "33",
                    "likes": "1",
                    "time": "13/04/2022-10:00:47",
                    "content": "If we really want a proper name why just not use PSEUDO_RANDOM, it tells us exactly what we need to know about the behavior of OPCODE.  I would agree that it would be hard to believe anybody using opcodes and doesn\u2019t really understand what it does and how it works, so just RANDOM would also be fine.  Could imagine people using it on solidty/vyper should have more descriptive naming, then again even there it\u2019s hard to imagine someone doing proper work and not learning what it really is. My conclusion is this looks a lot like bikeshedding  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.3106060606060606
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "34",
                    "likes": "1",
                    "time": "13/04/2022-11:05:07",
                    "content": "We have decided on the PREVRANDAO name which is exactly what this operation does return. This also should incentivise users to look a bit under the hood of what the RANDAO is and what implications of using prev RANDAO are. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "35",
                    "likes": "0",
                    "time": "13/04/2022-17:27:22",
                    "content": "    bliss:  If we really want a proper name why just not use PSEUDO_RANDOM, it tells us exactly what we need to know about the behavior of OPCODE.   Pseudorandom has been overused (IMO) as it basically means, \u201canything where humans don\u2019t know the generation algorithm\u201d or \u201chumans don\u2019t know the sequence\u201d.  The problem is that this means most engineers treat pseudorandom and random the same, because pragmatically they are the same in most use cases that anyone cares about. The problem here is that we want to make it abundantly clear to developers that they should not be naively using this to generate random numbers that are secure against attack.  By naming it prevrandom, it hopefully will make it more clear that this is a previously known value.     bliss:  it\u2019s hard to imagine someone doing proper work and not learning what it really is.   You clearly haven\u2019t spent the last 5 years auditing contract code.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.236111111111112
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bliss",
                    "index": "36",
                    "likes": "0",
                    "time": "13/04/2022-20:21:51",
                    "content": "Naming things is hard  When I read prevrandao it was last thing on my mind it was meant as previous, I found it hard to read, basically it\u2019s combo of previous, random and dao, I give it 0 chance new ppl will know what it means or could mean just by first time seeing it.  Most recognizable part is DAO and it gives the least meaning to what this op code is.  Just my 2 cents on it, hope it works out, at least I learned what it is, hopefully, others have smoother DX. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.541229603729604
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Ernesto",
                    "index": "37",
                    "likes": "0",
                    "time": "18/08/2022-15:34:18",
                    "content": "I find Tips for application developers confusing: In section: \u201cMake your applications rely on the future randomness with a reasonably high lookahead. For example, an application stops accepting bids at the end of epoch K and uses a RANDAO mix produced in slot K + N + \u03b5 to roll the dice, where N is a lookahead in epochs and \u03b5 is a few slots into epoch N + 1.\u201d You are adding elements with different units, epochs (K and N) and slots (\u03b5),  in \u201cK + N + \u03b5\u201d. Should not it be?: \u201cMake your applications rely on the future randomness with a reasonably high lookahead. For example, an application stops accepting bids at the end of epoch K and uses a RANDAO mix produced in slot (K+1)*32 + N*32 + \u03b5 to roll the dice, where N is a lookahead in epochs and \u03b5 is a few slots into epoch K + N + 1.\u201d ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.7625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "38",
                    "likes": "0",
                    "time": "19/09/2022-02:24:19",
                    "content": "From my understanding PREVRANDAO @ slot n =  \uff08PREVRANDAO  @ slot n -1 \uff09XOR\uff08 RANDAO Reveal of the slot n-1 proposer  \uff09 (Correct me if I was wrong @mkalinin ). Normally developers use the method below as the random source of their dapps blockhash(uint blockNumber) returns (bytes32)? Hence, adding a similar function RANDAO(n)  in EIP-4399 to support retrieving the RANDAO value is indispensable. Only the current slot PREVRANDAO value is not working for solidity developers. Btw, the slot number n is available in evm now? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.96875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "39",
                    "likes": "0",
                    "time": "19/09/2022-10:33:32",
                    "content": "The formula would be PREVRANDAO[n] = PREVRANDAO[n-1] XOR (SHA256(RANDAO_REVEAL(n-1)), source. But I would not recommend to rely on this formula in smart contracts as it may be changed in the future. The slot number is not available now. EIP-4399 introduced as few changes as it was possible and RANDAO(n) is considered to be implemented at some point (yet undefined) it time ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.814285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "40",
                    "likes": "0",
                    "time": "19/09/2022-11:21:25",
                    "content": "Thank you for the explanation. So, the PREVRANDAO value is the first param (get_randao_mix(state, epoch)) in the following formula, source mix = xor(get_randao_mix(state, epoch), hash(body.randao_reveal)) But why not just return the mix value as the randomness in evm? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "41",
                    "likes": "0",
                    "time": "19/09/2022-14:21:50",
                    "content": "A mix value of the previous block is returned. If we\u2019d return this value from current block then block builders would have to get the reveal in advance (which is insecure) to be able to build a block while the previous value is available on chain. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.055555555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "42",
                    "likes": "0",
                    "time": "21/09/2022-05:30:29",
                    "content": "oh, I see, the insecure attack vectors come from the MEV-boost, PBS. Hope to see the RANDAO(n) function supported in evm and solidity as soon as possible. Only in this way, the PREVRANAO value could be used by dapps. How about we start drafting now\uff1f ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 4.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "43",
                    "likes": "0",
                    "time": "21/09/2022-08:15:24",
                    "content": "What vector are you referring to? Usage of the PREVRANDAO opcode has its security implications but I would not say this operation is completely useless, could you elaborate on that? ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "44",
                    "likes": "0",
                    "time": "23/09/2022-11:33:25",
                    "content": "  From my point of view, the insecurity of revealing in advance is, it would incur attacks like DoS from the block builder.   Suppose we have a lottery dapp which contains two methods: roll and claim. Alice roll the dice @ slot n, and we use the K + N + \u03b5 slot PREVRANDAO as the randomness. But if we have only have PREVRANAO, how to claim rewards?  You can get this randao value only when the proposer is propose the  K + N + \u03b5 slot.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "45",
                    "likes": "0",
                    "time": "24/09/2022-06:55:13",
                    "content": "The randao mix is known multiple blocks in advance to a proposer or colluding set of proposers who are proposing sequential blocks.  An entity who has 50% of validator share, for example, has a 100% chance of knowing the randao mix as soon as the previous block is published, a 50% chance of knowing it when the block before that is published, a 25% chance of knowing it when the block before that is published, etc. For frequent games, the liklihood of a proposer knowing the mix in advance for at least one iteration of the game can get quite high.  For this reason, you should always separate the \u201cbet\u201d and the \u201croll\u201d by a significant number of blocks. Also, keep in mind that for high stakes games, it may be worthwhile for an attacker to skip producing a block they know will be a loser (sacrificing fees and block reward) in exchange for getting a second chance at rolling the die.  For a block proposer who is proposing two blocks in a row where the \u201croll\u201d is scheduled for the first block, they can choose between two rolls by choosing to sacrifice the first block (missed slot) or publishing the first block. For all of these reasons, one must take extreme care when using randao mix for randomness on chain.  It has utility in some cases, but it is exploitable by block producers in various ways and you should ensure that the profit of exploitation is lower than the opportunity cost (skipped blocks). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.351111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "46",
                    "likes": "0",
                    "time": "01/10/2022-02:00:48",
                    "content": "Thanks for your tips. I\u2019ve noticed these risks already. My question is how dapps can make use of the RANDAO value technically if the RANDAO(n) function has not been supported? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "47",
                    "likes": "0",
                    "time": "01/10/2022-08:25:05",
                    "content": "Ah, you would only be able to require that the randomness is used at least n blocks in the future.  Since you can\u2019t get historical randao values, you will have to settle for \u201cthe randao value of whatever block the transaction was included in\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.2
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "48",
                    "likes": "0",
                    "time": "12/10/2022-02:25:57",
                    "content": "yeah, that\u2019s the problem. Take the lottery Dapp as an example. When you try to claim the rewards in slot n, you are gonna use the slot n randao value which actually has been revealed to all users before slot n. Cuz, users just need to calcuate the value according to PREVRANDAO[n] = PREVRANDAO[n-1] XOR (SHA256(RANDAO_REVEAL(n-1)). Attackers just need to wait for the right randao value to claim the lottery rewards for sure. That\u2019s why the RANDAO(n)  function is indispensable for security in my opnion. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.482142857142858
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "49",
                    "likes": "0",
                    "time": "12/10/2022-05:42:55",
                    "content": "RANDAO(n) I suspect is valuable, but it has a couple caveats that need to be ironed out before it can be included (plus, it needs an EIP champion to push it through). Should n refer to block or slot?  Slots can be empty (no RANDAO reveal), which makes block number appealing, but block number doesn\u2019t have a well defined point in time in the future (which is useful in some contexts). Regardless of whether you choose block or slot for n, at the least the block builder can choose between two options for that block.  If a validator produces multiple blocks in a row, they get more attempts (combinatorial number I think). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.642857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "50",
                    "likes": "0",
                    "time": "21/10/2022-04:11:15",
                    "content": "There are two different questions. Let\u2019s discuss them one by one. The first question is Suppose we have a lottery dapp which contains two methods: roll and claim. Alice roll the dice @ slot n, and lottery contract uses the K + N + \u03b5 slot PREVRANDAO as the randomness. But how to claim rewards? Cuz, you can obtain this randao value only when the proposer is proposing the K + N + \u03b5 slot. Which means, user\u2019s claim transaction must be sealed in the slot  K + N + \u03b5. If missed, user cannot claim rewards due to the inaccessible of the randomness. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.15625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "51",
                    "likes": "0",
                    "time": "22/10/2022-09:32:45",
                    "content": "What happens if slot K + N + \u03b5 - 1 is missed (thus PREVRANDAO points at K + N + \u03b5 - 2)? What happens if block K + N + \u03b5 is missed or empty, thus you cannot execute anything in that slot? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "52",
                    "likes": "0",
                    "time": "24/10/2022-01:01:03",
                    "content": "ah, that\u2019s my second question. Let\u2019s discuss that later. Now, suppose the slot was never missed, how the users could claim the rewards?  They could claim the rewards only when the proposer is proposing that block @ slot n. Am I right? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.357142857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "53",
                    "likes": "0",
                    "time": "24/10/2022-08:51:13",
                    "content": "With the current RANDAO mechanism, and using a design like proposed, yes.  Having RANDAO(n) is certainly useful, as it allows you to specify a block to use.  Without that, the mechanism would likely just be \u201cthe first transaction that targets this contract after block n will determine which block the RANDAO is from\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "54",
                    "likes": "0",
                    "time": "28/10/2022-08:26:26",
                    "content": "Yup.  As for the slot n or block n, if the RANDAO(n)  is supported, I believe, both solutions are ok. However, block n would be easier for dapp developers. Cuz, each block has a corresponding slot for sure, developers don\u2019t need to consider the missed slot situation.  But I don\u2019t know if it\u2019s feasible for execution client of returning the PRERANDAO(n) @ block n in evm? If dapps choose block K + N + \u03b5 as the randomness source after block n, the security of the random number could be guaranteed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "55",
                    "likes": "0",
                    "time": "31/10/2022-14:42:34",
                    "content": "    apiscerena:  Cuz, each block has a corresponding slot for sure, developers don\u2019t need to consider the missed slot situation.   They still definitely need to consider missed slots.  The proposer of block n or n-1 (depending on how it is implemented) can decide to propose or miss, which will change the RANDAO(n) result.  If the proposer proposes m blocks in a row, I believe they can choose between 2^m different die rolls. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/apiscerena",
                    "index": "56",
                    "likes": "0",
                    "time": "10/11/2022-01:05:49",
                    "content": "oh, I see, really appreciate your explanations. It seems the randao value in evm is not secured for dapps especially when a large amount of money is involved. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.69047619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "57",
                    "likes": "0",
                    "time": "10/11/2022-06:09:59",
                    "content": "    apiscerena:  It seems the randao value in evm is not secured for dapps especially when a large amount of money is involved.   It can be usefully used for a source of randomness, but you have to be incredibly careful with how you use it and the specific design of your system, money at stake, etc.  My general advice to people is to not try to build randomness on-chain for anything that has any substantial value.  It is just too easy to get it wrong. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.248511904761904
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/markuswaas",
                    "index": "58",
                    "likes": "3",
                    "time": "03/01/2023-09:11:51",
                    "content": "Just FYI added Solidity Deep Dive: New Opcode 'Prevrandao'. Looking forward to further EIPs regarding specific Randao values. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.170454545454546
                }
            ]
        }
    ],
    "group_index": "1495"
}