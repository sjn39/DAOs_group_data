{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/generator-functions-in-evm-and-long-range-transactions/4256",
            "title": "Generator functions in EVM and long-range transactions? ",
            "index": 4256,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "evm"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Ethernian",
                    "index": "1",
                    "likes": "0",
                    "time": "04/05/2020-23:02:53",
                    "content": "Just a crazy and quick idea: What if the EVM could suspend/resume its execution like the Javascript VM can do? Something like js generator functions? function* gen() public returns (uint) {    yield 1;   yield 2;   yield 3; }  It could enable some kind of long-range transaction that could last for multiple blocks. It could be useful for cross-shard calls. EVM runtime could keep the tx memory state between blocks without storing it to disk. If the tx doesn\u2019t finish in Nmax blocks, it fails. To recover the execution state of some long-range transaction running at block N, a node could always replay it from the beginning at some previous block. Most probably the idea is not new, but I have not found any similar discussions. Do you have any hints? ",
                    "links": [],
                    "GPT-summary": "The author proposes the idea of implementing generator functions in the EVM to enable long-range transactions that could last for multiple blocks. The author suggests that this could be useful for cross-shard calls and the EVM runtime could keep the transaction memory state between blocks without storing it to disk. The author asks if there are any similar discussions and invites feedback.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.166035353535353
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "2",
                    "likes": "0",
                    "time": "15/05/2020-04:07:51",
                    "content": "You could implement this with the current EVM using state. For the EVM you should be thinking about CPU-level instructions. Javascript doesn\u2019t require additional CPU instructions; it just defines an async syntax that uses the same instructions as C. There\u2019s nothing you can do in JS that you can\u2019t do in assembly. What I think you want is a solidity programming language feature that would manage the state for you. I\u2019m generally opposed to that because it hides from the programmer the gas costs of their abstractions. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.083333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Ethernian",
                    "index": "3",
                    "likes": "0",
                    "time": "22/05/2020-15:05:22",
                    "content": "I suppose, you don\u2019t understand me yet.     wjmelements:  You could implement this with the current EVM using state.   No, unfortunately you can\u2019t do it now because the EVM memory doesn\u2019t persist between transaction calls. My idea is exactly to let the memory persist between transaction calls (for the limited time of some blocks) by keeping it in the memory, but without persisting it into the contract state. It will make the generator-like functions in solidity and \u201clong-range\u201d transactions in ethereum possible. The JS generator function in my post above is just an example.     wjmelements:  What I think you want is a solidity programming language feature that would manage the state for you. I\u2019m generally opposed to that because it hides from the programmer the gas costs of their abstractions.   As I mentioned, I don\u2019t suppose to write the suspended EVM state into the contract state. I suppose the EVM can just keep it in memory without to dispose it. Yes, the total memory footprint grows because many transactions can go into the suspended state at the same time, but for every single transaction there is no additional resource usage. So I see no problem with gas calculation. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.412337662337663
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "4",
                    "likes": "0",
                    "time": "03/07/2020-03:14:27",
                    "content": "    Ethernian:  No, unfortunately you can\u2019t do it now because the EVM memory doesn\u2019t persist between transaction calls.   I said state, not memory.     Ethernian:  My idea is exactly to let the memory persist between transaction calls (for the limited time of some blocks) by keeping it in the memory, but without persisting it into the contract state. It will make the generator-like functions in solidity and \u201clong-range\u201d transactions in ethereum possible.   You want state? You should pay state prices. Memory is not persisted on purpose. The gas refund from clearing the state should be sufficient to offset your costs. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5357142857142865
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Ethernian",
                    "index": "5",
                    "likes": "0",
                    "time": "27/07/2020-11:20:25",
                    "content": "    wjmelements:  I said state, not memory.   I mean exactly the state in transient memory, not in the permanent  storage.     wjmelements:  You want state? You should pay state prices. Memory is not persisted on purpose. The gas refund from clearing the state should be sufficient to offset your costs.   I don\u2019t want use the state, I don\u2019t want to pay the state price. I want use transient memory or already running client for that, which is much cheaper. A freshly started client should rebuild the transient state of the long-term EVM by replaying the tx from the block in the past, where the long-term tx was started. It implies, a long term-tx may last only few blocks to keep the memory consumption and client starting time reasonable. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0625
                }
            ]
        }
    ],
    "group_index": "1057"
}