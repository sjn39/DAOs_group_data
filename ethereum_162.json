{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/composable-transactions/11263",
            "title": "Composable Transactions ",
            "index": 11263,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/bernardo",
                    "index": "1",
                    "likes": "1",
                    "time": "09/10/2022-02:14:38",
                    "content": " Normal transactions can make only a single call to a smart contract. This means that when we need to call a function many times, or interact with different smart contracts, we need a separate transaction for each smart contract interaction. Composable Transactions bring the ability to make many calls in a single transaction, either to the same or to different smart contracts. Even more than just calls, this feature allows a variety of commands to be executed, including storing the result of a call into a (temporary) variable, conversion of the value, math operations, and assertion (reverts the whole transaction if evaluates to false)  Characteristics  Multiple calls Atomicity Sequential execution Act on current state Scripting No blind signing   Atomicity If any of the calls fail, the entire transaction is aborted. This means that either all calls succeed or none of them.  Sequential Execution Execute a series of contract calls with the guarantee that they happen sequentially with no external action occurring between them.  Act on current state Do actions using the current values from contracts and account states by making queries to contracts and using the returned value on the same transaction. This is useful when another transaction arrives first and changes the contract state.  Scripting Instead of just a list of calls, it is possible to process the returned values and act according to them. The language supports data conversion and manipulation, assertion, conditional execution, and more.  No Blind Signing The transaction can be reviewed even on hardware wallets before approval or rejection The user can check each command and its arguments The scripts contain the function signature (human readable). The function selector is computed at execution time  Use Cases 1) Purchase airplane tickets and hotel reservation from different contracts, only if both succeed. If some of the purchases fail, the other is reverted (the user does not want one of them if the other is not acquired) 2) Swap token and buy something with it. If the purchase fails, the user does not want that intermediary token 3) Transferring token (fungible and/or non-fungible) to multiple recipients at the same time 4) Transferring different tokens (fungible and/or non-fungible) to one recipient in a single transaction 5) Mint many non-fungible tokens (NFTs) in a single transaction 6) Trustless swap (or purchase): check if the purchased token was received, otherwise revert the transaction 7) Swap tokens using a split route. Check the minimum output in the transaction itself and revert if not satisfied 8) Swap to an exact amount of the output token when using a multi-hop route, by querying a contract for the right amount to send in the same transaction 9) Approve contract B to use contract A (token) and then call a function on contract B that handles the resources on contract A (eg: approve and swap, approve and add liquidity) on a single transaction 10) Approve, use resource, and remove approval on a single transaction, with the guarantee that no other operation would happen in between while the resource/token is approved to contract B It also allows (by creating compatible smart contracts): 11) Swap tokens without approval 12) Add liquidity to a pool (2 tokens) in a single transaction without approval 13) Multisig wallet users and DAO users can create and vote on an entire script of commands  Implementation  Client Side As most clients use web-browsers, the scripts are built in JSON format, like this one: [ [\"call\",\"<token 1>\",\"transfer(address,uint256)\",\"<recipient 1>\",\"<amount 1>\"], [\"call\",\"<token 2>\",\"transfer(address,uint256)\",\"<recipient 2>\",\"<amount 2>\"], [\"call\",\"<token 3>\",\"transfer(address,uint256)\",\"<recipient 3>\",\"<amount 3>\"] ]  As this format is not efficiently processed by EVM code, it is then converted to binary format using a small library on the browser (or another environment) The converted script in binary format is then included in the transaction as the payload The transaction is marked with a special \u201ctype\u201d to differentiate from normal transactions. The current test implementation uses this method:  recipient address := signer address amount := 0 payload := binary script  But it can have some other method, like a explicit type (MULTICALL or SCRIPT \u2026)  Execution Side The execution client can identify these transactions and process them accordingly The current implementation uses a smart contract to parse and execute the binary script / commands There is no reference to this contract on the transaction The execution client calls a function on this contract passing the binary script as argument. The call is made using the CALLCODE opcode (0xF2) executed as the caller account. The binary format is engineered to minimize gas usage when processed  Usage by Contracts As the script executor is a smart contract, other contracts can also interface with it using the DELEGATECALL opcode (0xF4) and passing the script as argument. One use would be by MultiSig wallets and DAOs, in which scripts can be stored, reviewed, voted, and only executed when/if approved.  Other resources  Scripts Complete list of commands Example Scripts for Specific Use Cases Human-readable display of amounts Display on hardware wallets Templates   Other discussion places As the goal is to implement a single (or very similar) specification that can be used on most EVM-compatible blockchains (to make dApps simpler) there are separate discussions with different teams from other blockchain projects and we have also a common channel in which anyone can come together to share thoughts for cross-chain compatibility ",
                    "links": [
                        "https://github.com/composable-transactions/docs#list-of-commands",
                        "https://github.com/composable-transactions/docs#example-scripts-for-specific-use-cases",
                        "https://github.com/composable-transactions/docs#human-readable-display-of-amounts",
                        "https://github.com/composable-transactions/docs#display-on-hardware-wallets",
                        "https://github.com/composable-transactions/docs#templates",
                        "https://discord.com/channels/1022349347540697128/1022349347993686017"
                    ],
                    "GPT-summary": "The post explains Composable Transactions, a feature that allows multiple calls to be made in a single transaction, either to the same or different smart contracts. It also provides characteristics, use cases, and implementation details of Composable Transactions. The post does not ask for feedback, advertise, or extend to the proposal, but rather explains it in detail. It may be audited, reviewed, or questioned by third parties. Some third parties may give entirely positive feedback, while others may give constructive criticism.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.218521062271062
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bernardo",
                    "index": "2",
                    "likes": "0",
                    "time": "09/10/2022-02:25:40",
                    "content": "Related proposals: \u201cRich transactions\u201d via EVM bytecode execution from externally owned accounts Native Batched Transactions EIP-2733: Transaction Package ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-native-batched-transactions/4337",
                        "https://ethereum-magicians.org/t/eip-2733-transaction-package/4365"
                    ],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/unenunciate",
                    "index": "3",
                    "likes": "1",
                    "time": "09/10/2022-16:33:40",
                    "content": "While they don\u2019t work with EOAs, 4337 user operations already achieve this. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dadabit",
                    "index": "4",
                    "likes": "2",
                    "time": "15/10/2022-19:21:24",
                    "content": "Wouldn\u2019t be easier and straightforward deploying an orchestrator contract to make a single entry point to trigger many transactions? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.3392857142857135
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bernardo",
                    "index": "5",
                    "likes": "0",
                    "time": "16/10/2022-00:00:38",
                    "content": "  What do you mean by \u201corchestrator contract\u201d? Something like the existing multicall contracts? How to call it under the EOA? Notice that the changes on the executor are exactly for that purpose, using the CALLCODE opcode.   By \u201cmake a single entry point to trigger many transactions\u201d do you mean to trigger many calls from the sent transaction?   Notice also that our approach goes beyond just contract calls. The supported operations allow a range of new use cases, that are not possible with just a list of contract calls ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.431209415584416
                }
            ]
        }
    ],
    "group_index": "162"
}