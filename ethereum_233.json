{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-6047-extend-erc-721-to-support-balance-counting-via-transfer-event/11894",
            "title": "EIP-6047: Extend ERC-721 to Support balance counting via Transfer event ",
            "index": 11894,
            "category": [
                "EIPs"
            ],
            "tags": [
                "erc-721",
                "erc"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "1",
                    "likes": "1",
                    "time": "26/11/2022-18:31:22",
                    "content": "Pull Request: Add EIP-6047: Mandate emitting Transfer for ERC721 by xinbenlv \u00b7 Pull Request #6047 \u00b7 ethereum/EIPs \u00b7 GitHub   eip: 6047 title: Extend ERC-721 to Support balance counting via Transfer event description:  Mandate emitting Transfer event for EIP-721 NFTs regardless whether minting / transferring occurs during or outside of contract creation. author: Zainan Victor Zhou (@xinbenlv) discussions-to: EIP-6047: Extend ERC-721 to Support balance counting via Transfer event status: Draft type: Standards Track category: ERC created: 2022-11-26 requires: 721  Abstract EIP-721 requires Transfer event to be emitted whenever a transfer or mint(i.e. transfer from 0x0) or burn (i.g. transfer to 0x0) occurs, EXCEPT for when during Contract creation. This EIP instead MANDATES compliant contract to ALWAYS emit Transfer event regardless whether such transfer occurs in or outside of contract creation.  Motivation EIP-721 requires Transfer event to be emitted whenever a transfer or mint(i.e. transfer from 0x0) or burn (i.g. transfer to 0x0) occurs, EXCEPT for when during Contract creation. Due to this exception granted in EIP-721 standard, compliant contracts could mint NFTs during contract creation without event being emitted. Unlike EIP-721, the EIP-1155 standard mandates event to be emitted regardless of whether such minting occurs during or outside of contract creation. This allows a indexing service or any off-chain service to reliably capture and account for token creation. This EIP removes said exception granted by EIP-721 and mandate emitting Transfer for EIP-721 during contract creation and thus all indexers and off-chain applications can account for token minting, burning and transferring only relying on EIP-721 Transfer event streams.  Specification The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cNOT RECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119 and RFC 8174.  Compliant contract MUST implement EIP-721  Compliant contract MUST emit Transfer event to be emitted whenever a token transfer or mint(i.e. a token transfer from 0x0) or burn (i.g. transfer to 0x0) occurs, except for when during Contract creation, regardless of whether such transfer, mint or burn occurs during or outside of contract creation.   Rationale  To allow accounting for minting during contract creation, there is also option to just create and emit new event type such as, Creation, instead of emitting the same Transfer. We choose not to go with such option, but instead just strengthening the EIP-721 requirement, which maximize the backwards compatibility.   Backwards Compatibility This EIP is designed to be fully backward compatible with EIP-721.  Security Considerations No new security concern is introduced.  Copyright Copyright and related rights waived via CC0. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-xxx-require-erc721-to-always-emit-transfer/11894"
                    ],
                    "GPT-summary": "The post is a proposal for an extension of the ERC-721 standard to mandate the emitting of Transfer events for NFTs during contract creation. The author explains the motivation and rationale behind the proposal, and provides specifications for compliant contracts. The post also invites discussion and feedback from the community.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Law and regulations",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 4.984217171717172
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "2",
                    "likes": "0",
                    "time": "26/11/2022-18:58:16",
                    "content": "Kindly inviting the following experts to peer review.  EIP authors / contributors / standardizing  Author(s) of ERC-721: @fulldecent ( notified here) Author(s) of ERC-20: @frozeman ( notified here) Author(s) of ERC-1155: @coinfork  Author(s) of ERC-2309: @pizzarob ( notified here)   Contract Library  OZ ERC721 main contributors for ERC721.sol: @Amxx , @frangio (notified here)   Indexers / Explorer  TheGraph: indexer repo main contributors: @Jannis, @fordN,  notified via Discord  Etherscan / Blockscan: etherscan@twitter  notified via Twitter    Marketplaces  OpenSea  notified via Discord  SudoSwap   Wallets  MetaMask Enkrypt   Notable NFT Projects  BoredApe DecentralLand  Please feel free to suggest other people we should notify to feedback ",
                    "links": [
                        "https://github.com/graphprotocol/indexer/",
                        "https://discord.com/channels/438038660412342282/438038660412342284/1047213158147825684",
                        "https://twitter.com/ZainanZhou/status/1597652614937661440",
                        "https://discord.com/channels/397566282729390110/434175585745633280/1047222151444434954"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.220238095238095
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "3",
                    "likes": "0",
                    "time": "28/11/2022-02:26:08",
                    "content": "Text looks good to me. In the discussion here, I\u2019d like to see research of existing token scanner implementations that are implementing this already or that would be affected by implementing this. Also, would be nice to review some X notable NFT projects of today or over some time period to see if they are implementing this already. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 8.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "4",
                    "likes": "1",
                    "time": "28/11/2022-14:26:24",
                    "content": "This EIP makes no sense in my opinion\u2026 There is no way to retroactively add a \u201cMUST\u201d requirement to EIP-721, so it could never be anything more than a recommendation. The Backwards Compatibility section is inaccurately saying that this is fully backwards compatible\u2026 it clearly isn\u2019t. The provision to forgo the Transfer event during construction is there and it can\u2019t be removed, it can be used by contracts and is used for efficient batch minting. In conjunction with EIP-2309, this pattern can be made perfectly indexable through events. If this EIP will move forward, it needs to be appropriately reduced to a set of recommendations (\u201cSHOULD\u201d), and it should account for EIP-2309 events. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 7.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "5",
                    "likes": "0",
                    "time": "28/11/2022-17:23:55",
                    "content": "Thanks @frangio  Define \u201ccompatible\u201d  There is no way to retroactively add a \u201cMUST\u201d requirement to EIP-721, so it could never be anything more than a recommendation. The Backwards Compatibility section is inaccurately saying that this is fully backwards compatible\u2026 it clearly isn\u2019t.  I have a feeling when we use the term EIP Foo is compatible with EIP Bar we mean different things. Let me clarify what I mean when using this term with you to ensure we are talking the same language in this discussion so then we can determine if we have different views or not. In the context of EIP-6047there could be other case when we used the term differently, When I say EIP-6047 (Mandate ERC721 Transfer) is Compatible with EIP-721, what I really mean is that any compliant contract confirming to EIP-6047 will also be a compliant contract with EIP-721. Or more mathematically described as: The whole set of EIP-6047 compliant contracts is a (strict) subset of the whole set of EIP-721 Let me use other examples to demonstrate this relationship  EIP-712 (Typed Data Signing) is compatible with EIP-191 (General Signing) because the whole set of EIP-712 compliant contracts is a (strict) subset of EIP-191. Contract compliant with EIP-712 is always compliant with EIP-191 but not all contract compliant with EIP-191 is a EIP-712 compliant contract EIP-2612 is compatible with EIP-20 because the whole set of EIP-2612 compliant contract is a (strict) subset of EIP-20 but not all EIP-20 compliant contract is compliant with EIP-2612.   With that clarification let me address your second comment about EIP-2309 That\u2019s good suggestion. Some considerations here. Supporting EIP-2309-alike interface is a good idea. But it seems EIP-2309 cannot be supported as of its current version. Since it\u2019s final, a new (competing) EIP probably need to be proposed due to EIP-2309\u2019s incompatibility with EIP-721, let me explain why I say EIP-2309 is not compatible with EIP-721  Specification of EIP-2309 \u2026 Contracts that implement the ConsecutiveTransfer event MAY still use the original Transfer event, however when emitting the ConsecutiveTransfer event the Transfer event MUST NOT be emitted.  If EIP-721 is intended to mandate*see note a Transfer event  Specification of EIP-721 (Transfer event): This emits when ownership of any NFT changes by any mechanism. Exception\u2026  The mandate to emit ConsecutiveTransfer instead of Transfer in some cases from EIP-2309 actually breaks the mandate of EIP-721. EIP-721 mandates a Transfer event MUST be emitted. EIP-2309 mandates a Transfer event MUST NOT be emitted in some cases but instead use ConsecutiveTransfer in these cases. Any compliant contract of EIP-2309 when not always emitting Transfer event but emitting ConsecutiveTransfer, is not conforming to EIP-721. Therefore the whole set of conforming contracts of EIP-2309 is not subset of the whole set of conforming contracts of EIP-721. If you could agree with the assertion that EIP-2309 is not EIP-721 compatible, while EIP-2309 could not be supported, we shall probably support something like EIP-1155\u2019s TransferBatch event.  Note for @fulldecent  Hey @fulldecent could you clarify whether it\u2019s mandated by EIP-721 to emit a Transfer event always except for creation? . It seems EIP-721\u2019s current snapshot is not strictly following RFC 2119 such as \u201cEvery ERC-721 compliant contract must (lower case must) implement the ERC721 and ERC165 interfaces\u201d ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.499832887700535
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "6",
                    "likes": "1",
                    "time": "28/11/2022-17:46:38",
                    "content": "A contract that emits EIP-2309 ConsecutiveTransfer in the constructor instead of EIP-721 Transfer, is both EIP-721 and EIP-2309 compliant. In order to remain EIP-721 compliant it must not emit ConsecutiveTransfer events outside of the constructor (unless they are accompanied by Transfer events, in which case there is no reason to just emit Transfer). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "7",
                    "likes": "0",
                    "time": "28/11/2022-17:59:50",
                    "content": "@frangio Just to clarify, do you mean, in your opinion, EIP-721 doesnt mandate Transfer event? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "8",
                    "likes": "0",
                    "time": "28/11/2022-19:31:14",
                    "content": "EIP-721 doesn\u2019t mandate Transfer during contract creation, as clearly stated in the present EIP draft. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "9",
                    "likes": "0",
                    "time": "28/11/2022-19:33:13",
                    "content": "Maybe this is better way to frame it: Consider IP-6047 extends EIP-721 to make token balance totally accountable merely via counting Transfer events, just like EIP-1155. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "10",
                    "likes": "0",
                    "time": "28/11/2022-20:59:39",
                    "content": "I agree with the goal of making token balance totally accountable by events, but I think this EIP should allow EIP-2309 ConsecutiveTransfer as an alternative to EIP-721 Transfer during contract construction. If you think this defeats the purpose of the EIP you were trying to propose then feel free to ignore my suggestion. I agree with the new title for the EIP. The contents of this post should be updated as well since they still say \u201cMandate \u2026 for EIP-721\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.893939393939394
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "11",
                    "likes": "0",
                    "time": "28/11/2022-22:23:28",
                    "content": "@frangio Great, we agree on the general goal of making token balance totally accountable by events.  Let\u2019s debate one of the design decision here  Design Choices for which \u201ctransfer event\u201d to use for batching  Option 1. Use EIP-2309 ConsecutiveTransfer instead of Transfer when transferring multiple tokens with consecutive ids, and use Transfer otherwise. Option 1a, [See update]Use ConsecutiveTransfer in addition to Transfers Option 1b, [See update]Use ConsecutiveTransfer only at contract creation. Option 2. Use ERC-721 Transfer for all cases, emit Transfer event multiple times for multiple token ids, regardless of consecutive token ids. Option 3. use something like TransferBatch with unit256[] tokenIds that allows specifying uint256[] tokenIds. (similar to EIP-1155)   My thoughts Here is my thoughts. First, let me re-iterate this and make sure if we are on the same page: Both Option 1 and Option 3 are NOT backward compatible with ERC-721, because let\u2019s say Coinbase, OpenSea and Etherscan are already watching Transfer of ERC721 hoping to learn all transfers and do something upon a Transfer. Now, if a new contract start adopting Option 1 or Option 2, start using a transfer event different from what\u2019s already in ERC-721. In this case, without updating the logic Coinbase, OpenSea or Etherscan will none be able adopt to Option 1 or Option 2. This is why I say Option 1 and Option 3 are not backward compatible. On the other-hand, for any new contract using Option 2, despite being gas-inefficient, is backward compatible with ERC721: that is to say, Coinbase, OpenSea or Etherscan or Subgraphs of TheGraphProtocol will not need to make change to their logic to also watch for a new transfer event with different name. Their old logic will still work. Let me know if I explain myself clearly  If my explanation still lacks clarity, I am happy to write some reference implementation code of both contract and indexer/tests to demonstrate what I mean.   Update after more research. Context:  EIP-2309 admits it\u2019s not compatible with ERC-721 and suggest either using both ERC-721 Transfer   For platforms that wish to support the ConsecutiveTransfer event it would be best to support both the original Transfer event and the ConsecutiveTransfer event to track token ownership.  We hereby have two other new options as variant of Option 1:  Option 1a, Conforming contract to use ConsecutiveTransfer in addition to Transfers, this defeats the purpose of gas efficiency and adds more gas cost. and this is incompatible with When emitting the ConsecutiveTransfer event the Transfer event MUST NOT be emitted in EIP-2309 Option 1b, Conforming contract to use ConsecutiveTransfer only at contract creation. This is limited use-case and also it makes it impossible to support indexers who only watches Transfer, defeating purpose of maximizing compatibility with ERC-721s.  Also, I have doubt of how much gas cost EIP-2309 really saves overtime for Option 1.b. Here is why: While one transfer will change gas cost from O(N) to O(1) with N = number of tokenIds,  If one address is going to receive a large amount of tokens, my unverified probably uneducated hypothesis is that such batch holding is for the purpose of distributing the NFTs down the road. Since they will only distribute tokens one by one given EIP-721 doesn\u2019t support batchTransfer, if we only use ConsecutiveTransfer for creation, when the holding is doing secondary distribution, the long term gas cost is still cost of O(N). Therefore the overall gas saving, if only adopting at creation time, is very limited. Therefore, so far I find Option 2 still the most preferred design option for this decision question. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.606748035914703
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "12",
                    "likes": "1",
                    "time": "29/11/2022-15:10:22",
                    "content": "Yes, I should clarify, I\u2019m aware that full EIP-2309 is incompatible with EIP-721. This is why we have only implemented the subset of EIP-2309 that can be made compliant: Option 1b. This corresponds with OpenZeppelin\u2019s ERC721Consecutive. It\u2019s compliant because the only time that Transfer events are not emitted is during contract construction, as allowed by EIP-721. Indexers that only watch Transfer will miss the initial batch mint. This is true, but developers can make an informed decision about this and choose that route. (In reality, it is those indexers that are making a mistake by assuming that all transfers will be logged in an event, which is not guaranteed by EIP-721.)     xinbenlv:  the long term gas cost is still cost of O(N)   Yes, of course, but the goal is to reduce the cost of initial mint, i.e. the launch of a project. As you mentioned that is reduced from O(N) to O(1). So my suggestion is to make this EIP recommend Option 1b. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "13",
                    "likes": "0",
                    "time": "29/11/2022-17:13:15",
                    "content": "I see what you saying. We are in full sync now, @frangio I now understand that you recommend Option 1b as preferred design choice in closing which event to emit. With respect to my own opinion, I am open to choose Option 1b as recommendation. Since Option 2 will still be what people support out of box, I lean towards at least recommend Option 2, and consider also recommend Option 1b. For whether to also support Option 1b, we could take input of opinion and views from major indexers. If they support / are committed to support Option 1b, I think we could also recommend Option 1b. Do you have some recommendation who are also important ecosystem players that we shall also solicit feedback from? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.927083333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "14",
                    "likes": "0",
                    "time": "29/11/2022-18:15:59",
                    "content": "I\u2019m sure NFT marketplaces will have a lot of experience with indexing and may have opinions. I don\u2019t know which particular ones. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "15",
                    "likes": "0",
                    "time": "29/11/2022-18:26:52",
                    "content": " I\u2019m sure NFT marketplaces will have a lot of experience with indexing and may have opinions. I don\u2019t know which particular ones.  Sounds good. Thank you @frangio ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.277777777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pizzarob",
                    "index": "16",
                    "likes": "0",
                    "time": "29/11/2022-21:17:05",
                    "content": "Emitting ERC-2309 in the constructor of an ERC721 contract works quite well in my opinion. There are plenty of actual use cases of this in the wild. Major marketplaces already support this standard (opensea, looksrare, sudoswap). I don\u2019t see the issue that this new standard will solve. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.24905303030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "17",
                    "likes": "0",
                    "time": "30/11/2022-05:49:14",
                    "content": "Thank you @pizzarob for the response. Two questions  Major marketplaces already support this standard (opensea, looksrare, sudoswap)  Do you refer to their indexing side? Or do you only referring to their contracts? I love to do more research on these, can you kindly share some point of reference?  I don\u2019t see the issue that this new standard will solve.  Which issue, could you ellaborate? ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.1242897727272725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "18",
                    "likes": "2",
                    "time": "02/12/2022-00:14:49",
                    "content": "    pizzarob:  I don\u2019t see the issue that this new standard will solve.   The way I see it this ERC would simply be documenting standard best practice given that EIP-721 by itself technically allows the bad practice of not emitting events in the constructor. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.311688311688312
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pizzarob",
                    "index": "19",
                    "likes": "0",
                    "time": "02/12/2022-01:10:50",
                    "content": "    xinbenlv:  Do you refer to their indexing side? Or do you only referring to their contracts? I love to do more research on these, can you kindly share some point of reference?   Hi. I am referring to the indexing side. I\u2019m sure querying the chain for ERC-2309 events would yield a lot of results. That being said I\u2019m not sure this standard you are proposing would fix anything. It would be a new standard, yes, with a new rule, but people are already emitting 2309 in the constructor and it will remain valid under ERC-721. I don\u2019t think people will stop emitting the event if they have a use case where they need to mint many NFTs to one or several wallets (e.g. team mint). In addition, 2309 is already indexed by major marketplaces. So this new standard exists and then what? I\u2019m not sure I\u2019m sold that it\u2019s a best standard to only emit ERC-721 transfer events in the constructor. The flexibility is nice and has proven use cases. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.042897727272727
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "20",
                    "likes": "0",
                    "time": "02/12/2022-02:01:52",
                    "content": "@pizzarob, EIP-6047\u2019s goal is to make balance of token account able by merely using event. EIP-2309 introduces ConsecutiveTransfer but solves a different problem than EIP-6047 trying to solve. I appreciate your feedback.  I couldn\u2019t find OpenSea documenting it\u2019s indexing EIP-2309. If anyone could provide some links of documentation, that would be great. Or if someone could provide a public deployment of EIP-2309-based ERC721, that would also help me do t he research. For indexers, we continue to ask for help if there is any documentation / feedback about your indexing of EIP-2309. Otherwise I think I so far still lean towards just choose Option 2 so all indexer will work out of box. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pizzarob",
                    "index": "21",
                    "likes": "0",
                    "time": "02/12/2022-03:14:13",
                    "content": "    xinbenlv:  Or if someone could provide a public deployment of EIP-2309-based ERC721, that would also help me do t he research.   Here\u2019s one https://etherscan.io/address/0x38930aae699c4cd99d1d794df9db41111b13092b#code - see line 87. It uses ERC721A I\u2019m not sure if there\u2019s any docs about opensea/looksrare indexers but both have properly indexed the above collection and tokens 1 - 1000 were minted using consecutive transfer. ",
                    "links": [
                        "https://chiru-labs.github.io/ERC721A/#/erc721a?id=_minterc2309"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "22",
                    "likes": "0",
                    "time": "02/12/2022-06:51:41",
                    "content": "Thanks, that helps a lot. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/_Enoch",
                    "index": "23",
                    "likes": "2",
                    "time": "11/12/2022-20:44:34",
                    "content": "Hi everyone. Just registered for this site to contribute to the discussion here (only get two links in the post). To briefly introduce: I just launched GigaMart, an NFT marketplace and had previously done some research into 2309 support. To summarize what I learned here:   I discovered 2309 when my indexer failed to detect most of the items minted in the GoonzSchoolPhotos https://etherscan.io/address/0x36e5913bf48ccbd361875d09c0a20a4c144da896 collection, which emitted ConsecutiveTransfer events in its minting process.   I\u2019d previously viewed the fact that ERC-721 and ERC-1155 could not mint an NFT without emitting an event for each unique token or (in the case of ERC-1155) type of token as a sort of backstop against denial-of-service attacks. If someone wanted to flood my indexer with bogus NFTs, they would need to at least pay proportional gas to do so.   Honoring EIP-2309 without limits feels impossible: for the gas cost of a single event, a collection could signal that it is minting a full 2^256 - 1 items. Conventionally, my marketplace would then try to collect the metadata for each newly-minted token that it sees. To prevent the ConsecutiveTransfer event from being abused to fill my metadata collection queue with 2^256 - 1 pending calls, the only reasonable solution I see is for a marketplace to truncate overly-large token ID ranges.   The popular Chiru Labs implementation https://github.com/chiru-labs/ERC721A/issues/310 of ERC-721 has a limit of 5,000 on the size of an EIP-2309 range. That GoonzSchoolPhotos collection that brought this to my attention minted things in batches of 1,000. The OpenSea token ID range size limit is 5,000, determined empirically by Chiru Labs.       frangio:  (In reality, it is those indexers that are making a mistake by assuming that all transfers will be logged in an event, which is not guaranteed by EIP-721.)   Guilty as charged; I\u2019m one of those who wrongly believed this to be the case.     xinbenlv:  Do you refer to their indexing side?   Yes, this is something that marketplaces need to be aware of and support already given that some contracts already use it in the wild.     xinbenlv:  I couldn\u2019t find OpenSea documenting it\u2019s indexing EIP-2309   Neither could I when I went looking; the limit that they respect for 2309 is 5,000 just determined via testing. I think it\u2019s incredibly unfortunate that 2309 itself doesn\u2019t dictate any kind of limit on the number of tokens supported; 5,000 is an arbitrary and rather small range when compared to the \u201ctypical\u201d drop of 10,000 in an NFT collection. TL;DR I did a lot of recent research into supporting the situation caused by EIP-2309, am generally dissatisfied with it as an EIP, agree with @frangio on most of these points, and see option 1b as the only viable solution. That also means I see little value in this EIP beyond clarifying the 2309/721 relationship and maybe dictating a range limit on 2309. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/2309#issuecomment-1200068169"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.850518433179723
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "24",
                    "likes": "0",
                    "time": "12/12/2022-17:41:13",
                    "content": "@_Enoch thank you I think you bring up a very good point that ERC2309 without a proper limit provides an opportunity for flooding indexer\u2019s account with very little gas cost. The goal of this EIP-6047 is to mandate the event-emitting behavior for all EIP-6047 compliant contract. Like any EIP,  this EIP will have no effect in any contract whose developer choose to not comply with this EIP.  Whether to require ConsecutiveTransfer or only require Transfer is a decision we need to make for EIP-6047. I hear loud and clear from you that GigaMart supports ConsecutiveTransfer as well as Transfer and it\u2019s one data point. To re-iterate: we are choosing between the following options for 6047, and its consequence:  Option 2: Support Transfer: then all indexers (regardless of adopting 2309 or not) are compatible with 6047, but 2309 contracts are incompatible with 6047 Option 1b: Support Transfer and ConsecutiveTransfer: any indexers not adopting 2309 yet are incompatible with 6047, but all 2309 contracts are compatible with 6047  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.61875
                }
            ]
        }
    ],
    "group_index": "233"
}