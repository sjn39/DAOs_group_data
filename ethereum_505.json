{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1581-non-wallet-usage-of-keys-derived-from-bip-32-trees/2045",
            "title": "EIP-1581: Non-wallet usage of keys derived from BIP-32 trees ",
            "index": 2045,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/andytudhope",
                    "index": "1",
                    "likes": "4",
                    "time": "28/11/2018-09:13:32",
                    "content": "After the initial discussion here with @ligi providing some good feedback, non-wallet usage of keys derived from BIP-32 trees has been formalised into an EIP!    Ethereum Improvement Proposals   EIP-1581: Non-wallet usage of keys derived from BIP-32 trees Details on Ethereum Improvement Proposal 1581 (EIP-1581): Non-wallet usage of keys derived from BIP-32 trees      Applications interacting with the blockchain often make use of additional, non-blockchain technologies to perform the task they are designed for. For privacy and security sensitive mechanisms, sets of keys are needed. Reusing keys used for wallets can prove to be insecure, while keeping completely independent keys make backup and migration of the full set of credentials more complex. Defining a separate (from BIP44 compliant wallets) derivation branch allows combining the security of independent keys with the convenience of having a single piece of information which needs to be backup or migrated. We\u2019ll be using this at Status for our Keycard (a java card that stores your keys separately from your device - which almost always already an adversarial environment), and as a means of ensuring that whisper keys and account keys are decoupled so that it is easier to handle the need for multiple identities/accounts/means of managing keys. Any and all comments and feedback are appreciated!  ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-1581",
                        "https://eips.ethereum.org/EIPS/eip-1581"
                    ],
                    "GPT-summary": "The author of the post is announcing the formalization of EIP-1581, which proposes a separate derivation branch for non-wallet usage of keys derived from BIP-32 trees. The author is asking for feedback on the proposal. The post also explains the need for independent keys for privacy and security-sensitive mechanisms. A 3rd party is extending to the proposal by mentioning the use of this proposal at Status for their Keycard. Another 3rd party is giving constructive criticism by asking for more details on the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Privacy, Security and risk management",
                        "Interoperability and Scaleability",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.501488095238095
                }
            ]
        },
        {
            "thread_link": "https://ethereum-magicians.org/t/non-wallet-usage-of-keys-derived-from-bip-32-trees/1817",
            "title": "Non-wallet usage of keys derived from BIP-32 trees ",
            "index": 1817,
            "category": [
                "Wallets"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/bitgamma",
                    "index": "1",
                    "likes": "4",
                    "time": "06/11/2018-11:30:14",
                    "content": "Software interacting with the blockchain, including wallets, do not only revolve around pure asset transfer transactions but might have additional functionalities. In the case of Status that would be chat, but it can be anything like authentication, file encryption, etc. Using keys under the BIP32 tree for these purposes would allow the user to migrate the whole identity from one software to the other using the BIP39 mnemonic alone, since everything else would be derived from there. We plan to propose a short EIP (ERC maybe?) to formalize a key subtree which would be reserved for this. I have written a draft at https://notes.status.im/UPVhoAKjT0irxIPjs5x8IA and would like to have some feedback on this before submitting it. A short summary is that we define a separate (from the usual 44\u2019) subtree under master and then have a key type and a key index. The format would thus be m/XXXX\u2019/key_type\u2019/key_index. The XXXX would be the EIP/ERC number. The list of allocated key type must be maintained in a way similar to the allocated coin types for BIP44. ",
                    "links": [
                        "https://ethereum-magicians.org/t/meta-we-should-value-privacy-more/2475/8",
                        "https://ethereum-magicians.org/t/hierarchical-deterministic-wallet-for-computation-integrity-proof-cip-layer-2/4286/2"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.016369047619048
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "2",
                    "likes": "0",
                    "time": "10/11/2018-22:37:32",
                    "content": "Great idea! Just missing in the purpose section of the notes the thing you mention in this post:  The format would thus be m/XXXX\u2019/key_type\u2019/key_index. The XXXX would be the EIP/ERC number.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitgamma",
                    "index": "3",
                    "likes": "1",
                    "time": "13/11/2018-06:46:39",
                    "content": "Thanks for the feedback! I have added that explaination in the document as well now. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitgamma",
                    "index": "4",
                    "likes": "2",
                    "time": "30/01/2019-09:22:14",
                    "content": "Another update to the draft, regarding the key_index field has been posted https://eips.ethereum.org/EIPS/eip-1581 ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-erc-app-keys-application-specific-wallet-accounts/2742/22"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "5",
                    "likes": "0",
                    "time": "02/10/2019-20:50:46",
                    "content": "I want to just give a breakdown to clarify things. Seems like some confusion around EIP 1775, and also I suggest that we have a ERC1581+ERC1775 . @danfinlay @Bunjin ERC1581 vs ERC1775 ERC1581: Fix the weakness of using the same public key for ethereum address and chat key.  \u201cnon wallet\u201d public key  path m/43'/60'/1581'/ [key type]' / [key_index]  dapps can be authorized to view \u201cchat identity\u201d public key dapps can be authorized to sign messages at will \u201cchat identity\u201d  ERC1775: Fix the privacy weakness of reusing the same ethereum address for several dapps.  dapp specific ethereum address  path m/43'/60'/1775'/ [persona path]' / [application uniquely assigned path]' / [app's custom subpath]  dapps can be authorized to view dapp specific eth address authorized dapps can request signatures for each transaction or ERC191 message  ERC1581+ERC1775: Fix the privacy weakness of reusing the same public key for several dapps.  dapp specific \u201cnon wallet\u201d public key  path m/43'/60'/1581'/1775'/ [persona path]' / [application uniquely assigned path]' / [app's custom subpath]  dapps can be authorized to view \u201cdapp specific chat identity\u201d public key dapps can be authorized to sign messages at will   ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.15
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "6",
                    "likes": "0",
                    "time": "08/05/2020-14:17:58",
                    "content": "Similar proposal: Extensible crypto for wallets ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fryorcraken",
                    "index": "7",
                    "likes": "1",
                    "time": "09/09/2021-05:49:48",
                    "content": "Replied mirror in https://github.com/status-im/js-waku/issues/73#issuecomment-915782020 with links because I am not allowed more than 2 links per post as a new user The current proposed API in EIP1775: const appKey = await provider.send({   method: 'wallet_getAppKeyForAccount',   params: [address1] });  Implies that access to a dApp specific private key is given to the dApp. I believe this is not ideal as it means the dApp now needs to properly handle the private key. I agree with you that it\u2019d be ideal if the dApp could instead request signing/decrypting messages to the wallet, using the dedicated dApp key. Potentially using a permission based design such as EIP-2255. However, the challenge is that the decryption/signature method provided by a wallet may not fit the dApp needs. In regards of the signature scheme, EIP-712 could be a one-fit-all candidate. However, in terms of decryption, we can see that various schemes are used in the ecosystem and it may be difficult to pick one:  Metamask uses X25519_XSalsa20_Poly1305. Geth uses ECIES Waku, originating from Whisper/Geth, also uses ECIES   Another solution would be to provide a generic API that supports several encryption. An idea would be to use CryptoSubtle as the API reference and assume that in the Browser world, some of the encryption supported by Crypto Subtle should be supported by the Wallet API. ",
                    "links": [
                        "https://rfc.vac.dev/spec/26/"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.834054834054834
                }
            ]
        }
    ],
    "group_index": "505"
}