{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2250-gas-price-range/3585",
            "title": "EIP-2250: Gas Price Range ",
            "index": 3585,
            "category": [
                "Wallets"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/tomhschmidt",
                    "index": "1",
                    "likes": "2",
                    "time": "26/08/2019-21:26:02",
                    "content": "Link to PR: https://github.com/ethereum/EIPs/pull/2250 Hi all! This EIP came from many discussions with wallet and dApp teams, and a lot of in-depth data analysis to understand user behavior at scale. ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomhschmidt",
                    "index": "2",
                    "likes": "1",
                    "time": "26/08/2019-21:28:11",
                    "content": "Thanks to @danfinlay for the inspiration and @Recmo for early feedback ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "3",
                    "likes": "1",
                    "time": "27/08/2019-20:45:38",
                    "content": "Really my only issue with this is that it adds a whole new method for what seems like should amount to some extra specificity/parameters on the existing eth_sendTransaction method. Maybe a second options object after the main tx params could specify required traits of that parameter? Something like this?: const txHash = await provider.send({   method: 'eth_sendTransaction',   params: [ normalTxParams,      {       gasPrice: {         max: '10',         min: '200',       }     }   }] })  That params-settings object could also exist on another key in the current txParams. const txHash = await provider.send({   method: 'eth_sendTransaction',   params: [{     ...normalTxParams,     paramRequirements: {       gasPrice: {         max: '10',         min: '200',       }     }   }] })  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.751165501165501
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomhschmidt",
                    "index": "4",
                    "likes": "1",
                    "time": "27/08/2019-23:11:27",
                    "content": "Hah great minds something something  I originally spec\u2019d it as an extension to eth_sendTransaction, but worry that it breaks the current paradigm of all params being sent into eth_sendTransaction being encoded, hashed, and signed as the range params would be stripped out beforehand. I like the optional params concept, but again, worry that this introduces a totally new paradigm. Is there any precedent for something like this? I do like the \u201ccleanliness\u201d of eth_proposeTransaction \u2013 just a supplementary function that providers need to implement and care about, but is ultimately just an abstraction on top of eth_sendTransaction, but also worry that it might open the floodgate for everyone wanting their own JSON RPC fn. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.507102272727273
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "5",
                    "likes": "1",
                    "time": "27/08/2019-23:14:07",
                    "content": "    tomhschmidt:  I originally spec\u2019d it as an extension to eth_sendTransaction , but worry that it breaks the current paradigm of all params being sent into eth_sendTransaction being encoded, hashed, and signed as the range params would be stripped out beforehand. I like the optional params concept, but again, worry that this introduces a totally new paradigm. Is there any precedent for something like this?   Today, wallets like MetaMask generally will set the nonce for the user, as well as letting the user customize the gasPrice before signing it, so there is indeed precedent for signing something slightly different than what the application initially suggests. Adding a paramRequirements parameter could allow applications to be much more specific about which parameters are safe to modify, and which must be constrained to certain values to deliver their intended functionality. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.8878246753246755
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mcdee",
                    "index": "6",
                    "likes": "1",
                    "time": "28/08/2019-15:57:39",
                    "content": "Wouldn\u2019t it make sense to decouple this entirely from a given transaction?  If you want to include a transaction in a given number of blocks, and assume that the next n blocks will look roughly the same as the last n blocks, then you should be able to provide (gas, n) to an RPC method and receive gas price in return.  It would then be up to the wallet to provide this to the user, worry about if it fell within the acceptable bounds the user has specified, etc. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "7",
                    "likes": "1",
                    "time": "29/08/2019-20:32:28",
                    "content": "How does this interact with EIP-1559, the proposed fee market change? It seems like there is a lot of overlap even though mechanisms and layers are different. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomhschmidt",
                    "index": "8",
                    "likes": "0",
                    "time": "29/08/2019-20:32:48",
                    "content": "Yeah, I like this a lot. Gas price estimation (how we actually get to these params) is a whole can of worms. Most people use ethgasstation today, but naturally, their estimations are just a best guess and are a bit raw \u2013 to your point, most people think \u201cThis txn needs to get mined in the next minute\u201d and it would be nice to build an interface that lets them put something like that in and spit out something that can be used to generate a transaction (gas price). Ultimately, I think something like this would be extremely welcome as a utility / helper function to generate the value for these parameters, but for sake of determinism, I think still allowing dApps to pass in raw gas price bounds is a level of abstraction we need to expose. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.3493589743589745
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomhschmidt",
                    "index": "9",
                    "likes": "0",
                    "time": "29/08/2019-21:06:58",
                    "content": "Good callout! Definitely similar, to your point. My understanding of EIP-1559 is that it\u2019s more designed to cap the sometimes out-of-control gas price auction and dampen gas price fluctuations across blocks. There\u2019s some partial overlap in that this EIP could be used to allow dApps to put a gas price ceiling into their application, but it\u2019s much more limited in scope in that it exists at the wallet level (before the txn is signed) and is only relevant for users of that app that are using a wallet which respects the EIP. Purely anecdotal, but most of the transactions that I\u2019ve seen driving up gas prices on Ethereum are coming from trading bots trying to frontrun each other to snag some juicy opportunities. See: http://frontrun.me/ This EIP also includes gas price flooring, which is more important for the problem that we\u2019re trying to solve for of users setting far too low of a gas price to get mined in a reasonable amount of time. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.216517857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mcdee",
                    "index": "10",
                    "likes": "1",
                    "time": "31/08/2019-21:16:37",
                    "content": "Ethereal works along the idea outlined above, where gas price can be determined based on these criteria, for example: $ ethereal gas price --blocks=5 --gas=4000000 3.4 GWei $ ethereal gas price --blocks=10 --gas=200000 1.1 GWei  Shouldn\u2019t be hard to take the code and turn it in to some sort of web page / API. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.270833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomhschmidt",
                    "index": "11",
                    "likes": "0",
                    "time": "04/09/2019-17:20:21",
                    "content": "Yeah, this is really nice. I do think gas price estimation is a related, but separate issue. We\u2019re trying to make sure that when a dApp sets an appropriate suggested gas price (however that is obtained, such as through the Ethereal method that you mentioned) that users do not then go and mess with it, unintentionally ruining the UX. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.1875
                }
            ]
        }
    ],
    "group_index": "907"
}