{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-for-disabling-selfdestruct-opcode/4382",
            "title": "EIP for disabling SELFDESTRUCT opcode ",
            "index": 4382,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "1",
                    "likes": "3",
                    "time": "25/06/2020-19:38:56",
                    "content": "Mandatory post for EIP discussion  @jpitts  Adding additional information here: The content of the proposal: https://github.com/ethereum/EIPs/pull/2751/files Pull request w/ some initial comments: https://github.com/ethereum/EIPs/pull/2751 Twitter thread: https://twitter.com/realLedgerwatch/status/1276239221037072390 ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/2751",
                        "https://twitter.com/realLedgerwatch/status/1276239221037072390",
                        "https://ethereum-magicians.org/t/eip-3298-removal-of-refunds/5430/3",
                        "https://ethereum-magicians.org/t/eip-4758-deactivate-selfdestruct/8710/32"
                    ],
                    "GPT-summary": "The post is a mandatory discussion post for an EIP proposal to disable the SELFDESTRUCT opcode in Ethereum. The author provides links to the proposal, a pull request with initial comments, and a Twitter thread. The post is asking for feedback and also includes constructive criticism and questions from third parties.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Law and regulations",
                        "Privacy, Security and risk management",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "2",
                    "likes": "2",
                    "time": "25/06/2020-19:47:13",
                    "content": "How exciting! Under security considerations, another class of contracts that might be worth mentioning (which you alluded earlier in the EIP as \u201cpolymorphic contracts\u201d), is @ricmoo\u2019s Wisps. Also, this paper provides an interesting discussion on the current usage of SELFDESTRUCT and surveyed contract developers to gain insight into their feeling toward the opcode. ",
                    "links": [
                        "https://arxiv.org/abs/2005.07908"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.175000000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "3",
                    "likes": "3",
                    "time": "25/06/2020-19:58:14",
                    "content": "I would very much welcome such change, but I expect it will be very difficult to roll it out on mainnet because of huge \u201cexisting contracts breaking\u201d potential. However, there is a way not to break Wisps. The SELFDESTRUCT should continue to work as before if the contract has been created in the same transaction. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.458333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "4",
                    "likes": "1",
                    "time": "25/06/2020-20:05:20",
                    "content": " Polymorphic contracts are limited in their use, because changing the bytecode via SELFDESTRUCT + CREATE2 clears all the contract storage, making contract lose all its data, and making it unsuitable to replace Proxy Pattern as a technique for upgradable contracts.  Wouldn\u2019t it be possible to DELEGATECALL into the polymorphic contract and use that as a technique for upgradable contracts? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.821428571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JayeHarrill",
                    "index": "6",
                    "likes": "1",
                    "time": "26/06/2020-00:23:41",
                    "content": "Happy to see movement forward on this issue. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 9.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JayeHarrill",
                    "index": "7",
                    "likes": "1",
                    "time": "26/06/2020-00:25:16",
                    "content": "Could there be some context here? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "8",
                    "likes": "2",
                    "time": "26/06/2020-08:06:40",
                    "content": "@JayeHarrill, I updated @AlexeyAkhunov\u2019s original post with more details. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.1875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axe",
                    "index": "9",
                    "likes": "1",
                    "time": "27/06/2020-09:44:10",
                    "content": "Hey, This EIP is center on GASTokens and SELFDESTRUCT is not needed to run that type of tokens. We should not try to block gas tokens. That will be just a lost battle as people can make others types of refund schemes. The question is more about complexity and if we want to have smart contract that can change behaviour and stay in the same address. The incentive of SELFDESTRUCT is miss placed, why should i remove a smart contract of chain if in the end i will save max 50% of that transaction? Is just more racional to keep it on chain and forget about it. There is some cases when is important to remove that smart contract, but my intuition points that the major situation we end up in the \u201cforget about it\u201d case. Removing the SELFDESTRUCT opcode touch other areas of research like storage renting. I feel that we still need one explicitly way of removing a smart contract from chain. Why not maintain SELFDESTRUCT, changing the behaviour so that will leave some code (the same of each delete smart contract) avoiding a new deploy to that address? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.873318645640074
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "10",
                    "likes": "1",
                    "time": "27/06/2020-15:53:03",
                    "content": "    axe:  This EIP is center on GASTokens and SELFDESTRUCT is not needed to run that type of tokens   Sorry I did not make it clear, but the main motivation for this EIP was not to block GasToken. It was mostly about complexity that SELFDESTRUCT introduces into the implementation of EVM. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "11",
                    "likes": "1",
                    "time": "03/07/2020-03:11:33",
                    "content": "Polymorphic contracts are the superior upgrade model. If you have thousands of token balances and allowances it\u2019s much cheaper to upgrade the code in-place than to migrate to a new contract. If it\u2019s too much work for the evm to ensure all of the storage slots are cleared, just don\u2019t do it; it would save me the trouble of resetting all contract state. Most self-destructs are for contracts without state; very few contracts self-destruct with remaining state. Instead you could incentivize other contracts to clear it out of the trie manually. A new opcode could point out external storage corresponding to an account without code and clear it for a gas refund. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.619886363636364
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "12",
                    "likes": "1",
                    "time": "03/07/2020-06:01:31",
                    "content": "    wjmelements:  If it\u2019s too much work for the evm to ensure all of the storage slots are cleared, just don\u2019t do it   Ha, ha, if only I designed Ethereum from scratch  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "13",
                    "likes": "1",
                    "time": "03/07/2020-09:26:39",
                    "content": "    wjmelements:  If it\u2019s too much work for the evm to ensure all of the storage slots are cleared, just don\u2019t do it; it would save me the trouble of resetting all contract state. Most self-destructs are for contracts without state; very few contracts self-destruct with remaining state.   Well, this is a real issue for these few contracts, as there security depends on an assumption that might not hold. I wrote some of those, not for production use, but as a proof of concept. The idea was to use create2 + selfdestruct to provide a upgradeability pattern that would clean up a proxy\u2019s the memory state before redeploying the proxy (with a new logic target). The assumption was strong that the new proxy would start up with a fresh memory state. Clients not doing the cleanup would, at best create security flaw in my contracts, at worst cause a network split. A few weeks ago I would have been against removing this opcode, because despite the fact that it is dangerous, and that it is a pain for clients to work with, it as some nice usecases \u2026 but if these usescases are party broken because the expectation for the smart contracts developpers are not what is actually happening on the client side \u2026 then I\u2019d rather remove it then continue using something potentially borken. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.306753246753246
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "14",
                    "likes": "0",
                    "time": "03/07/2020-23:43:13",
                    "content": "    Amxx:      wjmelements:  If it\u2019s too much work for the evm to ensure all of the storage slots are cleared, just don\u2019t do it; it would save me the trouble of resetting all contract state. Most self-destructs are for contracts without state; very few contracts self-destruct with remaining state.   Well, this is a real issue for these few contracts, as there security depends on an assumption that might not hold.   I believe my aforementioned opcode proposal addresses that issue.     Amxx:  Clients not doing the cleanup would, at best create security flaw in my contracts, at worst cause a network split.   Better to not clear the state then, to avoid such an issue. Strictly fewer contracts depend on being reincarnated with a clean slate than on the self-destruct opcode functioning properly. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.377380952380952
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axe",
                    "index": "15",
                    "likes": "2",
                    "time": "04/07/2020-10:13:40",
                    "content": "    wjmelements:  Polymorphic contracts are the superior upgrade model   Technically yes, but we are creating a opaque system to the user. Please see https://github.com/0age/HomeWork Don\u2019t think that changing the SELFDESTRUCT opcode will have impact on the majority of smart contracts. I also don\u2019t think that simply removing the opcode is a solution, as stated before we need a way of removing code onchain. Not that \u201cas is\u201d today we have an incentive to do so. I\u2019m more in favor of changing the behavior of SELFDESTRUCT to stop redeploys. Until proven other wise using create2 as an upgradability mechanism is a poor design choose from the user perspective. We are just adding complexity. Also note that is important discuss the incentive of removing code on chain. The incentive today does a poor job in that regard. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.794642857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "16",
                    "likes": "1",
                    "time": "08/07/2020-04:08:20",
                    "content": "    axe:  we are creating a opaque system to the user   Opacity is the fault of current tooling, not a problem with the EVM. I\u2019ve asked Etherscan to improve their \u201cReInit\u201d UI, and I contributed their original delegatecall proxy support. Each upgrade model has its opacity issues; it\u2019s our job to help the users with it.     axe:  Until proven other wise using create2 as an upgradability mechanism is a poor design choose from the user perspective. We are just adding complexity.   That\u2019s not how burden of proof works  End-users are generally unaware of upgrade mechanisms because they work with a GUI. Application-level programmers have no problem abstracting reincarnation, as you linked. It\u2019s less gas for the EVM to not need to SLOAD and DELEGATECALL the implementation because the verification time is lower. It\u2019s easier for users with a generalized \u201cwrite contract\u201d interface to interact with the current ABI than with a delegatecall proxy.     axe:  Also note that is important discuss the incentive of removing code on chain. The incentive today does a poor job in that regard.   Perhaps the refund should be partially proportional to the codesize, like CREATE. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.128787878787879
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "17",
                    "likes": "0",
                    "time": "04/09/2020-03:17:59",
                    "content": "I wrote up my aforementioned proposal: EIP 2936 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axe",
                    "index": "18",
                    "likes": "1",
                    "time": "07/09/2020-09:20:10",
                    "content": "Just to reference: EIP-2937: SET_INDESTRUCTIBLE opcode ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/akolotov",
                    "index": "19",
                    "likes": "0",
                    "time": "06/10/2020-13:23:14",
                    "content": "After certain block number, the semantics of SELFDESTRUCT becomes the same as the combination of POP, followed by transferring remaining ETH to the address popped from the stack, followed by STOP.  It is necessary to note that the current SELFDESTRUCT behavior allows to send remaining ETH unconditionally. In other words, even if the recipient is a contract without the payable fallback, the funds will be added to the balance of this contract anyway. Sometimes, it is used to avoid attacks to imbalance the sender. Will this functionality be preserved by the construction described in the EIP? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.0892857142857135
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adompeldorius",
                    "index": "20",
                    "likes": "2",
                    "time": "26/08/2021-13:45:16",
                    "content": "Hi, I am one of the participants in the Ethereum Core Developer Apprenticeship program, and have performed some chain analysis on current usages of SELFDESTRUCT here. In the analysis, I discovered that there is an issue with the current proposal to disable or neuter the SELFDESTRUCT opcode, in that it opens a security risk to uninformed users of the Pine Finance contract. In short, users of this contract send tokens to an predetermined address called a vault. Relayers then trigger a function in the PineCore contract to create a new contract at this predetermined address using CREATE2, which executes a trade and then self destructs. Under the current behaviour, it is possible for a user to use the same vault several times. If SELFDESTRUCT is neutered, however, this would no longer be possible. In fact, if a user then tried to send tokens to a used vault, anyone could steal the tokens in the vault. The possible options I see are:   Continue with the current proposal of neutering SELFDESTRUCT, but inform Pine Finance so they have time to deploy a new contract that doesn\u2019t suffer from the same risks, in addition to informing their users about the risks of the existing contract. There could perhaps be other contracts that will be exposed to the same risk.   Come up with a proposal that does not create the security risk above. This can be done by either a) Implement the full functionality of SELFDESTRUCT, but in a way that does not require changing an arbitrary large part of the state. @vbuterin has suggested a couple of ways to do this, essentially changing which address in the state tree stores the contract state each time the contract is self destructed. b) Allowing SELFDESTRUCT if the contract was created in the same transaction. This solves the issue in Pine Finance, and also gives us the invariant that deployed contracts are immutable. This may also be less complex to implement than 2a). The disadvantage is that it may be more complicated to reason about this behaviour where SELFDESTRUCT is sometimes allowed, compared to allowing SELFDESTRUCT in all cases. Also, while this solution solves the Pine Finance case, there may be other cases that break, so further analysis should be done to find out what else might break.   What would be the best way to proceed from here? Should I do more chain analysis to help make a decision? ",
                    "links": [
                        "https://nbviewer.jupyter.org/github/adompeldorius/selfdestruct-analysis/blob/4647fef99e2aa0a2031b997f3166f07dfa68d7cb/analysis.ipynb"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.262128675921779
                }
            ]
        }
    ],
    "group_index": "1085"
}