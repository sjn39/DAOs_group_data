{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/bit-based-permission/13065",
            "title": "Bit Based Permission ",
            "index": 13065,
            "category": [
                "EIPs"
            ],
            "tags": [
                "permission",
                "role",
                "authorization"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/chiro-hiro",
                    "index": "1",
                    "likes": "1",
                    "time": "27/02/2023-05:58:08",
                    "content": "  Ethereum Improvement Proposals   ERC-5982: Role-based Access Control An interface for role-based access control for smart contracts.      Access Control List is a powerful tool to manage roles and permissions, it improved the security and prevent unwanted actors to interactive with smart contracts. But there are many issues that weren\u2019t solved in eip-5982, please check the following list:   Role doesn\u2019t reflect the permissions, a role in eip-5982 represent by a string we don\u2019t know the detail of its rights  Verification cost is high, to verify a role, we need to perform keccak256 and compare with the value in hashmap, this approach is quite costly when you want to check multiple roles.  Unable to organize the priority of permissions, there is no standard to compare the important between role/permissions, since all are strings.  What would make Bit Based Permission better?. The basic concept of this proposal is, using uint256 to store permission since it\u2019s supported natively by the EVM. We can defined up to 256 permissions, each bit of an uint256 will be represent a permission (1 single permission is power of 2). What do we benefit from this approach?.   Role reflect permissions, since permissions were defined as power of 2, we can use OR operator to combine new role based on multiple permissions. We know exactly, what a role contains.  Cheaper verification cost, to verify a role or a subset of permission we just need to do a simple AND operator on a permission bitmask. It\u2019s much more cheaper than keccak256(string).  Ordering permission by priority, We can use the most significant bit to represent for important permission, the comparison can be done easily since it all are uint256.  Flexibility, 256 permissions can be combined to create up to 2\u00b2\u2075\u2076 different role. It would be enough for any complex ecosystem.  ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5982"
                    ],
                    "GPT-summary": "The post explains a proposal for an interface for role-based access control for smart contracts, called Bit Based Permission. The author highlights the issues with the current approach and proposes a new method using uint256 to store permission. The post also includes benefits of this approach, such as cheaper verification cost and flexibility. A 3rd party could provide constructive criticism or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Privacy, Security and risk management",
                        "Token economics",
                        "Interoperability and Scaleability",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.802367965367965
                }
            ]
        }
    ],
    "group_index": "368"
}