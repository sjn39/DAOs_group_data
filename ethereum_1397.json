{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-3675-upgrade-consensus-to-proof-of-stake/6706",
            "title": "EIP-3675: Upgrade consensus to Proof-of-Stake ",
            "index": 6706,
            "category": [
                "EIPs"
            ],
            "tags": [
                "consensus-layer",
                "eth1-eth2-merge"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "1",
                    "likes": "7",
                    "time": "22/07/2021-15:13:31",
                    "content": "This is the discussion topic for EIP-3675: Upgrade consensus to Proof-of-Stake. This EIP introduces the specification of the consensus mechanism upgrade to the Proof-of-Stake (a.k.a. The Merge). Edit EIP-3675 got merged you can find it here:  Ethereum Improvement Proposals   EIP-3675: Upgrade consensus to Proof-of-Stake Details on Ethereum Improvement Proposal 3675 (EIP-3675): Upgrade consensus to Proof-of-Stake      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-3675"
                    ],
                    "GPT-summary": "The post is an Ethereum Improvement Proposal (EIP) that introduces the specification of the consensus mechanism upgrade to the Proof-of-Stake. The author is explaining the proposal and providing details on EIP-3675. A 3rd party is giving constructive criticism of the proposal and asking questions about it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "2",
                    "likes": "0",
                    "time": "30/07/2021-09:50:09",
                    "content": "For the health of the network under this kind of attack it makes sense for clients to stop propagating any blocks upon receiving the first POS_BLOCK_FINALIZED and remove handlers with the corresponding penalty upon receiving the second POS_BLOCK_FINALIZED. So, the updated spec should look like:  The networking stack SHOULD NOT send the following messages if they advertise the descendant of any terminal PoW block:  NewBlockHashes (0x01) NewBlock (0x07)  Beginning with the first POS_BLOCK_FINALIZED event, the networking stack MUST discard the following ingress messages:  NewBlockHashes (0x01) NewBlock (0x07)  Beginning with the second POS_BLOCK_FINALIZED event, the networking stack MUST remove the handlers corresponding to the following messages:  NewBlockHashes (0x01) NewBlock (0x07)  Peers that keep sending these messages after the handlers have been removed SHOULD be disconnected.  According to the current spec honest peers that keep propagating maliciously produced terminal PoW blocks maybe accidentally disconnected because of the racing in receiving the POS_BLOCK_FINALIZED event by between different nodes. cc @MicahZoltu ",
                    "links": [
                        "https://github.com/ethereum/devp2p/blob/master/caps/eth.md#newblockhashes-0x01",
                        "https://github.com/ethereum/devp2p/blob/master/caps/eth.md#newblock-0x07",
                        "https://github.com/ethereum/devp2p/blob/master/caps/eth.md#newblockhashes-0x01",
                        "https://github.com/ethereum/devp2p/blob/master/caps/eth.md#newblock-0x07",
                        "https://github.com/ethereum/devp2p/blob/master/caps/eth.md#newblockhashes-0x01",
                        "https://github.com/ethereum/devp2p/blob/master/caps/eth.md#newblock-0x07"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.7727272727272725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "3",
                    "likes": "0",
                    "time": "30/07/2021-23:37:08",
                    "content": "If you fork out PoW using TD instead of block number, miners will be incentivized to maximize the number of blocks until that TD, and the easiest way to do that would be a MASF that adjusts tip selection. While some clients will still use TD, the majority hashpower would not, and the reorgs would be chaotic. I\u2019ve suggested they use min(NEXT_BASE_FEE) for tip selection, and with 1559 that may be an easier, more profitable way to break ties than TD. Using TD for PoS timing would make collusion against TD more beneficial. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "4",
                    "likes": "0",
                    "time": "30/07/2021-23:40:04",
                    "content": "Another concern with TD is that an increase or decrease in MEV given liquid hashrate may make TD less predictable than block number; if the hashrate increased the fork could happen sooner than expected. This would require a later fork date than if block number was used, to account for possible variability. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.533333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "0",
                    "time": "31/07/2021-06:41:00",
                    "content": "    wjmelements:  If you fork out PoW using TD instead of block number, miners will be incentivized to maximize the number of blocks until that TD, and the easiest way to do that would be a MASF that adjusts tip selection. While some clients will still use TD, the majority hashpower would not, and the reorgs would be chaotic. I\u2019ve suggested they use min(NEXT_BASE_FEE) for tip selection, and with 1559 that may be an easier, more profitable way to break ties than TD. Using TD for PoS timing would make collusion against TD more beneficial.   We have discussed this vector previously, and at least it requires a 51% attack by miners (effectively) where it is profitable to defect up until 51% is reached.  This is not really any different than our current situation, where a 51% attack is viable but it is profitable to defect up until 51% is actually reached.  The problems introduced by using block number create new attack vectors beyond 51% attacks, which is why TD was chosen instead. I recommend checking out EIP-3675: Upgrade consensus to Proof-of-Stake for details on the problems with using the block number. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.584848484848485
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "6",
                    "likes": "0",
                    "time": "02/08/2021-17:34:13",
                    "content": "A high-level introduction of the system after the merge, terminal total difficulty, transition block diagram, and more are explained on the PEEPanEIP with @mkalinin.      ",
                    "links": [
                        "https://www.youtube.com/watch?v=zNIrIninMgg"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "7",
                    "likes": "0",
                    "time": "11/11/2021-10:08:11",
                    "content": "EIP-2124 fork identifier section in the specification currently has the following statement:  Starting with TRANSITION_POS_BLOCK that has block number N, nodes MUST update FORK_HASH by appending uint64(N) to the sequence of hashes used to calculate FORK_HASH as per EIP-2124. FORK_NEXT can remain 0 after the transition.  Suppose the local node is syncing and haven\u2019t reached the TRANSITION_POS_BLOCK yet while the transition has already happened in the network and the TRANSITION_POS_BLOCK is known to the remote peer the node tries to connect to. The remote peer has updated its FORK_HASH with TRANSITION_POS_BLOCK according to the aforementioned statement, and, thus, local node will disconnect the peer because of incompatible FORK_HASH values. A straightforward way to prevent the network from falling apart because of uncertainty around TRANSITION_POS_BLOCK is to keep FORK_HASH unaffected by the Merge. The question is: can and should we do better? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.21875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mkalinin",
                    "index": "8",
                    "likes": "0",
                    "time": "23/11/2021-14:00:43",
                    "content": "Continuing on the EIP-2124 topic. There was a suggestion made by @djrtwo on ACD#126 to set the FORK_NEXT to a block height lower, e.g. by a week worth of block numbers, than the height of TRANSITION_BLOCK. This would force those users that haven\u2019t upgraded their client software yet to do so because they will start loosing peers. In the case if TTD override with the value that is closer in time, the FORK_NEXT value could be overridden as well for the same purposes. This behaviour around FORK_NEXT looks pretty valuable in the context of the Merge. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.916666666666667
                }
            ]
        }
    ],
    "group_index": "1397"
}