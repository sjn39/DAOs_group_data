{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/fork-safe-tokens/13047",
            "title": "Fork-safe tokens ",
            "index": 13047,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "token"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "1",
                    "likes": "0",
                    "time": "24/02/2023-20:33:50",
                    "content": "This is an extremely rough draft of an idea I recently had. Since the CHAINID opcode exists, tokens can store the balance per chain ID. Before a hard fork, users can transfer their assets to the new (un)forked network. This would be different than bridging the tokens, as the new network doesn\u2019t exist yet. Instead, when the new network is formed, the balance is split so that the total supply across all chains remains unchanged. This would be particularly useful for stablecoins like DAI, because it would get around the problem of \u201cwe can only support one network since the supply doubles every hard fork.\u201d Prototype interfaces: contract ERC20ForkSafe is ERC20 {     event TransferFork(uint256 fromChainId, uint256 toChainId, address indexed from, address indexed to, uint256 amount);     function transferToFork(uint256 fromChainId, uint256 toChainId, address to, uint256 amount) external;     function transferFromToFork(uint256 fromChainId, uint256 toChainId, address from, address to, uint256 amount) external;     function isTransferAvailable(uint256 fromChainId, uint256 toChainId) external view returns (bool); }  contract ERC721ForkSafe is ERC721 {     event TransferFork(uint256 fromChainId, uint256 toChainId, address indexed from, address indexed to, uint256 tokenId);     function transferToFork(uint256 fromChainId, uint256 toChainId, address to, uint256 tokenId) external;     function transferFromToFork(uint256 fromChainId, uint256 toChainId, address from, address to, uint256 tokenId) external;     function isTransferAvailable(uint256 fromChainId, uint256 toChainId) external view returns (bool); }  contract ERC1155ForkSafe is ERC1155 {     event TransferFork(uint256 fromChainId, uint256 toChainId, address indexed from, address indexed to, uint256 tokenId, uint256 amount);     function transferToFork(uint256 fromChainId, uint256 toChainId, address to, uint256 tokenId, uint256 amount) external;     function transferFromToFork(uint256 fromChainId, uint256 toChainId, address from, address to, uint256 tokenId, uint256 amount) external;     function isTransferAvailable(uint256 fromChainId, uint256 toChainId) external view returns (bool); }  ",
                    "links": [],
                    "GPT-summary": "The author presents a rough draft of an idea for fork-safe tokens. The proposal suggests that tokens can store the balance per chain ID, and before a hard fork, users can transfer their assets to the new (un)forked network. The balance is split so that the total supply across all chains remains unchanged. The proposal includes prototype interfaces for ERC20, ERC721, and ERC1155. A third party could give constructive criticism of the proposal or ask questions about it.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.006439393939393
                }
            ]
        }
    ],
    "group_index": "364"
}