{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2069-recommendation-for-using-yaml-abi-in-specifications/3347",
            "title": "EIP-2069: Recommendation for using YAML ABI in specifications ",
            "index": 3347,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "3",
                    "time": "02/06/2019-23:04:01",
                    "content": "Discussion URL for   github.com/ethereum/EIPs       Add YAML ABI draft     by axic   on 11:31PM - 23 May 19 UTC   2 commits   changed 1 files   with 101 additions   and 0 deletions.        ",
                    "links": [
                        "https://github.com/axic",
                        "https://github.com/ethereum/EIPs/pull/2069",
                        "https://github.com/axic",
                        "https://github.com/ethereum/EIPs/pull/2069"
                    ],
                    "GPT-summary": "The author of the post is explaining a proposal for using YAML ABI in specifications. A third party is giving constructive criticism and asking questions about the proposal, while another third party may be auditing and reviewing the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "2",
                    "likes": "1",
                    "time": "03/06/2019-19:10:00",
                    "content": "I find this a very interesting idea. It would be excellent if I could scrape the EIP repo and easily parsed standards. I build tools that benefit immeasurably from the standards. I could support them all (or any portion I wish) if the process was more easily automated. Why not even go further and automate the process to scrape the EIP repo looking for these finalized standards and lay them down into some immutable file store? Finalized EIPs are supposed to never change. We should store them (in machine readable format) at a hash and add the hash to the repo. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.043650793650793
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "3",
                    "likes": "0",
                    "time": "07/06/2019-16:04:09",
                    "content": "Isn\u2019t YAML a superset of JSON? Couldn\u2019t we just do this? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "4",
                    "likes": "0",
                    "time": "09/06/2019-12:03:41",
                    "content": "The EIP/ERC explains this and the motivation. YAML is a superset, but if we use the JSON-compatible features, then we get the benefit of in-line comments, perhaps more readable structure and that the YAML spec can be converted to the JSON undrestood by tools. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "5",
                    "likes": "0",
                    "time": "09/06/2019-12:44:01",
                    "content": "Hmm, this seems to be of primary benefit to situations where the json is not automatically generated, but human managed or created. Things like test cases and external interfaces come to mind. Perhaps extending this spec to cover some of the common test case formats would be of value? This spec could also be used when testing tools that work with ABIs in test cases for those tools. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/esaulpaugh",
                    "index": "6",
                    "likes": "0",
                    "time": "10/06/2019-11:12:14",
                    "content": "Here are some of my ABI test cases, based on the ethers.js/tests/tests/ contract-interface-abi2.json.gz test case format (minus the solidity-specific properties): https://github.com/esaulpaugh/headlong/blob/master/src/test/resources/tests/headlong/tests/abi_tests.json ",
                    "links": [
                        "https://github.com/ethers-io/ethers.js/tree/master/tests",
                        "https://github.com/ethers-io/ethers.js/tree/master/tests/tests",
                        "https://github.com/esaulpaugh/headlong/blob/master/src/test/resources/tests/headlong/tests/abi_tests.json"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "7",
                    "likes": "0",
                    "time": "13/06/2019-12:49:44",
                    "content": "    fubuloubu:  Hmm, this seems to be of primary benefit to situations where the json is not automatically generated, but human managed or created.   The whole point of the proposal is to move on from Solidity interfaces to defining interfaces as YAML. This would reduce the dependency on Solidity.     fubuloubu:  Things like test cases and external interfaces come to mind. Perhaps extending this spec to cover some of the common test case formats would be of value? This spec could also be used when testing tools that work with ABIs in test cases for those tools.   I guess it could be, but I\u2019m not sure. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.041666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "8",
                    "likes": "1",
                    "time": "13/06/2019-14:04:19",
                    "content": "    axic:  The whole point of the proposal is to move on from Solidity interfaces to defining interfaces as YAML. This would reduce the dependency on Solidity.   I didn\u2019t make that connection before, although it is spelled out plainly. This is definitely a benefit, but not necessarily solving all the problems other languages have with the current way ERC specifications are made. For example, many people lately have been defining ERCs with the heavy use of dynamic arrays arguments, a feature Vyper doesn\u2019t currently support (but we are working on it). My hope would be that people would define single-size arguments in their interfaces, but people make use of more advanced features like this pretty pervasively. And even more generally, the use of mixedCamelCase in defining the names of everything has forced us to adopt that style over the more Pythonic snake_case style that Python linting tools expect. Not that we should (or can) remove these choices that derived originally from the use of the Solidity language in defining many early ERCs, but there are many more subtle decisions made which cannot be resolved by creating a more generic specification format, although I do welcome the intent behind doing that.      axic:   Things like test cases and external interfaces come to mind. Perhaps extending this spec to cover some of the common test case formats would be of value? This spec could also be used when testing tools that work with ABIs in test cases for those tools.  I guess it could be, but I\u2019m not sure.   Another thing that comes to mind is the EIP190/1123 ethPM packaging format, which leverages JSON, and people will occasionally use to define packages manually for testing purposes, etc. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.586309523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "9",
                    "likes": "0",
                    "time": "13/06/2019-15:15:33",
                    "content": "    fubuloubu:  This is definitely a benefit, but not necessarily solving all the problems other languages have with the current way ERC specifications are made. For example, many people lately have been defining ERCs with the heavy use of dynamic arrays arguments, a feature Vyper doesn\u2019t currently support (but we are working on it).   Actually on that note the other benefit would be that only features included in the Contract ABI can be specified and Solidity specific features cannot. However, dynamic arrays are \u201cpart of the Contract ABI\u201d as long as we consider the spec in the Solidity documentation the canonical one. Unless this one is merged https://github.com/ethereum/EIPs/pull/1605 (we\u2019ve actually discussed and hope to finalise and merge it next week) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.911764705882352
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fubuloubu",
                    "index": "10",
                    "likes": "0",
                    "time": "13/06/2019-15:43:07",
                    "content": "    axic:  Unless this one is merged https://github.com/ethereum/EIPs/pull/1605  (we\u2019ve actually discussed and hope to finalise and merge it next week)   That one should definitely be merged. Perhaps the Solidity examples in that spec could be JSON/YAML ones instead?      axic:  Actually on that note the other benefit would be that only features included in the Contract ABI can be specified and Solidity specific features cannot.   I agree this is a very good reason why this proposal will help improve the formulation of ERCs.      axic:  However, dynamic arrays are \u201cpart of the Contract ABI\u201d as long as we consider the spec in the Solidity documentation the canonical one.   As they should be. I wasn\u2019t advocating for changing that part of the ABI spec, more thinking it would be good guidance for the construction of ERCs not to use dynamic arrays by default. It complicates the implementation\u2019s handling of the ERC, and uses a newer feature that IIRC is only available with ABIEncoderV2 in Solidity. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.778333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "11",
                    "likes": "3",
                    "time": "13/06/2019-21:59:02",
                    "content": "Change the format slightly to support \u201cinterface\u201d names: # The transfer function. Takes the recipient address # as an input and returns a boolean signaling the result. ERC20: - name: transfer   type: function   stateMutability: nonpayable   inputs:   - name: recipient     type: address   - name: amount     type: uint256   outputs:   - name: ''     type: bool - name: balance   type: function  ERC2020: - name: transfer   type: function - name: balance   type: function  Also created a dumb Javascript tool to convert that into a Solidity interface: https://github.com/axic/yamabi It translates the above to: interface ERC20 {   function transfer(address recipient, uint256 amount)  returns (bool);   function balance(); }  interface ERC2020 {   function transfer();   function balance(); }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.010416666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/metaver5o",
                    "index": "12",
                    "likes": "0",
                    "time": "13/03/2023-14:00:22",
                    "content": "OMG this is soo underrated! please VOTE UP! #YAMLFTW ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "859"
}