{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-6551-non-fungible-token-bound-accounts/13030",
            "title": "ERC-6551: Non-fungible Token Bound Accounts ",
            "index": 13030,
            "category": [
                "Tokens"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "1",
                    "likes": "4",
                    "time": "23/02/2023-16:20:15",
                    "content": "An interface and registry for smart contract accounts owned by ERC-721 tokens.   github.com/ethereum/EIPs         Add EIP: Non-fungible Token Bound Accounts   ethereum:master \u2190 jaydenwindle:token_bound_accounts              opened 04:16PM - 23 Feb 23 UTC                 jaydenwindle               +391 -0       When opening a pull request to submit a new EIP, please use the suggested templa\u2026te: https://github.com/ethereum/EIPs/blob/master/eip-template.md  We have a GitHub bot that automatically merges some PRs. It will merge yours immediately if certain criteria are met:   - The PR edits only existing draft PRs.  - The build passes.  - Your GitHub username or email address is listed in the 'author' header of all affected PRs, inside <triangular brackets>.  - If matching on email address, the email address is the one publicly listed on your GitHub profile.       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/6551/files",
                        "https://github.com/jaydenwindle",
                        "https://github.com/ethereum/EIPs/pull/6551/files",
                        "https://github.com/ethereum/EIPs/pull/6551"
                    ],
                    "GPT-summary": "The post introduces a proposal for an interface and registry for smart contract accounts owned by ERC-721 tokens. The author provides a link to the proposal and a template for submitting a new EIP. The post also mentions a GitHub bot that automatically merges some PRs and lists the criteria that need to be met for the bot to merge a PR.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.564935064935065
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ccamrobertson",
                    "index": "2",
                    "likes": "0",
                    "time": "23/02/2023-19:57:03",
                    "content": "I love the simplicity of this proposal, yet it enables significant capabilities for ERC721 creators and holders. A few thoughts crop up:   It seems like there is significant opportunity for bad actors to deploy either duplicate registries or implementations for a given ERC721. Although I see that preventing fraud is outside the scope of this EIP, has there been thought given to providing more information about who calls createAccount? For instance I would likely have far more trust in an account created by the minter of the original account.   This might not be desirable, but I am trying to work out whether or not it would be possible to have a registry that allows for the broad registration of Account Implementations without targeting specific token IDs until a user needs to take an action with the account. I suppose this might result in something like an impliedAccount from createAccountImplementation that can be read from the contract prior to creation so that assets can be deposited to an entire collection vs. single tokenIds.   Despite the permissionless nature, is it expected that a canonical registry will (or should) emerge?   Excited to see this in the wild! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.551445578231292
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "3",
                    "likes": "1",
                    "time": "25/02/2023-01:15:51",
                    "content": "These are great questions @ccamrobertson!  Yes, this does present an opportunity for fraud. The closest analogue I can think of would be airdropping \u201cscam\u201d NFTs into a wallet, which is quite common. This behavior is harmless to the end user so long as the malicious accounts are not interacted with. Because the address of the created account is tied to the implementation it points to, a holder can trust that an account created using a trusted implementation address is secure, regardless of who calls createAccount. The ability to permissionlessly deploy accounts for tokens that you do not own is desirable in many cases, and I think this functionality should be maintained if possible. One example is NFT creators who wish to deploy token bound accounts on behalf of their holders. Determining whether an account is trustworthy seems like something that should happen off-chain at the client level (as both the caller of createAccount and the implementation address will be queryable via transaction logs), or perhaps via an on-chain registry of trusted implementations (although that seems like a large increase in the scope of this EIP, and may warrant a sepe). Would love to hear any suggestions you have for how this type of fraud could be addressed within the scope of this proposal! This is definitely an interesting idea to explore. I had considered adding a discoverAccount function which would emit an event registering an account address, but ultimately decided against it because the same data could be queried off-chain at the application level given an implementation address. Depositing assets to an entire collection is definitely an interesting use case, but the logic for this may be better implemented at the asset contract level rather than the within the context of this proposal. It might be interesting to add a registerImplementation function which emits an event notifying listeners that a new implementation is available. However, I fear this may compound the risk of malicious account implementations as it gives them an appearance of legitimacy. Since the proposal defines both a registry implementation and a registry address that are permissionless, it is expected that this will become the canonical registry. A single entry point for token bound accounts will make it much easier for the ecosystem to adopt this proposal vs. multiple registries. The proposed registry should be flexible enough to accommodate the majority of token bound account implementations, as the EIP-1167 proxy pattern is very well supported. Of course, anyone is free to deploy their own registry implementation, or to deploy token bound account contracts without using a registry.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.0841149591149595
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/scorpion9979",
                    "index": "4",
                    "likes": "1",
                    "time": "26/02/2023-17:18:33",
                    "content": "I think this is a great concept that enables a whole new array of use cases and the best thing about it is that it would already work with any existing NFTs. I think it could also give rise to a whole new and unique model of project airdrops. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Positive feedback on proposal",
                        "Extending to proposal",
                        "None"
                    ],
                    "Sentiment": 7.034090909090908
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "5",
                    "likes": "0",
                    "time": "26/02/2023-21:47:57",
                    "content": "Thanks @scorpion9979! This proposal definitely has interesting implications for airdrops. It could eliminate the need for projects to capture point-in-time snapshots of token holders, since the token bound account address for each NFT is static and computable. Additionally, because each token bound account address can be computed from the token ID of the NFT which owns it, the data required to distribute tokens could potentially be stored in a compressed format on chain. This may significantly reduce the gas cost required to perform airdrops. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.354166666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/william1293",
                    "index": "6",
                    "likes": "0",
                    "time": "27/02/2023-06:02:23",
                    "content": "As far as I know, a project called A3S Protocol has implemented a similar function, but I don\u2019t know the difference between its implementation and your proposal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "7",
                    "likes": "0",
                    "time": "27/02/2023-18:01:43",
                    "content": "Thanks for highlighting this project @william1293! I haven\u2019t seen it before. It looks like A3S uses a similar approach, but from a quick glance it seems like there are a few key differences:  A3S uses a single central NFT collection which it deploys smart contract accounts for. It is not compatible with other NFTs. This proposal gives every NFT the ability to have a smart contract account. The A3S factory contract is centrally owned and upgradable by the owner. The registry defined in this proposal is neither owned or upgradable. Each A3S account calls back into the central factory to determine ownership of the account, which theoretically gives A3S the ability to modify the owner of an A3S account without the current owner\u2019s permission. This proposal defers ownership checks to the account implementation, allowing fully sovereign account implementations to be developed. The example account implementation defined in this proposal is sovereign by default.  In short, this proposal defines a system that gives every NFT a smart contract account in a decentralized manner. A3S seems to be a for-profit protocol company that creates smart contract accounts for their own NFT collection. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.436011904761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "8",
                    "likes": "0",
                    "time": "28/02/2023-17:55:56",
                    "content": "That sounds similar to previous standard EIP-5252. I think proxy method to generate account contract would make the gas cost more efficient. I think EIP validators will finalize this one as they could not understand the code and gave up. It is such a shame they need take effort on discovering new primitives but then they are not funded when @vbuterin sells eth for $350 million. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 5.391414141414142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "9",
                    "likes": "0",
                    "time": "28/02/2023-18:39:34",
                    "content": "@SamWilsn I volunteer to review this EIP and get it finalized, and hopefully I might find someone interested to finalize my EIP as well? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "10",
                    "likes": "0",
                    "time": "28/02/2023-19:09:56",
                    "content": "    hskang9:  I volunteer to review this EIP and get it finalized   Always happy to have more peer reviewers!     hskang9:  hopefully I might find someone interested to finalize my EIP as well?   ERC-5252? You can open a pull request to move it to status: Review whenever you think it\u2019s ready. Peer review\u2014while recommended\u2014is optional. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/RobAnon",
                    "index": "11",
                    "likes": "1",
                    "time": "28/02/2023-21:27:18",
                    "content": "Pretty neat, we\u2019ve already done this with Revest FNFTs. Suggest including backwards compatibility in some manner. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "12",
                    "likes": "1",
                    "time": "28/02/2023-23:54:21",
                    "content": "@hskang9 I\u2019d love to learn more about the similarities you see between this proposal and ERC-5252. I\u2019ve taken a read through that proposal and I\u2019m not totally clear on how it could provide smart contract accounts for NFTs. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.455357142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "13",
                    "likes": "1",
                    "time": "01/03/2023-00:17:53",
                    "content": "@RobAnon thanks for sharing! From a cursory look, it seems like Revest uses ERC-1155 tokens under the hood. ERC-1155 support was considered during the development of this proposal, but ultimately decided against. Since ERC-1155 tokens support multiple owners for a given token ID, binding an account to an ERC-1155 token would significantly complicate the ownership model of this proposal. In the case of an account bound to an ERC-1155 token, would each token holder be able to execute arbitrary transactions? Would signatures from all holders be required? Or would signatures only need to be collected from a majority of holders? Some ERC-1155 tokens (potentially including Revest?) support single account ownership of of a ERC-1155 tokens by limiting the balance of each token ID to 1. The challenge to supporting these tokens is that the ERC-1155 standard doesn\u2019t define a method for querying the total number of tokens in existence for a given token ID. It is therefore impossible to differentiate between ERC-1155 tokens that have multiple owners per token ID and those that have a single owner per token ID without using non-standard interfaces. Since this proposal purposefully excludes ERC-1155 tokens from its scope, I don\u2019t think Revest tokens can be supported in their current form. However, Revest would be welcome to implement a custom token bound account implementation that uses an alternative ownership scheme if they wish to support this proposal. Another potential solution would be to wrap the existing ERC-1155 tokens in an ERC-721 token, which would then make them compatible with this proposal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.351521164021164
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "14",
                    "likes": "1",
                    "time": "01/03/2023-00:45:03",
                    "content": "That is because you don\u2019t clarify ambuiguity of account using NFT and haven\u2019t even made a contract implementation yet. Your proposal currently have not clarified how much one\u2019s NFT have access to its account contract and how the access will be managed. If you can\u2019t make contract implementation, you don\u2019t know what you are doing. What I look feasible in your proposal is unified interface for operating account bound contracts, and this is the first thing I will review. Other items will be reviewed once the contract for binding logic on each case in the proposal is implemented. Account bound finance(EIP-5252) fits in the case where one NFT manages access one contract bound to its nft owner. EIP-5252 creates account with contract clone method. Backward compatibility may be considered if this EIP tries to implement EIP-5252\u2019s structure. Also, one question about security considerations, have you considered adding metadata in your NFT registry and make it display in opensea metadata format? Why is this a security concern if a metadata can be retrieved from its registry for account bounding? Do you have the certain metadata format you would propose? For example, OpenRarity have come up with their metadata to show NFT rarity. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.366071428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "15",
                    "likes": "1",
                    "time": "01/03/2023-00:51:28",
                    "content": "It would be actually great if we include each of our cases on clarifying account ambiguity into this eip and try to come up with most unified interface for all in democratic way. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 8.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "16",
                    "likes": "1",
                    "time": "01/03/2023-01:14:45",
                    "content": "It is not true that EIP-1155 cannot be used for account bounding, account bounding can already be done by checking ownership of an EIP-1155 token of sender in account contract. Ids can actually be assigned to EIP-1155 and it is more gas efficient. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.541666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "17",
                    "likes": "3",
                    "time": "01/03/2023-01:36:23",
                    "content": "@hskang9 a few comments:  haven\u2019t even made a contract implementation yet  A fully-functional implementation is included in the \u201cReference Implementation\u201d section.  If you can\u2019t make contract implementation, you don\u2019t know what you are doing  This seems unnecessarily hostile - let\u2019s try to keep things civil   Account bound finance(EIP-5252) fits in the case where one NFT manages access one contract bound to its nft owner  Right - I guess my question is whether ERC-5252 works with all existing NFT contracts? Or does it only work with NFTs that implement the ERC-5252 interface?  have you considered adding metadata in your NFT registry and make it display in opensea metadata format? Why is this a security concern if a metadata can be retrieved from its registry for account bounding?  This proposal is designed to work with external NFT contracts, especially ones that have already been deployed and already have metadata systems in place. As such, it doesn\u2019t specify any requirements for metadata beyond those set out in EIP-721. This is not a security concern.  account bounding can already be done by checking ownership of an EIP-1155 token of sender in account contract  Right - you can check that a sender\u2019s balance of an ERC-1155 token is non-zero. My point is that there can be many owners of a single ERC-1155 token with a given token ID. How would you recommend handling account authorization given multiple token holders? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.181818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "18",
                    "likes": "1",
                    "time": "01/03/2023-02:13:22",
                    "content": "    jay:  A fully-functional implementation is included in the \u201cReference Implementation\u201d section.   The reference implementation does have a case of account contract being a proxy to interact with another smart contract, but it does not cover all ambiguity such as a case where an account being operated by the rules on smart contract.     jay:  If you can\u2019t make contract implementation, you don\u2019t know what you are doing   Sorry if it hurts you, but it is true that you haven\u2019t covered the case on other previous references where the contract account can have other utilities. The way to use smart contract with NFT as a proxy account is very interesting and has its point enough if it is clarified.     jay:  Right - I guess my question is whether ERC-5252 works with all existing NFT contracts? Or does it only work with NFTs that implement the ERC-5252 interface?   Definitely not. your proposal is something new from what I did. Your proposal is providing a way where a proxy account can be made in EVM blockchain with NFT. Problem is you cover the proposal as if it covers all cases of account bound with NFT.     jay:  This proposal is designed to work with external NFT contracts, especially ones that have already been deployed and already have metadata systems in place. As such, it doesn\u2019t specify any requirements for metadata beyond those set out in EIP-721. This is not a security concern.   I agree as this is rather a specification of a proxy account by owning an nft from the reference implementation for now. The proposal has its value on its generic interface to interact with other contracts, but I think it is currently neglecting the fact on who is reponsible on which and which on connecting account to NFT. However, I believe this has a huge potential when it comes to proxy trade. As you declare there is no security concern, it is clear that this is just used as generic proxy account.     jay:  Right - you can check that a sender\u2019s balance of an ERC-1155 token is non-zero. My point is that there can be many owners of a single ERC-1155 token with a given token ID. How would you recommend handling account authorization given multiple token holders?   ERC-1155 with id can be made with setting asset key as an id (e.g. (\u201c1\u201d, 1), (\u201c2\u201d, 1)). This way one can handle account authorization as same as ERC721. After looking at the reference implementation, I suggest amending the proposal name from \u201cNon-fungible Token Bound Accounts\u201d into \u201cNon-fungible Token Bound Proxy Accounts\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.360895824605501
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "19",
                    "likes": "0",
                    "time": "01/03/2023-02:40:59",
                    "content": "    jay:  Right - you can check that a sender\u2019s balance of an ERC-1155 token is non-zero. My point is that there can be many owners of a single ERC-1155 token with a given token ID. How would you recommend handling account authorization given multiple token holders?   @jay 's point is fair. You need to specify how you handle this issue. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.414285714285715
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "20",
                    "likes": "0",
                    "time": "01/03/2023-15:14:35",
                    "content": "    hskang9:  does not cover all ambiguity such as a case where an account being operated by the rules on smart contract   I can definitely add some test cases to clarify how token bound accounts should function. The example account implementation in the proposal is intentionally simple.     hskang9:  you haven\u2019t covered the case on other previous references where the contract account can have other utilities   Projects wishing to implement this proposal are welcome to create custom account implementations which add additional functionality to token bound accounts. This proposal defines a minimal interface in order to leave room for diverse implementations.     hskang9:  Problem is you cover the proposal as if it covers all cases of account bound with NFT   I\u2019d love to hear more about some of the cases that couldn\u2019t be supported by this proposal. EIP-1167 proxies were chosen to maximize the possible cases that can be supported, as they have wide ecosystem support and can support nearly all possible smart contract logic.     hskang9:  it is currently neglecting the fact on who is reponsible on which and which on connecting account to NFT   I can definitely attempt to make this clearer in the proposal. Anyone can create a token bound account for any NFT, but only the owner of the NFT will be able to utilize the account. This is enforced by checking that a given implementation supports the token bound account interface described in this proposal before deploying the account. Bad actors could deploy malicious account implementations, which is a potential concern. However, much like \u201cspam\u201d NFTs that are airdropped into people\u2019s wallets, there is no risk to the end user so long as they do not interact with accounts whose implementations are untrusted.     hskang9:  ERC-1155 with id can be made with setting asset key as an id (e.g. (\u201c1\u201d, 1), (\u201c2\u201d, 1)). This way one can handle account authorization as same as ERC721.   This is correct. However, given an external ERC-1155 token contract with no knowledge of its token ID scheme, there is no way (according to the ERC-1155 standard interface) for an account implementation to determine that there is only one owner per token ID. As mentioned above, a custom account implementation could be created which implements the owner and executeCall functions such that they check balanceOf instead of ownerOf to allow usage with ERC-1155 tokens. I\u2019m reluctant to specifically include this in the proposal to avoid bloating the specification, but if there is enough interest that can certainly be reconsidered.     hskang9:  You need to specify how you handle this issue.   This question was actually directed at you @hskang9  Would love to hear your thoughts on how you would like to see ERC-1155 tokens supported! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.357312925170068
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hskang9",
                    "index": "21",
                    "likes": "1",
                    "time": "03/03/2023-00:41:39",
                    "content": "    jay:  I can definitely add some test cases to clarify how token bound accounts should function. The example account implementation in the proposal is intentionally simple.   You are missing the point. You claim to have provided a token bound proxy account that enables someone do anything and you limit what it does? It is great to make a test cases, but you just made a token bound proxy account for executing generic transactions with separate contracts. You don\u2019t need to limit what you just make, that is not a standard.     jay:  Projects wishing to implement this proposal are welcome to create custom account implementations which add additional functionality to token bound accounts. This proposal defines a minimal interface in order to leave room for diverse implementations.   Ok, so to leave a room, I think the proposal has to specify three cases where:  wallet <> token bound contract <> another contract (proxy account and your reference implementation) wallet <> token bound contract  The question is, how will you securely specify second item as you referred on security concerns in your original proposal? and how will you aggregate all the other cases into one (e.g. FNFT by Revest, etc)?     jay:  I\u2019d love to hear more about some of the cases that couldn\u2019t be supported by this proposal. EIP-1167 proxies were chosen to maximize the possible cases that can be supported, as they have wide ecosystem support and can support nearly all possible smart contract logic.   Obviously the same answer from the previous quote.     jay:  Right - I guess my question is whether ERC-5252 works with all existing NFT contracts? Or does it only work with NFTs that implement the ERC-5252 interface?   ERC721A is subset of ERC721? Is it too hard to understand implementing NFT ownership of a newly created contract from create when you just coded? EIPs/ABT.sol at 39fe51429c2295692b351e4e89f7c38cc42d8ae9 \u00b7 hskang9/EIPs \u00b7 GitHub     jay:  I can definitely attempt to make this clearer in the proposal. Anyone can create a token bound account for any NFT, but only the owner of the NFT will be able to utilize the account. This is enforced by checking that a given implementation supports the token bound account interface described in this proposal before deploying the account. Bad actors could deploy malicious account implementations, which is a potential concern. However, much like \u201cspam\u201d NFTs that are airdropped into people\u2019s wallets, there is no risk to the end user so long as they do not interact with accounts whose implementations are untrusted.   Ok now put that into the proposal without saying account ambiguity. You also forgot how your registry actually verifies NFT and connected account.     jay:  This is correct. However, given an external ERC-1155 token contract with no knowledge of its token ID scheme, there is no way (according to the ERC-1155 standard interface) for an account implementation to determine that there is only one owner per token ID. As mentioned above, a custom account implementation could be created which implements the owner and executeCall functions such that they check balanceOf instead of ownerOf to allow usage with ERC-1155 tokens. I\u2019m reluctant to specifically include this in the proposal to avoid bloating the specification, but if there is enough interest that can certainly be reconsidered.   No, you don\u2019t know how ERC-1155 works. ERC-1155 can have total supply of 1, and this makes the fact that there is only one owner per token ID. Perhaps you could set total supply on 2 and ask why it does not work.     jay:  This question was actually directed at you @hskang9  Would love to hear your thoughts on how you would like to see ERC-1155 tokens supported!   No thank you. I work on this to make sense of a proposal. I am not joining your peripheral attempt on glorifying the proposal when it is just a proxy account implementation with NFT. You have to pay me first on handling your issue. I only work for free on this after being too afraid of the world where @vbuterin says zero knowledge solves everything but cannot code one line on actually shipping the product then cashes out 350 million dollars, Do Kwon saying algo-stablecoin will solve all money out there and make hundreds of people suicide after his scam got revealed. They all boast their knowledge about crypto, but they have zero knowledge in action. Also, I think using emojis doesn\u2019t help on showing that you are seriously thinking to pass this. Are you trying to finalize this proposal or what? From your answers, it seems you do have knowledge in smart contracts, but it does not look like you have knowledge in action as you haven\u2019t known the EIP-1155 can limit the supply. If your proposal\u2019s name is Non-fungible Token Bound Accounts, you must have knowledge in action on all NFTs, including ERC-1155. Hence, you need to implement the case where EIP-1155 is used too. Otherwise, this has to be limited to ERC-721 token bound accounts. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.430240663291511
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "22",
                    "likes": "2",
                    "time": "03/03/2023-01:35:26",
                    "content": "@hskang9 Thanks for sharing your opinions! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/minhhung123",
                    "index": "23",
                    "likes": "0",
                    "time": "04/03/2023-13:31:45",
                    "content": "Any error in the Registry Implementation. It said with error \u201cExpected even number of hex-nibbles.\u201d in the _creationCode function ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "24",
                    "likes": "1",
                    "time": "04/03/2023-16:31:08",
                    "content": "Thanks for catching that @minhhung123! I\u2019ve updated the reference implementation to fix the issue. Please let me know if you run into any other problems. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 6.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/h4l",
                    "index": "25",
                    "likes": "0",
                    "time": "21/03/2023-12:13:09",
                    "content": "I like this proposal. The functionality it enables of giving 721s predictably-addressed accounts seems genuinely useful. The design seems well thought out \u2014 it maintains backwards compatibility and has a small footprint, without unnecessary details. I think there\u2019s a potential foot-gun, which could also be called a feature, depending on your point of view. Transferring an NFT to the address of an account that is derived from the NFT will make the account inaccessible. This is probably more an implementation consideration than something to spec, but I wonder if implementations should reject a transfer of their own NFT to themselves (in their onERC721Received function), at least by default. A thought on the security issue you describe for the owner of an NFT pulling assets just before completing a sale/transfer. I think a general method to avoid this (that doesn\u2019t require explicit support from an NFT market or from account implementation contracts) could be to create a wrapper NFT contract whose tokens are minted to anyone transferring an NFT to the contract. Anyone holding a wrapper token can redeem the wrapper for the wrapped token, burning the wrapper in the process. If the tokenIds of the wrapper are not re-used, someone buying/receiving a specific wrapper tokenId can be sure that any accounts linked to the wrapped NFT have not performed any transactions since the wrapper was created, as the wrapper contract is the owner of the NFT while wrapped. Although this wouldn\u2019t prevent token-approval-based operations from occurring while the NFT is wrapped. (I\u2019m not suggesting changing the spec, just noting that it seems like this could be mitigated by anyone with an interest in doing so.) Finally, just a thought on the 1155 support \u2014 even though a token can have multiple holders, it\u2019s quite frequently used with a supply of 1 per token. As you describe in the backwards compatibility section, the registry implementation doesn\u2019t enforce 721 interface implementation, so it seems like 1155 support could be an optional choice for an implementation. They could just use balanceOf(...) > 0 to authorise access, and if the 1155 contract allows a supply greater than 1, you just get a kind of 1-of-n multisig account! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.783333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jay",
                    "index": "26",
                    "likes": "0",
                    "time": "22/03/2023-20:06:00",
                    "content": "@h4l this is great feedback, thank you!     h4l:  Transferring an NFT to the address of an account that is derived from the NFT will make the account inaccessible.   This is definitely a potential foot-gun, and I think it\u2019s worth adding a section discussing this to the proposal. Implementations can definitely implement some protection against this by checking that the received NFT is not the NFT which owns the account. However, this issue also arises any time there is an ownership loop involving any number of NFTs. For example, you could have two NFTs and transfer the ownership of each NFT to the account of the other NFT. Since loops could involve a large number of NFTs, iterating through the ownership graph on every NFT transfer to prevent loops would likely exhaust the available gas. The possibility of asset loss due to ownership loops seems similar to burning an NFT - it\u2019s a destructive action that the holder of an NFT has the right to perform. It also has the potential to be the basis for interesting token mechanics, similar to burning. As a result, I think it should be up to each implementation to decide if they would like to prevent this behavior.     h4l:  I think a general method to avoid this (that doesn\u2019t require explicit support from an NFT market or from account implementation contracts) could be to create a wrapper NFT contract whose tokens are minted to anyone transferring an NFT to the contract.   This is a great approach! Another alternative approach inspired by this idea could be to wrap the NFTs stored within the token bound account, allowing additional logic to determine which actions can be taken on these NFTs while they are owned by the token bound account.     h4l:  They could just use balanceOf(...) > 0 to authorise access, and if the 1155 contract allows a supply greater than 1, you just get a kind of 1-of-n multisig account!   This is very true! I wonder if it would be worth modifying the proposal such that it doesn\u2019t assume the existence of a single owner per NFT. This could be accomplished by changing the owner() returns (address) method (which assumes the account has a single owner) to an isOwner(address potentialOwner) returns (bool) method, which returns true if potentialOwner is an owner of the token which controls the account. This may make implementing ERC-1155 support simpler for developers building custom implementations. Would be curious to hear your thoughts on this approach. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.96890943877551
                }
            ]
        }
    ],
    "group_index": "361"
}