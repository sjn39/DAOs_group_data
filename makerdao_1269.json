{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/maple-protocol-erc20-token-assessment-d3m-signal-request/15885",
            "title": "[Maple] Protocol & ERC20 Token Assessment - D3M Signal Request ",
            "index": 15885,
            "category": [
                "Collateral Onboarding",
                "Domain Work"
            ],
            "tags": [
                "sc-domain-work",
                "ces-001",
                "signal-request"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/dbkcan",
                    "index": "#1",
                    "likes": "12",
                    "time": "17/06/2022-18:56:24",
                    "content": "Author(s): David Krett (@dbkcan) Contributors: Henrique Barcelos (@hbarcelos) Reference: [Signal Request] Maker accessing pools of institutional loans through Maple Finance  https://forum.makerdao.com/t/signal-request-maker-accessing-pools-of-institutional-loans-through-maple-finance/12349   Risk Summary/Key Takeaways  NB: A combined assessment of the Maple Finance Protocol V1 and the LP Tokens has been completed for the Maple Protocol. The code for the D3M Adapter is not yet complete, however we have reviewed proposed code for the D3M plan - which is still subject to change and is being completed by @Protocol Engineering and Maple. The preliminary code we reviewed for the D3M Plan is linked to here dss-direct-deposit/D3MMapleV1DaiPool.sol at 35439d2c09b953065dc7f881613bfa9c030a62fa \u00b7 makerdao/dss-direct-deposit \u00b7 GitHub.  It should be noted that Maple Finance is currently developing V2 of the protocol and that some of the concerns/issues identified herein - may be addressed in that version of the protocol.  The overall risk of investing in Maple Finance Liquidity Pool token in the context of implementation via a D3M is assessed as high based on the following:  Pros:   Since launching in May 2021 the protocol has grown quickly to $1.5 Billion TVL with 6 lending pools and no loan defaults to date.   The Maple Protocol is moving towards decentralization.   Smart contracts are well structured with extensive unit and fuzz testing with all code vulnerabilities identified addressed.    Cons:   Governance risk is consider high as the protocol has yet to decentralize, currently there is large potential for conflicts at the Governance and Pool Delegate level as several actors are playing multiple and potentially conflicting roles across the various pools operated by the protocol (ie. seed investors who are pool delegates and also borrowers).   Withdrawal of LP Tokens is complicated by the lockUp periods implemented for liquidity providers and stakers within the protocol - and the Pool Delegate as \u201ca trusted actor\u201d has the full discretion to reduce lockdown periods within the Protocol. Whilst, this offers some advantages to Lending Pool token holders, it introduces a higher level of complexity for the automated withdrawal of lending pool tokens within the implementation of automated trading strategies such as the D3M.   Semantic logic of off-chain loan agreements is not reflected in the smart contracts, and there is a large reliance on the Pool Delegate as a \u201ctrusted actor\u201d to optimize recovery and use good faith in their dealings with Borrowers.   Whilst the Maker Lending Pool is isolated from other Lending Pools, an adverse event in any of the other Lending Pools could have an impact on the Maker Lending Pool, specifically with respect to reducing the ability of Maple, due to MPL token/BPT liquidity, to be able to refinance loans in the Maker lending pool, should Maker want to reduce exposure.   Potential Balancer Pool Token risk (MPL:USDC  MPL:DAI) has not been tested as no defaults have occurred to be date. This risk may be exacerbated/mitigated by a new feature Maple has been planning to introduce at the end of May 2022, to allow the staking of MPL tokens (in return for xMPL) on a protocol basis as opposed to the specific lending pool - however, staking with the xMPL token, is not expected to occur until Maple releases V2 of the protocol.    Specific Recommendations: The key benefits of a D3M is that it allows for MakerDAO to automate the management of investments with another protocol avoiding ongoing off-chain management of MakerDAO\u2019s investments. Given: 1. the higher level of governance risk; 2. the large reliance on the Pool Delegate as a trusted actor; 3. that semantic logic of the loans made to Borrowers is not fully reflected in Maple\u2019s smart contracts; 4. the untested nature of the protocol for real world liquidations (notwithstanding that liquidations have been thoroughly tested against forks of the main-net chain); 5. the potential for defaults in other Pools to impact our loan cover; 6. lockup periods restricting the withdrawal of tokens. There is a high probability that in order to protect our collateral - ongoing monitoring and manual intervention (ie. MakerDAO governance polls) will need to be in place to manage this implementation. Which CES believe defeats most of the purpose of the D3M (automating the minting and burning of Dai to provide liquidity to the Maple Protocol). CES recommends the following:   Implementation of the D3M be deferred until the Maple Protocol has been tested further in adverse market conditions;   If a D3M is to be implemented, in the short term, a Core Unit be designated to be accountable for the ongoing monitoring of the D3M and the Maple Protocol and communicating with the Maple Pool Delegate and Maple Protocol, as there is a high risk that adverse conditions would require forum posts, discussions with the Pool Delegate and Maple Governance;   For the reasons provided above, the significant amount of monitoring that could be required given our assessment of the high risk of investing in this protocol using a \u201cD3M\u201d, should the MKR token holders wish to proceed with providing funding to Maple, at this time, CES recommends that consideration be given to pursuing an alternate approach to providing liquidity.   For detailed information on this assessment refer to the assessment below which is in 3 parts:  Protocol Overview Collateral Token Smart Contract Technical Overview - Pool.sol Protocol/Collateral Token Contract Risk Assessment    General Information Note:  the proposed D3M adapter will be depositing DAI into a new lending pool that Maple intends to create upon approval of this transaction. As a result new contracts will be deployed for the new pool - implicit in this analysis is that similar contracts will be deployed for the new pool as to those being used in the existing Orthogonal Trading managed pool which is the basis of our assessment below.  It should be noted that the basis for our assessment is Maple Protocol v1.0.0 and not Maple Protocol v2.0.0 which is currently in development.   Symbol: GitHub - maple-labs/maple-core: Maple Core Protocol   Addresses: Currently deployed contracts for the Maple Protocol are detailed here: GitHub - maple-labs/protocol-registry: Registry for all relevant deployed contracts, with Etherscan links. For this assessment we analyzed the source code for the Maple Orthogonal USDC pool which provides the core interface for investing in the Maple protocol  0xFeBd6F15Df3B73DC4307B1d7E65D46413e710C27    Deployment Date:  19-May-2021    Max total supply:  339040959965383000000000000   Collateral Onboarding Application:  https://forum.makerdao.com/t/signal-request-maker-accessing-pools-of-institutional-loans-through-maple-finance/12349   Project website: https://maple.finance   Github repository: GitHub - maple-labs/maple-core: Maple Core Protocol   Adapter:  the use of a D3M has been proposed, with the D3M adapter code to be developed by Maple. Under the D3M Maker will inject DAI into the Maple Protocol in exchange for Maple poolFDT Tokens (fully ERC20 Compatible) which will manage investment and withdrawal of funds from the Maker Protocol on an semi-automated basis.    1. Protocol Overview        Maple is a decentralized corporate credit market, providing capital to institutional borrowers by way of under-collateralized loans.   Maple went live on the Ethereum Mainnet in May 2021.   Maple currently offers 5 lending pools on Ethereum mainnet that investors can choose to invest in either as liquidity providers and or staking providers.   To participate in the Maple ecosystem due diligence and KYC is completed with respect to any party that wishes to Borrow or become a Pool Delegate and are whitelisted by Maple Governance and/or by the Pool Delegate (in the case of Borrowers) to act in the relevant lending pools. For stakers and lenders wishing to lend/stake to a pool - the wallet they use for this investment is scanned by TRM Labs via api. Wallets that are not flagged during this scanning are then whitelisted to invest in the relevant lending or staking pool.   The MPL token (ERC20 compatible) was first issued to private investors, with a later public offering. In order to encourage a fair distribution of the MPL token, Maple utilized the Balancer Liquidity Bootstrapping Pool (LBP) method to distribute 500000 (5% of its total supply) to over 1000 token holders which enabled the protocol to raise over $10m USDC as proceeds. In addition, users are able to acquire MPL tokens by providing liquidity to the protocol.   The MPL token has a fixed supply of 10 million tokens and the allocation of tokens at launch and proposed vesting schedule as follows:  Seed Investors - 26% (24 month linear vesting beginning May 2021) Team & Advisors - 25% (24 month linear vesting beginning May 2021) Maple Treasury - 14% Liquidity Mining - 30% Public Auction - 5%    Lending and management of each lending pool is by a Maple approved Pool Delegate who is responsible for:  approving loans into the pool; establishing with borrowers any crypto collateral required (if any); completing off-chain due diligence and KYC for each borrower;    The Pool Delegate is incentivized through an allocation of \u201cestablishment fees\u201d paid on each loan drawdown as well as an ongoing performance fee (split with maple treasury) - which is generally 10% of the interest earned by the pool.   Lenders can invest in the liquidity pool and fund loans made by the pool in return they are issued PoolFDT tokens (symbol MPL-LP - ERC20 compatible) representing the lenders share of the lending pool, and allowing the lender to receive their share of the interest income on any loan that is funded from the lending pool (interest income is the interest paid on the loan less any amounts payable to stakers for providing first loss protection on a percentage of the loan outstanding).   Stakers can earn yield for providing first loss protection on the under collateralized loan. To stake, stakers need to deposit in the pool Balancer Pool Tokens (BPTs) purchased by depositing MPL tokens and the underlying liquidity asset in a 50:50 ratio. For existing lending pools the MPL:USDC 50:50 balancer pool is utilized. Should the proposed D3M facility be utilized Maple will be creating a similar balancer pool for DAI.   Stakers are incented with a fee for providing junior cover, this fee is 10% of the interest yield paid on the loans and is paid into the staking pool as and when interest is received. In addition, to further incent stakers - staking pool yield may be enhanced by the provision to the pool of MPL  rewards which are established to further enhance the yield for providing Junior cover. No rewards are proposed currently for the lending pool that DAI will be utilized in.   Whilst the form of the lending pool to be used by the D3M has not be publicly proposed, using the existing Orthogonal Lending - USDC01 Pool as a proxy - sample parameters for the lending pool would take the following form (based on Maple Pool Stats As At May 31, 2022):  Pool Delegate: Orthogonal Trading Pool Size:  418,696,561 USDC Active Loans: 30 (market makers and arb traders) Principal Cover: 4.09% (Junior Cover Amount / Principal Outstanding) Lenders APY: 11.35% Borrower Collateralization: Loans in the pool generally vary between 0 and 50% collateralization Pool Delegate Cover Contribution: 995,905 USD    For the proposed D3M the pool delegate will be responsible for ensuring that any required junior cover amount is in place as well as ensuring loans made by the pool are collateralized as required, upon loan drawdown, with any required collateralization amount of crypto-native assets. It should be noted, that the Maple Smart contracts have no logic to ensure the required loan collateralization ratio is maintained during the term of any pool loan once advanced. Further, the failure to maintain the collateralization ratio during the loan term is not an event of default. However borrowers are unable to withdraw collateral during the term of the loan in the event the collateral value increases.   An overview of end to end steps for investing in the Maple Protocol can be reviewed here and complete protocol documentation here.    Upgrade of Maple Protocol v1 to v2/xMPL Governance Token   Maple Protocol is in the process of launching a V2 version of the Maple Protocol   As the V2 contracts are still in the process of being developed Maple Protocol requested we base the proposed D3M implementation on the V1 protocol contracts. Once Maple V2 is launched later in 2022, it is likely that we would need to wind down the D3M for the lending Pool, and recreate the D3M adapter to work with the V2 of the protocol. As we don\u2019t know all the details of the V2 pools it is likely that a new technical assessment will need to be completed at that time.   Given the foregoing, a detailed assessment of the V2 token has not been completed - but current key changes within V2, some of which may mitigate risks identified herein, are as follows:  Establishment Fees: In V1 of the protocol these fees are paid upfront at the time the borrower draws down on a loan and are split 33.33%/66.66% between the Pool Delegate and Maple Treasury. In V2 it is intended that these fees will be paid at regular intervals over the loan term; Loan Amortization: In V1 of the protocol the loans are fully drawn down and repayment is due upon the maturity of the loan in V2 the new contract will accommodate loan amortizations and the corresponding release of collateral as repayments are made; Single sided pool cover (WETH, USDC, DAI, WBTC, xMPL) - reducing dependency on MPL; Complete ERC-4626 compatibility for the V2 LP tokens and elimination of lockup periods for these tokens (only subject to a 7 day cooldown period before withdrawal);    As part of the plan to migrate to V2 - Maple on May 30, 2022 deployed a new token contract for xMPL which is intended to be a Governance token.  The intent of this new token are:  To encourage long term participation of MPL holders in the growth of the protocol; To provide a means for MPL token holders to participate and benefit from the revenues earned by the platform.  From contract launch MPL token holders can stake their reward tokens and receive xMPL and for staking their MPL tokens will accrue additional revenues as Maple Treasury intends to use 50% of monthly protocol revenues to buy back MPL tokens which will be then lodged into the xMPL smart contract the value of which shall be distributed to the xMPL token holders over a defined period of time. The staking of MPL to receive xMPL is distinct from the staking of junior cover provided to each lending pool using the Balancer Pool Tokens. In Q3 of 2022 Maple intends to start utilizing the xMPL tokens as the principal asset to provide staking cover to the individual lending pools, thereby eliminating the potential for lending pool stakers to face impermanent loss when staking currently. Specifically, with the current BPT pool for staking - cover providers are currently required to provide MPL:USDC in a 50:50 ration in exchange for the BPT tokens which are then staked to the relevant lending pool. More information with respect to the xMPL token is available here. An audit of the xMPL contract was completed and is available here.  All of the high severity findings have been addressed as well as most of the low and informational findings. In addition, this contract was tested in a code4arena contest, where the contestants were unable to find any major vulnerabilities in the xMPL token contract, an overview of the contest findings is available here.    Liquidations   When a loan defaults in a pool, that pools\u2019 delegate can trigger a default at which time the loan and associated crypto native collateral are liquidated - defaults can only be triggered for non payment of principal and interest when due and only by the Pool Delegate if the Protocol has not been paused.   Upon a liquidation the Maple Protocol V1 initiates a sale of the collateral on Uniswap, if there is a shortfall after the collateral is liquidated it is then claimed from the Staking Pool on Balancer with the necessary amount of Balancer Pool Tokens redeemed for the underlying liquidation asset (which for the existing Orthogonal Pool is USDC).   In the event the Staked Cover is unable to absorb any losses the remaining losses will be borne by the poolFDT token holders that invested in the Lending Pool.   Any recovery in the event of a loss in the Lending Pool will then be totally dependent on the Pool Delegate to pursue real world legal enforcement.    Oracle Dependencies   Chainlink Oracles are used as price feeds and are relied on for the following functionality:  Determining the required amount of Collateral provided by a Borrower at the time of a pool loan drawdown. Determining the minimumAmountOut parameter for the liquidation of Collateral on Uniswap (used to minimize slippage). Determining prices for MapleTreasury Uniswap transactions.    The Maple Oracle contracts are wrapped by contracts to provide a safeguard against Oracle downtime. In the event of an outage the wrapper contracts provide the capability for a Maple multisig account to provide a manual price.    Governance Maple is currently in the process of evolving to a fully decentralized DAO. Currently, until fully decentralized the Governor (A 4 of 7 gnosis multisig account) is responsible for controlling and administering the contracts deployed under the protocol. In addition the Governor can appoint Contract Instance Admins and a Protocol Admin. The role of each of these accounts is further described below. To achieve full decentralization it is intended that MPL token holders will be responsible for governance of the protocol. These token holders will have the ability to submit and vote on proposed changes to the protocol, including adjusting fees, minting or burning MPL tokens and other protocol level changes including the use of fees which have accrued in Maple Treasury. MPL holders will have the option to delegate their voting rights. Currently, the Maple governance process starts with a Request for Comments via its governance forum with details of the proposal well articulated. A Snapshot proposal will be created and community members allowed to vote. If the vote passes with a quorum of 1% of all MPL (100,000 MPL), the proposal can be submitted as a Maple Improvement Proposal (MIP). The MIP which reflects feedback from the first process will be subjected to another voting round on Snapshot. If the vote passes with a quorum of 5% of all MPL (500,000 MPL), the Maple team will enact the change via a multisig. Governor   A multisig account that is intended to evolve into a token governed DAO contract.   Controls administrative functions in the protocol such as:  Management of the Maple Treasury. Defining global parameters for the protocol specifically:  Treasury Fee: the fee sent to Maple DAO Treasury for every loan drawn down in the protocol; Delegate Fee: the fee sent to the pool delegate from every loan drawn down in a specific pool; Cooldown Period: the period of time that is required to pass after a staker or lender initiates an intent to withdraw their tokens;   Pausing functionality for the Loan Factory and the Pool Factory contacts Deploying MplRewards contracts.    Contract Instance Admins   Each contract instance can have a set of administrators dedicated only to contract-instance protocol security/disaster management.   The Admins can pause certain contract functionalities, such as the creation of new Loans in the Loan Factory.   Admins are set by the Governor (in the case of factories), the Pool Delegate (in the case of a Pool).   The Pool Delegates are strongly encouraged to establish MultiSig Wallets for handling their administrative functions.   In the case of parameters established for each pool (Pool Parameters) - the Pool Delegate can set the following static parameters which cannot be changed post pool deployment:  Liquidity Asset: the ERC20 token asset used by a pool to lend to borrowers; Delegate Fee: the ****percentage of interest generated by the pool that is allocated to delegate; Staker Fee:  the percentage of interest generated by the pool that is given to Stakers.    The Pool Delegate can also change some of the Pool Parameters post deployment, these are:  Pool Capacity: total liquidity value a pool will accept. Once this value is reached, the pool has no more capacity for additional liquidity. Liquidity Access: Pool Delegates determine whether the opportunity to provide liquidity in a pool is open privately to a select list of Ethereum addresses or open publicly to any address. Staker Access: Pool Delegates determine whether the opportunity to stake cover for a pool is open privately to a select list of Ethereum addresses or open publicly to any address. Lockup Period: this period determines the length of time liquidity in a pool must be locked prior to withdrawal by LPs or Stakers. The period can be decreased by the pool delegate, but not increased.    Protocol Admin (Global Admin)   This is an account that is authorized to call one function that can pause every function in the protocol.   The intent is that this only be used in the case of a drastic DeFi exploit, during which an action must be taken to stop the attack.   Intended that this permission will eventually be revoked by the Governor once the protocol reaches a steady, safe state. Until this permission is revoked the Global Admin is a MultiSig Wallet and once it is revoked it can never be re-enabled.     2. Collateral Token Smart Contract Technical Overview - Pool.sol   Technical Information  Compiler Version:  v0.6.11+commit.5ef660b1 Decimals: 18 (wad)  Overflow checks: Yes the contract uses the solidity safemath library  Mitigation against allowance race-condition: Yes - the contact uses openzeppelin/SafeERC20.sol to implement safeApprove and safeTransfer functionality. Upgradeable contract patterns:  No, the v1 contracts are not upgradable  Access control:  Administrative and contract access is provided at the Governor Level and the Pool delegate level - through privileged MultiSig accounts. For pool related contracts access is provided to Governor whitelisted Pool delegates. All investors in the protocol are whitelisted after there wallets have been verified through the API - it is not known whether whitelisting of wallets utilizes off-chain services such as Chainalysis.   Formal Verification Considerations  Does transfer have simple semantics? Yes:  SafeERC20.sol  Does transferFrom have simple semantics? Yes:  SafeERC20.sol  Can balances be arbitrarily modified by some actor?  No   Are there any external calls? Yes  Formal Verification Testing: No - the Maple Protocol does not use any formal verification testing or formal verification testing services.   Testnet Information  The project has the Protocol deployed to the Rinkeby Testnet contract deployment addresses for the testnet deployment are available here.   Contract Architecture/Pool Contract Logic        The smart contract architecture for the Maple Protocol is detailed above and more detailed information on the operation of the Protocol as well as developer documentation is available here.   The maple-core/Pool.sol is the core contract for liquidity providers investing in the Maple Protocol. This contract interacts with the other contracts involved in funding loans to the protocol as well inherits from PoolFDT.sol contract.   The Pool contract inherits the ERC20 token standard and implements the ERC-2222 token standard which allows all liquidity providers to claim proportionate amounts of revenue and losses that have been generated by a pool. In the case of liquidity providers a proportionate share of the interest income generated by the pools\u2019 loans. This contract has been extended by the PoolFDT.sol contract which allows for the adjustment of the token holders claimable balance for any loan losses incurred by the lending pool.   Maple Protocol provides some informative end to end process flow diagrams which are available here.   Within the Pool contract there are several authed functions that allow the Pool Delegate and or a Pool Admin to set or change general pool parameters such as:   setLiquidityCap - Cap on amount of liquidity allowed in Pool, if set to zero stops all deposits.  setLockupPeriod - Can only be lowered after instantiation.  setStakingFee - Interest that stakers earn, which must be below 100%.  setAllowList - Allows a PoolDelegate to create an allowlist of LPs for their Pool.  setPoolAdmin - Allows a PoolDelegate to elect a securityAdmin to perform setLiquidityCap and claim   setOpenToPublic - Opens the Pool to the public so allowlist is no longer used.    A liquidity provider is able to call the following key functions within the Pool contract for investing and managing their investment in the Maple Protocol:   deposit(uint256 amt  checks that the Protocol has not been paused and transfers the investment amount to the already instantiated liquidityLocker contract designated for the pool (Funds sitting in the liquidity locker don\u2019t earn any interest until they are actually used to fund a loan); mints poolFDT tokens which are transferred to the liquidity provider.    intendToWithdraw As withdrawals are restricted based on a Pool lockdown period established by the pool delegate - this function initiates the coolDown period required on the pool.  withdraw(uint256 amt) this function allows the withdrawal of the liquidityAsset from the protocol - first completing checks that the protocol has not been paused by the Governor Admin and that the coolDownPeriod (set when indicating an intentToWithdraw) has passed. If the withdrawal is allowed to proceed the contact ensures any accrued interest income is transferred to the liquidity locker.  Prior to transferring amounts in the liquidity locker to the investor - a call is made to the extended FDT contract to ensure that any losses incurred by the pool are reflected in the amount to be received by the investor.  withdrawFunds this function is called by a liquidity provider to withdraw all claimable interest from the liquidityLocker. Interest payments paid to the liquidity locker are not subject to any restrictions unless the Protocol has been paused by the Governor Admin.  increaseCustodyAllowance/transferByCustodian(address from, address to, unint256 amt)These functions allow the investor to transfer their tokens to a Custodian.    With respect to smart contract semantics and how this logic relates to the offchain loan agreements a Maple lending pool has with its borrowers, in the context of a D3M  implementation - the following points should be noted:  Interest payments are distributed on a parri-passu basis to Pool Delegate, Staker, and Liquidity providers Only a pool delegate can trigger individual loan defaults - default under smart contracts are at full discretion of Pool Delegate - and only for non payment of principal and/or interest when due plus the defaultGracePeriod (set by Maple Governor - currently 5 days) The smart contracts have no provisions to handle any subjective defaults (as shared in the template borrower agreement) Once a pool is active there is no smart contract requirement to maintain staking cover - in fact even if loans in the pool have triggered losses - new loans can be made by the pool delegate - without a minimum level of Junior cover Proposed Draft D3M code allows withdrawal up to the debt ceiling unconditionally - and it would be extremely complex to implement restrictions on a pool wide basis - as based on initial assessment many variables that we may want to consider for such restrictions are not easily accessible and may require oracles (ie. BPT Token Price)     Upgradeability   The Maple Protocol V1.0.1 contracts that formed the basis of this assessment are not upgradeable.   Maple is currently upgrading their protocol to V2 - as work on the upgrade remains in process and the intent is to use the proposed D3M with V1 of the protocol the V2 contracts were not reviewed.    Administrative Addresses  Administrative Address for the current deployed contracts are available here .  MapleGlobals: 0xC234c62c8C09687DFf0d9047e40042cd166F3600 (global protocol parameters for deployed contracts) MapleTreasury: 0xa9466EaBd096449d650D5AEB0dD3dA6F52FD0B19 (collects fee revenue for the protocol) MapleDao: 0xd6d4Bcde6c816F17889f1Dd3000aF0261B03a196 (Balance Sheet and Governor of protocol)     Smart Contract Audits   Maple V1 audits are available here.   Most of the issues identified within the most recent V1 protocol audit completed by Peckshield have been addressed through code changes.   The following findings were accepted by the Maple Protocol team without code changes, and will be addressed through off-chain vetting by Maple Governance: 3.4 Suggested Adherence of Checks-Effects-Interactions Pattern  The issue has been addressed by ensuring the proper vetting process in place so that no re-entrancy-capable tokens will be introduced.  3.14 Incompatibility with Deflationary/Rebasing Tokens  This issue has been acknowledged by the team. And the team has a proper vetting process in place to prevent deflationary/rebasing tokens from being listed in the protocol.  3.17 Potential Collusion Between PoolDelegate And Borrowers  This issue has been acknowledged by the Maple Protocol team - \u201cthe current protocol, by design considers Pool Delegates as trusted actors\u201d.  3.18 Revisited Assumption on Trusted Governance  This issue has been confirmed and partially mitigated with a multi-sig account to regulate the governance privileges. Whilst the MultiSig appears to be utilizing the gnosis multisig contract - there may still be some vulnerability to governance attacks. The Multi-Sig is a 4 of 7 multisig with the participants being protocol founders and seed investors.    Subsequent to the above audit code4Arena conducted an audit contest to find any additional bugs the report from that contest is available here. The only major issue that hasn\u2019t been addressed and is yet untested by the protocol - due to lack of defaults to date - is potential arbitrage opportunities on the MPL token in the BPT pool - this has been assessed as a Medium risk:   Potential huge arbitrage opportunities / MPL price decrease which is discussed here.      3. Protocol/Collateral Token Contract Risk Assessment  Pros   Since launching in May 2021 the protocol (Maple Protocol V1) has grown quickly to $1.5 Billion TVL with 6 lending pools on Ethereum mainnet and no loan defaults to date.   The Maple Protocol is moving towards decentralization and actively developing V2 of their protocol.   Smart contracts are well structured with extensive unit and fuzz testing with all code vulnerabilities identified addressed.    Cons   A large reliance on legal enforcement, due to a low level of collateralization.  More importantly when loans are made by the Maple Protocol any required collateralization ratio only needs to be maintained at the time of borrower drawdown of the loan and not during the loan term. Hence, failure to maintain the required Collateralization ratio is not an event of default.   The semantic logic of the smart contracts does not reflect the off-chain loan agreements that are signed by Borrowers to the delegate pool. Specifically:  The only loan agreement provision for an event of default that can be used to trigger an event of default on-chain is the non-payment of interest and principal when due (after an agreed grace period). The triggerDefault() function can only be called effectively by a Pool Delegate as there is a requirement for the account calling this function to have a specified ownership of the LoanFDT tokens; There are other non objective events of default contained in the off-chain loan agreement, such as breach of representations and warranties. It is not evident as to how the relevant Pool Delegate and/or Maple Governance would handle these subjective defaults - as the smart contracts provide only the ability to trigger a default upon non-payment of principal and interest;    Governance is not yet decentralized with control of the protocol sitting with the majority of MPL token holders comprised of seed investors and the Maple protocol founders. Whilst, this increases the potential Regulatory Risk that the protocol is exposed to this risk is offset somewhat by offchain KYC completed on borrowers and screening of wallets funding the pools. Investments in the Protocol is restricted for US investors.   Lending Pools operate independently, with separate Pool Delegates managing each pool. As there have been no defaults to date. A key concern is whether defaults in one lending pool will impact liquidity in other lending pools especially as the staking cover for all pools relies upon the the MPL Balancer Pool Token pool.   Potential for conflict as several parties in the protocol are acting in multiple roles - ie. seed investors/pool delegates/borrowers across the different lending pools.   MPL Token Balancer Participation Token risk. This is a risk that has been identified in the code4arena contest as a Medium vulnerability and as the Maple Protocol has not incurred defaults to date remains untested to date. The potential risk is that upon Maple loan liquidations this could create slippage in the Staking Cover Pool, which could leave Maple vulnerable to arbitrage plays by the Borrower. As it is intended that a new MPL:DAI pool will be established for the proposed D3M we would recommend closely monitoring this risk and a more detailed assessment of the Balancer Pool (Which was out of scope for this assessment).     Supporting Materials - Surya Report  File Description Table     File Name SHA-1 Hash     maple-core/contracts/Pool.sol ad3e2a5c22456f9079d9b89d3351f53eb1c032bc   maple-core/contracts/MplRewardsFactory.sol a793df6f10e303b72d2708e4150bc111b4272989   maple-core/contracts/interfaces/IMapleGlobals.sol e8fd07a356bca2deb0542c02ea730fdd66a03031   maple-core/contracts/MplRewards.sol 2920d8d4d5659f685e659a0078d3a4156d4b051a   maple-core/contracts/interfaces/IERC2258.sol e0b0018d8164aee90e66b6f0a86254b0b1ab34cc   maple-core/contracts/interfaces/IBPool.sol 76c2a58e08f7d0cd334bbc6fdb1c1075eabb3b52   maple-core/contracts/interfaces/IDebtLocker.sol 10550550eb4f8c658ffd7ab475d4d2545930fee3   maple-core/contracts/interfaces/ILiquidityLocker.sol 75673685dbf5b59381c1cbeaa976aa233033c5cb   maple-core/contracts/interfaces/ILiquidityLockerFactory.sol 7281cd352fd1f4e3315f7f5e10f097201d11af3c   maple-core/contracts/interfaces/ILoan.sol 89b2a8f83bea48ff17113e5dc28928806bc2db2e   maple-core/contracts/token/interfaces/ILoanFDT.sol b83477e5e084fe1d66661ddbd241e7cfa7a76907   maple-core/contracts/token/interfaces/IBasicFDT.sol 5816cb0565657ea664a021e068f6f28b7ecf60fa   maple-core/contracts/token/interfaces/IBaseFDT.sol 39783828c33b8d4f4bc7ca464da14ce349ecb4de   maple-core/contracts/interfaces/ILoanFactory.sol 31fbf8bcc7ec4e188ced5e5be65a24482bea083f   maple-core/contracts/interfaces/IPoolFactory.sol 4014decb61fd6c9219b0c3b8432bc2f072fed6fd   maple-core/contracts/interfaces/IStakeLocker.sol 5c1c8163c50c5b55a5236fb1a90bfcfb7232f396   maple-core/contracts/token/interfaces/IStakeLockerFDT.sol a3e31c53d86184af8dea9f53dd364974d5475aeb   maple-core/contracts/token/interfaces/IExtendedFDT.sol 5eac793a4b94614010eb1f3b6098cecebdf805cd   maple-core/contracts/interfaces/IStakeLockerFactory.sol 0ace663fecc6feda40f68fbe64040de538d5e177   maple-core/contracts/library/PoolLib.sol 499057cc3080bcab8f68ffbfcb4027aa049c0253   maple-core/contracts/interfaces/IERC20Details.sol 02ee1a1fe7d45ccdb01a40d66ceff9a15d777ad4   maple-core/contracts/interfaces/IDebtLockerFactory.sol dc8f067d78a4be310c18470608e83d2b69142826   maple-core/contracts/token/PoolFDT.sol ab66fb29dc7ca9cc50bbcf3b468067b479e770f3   maple-core/contracts/token/ExtendedFDT.sol 598a901d26dc4ec88bd941655bc12d8ad222f9b7   maple-core/contracts/token/BasicFDT.sol 6a130a286ff02b3f89c658268f6e04201c3736d5   maple-core/contracts/math/SafeMathUint.sol d21e5e6e9d52e00934d63a7a168b41b466107102   maple-core/contracts/math/SafeMathInt.sol 0f7092e434b40875fb3ebf812852bd059b02b624     Detailed Pool.sol Contract Description Table     Contract Type Bases Property      \u2514 Function Name Visibility Mutability Modifiers   Pool Implementation PoolFDT     \u2514  Public    PoolFDT   \u2514 finalize External    NO\u2757\ufe0f   \u2514 fundLoan External    NO\u2757\ufe0f   \u2514 triggerDefault External    NO\u2757\ufe0f   \u2514 claim External    NO\u2757\ufe0f   \u2514 _handleDefault Internal       \u2514 deactivate External    NO\u2757\ufe0f   \u2514 setLiquidityCap External    NO\u2757\ufe0f   \u2514 setLockupPeriod External    NO\u2757\ufe0f   \u2514 setStakingFee External    NO\u2757\ufe0f   \u2514 setAllowList External    NO\u2757\ufe0f   \u2514 setPoolAdmin External    NO\u2757\ufe0f   \u2514 setOpenToPublic External    NO\u2757\ufe0f   \u2514 deposit External    NO\u2757\ufe0f   \u2514 intendToWithdraw External    NO\u2757\ufe0f   \u2514 cancelWithdraw External    NO\u2757\ufe0f   \u2514 _canWithdraw Internal       \u2514 withdraw External    NO\u2757\ufe0f   \u2514 _transfer Internal       \u2514 withdrawFunds Public    NO\u2757\ufe0f   \u2514 increaseCustodyAllowance External    NO\u2757\ufe0f   \u2514 transferByCustodian External    NO\u2757\ufe0f   \u2514 reclaimERC20 External    NO\u2757\ufe0f   \u2514 BPTVal External    NO\u2757\ufe0f   \u2514 isDepositAllowed Public    NO\u2757\ufe0f   \u2514 getInitialStakeRequirements Public    NO\u2757\ufe0f   \u2514 getPoolSharesRequired External    NO\u2757\ufe0f   \u2514 isPoolFinalized External    NO\u2757\ufe0f   \u2514 _toWad Internal       \u2514 _balanceOfLiquidityLocker Internal       \u2514 _isValidState Internal       \u2514 _isValidDelegate Internal       \u2514 _globals Internal       \u2514 _emitBalanceUpdatedEvent Internal       \u2514 _transferLiquidityAsset Internal       \u2514 _isValidDelegateOrPoolAdmin Internal       \u2514 _whenProtocolNotPaused Internal       \u2514 _isValidDelegateAndProtocolNotPaused Internal       \u2514 _transferLiquidityLockerFunds Internal       MplRewardsFactory Implementation      \u2514  Public    NO\u2757\ufe0f   \u2514 setGlobals External    NO\u2757\ufe0f   \u2514 createMplRewards External    NO\u2757\ufe0f   IMapleGlobals Interface      \u2514 pendingGovernor External    NO\u2757\ufe0f   \u2514 governor External    NO\u2757\ufe0f   \u2514 globalAdmin External    NO\u2757\ufe0f   \u2514 mpl External    NO\u2757\ufe0f   \u2514 mapleTreasury External    NO\u2757\ufe0f   \u2514 isValidBalancerPool External    NO\u2757\ufe0f   \u2514 treasuryFee External    NO\u2757\ufe0f   \u2514 investorFee External    NO\u2757\ufe0f   \u2514 defaultGracePeriod External    NO\u2757\ufe0f   \u2514 fundingPeriod External    NO\u2757\ufe0f   \u2514 swapOutRequired External    NO\u2757\ufe0f   \u2514 isValidLiquidityAsset External    NO\u2757\ufe0f   \u2514 isValidCollateralAsset External    NO\u2757\ufe0f   \u2514 isValidPoolDelegate External    NO\u2757\ufe0f   \u2514 validCalcs External    NO\u2757\ufe0f   \u2514 isValidCalc External    NO\u2757\ufe0f   \u2514 getLpCooldownParams External    NO\u2757\ufe0f   \u2514 isValidLoanFactory External    NO\u2757\ufe0f   \u2514 isValidSubFactory External    NO\u2757\ufe0f   \u2514 isValidPoolFactory External    NO\u2757\ufe0f   \u2514 getLatestPrice External    NO\u2757\ufe0f   \u2514 defaultUniswapPath External    NO\u2757\ufe0f   \u2514 minLoanEquity External    NO\u2757\ufe0f   \u2514 maxSwapSlippage External    NO\u2757\ufe0f   \u2514 protocolPaused External    NO\u2757\ufe0f   \u2514 stakerCooldownPeriod External    NO\u2757\ufe0f   \u2514 lpCooldownPeriod External    NO\u2757\ufe0f   \u2514 stakerUnstakeWindow External    NO\u2757\ufe0f   \u2514 lpWithdrawWindow External    NO\u2757\ufe0f   \u2514 oracleFor External    NO\u2757\ufe0f   \u2514 validSubFactories External    NO\u2757\ufe0f   \u2514 setStakerCooldownPeriod External    NO\u2757\ufe0f   \u2514 setLpCooldownPeriod External    NO\u2757\ufe0f   \u2514 setStakerUnstakeWindow External    NO\u2757\ufe0f   \u2514 setLpWithdrawWindow External    NO\u2757\ufe0f   \u2514 setMaxSwapSlippage External    NO\u2757\ufe0f   \u2514 setGlobalAdmin External    NO\u2757\ufe0f   \u2514 setValidBalancerPool External    NO\u2757\ufe0f   \u2514 setProtocolPause External    NO\u2757\ufe0f   \u2514 setValidPoolFactory External    NO\u2757\ufe0f   \u2514 setValidLoanFactory External    NO\u2757\ufe0f   \u2514 setValidSubFactory External    NO\u2757\ufe0f   \u2514 setDefaultUniswapPath External    NO\u2757\ufe0f   \u2514 setPoolDelegateAllowlist External    NO\u2757\ufe0f   \u2514 setCollateralAsset External    NO\u2757\ufe0f   \u2514 setLiquidityAsset External    NO\u2757\ufe0f   \u2514 setCalc External    NO\u2757\ufe0f   \u2514 setInvestorFee External    NO\u2757\ufe0f   \u2514 setTreasuryFee External    NO\u2757\ufe0f   \u2514 setMapleTreasury External    NO\u2757\ufe0f   \u2514 setDefaultGracePeriod External    NO\u2757\ufe0f   \u2514 setMinLoanEquity External    NO\u2757\ufe0f   \u2514 setFundingPeriod External    NO\u2757\ufe0f   \u2514 setSwapOutRequired External    NO\u2757\ufe0f   \u2514 setPriceOracle External    NO\u2757\ufe0f   \u2514 setPendingGovernor External    NO\u2757\ufe0f   \u2514 acceptGovernor External    NO\u2757\ufe0f   MplRewards Implementation Ownable     \u2514  Public    NO\u2757\ufe0f   \u2514 _updateReward Internal       \u2514 _notPaused Internal       \u2514 totalSupply External    NO\u2757\ufe0f   \u2514 balanceOf External    NO\u2757\ufe0f   \u2514 lastTimeRewardApplicable Public    NO\u2757\ufe0f   \u2514 rewardPerToken Public    NO\u2757\ufe0f   \u2514 earned Public    NO\u2757\ufe0f   \u2514 getRewardForDuration External    NO\u2757\ufe0f   \u2514 stake External    NO\u2757\ufe0f   \u2514 withdraw Public    NO\u2757\ufe0f   \u2514 getReward Public    NO\u2757\ufe0f   \u2514 exit External    NO\u2757\ufe0f   \u2514 notifyRewardAmount External    onlyOwner   \u2514 updatePeriodFinish External    onlyOwner   \u2514 recoverERC20 External    onlyOwner   \u2514 setRewardsDuration External    onlyOwner   \u2514 setPaused External    onlyOwner   IERC2258 Interface      \u2514 increaseCustodyAllowance External    NO\u2757\ufe0f   \u2514 custodyAllowance External    NO\u2757\ufe0f   \u2514 totalCustodyAllowance External    NO\u2757\ufe0f   \u2514 transferByCustodian External    NO\u2757\ufe0f   IBPool Interface      \u2514 transfer External    NO\u2757\ufe0f   \u2514 INIT_POOL_SUPPLY External    NO\u2757\ufe0f   \u2514 MAX_OUT_RATIO External    NO\u2757\ufe0f   \u2514 bind External    NO\u2757\ufe0f   \u2514 balanceOf External    NO\u2757\ufe0f   \u2514 finalize External    NO\u2757\ufe0f   \u2514 gulp External    NO\u2757\ufe0f   \u2514 isFinalized External    NO\u2757\ufe0f   \u2514 isBound External    NO\u2757\ufe0f   \u2514 getNumTokens External    NO\u2757\ufe0f   \u2514 getBalance External    NO\u2757\ufe0f   \u2514 getNormalizedWeight External    NO\u2757\ufe0f   \u2514 getDenormalizedWeight External    NO\u2757\ufe0f   \u2514 getTotalDenormalizedWeight External    NO\u2757\ufe0f   \u2514 getSwapFee External    NO\u2757\ufe0f   \u2514 totalSupply External    NO\u2757\ufe0f   \u2514 getFinalTokens External    NO\u2757\ufe0f   \u2514 joinPool External    NO\u2757\ufe0f   \u2514 calcSingleOutGivenPoolIn External    NO\u2757\ufe0f   \u2514 calcPoolInGivenSingleOut External    NO\u2757\ufe0f   \u2514 exitswapExternAmountOut External    NO\u2757\ufe0f   IDebtLocker Interface      \u2514 loan External    NO\u2757\ufe0f   \u2514 liquidityAsset External    NO\u2757\ufe0f   \u2514 pool External    NO\u2757\ufe0f   \u2514 lastPrincipalPaid External    NO\u2757\ufe0f   \u2514 lastInterestPaid External    NO\u2757\ufe0f   \u2514 lastFeePaid External    NO\u2757\ufe0f   \u2514 lastExcessReturned External    NO\u2757\ufe0f   \u2514 lastDefaultSuffered External    NO\u2757\ufe0f   \u2514 lastAmountRecovered External    NO\u2757\ufe0f   \u2514 claim External    NO\u2757\ufe0f   \u2514 triggerDefault External    NO\u2757\ufe0f   ILiquidityLocker Interface      \u2514 pool External    NO\u2757\ufe0f   \u2514 liquidityAsset External    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 fundLoan External    NO\u2757\ufe0f   ILiquidityLockerFactory Interface      \u2514 owner External    NO\u2757\ufe0f   \u2514 isLocker External    NO\u2757\ufe0f   \u2514 factoryType External    NO\u2757\ufe0f   \u2514 newLocker External    NO\u2757\ufe0f   Iloan Interface ILoanFDT     \u2514 liquidityAsset External    NO\u2757\ufe0f   \u2514 collateralAsset External    NO\u2757\ufe0f   \u2514 fundingLocker External    NO\u2757\ufe0f   \u2514 flFactory External    NO\u2757\ufe0f   \u2514 collateralLocker External    NO\u2757\ufe0f   \u2514 clFactory External    NO\u2757\ufe0f   \u2514 borrower External    NO\u2757\ufe0f   \u2514 repaymentCalc External    NO\u2757\ufe0f   \u2514 lateFeeCalc External    NO\u2757\ufe0f   \u2514 premiumCalc External    NO\u2757\ufe0f   \u2514 loanState External    NO\u2757\ufe0f   \u2514 collateralRequiredForDrawdown External    NO\u2757\ufe0f   \u2514 apr External    NO\u2757\ufe0f   \u2514 paymentsRemaining External    NO\u2757\ufe0f   \u2514 paymentIntervalSeconds External    NO\u2757\ufe0f   \u2514 requestAmount External    NO\u2757\ufe0f   \u2514 collateralRatio External    NO\u2757\ufe0f   \u2514 fundingPeriod External    NO\u2757\ufe0f   \u2514 defaultGracePeriod External    NO\u2757\ufe0f   \u2514 createdAt External    NO\u2757\ufe0f   \u2514 principalOwed External    NO\u2757\ufe0f   \u2514 principalPaid External    NO\u2757\ufe0f   \u2514 interestPaid External    NO\u2757\ufe0f   \u2514 feePaid External    NO\u2757\ufe0f   \u2514 excessReturned External    NO\u2757\ufe0f   \u2514 getNextPayment External    NO\u2757\ufe0f   \u2514 superFactory External    NO\u2757\ufe0f   \u2514 termDays External    NO\u2757\ufe0f   \u2514 nextPaymentDue External    NO\u2757\ufe0f   \u2514 getFullPayment External    NO\u2757\ufe0f   \u2514 amountLiquidated External    NO\u2757\ufe0f   \u2514 defaultSuffered External    NO\u2757\ufe0f   \u2514 amountRecovered External    NO\u2757\ufe0f   \u2514 getExpectedAmountRecovered External    NO\u2757\ufe0f   \u2514 liquidationExcess External    NO\u2757\ufe0f   \u2514 fundLoan External    NO\u2757\ufe0f   \u2514 makePayment External    NO\u2757\ufe0f   \u2514 drawdown External    NO\u2757\ufe0f   \u2514 makeFullPayment External    NO\u2757\ufe0f   \u2514 triggerDefault External    NO\u2757\ufe0f   \u2514 unwind External    NO\u2757\ufe0f   \u2514 pause External    NO\u2757\ufe0f   \u2514 unpause External    NO\u2757\ufe0f   \u2514 loanAdmins External    NO\u2757\ufe0f   \u2514 setLoanAdmin External    NO\u2757\ufe0f   \u2514 reclaimERC20 External    NO\u2757\ufe0f   ILoanFDT Interface IBasicFDT     \u2514 fundsToken External    NO\u2757\ufe0f   \u2514 fundsTokenBalance External    NO\u2757\ufe0f   IBasicFDT Interface IERC20     \u2514 withdrawnFundsOf External    NO\u2757\ufe0f   \u2514 accumulativeFundsOf External    NO\u2757\ufe0f   \u2514 updateFundsReceived External    NO\u2757\ufe0f   IBaseFDT Interface      \u2514 withdrawableFundsOf External    NO\u2757\ufe0f   \u2514 withdrawFunds External    NO\u2757\ufe0f   ILoanFactory Interface      \u2514 CL_FACTORY External    NO\u2757\ufe0f   \u2514 FL_FACTORY External    NO\u2757\ufe0f   \u2514 INTEREST_CALC_TYPE External    NO\u2757\ufe0f   \u2514 LATEFEE_CALC_TYPE External    NO\u2757\ufe0f   \u2514 PREMIUM_CALC_TYPE External    NO\u2757\ufe0f   \u2514 globals External    NO\u2757\ufe0f   \u2514 loansCreated External    NO\u2757\ufe0f   \u2514 loans External    NO\u2757\ufe0f   \u2514 isLoan External    NO\u2757\ufe0f   \u2514 loanFactoryAdmins External    NO\u2757\ufe0f   \u2514 setGlobals External    NO\u2757\ufe0f   \u2514 createLoan External    NO\u2757\ufe0f   \u2514 setLoanFactoryAdmin External    NO\u2757\ufe0f   \u2514 pause External    NO\u2757\ufe0f   \u2514 unpause External    NO\u2757\ufe0f   IPoolFactory Interface      \u2514 LL_FACTORY External    NO\u2757\ufe0f   \u2514 SL_FACTORY External    NO\u2757\ufe0f   \u2514 poolsCreated External    NO\u2757\ufe0f   \u2514 globals External    NO\u2757\ufe0f   \u2514 pools External    NO\u2757\ufe0f   \u2514 isPool External    NO\u2757\ufe0f   \u2514 poolFactoryAdmins External    NO\u2757\ufe0f   \u2514 setGlobals External    NO\u2757\ufe0f   \u2514 createPool External    NO\u2757\ufe0f   \u2514 setPoolFactoryAdmin External    NO\u2757\ufe0f   \u2514 pause External    NO\u2757\ufe0f   \u2514 unpause External    NO\u2757\ufe0f   IStakeLocker Interface IStakeLockerFDT     \u2514 stakeDate External    NO\u2757\ufe0f   \u2514 stake External    NO\u2757\ufe0f   \u2514 unstake External    NO\u2757\ufe0f   \u2514 pull External    NO\u2757\ufe0f   \u2514 setAllowlist External    NO\u2757\ufe0f   \u2514 openStakeLockerToPublic External    NO\u2757\ufe0f   \u2514 openToPublic External    NO\u2757\ufe0f   \u2514 allowed External    NO\u2757\ufe0f   \u2514 updateLosses External    NO\u2757\ufe0f   \u2514 intendToUnstake External    NO\u2757\ufe0f   \u2514 unstakeCooldown External    NO\u2757\ufe0f   \u2514 lockupPeriod External    NO\u2757\ufe0f   \u2514 stakeAsset External    NO\u2757\ufe0f   \u2514 liquidityAsset External    NO\u2757\ufe0f   \u2514 pool External    NO\u2757\ufe0f   \u2514 setLockupPeriod External    NO\u2757\ufe0f   \u2514 cancelUnstake External    NO\u2757\ufe0f   \u2514 increaseCustodyAllowance External    NO\u2757\ufe0f   \u2514 transferByCustodian External    NO\u2757\ufe0f   \u2514 pause External    NO\u2757\ufe0f   \u2514 unpause External    NO\u2757\ufe0f   \u2514 isUnstakeAllowed External    NO\u2757\ufe0f   \u2514 isReceiveAllowed External    NO\u2757\ufe0f   IStakeLockerFDT Interface IExtendedFDT     \u2514 fundsToken External    NO\u2757\ufe0f   \u2514 fundsTokenBalance External    NO\u2757\ufe0f   \u2514 bptLosses External    NO\u2757\ufe0f   \u2514 lossesBalance External    NO\u2757\ufe0f   IExtendedFDT Interface IBasicFDT     \u2514 lossesPerShare External    NO\u2757\ufe0f   \u2514 recognizableLossesOf External    NO\u2757\ufe0f   \u2514 recognizedLossesOf External    NO\u2757\ufe0f   \u2514 accumulativeLossesOf External    NO\u2757\ufe0f   \u2514 updateLossesReceived External    NO\u2757\ufe0f   IStakeLockerFactory Interface      \u2514 owner External    NO\u2757\ufe0f   \u2514 isLocker External    NO\u2757\ufe0f   \u2514 factoryType External    NO\u2757\ufe0f   \u2514 newLocker External    NO\u2757\ufe0f   PoolLib Library      \u2514 poolSanityChecks External    NO\u2757\ufe0f   \u2514 fundLoan External    NO\u2757\ufe0f   \u2514 handleDefault External    NO\u2757\ufe0f   \u2514 calculateClaimAndPortions External    NO\u2757\ufe0f   \u2514 validateDeactivation External    NO\u2757\ufe0f   \u2514 updateDepositDate Internal       \u2514 transferByCustodianChecks External    NO\u2757\ufe0f   \u2514 increaseCustodyAllowanceChecks External    NO\u2757\ufe0f   \u2514 reclaimERC20 External    NO\u2757\ufe0f   \u2514 _bdiv Internal       \u2514 BPTVal External    NO\u2757\ufe0f   \u2514 getSwapOutValue Public    NO\u2757\ufe0f   \u2514 getSwapOutValueLocker Public    NO\u2757\ufe0f   \u2514 _getSwapOutValue Internal       \u2514 getPoolSharesRequired Public    NO\u2757\ufe0f   \u2514 getInitialStakeRequirements External    NO\u2757\ufe0f   \u2514 fromWad External    NO\u2757\ufe0f   \u2514 _convertFromUsd Internal       IERC20Details Interface IERC20     \u2514 name External    NO\u2757\ufe0f   \u2514 symbol External    NO\u2757\ufe0f   \u2514 decimals External    NO\u2757\ufe0f   IDebtLockerFactory Interface      \u2514 owner External    NO\u2757\ufe0f   \u2514 isLocker External    NO\u2757\ufe0f   \u2514 factoryType External    NO\u2757\ufe0f   \u2514 newLocker External    NO\u2757\ufe0f   PoolFDT Implementation ExtendedFDT     \u2514  Public    ExtendedFDT   \u2514 _recognizeLosses Internal       \u2514 _updateLossesBalance Internal       \u2514 _updateFundsTokenBalance Internal       ExtendedFDT Implementation BasicFDT     \u2514  Public    BasicFDT   \u2514 _distributeLosses Internal       \u2514 _prepareLossesWithdraw Internal       \u2514 recognizableLossesOf Public    NO\u2757\ufe0f   \u2514 recognizedLossesOf External    NO\u2757\ufe0f   \u2514 accumulativeLossesOf Public    NO\u2757\ufe0f   \u2514 _transfer Internal       \u2514 _mint Internal       \u2514 _burn Internal       \u2514 updateLossesReceived Public    NO\u2757\ufe0f   \u2514 _recognizeLosses Internal       \u2514 _updateLossesBalance Internal       BasicFDT Implementation      \u2514  Public    ERC20   \u2514 _distributeFunds Internal       \u2514 _prepareWithdraw Internal       \u2514 withdrawableFundsOf Public    NO\u2757\ufe0f   \u2514 withdrawnFundsOf External    NO\u2757\ufe0f   \u2514 accumulativeFundsOf Public    NO\u2757\ufe0f   \u2514 _transfer Internal       \u2514 _mint Internal       \u2514 _burn Internal       \u2514 withdrawFunds Public    NO\u2757\ufe0f   \u2514 _updateFundsTokenBalance Internal       \u2514 updateFundsReceived Public    NO\u2757\ufe0f   SafeMathUint Library      \u2514 toInt256Safe Internal       SafeMathInt Library      \u2514 toUint256Safe Internal        Symbol\tMeaning \tFunction can modify state \tFunction is payable  Call Graph       Inheritance      ",
                    "links": [
                        "https://github.com/maple-labs/maple-core",
                        "https://github.com/maple-labs/protocol-registry",
                        "https://etherscan.io/address/0xfebd6f15df3b73dc4307b1d7e65d46413e710c27#code",
                        "https://forum.makerdao.com/t/cdai-mip6-collateral-onboarding-application/3764",
                        "https://forum.makerdao.com/t/signal-request-maker-accessing-pools-of-institutional-loans-through-maple-finance/12349",
                        "https://maple.finance",
                        "https://github.com/maple-labs/maple-core",
                        "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/7921fdfa-a2c0-4b3c-ab7b-c8f53a5a84b9/maple_protocol_overview.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220617%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220617T182232Z&X-Amz-Expires=86400&X-Amz-Signature=2b919cac3b39ade43bfaf887fc57e30291fe7943e1a0ca8053d27349afad136e&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22maple_protocol_overview.png%22&x-id=GetObject",
                        "https://www.trmlabs.com/?utm_medium=cpc&utm_source=google&utm_campaign=AMER-CA%5BEN%5D_GGL-Brand%5BGEN%5D-Generic_MT-Exact&utm_content=Brand&term=trm%20labs_(e)&gclid=Cj0KCQjw1tGUBhDXARIsAIJx01nvEEWLTQlijDKY2nEETA-0Zk6Nai9bdYWDx5J-g0glRu96jtlvxCYaAsvGEALw_wcB",
                        "https://maplefinance.gitbook.io/maple/protocol/maple-protocol-v1.0.0#pool-parameters",
                        "https://maplefinance.gitbook.io/maple/",
                        "https://www.maple.finance/news/share-in-maples-growth-with-upcoming-changes-to-tokenomics/",
                        "https://docs.google.com/viewer?url=https://github.com/maple-labs/maple-core/files/8507237/Maple.Finance.-.Final.Report.-.Fixes.pdf",
                        "https://code4rena.com/reports/2022-03-maple/",
                        "https://community.maple.finance/",
                        "https://maplefinance.gitbook.io/maple/protocol/maple-protocol-v1.0.0#pool-parameters",
                        "https://github.com/maple-labs/maple-core#rinkeby",
                        "https://user-images.githubusercontent.com/35537333/117036971-fa290000-acd3-11eb-8aa4-188e6dca3a3f.png",
                        "https://github.com/maple-labs/maple-core/wiki",
                        "https://github.com/maple-labs/maple-core/wiki/End-to-End-Process-Flow-Diagrams",
                        "https://github.com/maple-labs/protocol-registry#administrative-contracts",
                        "https://etherscan.io/address/0xC234c62c8C09687DFf0d9047e40042cd166F3600",
                        "https://etherscan.io/address/0xa9466EaBd096449d650D5AEB0dD3dA6F52FD0B19",
                        "https://etherscan.io/address/0xd6d4Bcde6c816F17889f1Dd3000aF0261B03a196",
                        "https://github.com/maple-labs/maple-core#audit-reports",
                        "https://code4rena.com/",
                        "https://code4rena.com/reports/2021-04-maple/",
                        "https://github.com/code-423n4/2021-04-maple-findings/issues/92",
                        "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2f985752-c696-42e0-aeec-3fec73450141/mapleGraph2.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220617%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220617T185142Z&X-Amz-Expires=86400&X-Amz-Signature=cf84e936133583bae985121933557d1c3393585b682036c99806bc2d71d71f15&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22mapleGraph2.png%22&x-id=GetObject",
                        "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/16c24fc3-5b2d-4d3c-93ad-7d01583b3def/inheritance-pool.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220617%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220617T185234Z&X-Amz-Expires=86400&X-Amz-Signature=24ca3de9f88d1c98ebd9eb6fcede45e36bccb28180fb0affe0fd46876d34499e&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22inheritance-pool.png%22&x-id=GetObject",
                        "https://forum.makerdao.com/t/makerdao-long-term-growth-strategy-for-the-future-of-defi/15457/11"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.197025263711311
                },
                {
                    "author_link": "https://forum.makerdao.com/u/Ippy",
                    "index": "#2",
                    "likes": "5",
                    "time": "17/06/2022-19:09:27",
                    "content": "    dbkcan:  staking of MPL tokens (in return for xMPL) on a protocol basis as opposed to the specific lending pool - however, this is not expected to occur until Maple releases V2 of the protocol.   Just so you know, staking is live now ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.3106060606060606
                },
                {
                    "author_link": "https://forum.makerdao.com/u/system",
                    "index": "#3",
                    "likes": "0",
                    "time": "15/09/2022-19:09:28",
                    "content": "This topic was automatically closed 90 days after the last reply. New replies are no longer allowed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0606060606060606
                }
            ]
        }
    ]
}