{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-2771-secure-protocol-for-native-meta-transactions/4488",
            "title": "ERC-2771: Secure Protocol for Native Meta Transactions ",
            "index": 4488,
            "category": [
                "EIPs"
            ],
            "tags": [
                "meta-transactions",
                "erc-2771"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/lirazsiri",
                    "index": "1",
                    "likes": "1",
                    "time": "08/08/2020-07:41:53",
                    "content": "Discussion for https://eips.ethereum.org/EIPS/eip-2771 ",
                    "links": [],
                    "GPT-summary": "The post is a discussion about the ERC-2771 proposal found on https://eips.ethereum.org/EIPS/eip-2771. The author is not advertising the proposal, but rather seeking feedback and answering questions about it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Privacy, Security and risk management",
                        "Interoperability and Scalability",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Jkor",
                    "index": "2",
                    "likes": "0",
                    "time": "29/12/2021-13:04:52",
                    "content": "Interesting read, it\u2019s a neat way of retrieving the original transaction initiator whilst minimizing gas costs for the end user. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.1875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Philogy",
                    "index": "3",
                    "likes": "0",
                    "time": "10/03/2022-22:05:21",
                    "content": "The proposal should be extended to support ERC20 payments to relayers as I believe this will be a common feature. Most applications will require relayers to be paid directly by users as subsidizing gas costs on mainnet will be unfeasible for most projects. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dror",
                    "index": "4",
                    "likes": "0",
                    "time": "15/03/2022-18:39:21",
                    "content": "This protocol explicitly defines the interface between the \u201cForwarder\u201d contract and the \u201cRecipient\u201d contract. It does not define the [meta] transaction format, how it arrives to the forwarder, or who pays for relaying it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "5",
                    "likes": "0",
                    "time": "06/01/2023-20:11:20",
                    "content": " isTrustedForwarder function MAY be called on-chain, and as such gas restrictions MUST be put in place. A Gas limit of 50k SHOULD be sufficient to making the decision either inside the contract, or delegating it to another contract and doing some memory access calculations, like querying a mapping.  What is the requirement being made with the \u201cMUST\u201d here? That contracts calling isTrustedForwarder must set a gas limit? Similarly, the \u201cSHOULD\u201d requirement is a bit weird as well. Perhaps both requirements could be better written as simply:  isTrustedForwarder SHOULD NOT consume more than 50,000 gas.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dror",
                    "index": "6",
                    "likes": "0",
                    "time": "07/01/2023-00:13:20",
                    "content": "    SamWilsn:  isTrustedForwarder SHOULD NOT consume more than 50,000 gas.   Agreed. it is better wording for that. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "7",
                    "likes": "0",
                    "time": "09/01/2023-12:48:27",
                    "content": "One argument against the new wording: the previous wording makes it clear that relayers must set a gas limit for safety reasons. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.116161616161616
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "8",
                    "likes": "0",
                    "time": "09/01/2023-15:10:43",
                    "content": "Is it possible to make a call without a gas limit? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "9",
                    "likes": "0",
                    "time": "09/01/2023-16:54:51",
                    "content": "Relayers should set a reasonable gas limit, and should be aware that they may lose funds if they use defaults provided by their library. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/agostbiro",
                    "index": "10",
                    "likes": "0",
                    "time": "22/01/2023-11:33:18",
                    "content": "Hi, Thanks for all the great work on this proposal! Meta transactions have already made a big positive impact on the ecosystem and they\u2019ll only get more important. I\u2019m working on wallet security and I\u2019d like to propose that a message format containing transaction parameters becomes part of the standard. The reason for this is that transaction simulation is the only way to give the user accurate information about the consequences of approving a transaction. With simple transactions, the user has to sign the actual transaction data that gets executed on-chain, so we can simulate the transaction in the wallet and tell the user what\u2019ll happen if they approve. With meta-transactions, off-chain signatures (which may or may not contain transaction parameters) can lead to on-chain transactions, so now it\u2019s not possible for a wallet to guarantee to users that they\u2019ve been informed about all on-chain state changes prior to approving them. I think the solution could be to require in EIP-2771 that the message that the user has to sign is an EIP-712 typed structured data message that contains transaction parameters. I\u2019m not too familiar with EIP-2771 implementations, but I noticed that OpenGSN already contains most of the needed parameters for transaction simulation (except for chainId):  So for the sake of backward compatibility, the standard could require that the EIP-712 structured data\u2019s message object has the following properties: address from; address to; uint gas; uint value; bytes data; uint nonce; uint chainId;  Looking forward to hearing your thoughts! Best, Agost P.S.: Just noticed that EIP-2771 was moved to final. Not sure what\u2019s the best way to handle my proposal now. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/6362"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.216425619834711
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dror",
                    "index": "11",
                    "likes": "1",
                    "time": "22/01/2023-12:30:56",
                    "content": "ERC-2771 is only about the propagation of the original caller to the target contract. The target contract trusts the Forwarder to authenticate the caller (using a signature) and perform replay protection (using nonce or other mechanism) The logic of the Forwarder is not defined by this ERC. OpenGSN does use ERC2771 to access a target, and the Forwarder uses EIP712, which also encode the chainId into the EIP712Domain, so it is not needed as part of the message data. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.416666666666666
                }
            ]
        }
    ],
    "group_index": "1110"
}