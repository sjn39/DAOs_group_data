{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2274-multiple-address-spaces-for-precompiled-contracts/3652",
            "title": "EIP-2274: Multiple address spaces for Precompiled contracts ",
            "index": 3652,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/AntoineRondelet",
                    "index": "1",
                    "likes": "0",
                    "time": "12/09/2019-11:14:22",
                    "content": "Hi everyone, I just wrote this draft EIP to have different addressing schemes to define precompiled contracts   github.com/ethereum/EIPs       EIP-2274: Multiple addresses range for Precompiled contracts     by AntoineRondelet   on 11:02AM - 12 Sep 19 UTC   6 commits   changed 1 files   with 181 additions   and 0 deletions.        Happy to discuss it and have any feedback! ",
                    "links": [
                        "https://github.com/AntoineRondelet",
                        "https://github.com/ethereum/EIPs/pull/2274",
                        "https://github.com/AntoineRondelet",
                        "https://github.com/ethereum/EIPs/pull/2274",
                        "https://ethereum-magicians.org/t/ethereum-account-versioning/3508/4"
                    ],
                    "GPT-summary": "The author of the post has written a draft EIP proposing different addressing schemes to define precompiled contracts. The author is asking for feedback and is happy to discuss the proposal. Some 3rd parties may give constructive criticism or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "2",
                    "likes": "0",
                    "time": "20/09/2019-16:07:27",
                    "content": "First, I don\u2019t think there is any requirement technical or specification wise that all precompiled contracts exist in a consecutive space.  The chain operator could just as easily add a precompiled contract at 0x42 instead of 0xE. As an alternative what if instead the precompile range from 0x0 to 0xffff was assigned to precompile operators?  Much like port assignments are for TCP.  Mainnet would get 0x0000 to 0x00ff and a private use space would be reserved at 0xff00 to 0xffff much like unicode.  There are some mainnet uses such as 0xdead for ENS, where they could just be given the 0xdea0-0xdeaf range during the initial assignments. I think this is no less disruptive than making sure the vmID space is properly used and has the advantage of not requiring a new opcode (with associated required toolchain support in solidity and vyper). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.962703962703962
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AntoineRondelet",
                    "index": "3",
                    "likes": "0",
                    "time": "24/09/2019-03:06:33",
                    "content": "    shemnon:  First, I don\u2019t think there is any requirement technical or specification wise that all precompiled contracts exist in a consecutive space. The chain operator could just as easily add a precompiled contract at 0x42 instead of 0xE.   That\u2019s right, I am not aware of any requirement for that. Nevertheless, I think that following current patterns on address allocation for precompiled contracts (hence declare them using consecutive addresses) makes sense. It is easier to reason about and improves dev experience IMHO. I think it is a bad pattern to randomly allocate addresses to newly created precompiled as it would pollute the address space (even though it is extremely big) with these \u201cspecial addresses\u201d that should not be associated with an EoA and newly deployed contracts.     shemnon:  As an alternative what if instead the precompile range from 0x0 to 0xffff was assigned to precompile operators? Much like port assignments are for TCP. Mainnet would get 0x0000 to 0x00ff and a private use space would be reserved at 0xff00 to 0xffff much like unicode.   Yes, this would also make sense. I think this has already been discussed on this platform, and this approach is also described in the EIP proposed above. I preferred to have a \u201c2 dimensional address space\u201d for the precompiled as I think it is a nice way to solve the problem since it does not impose any bound on the number of precompiled contracts one can define, and paves the way for a sustainable and elegant way (IMO of course) of enabling forks to modify the execution environment. The drawback of this approach, however, is - as you pointed out - that we need to add an opcode\u2026 I agree that the less code we write, the better, so I definitely agree that this is annoying (OTOH working with ranges of allocated addresses is trivial to implement). This EIP was built on top of EIP1109 however. Thus, the reason why we may want to add the opcode PRECOMPILEDCALL is to save gas when calling precompiled contracts. So assuming we want to add this new opcode, I thought we could add an extra arg to it to support custom precompiled execution. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.439706127206128
                }
            ]
        }
    ],
    "group_index": "928"
}