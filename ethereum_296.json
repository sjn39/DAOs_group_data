{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/the-ux-of-eip-1024-encrypt-decrypt/1243",
            "title": "The UX of EIP 1024: Encrypt/Decrypt ",
            "index": 1243,
            "category": [
                "Wallets"
            ],
            "tags": [
                "ux"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "1",
                    "likes": "2",
                    "time": "04/09/2018-19:15:23",
                    "content": "EIP 1024 is starting to settle down and finalize, and so we just about have a solid technical foundation on which to build encryption and decryption into web3 browsers. You can read the technical aspects of the proposal here:     EIP-1024: Cross-client Encrypt/Decrypt EIPs       eip: 1024 title: Add web3.eth.encrypt and web3.eth.decrypt functions author: Tope Alabi <alabitemitope@gmail.com> status: Draft type: Interface Track created: 2018-05-14     Abstract  This EIP proposes a cross-client method for requesting encryption/decryption. This method will include a version parameter, so that different encryption methods can be added under the same name. Nacl is a cryptographically complete and well audited library that works well for this by implementers are free to choos\u2026      In this thread I\u2019d like to open the discussion to issues related to the user experience of encryption and decryption in web3 browsers. A few questions I have, with my current opinions stated after them:  Should users be prompted before their encryption public key is exposed to the dapp via web3.eth.getEncryptionPublicKey?  I think especially with improved \u201cexplicit sign in\u201d that this could be unnecessary, and associated keys could be revealed with a single \u201csign in\u201d request.   Should we prompt users to encrypt?  This probably isn\u2019t necessary, since encryption doesn\u2019t require their private key material at all, could be performed without a web3 browser. Eventually if/when we add a \u201csign and encrypt\u201d method, we can prompt the user in one place there.   Should we prompt users to decrypt and download a file?  I don\u2019t think this is necessary, since it does not expose the decrypted data to anyone but the user\u2019s own hard disk.   Should we return decrypted data to the requesting \u00d0app?  This is the behavior that I think would require a prompt and user authorization. For the sake of keeping decryption-heavy dapps practical and usable, we probably want to introduce a batch requestPersistentUsageOfDecryptionKeyForAccount( account ) method.  The Dapp should provide a user a way of revoking this decryption method if it can be extended.      Thoughts? @topealabi @cjeria @chrislundkvist ",
                    "links": [
                        "https://ethereum-magicians.org/t/web3-login-permissions/3583/16"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.996114417989418
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "2",
                    "likes": "1",
                    "time": "05/09/2018-16:24:54",
                    "content": "@andytudhope @beltran @alexvandesande ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/perpetualescap3",
                    "index": "3",
                    "likes": "0",
                    "time": "05/09/2018-18:17:50",
                    "content": "    danfinlay:  Should we prompt users to decrypt and download a file?   I wonder if client implementations would always be able to guarantee the downloaded file wouldn\u2019t / couldn\u2019t be intercepted? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/godfreyhobbs",
                    "index": "4",
                    "likes": "0",
                    "time": "26/09/2018-18:30:50",
                    "content": "Dan these are a great set of questions.  Here is a demo we have created. https://drive.google.com/file/d/14iY8ea_I6GC6oEyUXfTuF8xGUc6OSSFK/view ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 9.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "5",
                    "likes": "0",
                    "time": "15/10/2018-07:16:52",
                    "content": "Hi @danfinlay I am just jumping in with my 3 proposals in context (explained here) On that note I posted a new topic on UX ring to bring discussion on these proposals, see  here One thing I did not mention and that you touch upon here is \u201cencryption and the use of public key\u201d. So as to answer your point : 1. Should users be prompted before their encryption public key? We could either  consider the public key as \u201calready public\u201d in the context of the wallet, or we provide an api for encryption that do not reveal the public key.  In regard to 1), this is not too far fetched for most web3 browser as it is expected of the user to sign messages or transactions at some point. If not, are we going to explain to them that their public key will be public after their first transactions? I think unless, the user is knowledgeable of what is happening, it would scare most user and most would simply accept such warning. At the same time, 2) allow us to simply bypass the need for revealing the public key. 2. Should we prompt users to encrypt? As you mentioned, this would be unnecessary if they have access to the public key 4. Should we return decrypted data to the requesting \u00d0app? As you understood from the article if the application encode the origin(s) allowed to decrypt the web3 browser could check the origin of the document attempting to decrypt and make sure they match before revealing the decrypted data. This would also allow to safeguard from other application asking to decrypt data without the web3 browser having context to explain to the user where that data came from. ",
                    "links": [
                        "https://ethereum-magicians.org/t/3-proposals-for-making-web3-a-better-experience/1586",
                        "https://medium.com/@wighawag/3-proposals-for-making-web3-a-better-experience-974f97765700"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.310227272727273
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Recmo",
                    "index": "6",
                    "likes": "1",
                    "time": "29/01/2019-22:47:41",
                    "content": "Hi! I have a need to implement new signature algorithms and made a proposal for extensible cryptography in wallets. It can also be used to implement encryption. Please see the proposal here: Extensible crypto for wallets It\u2019s stil draft. In particular it is not specified how the user confirmation would work. My original use case is for signing, but I\u2019d like it to be general enough to solve all future needs for cryptography, including what EIP2\u00b9\u2070: Encrypt/Decrypt covers. My hope is to make it so good that it can be merged with EIP1024 into one proposal that covers all our wallet crypto needs. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.020021645021645
                }
            ]
        },
        {
            "thread_link": "https://ethereum-magicians.org/t/the-ux-of-eip-1102/814",
            "title": "The UX of EIP 1102 ",
            "index": 814,
            "category": [
                "User Experience"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "1",
                    "likes": "3",
                    "time": "19/07/2018-20:30:27",
                    "content": "To improve Ethereum browser security, multiple browsers are now working on implementing EIP 1102, which will no longer inject the provider API by default, but instead wait for the Dapp to request a web3 API before providing one, making web3 users undetectable to sites (including dapps!)     EIP-1102: Opt-in provider access EIPs       Hi everyone. My name is Paul Bouchon and I recently joined the MetaMask team.  MetaMask and most other tools that provide access to Ethereum-enabled environments do so automatically and without user consent. This exposes users of such environments to fingerprinting attacks since untrusted websites can check for a provider object and reliably identify Ethereum-enabled clients.  This proposal outlines a new dapp initialization strategy in which websites request access to an Ethereum provider API i\u2026      While this change has great privacy benefits, there are open questions about the UX of this kind of invisible API. Feature detection is impossible, and so Dapps will need to present some kind of open-ended log-in button that both tries to log on and suggests installing a web3 browser if the user doesn\u2019t have one yet. You can roughly see the issue in this EIP 1102 flow chart from the original metamask issue:  37739669-2191c828-2d18-11e8-9ba1-6b0d23a1eaef.png1546\u00d71116 187 KB  I just wanted to open the thread here, to get our UX ring thinking about the future of log-in with privacy-centric browsers. cc @bitpshr @ricburton @boris @beltran @andytudhope ",
                    "links": [
                        "https://github.com/MetaMask/metamask-extension/issues/714",
                        "https://ethereum-magicians.org/uploads/default/original/1X/08875cbc2ec816c5f78bcff00bbe057c1184d108.png",
                        "https://ethereum-magicians.org/t/eip-1102-opt-in-provider-access/414/25",
                        "https://ethereum-magicians.org/t/eip-1102-opt-in-provider-access/414/30",
                        "https://ethereum-magicians.org/t/eip-1102-opt-in-provider-access/414/40"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.594028520499109
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ricburton",
                    "index": "2",
                    "likes": "1",
                    "time": "19/07/2018-21:04:35",
                    "content": "This is great, Dan. I think that WalletConnect could be really helpful here. Pedro Gomes is leading the project full time and I am sure he has lots to say on this. Will send this to him. I wrote about the flow here: https://medium.com/@ricburton/metamask-walletconnect-js-b47857efb4f7  Screen Shot 2018-07-19 at 17.04.09.jpg2798\u00d72068 437 KB  ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/1X/7dad546eae7067547b8202804bffb2e33901cec7.jpg"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.3125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "3",
                    "likes": "0",
                    "time": "19/07/2018-21:12:58",
                    "content": "Thanks for starting this @danfinlay! Some additional thoughts:   Optionally inject web3 In addition to injecting a provider API after user approval, MetaMask also plans to conditionally inject web3 based on an optional web3 property on the provider request. This is for easier backwards compatibility: while dapps will still have to update to initiate the provider request, they won\u2019t also have to bring in web3.js if they don\u2019t want to.   Cache approved websites MetaMask also plans to cache website origins that have been approved for provider access. For example, if a user visits foobar.com and approves provider access, MetaMask will remember this approval in the future and bypass user approval altogether next time the user visits foobar.com. This saved approval data can be cleared at any time.   Difficult to know dapp-level UX EIP-1102 intentionally focuses on the protocol for requesting a provider API, not the UX around it. There\u2019s nothing to prevent a dapp from requesting provider access immediately on page load without any user action, so it\u2019s important for dapp developers to converge on a common UX here (like WalletConnect?) I still feel it\u2019s inevitable that some dapps will request provider access using arbitrary UX flows. For example, what if a dapp uses a login system completely unrelated to Ethereum accounts? This type of dapp would probably request provider access immediately on load and not design it as a login button the user must click, since the dapp has an unrelated login system already in place.   ",
                    "links": [
                        "http://foobar.com"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.954545454545455
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JaceHensley",
                    "index": "4",
                    "likes": "0",
                    "time": "09/08/2018-00:25:15",
                    "content": "RE: dapp-level UX So our flow currently allows detection of install while the user remains on our dapp\u2019s signin page. What we do is inject an iframe that refreshes until it detects web3 (since extensions can\u2019t inject into already loaded pages). This allows the user to come to our site without MM installed and either be instructed to install MM or continue. And the page only refreshes once the iframe has detected a web3 instance. One way forward would be to have a timeout before switching to a different view telling the user to install a dApp browser. But there are a few problems with that, the first being users would have to wait for the timeout before being instructed to take an action, the second is what if the user just takes a little longer than the timeout to accept? This would cause the dApp to move to the \u201cPlease install a dApp Browser\u201d step too early. Curious if anyone has any thoughts on other ways forward that don\u2019t cause UX regression ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.926136363636363
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "5",
                    "likes": "1",
                    "time": "09/08/2018-14:55:53",
                    "content": "Hi @JaceHensley, thanks for sharing information about your dapp. You\u2019re right that the UX issue of detecting and suggesting MetaMask (or some other dapp browser) is challenging due to EIP-1102. It\u2019s an unavoidable UX issue: malicious sites currently track Ethereum users the exact same way honest dapps detect MetaMask, so to protect user privacy, dapps can\u2019t know if MetaMask is installed. Here\u2019s one flow that may work:  User without MetaMask navigates to dapp Dapp posts message requesting provider Browser ignores message since MetaMask isn\u2019t installed User tries to interact with dapp Dapp attempts to use web3 or ethereum but they aren\u2019t defined Dapp shows user warning: \u201cPlease use a supported browser such as MetaMask.\u201d  The main difference between this flow and current flows is that detection and user warning are done only when the user attempts to interact with the dapp in a way that uses web3 or ethereum. If these globals aren\u2019t defined at that time, that means the user either hasn\u2019t approved access or isn\u2019t in a supported browser. In either case, the dapp could show a warning message to the user (or an iframe to install MetaMask) only when it needs to use these variables instead of checking for them immediately on page load. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.550793650793651
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JaceHensley",
                    "index": "6",
                    "likes": "2",
                    "time": "09/08/2018-16:15:46",
                    "content": "That seems like poor UX to me. Wait for a user to try and do something and only after a user tries to interact with your dApp do you tell them they need something else. I bet that would stop people from continuing. It just adds another layer of friction to signing up for/using a dApp. Speaking of malicious sites wouldn\u2019t this open it up for users to constantly get asked to accept or decline a sites request to inject ethereum? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "7",
                    "likes": "0",
                    "time": "09/08/2018-16:57:43",
                    "content": "@JaceHensley I\u2019m not sure if users would be more turned off by a dapp suggesting an extension be installed only when they try to interact with it (meaning they\u2019ve seen the dapp, what it is, and chose to interact with it) as opposed to when it first loads. Both are equally as obtrusive, but the former at least allows the user to see your dapp before being asked to install new software. Still, I\u2019m not a designer, so I probably have little value to add here. The flow above was just one example of a flow that could work, but better approaches may exist. As for the concern of malicious sites spamming provider requests, once a user rejects access on a given site, they won\u2019t be presented with additional approval windows unless they clear their cached approval data. This is similar to how webcam approval works in browsers today. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.288024475524475
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JaceHensley",
                    "index": "8",
                    "likes": "1",
                    "time": "09/08/2018-17:24:51",
                    "content": "Check out how we are handling it on bloom.co/app/signup. We help onboard users by laying out what they need to do to use our dApp. Laying everything out upfront helps reduce friction and doesn\u2019t make the user guess what\u2019s next. I do like the request permission to get ethereum injected pattern. I just don\u2019t like that there\u2019s no way to tell if a user has installed MM. So our flow wouldn\u2019t ask for permission right away, we\u2019d probably have the user click a button in the list of steps after \u201cInstall Metamask\u201d. Something like \u201cAllow Access To Metamask\u201d with Allow Access underlined and acting like a button. When a user clicks that then we would send off the request. The crucial part is knowing what step the user is on so they can be helped along the way without wasting their time ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.357142857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JaceHensley",
                    "index": "9",
                    "likes": "0",
                    "time": "09/08/2018-17:35:01",
                    "content": "The goal is mass adoption of dapps and crypto in general. Fingerprinting based on using a dapp browser would be like fingerprinting based on if the user\u2019s browser has notification possibilities. The real problem is exposing the user\u2019s ETH address not that they are using Metamask or another dApp browser. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "10",
                    "likes": "0",
                    "time": "09/08/2018-19:38:43",
                    "content": "I totally agree that mass adoption is the goal, but a lack of user privacy and resulting phishing campaigns have been negatively effecting the community for some time. Fingerprinting based on dapp browser usage informs malicious sites that a user holds and uses Ethereum, and has been heavily used to run targeted ad and phishing campaigns, regardless of access to the provider or accounts. I agree the UX needs to be ironed out for the case where a user has no dapp browser. The above approach is one way, but I\u2019m sure there are others that are better. I wish I had more design experience to speak from. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.7142857142857135
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JaceHensley",
                    "index": "11",
                    "likes": "1",
                    "time": "10/08/2018-16:40:08",
                    "content": "If UX still needs to be ironed out doesn\u2019t that indicate that this EIP is not ready? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "12",
                    "likes": "1",
                    "time": "10/08/2018-18:31:32",
                    "content": "@JaceHensley The intention of EIP-1102 is to fix user privacy. While it\u2019s an interesting challenge, how dapps adjust their individual user experiences based on this new change is completely outside the scope of the proposal. Current UX relies on objectively unsafe injection, so changing it is unavoidable. The only issue with the UX is that dapps can no longer detect if a user has a dapp browser installed, which is the very intention of the EIP: to remove the ability to detect this information (that malicious sites have successfully used to target Ethereum users for far too long.) We\u2019ve already identified one UX pattern above that works, but is arguably worse than what we currently have. That\u2019s the whole point of this thread, to collaboratively identify the best UX to accommodate a necessary and crucial programmatic privacy change. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.6767676767676765
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "13",
                    "likes": "0",
                    "time": "13/08/2018-22:30:54",
                    "content": "    JaceHensley:  wouldn\u2019t this open it up for users to constantly get asked to accept or decline a sites request to inject ethereum?   I think this could be mitigated by including a \u201cblock future requests from this site\u201d checkbox with the sign-in page. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "14",
                    "likes": "1",
                    "time": "13/08/2018-22:42:22",
                    "content": "    JaceHensley:  If UX still needs to be ironed out doesn\u2019t that indicate that this EIP is not ready?   I basically agree. We\u2019re trying to design the correct way for a browser to work, and if there isn\u2019t even a pleasant path for users to onboard with the given changes, it\u2019s a strong indication that we have a ways to go. However, Paul\u2019s points are also important: As long as web3 browsers are a minority, and as long as they are usually MetaMask users, any detectable API surface exposes users to specific phishing attacks. That said, I think there is a silver lining: Our active response to that type of phishing attack seems to have resulted in a reduction of its incidence rate, so it\u2019s possible \u201cweb3 detection attacks\u201d are indeed not the worst kind of fingerprinting. Also, if we aim for the long-term game, where everyone has a web3 browser, and there are many kinds of web3 browser, this kind of fingerprinting becomes less and less dangerous, again emphasizing that the account detection is potentially the worst part of this. On the other hand While this change requires a UX change, it doesn\u2019t need to be awful, it just would need to embrace some different assumptions: I think the basic flow would be something like this:  A button that says Sign in with Ethereum. When clicking the button, on a web3 browser, the login request appears. When clicking the button, it could change to \u201cInstall a Web3 browser to begin\u201d. Since web3 browser users are seeing a login request, this is an appropriate moment to assume the user is not using a web3 browser within the site\u2019s UI, educate, and suggest an install.  That all said I do think most of the discussion so far has focused on the technical aspect, not the UX, so I\u2019m very glad that @JaceHensley is thinking of the user and pushing back here. I think it\u2019s a decision the ecosystem needs to make together, and stick to. It seems like it\u2019s pretty clear that the easiest way to improve the UX is to accept a limited fingerprinting surface, to allow sites to intelligently suggest user actions, and so the question for the community is: Is it acceptable to provide web3 fingerprinting for the benefit of user experience? In an ecosystem with so much working against our UX in the name of security, it might be a concession worth embracing. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.215773809523809
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "15",
                    "likes": "0",
                    "time": "14/08/2018-00:03:47",
                    "content": "We\u2019ve been tossing around ideas for the UX more, and I do believe we can make the UX of 1102 pleasant. In the next MetaMask release we\u2019re going to include a mocked version of this user consent UI, so dapp developers can experiment with the changed onboarding flow. We\u2019re also going to produce an example dapp to demonstrate that we can have both perfect privacy and good user experience.  Hopefully that dapp will inspire others to further improve on the experience. While web3 fingerprinting might not be a big deal in a perfect world where everyone is using web3 browsers, we\u2019re a long way from that world. Maybe once every browser is adopting web3 standards, we can re-introduce some global APIs for the sake of purely improved UX, but in the meanwhile, I think it\u2019s worthwhile for us to make a few changes to our UX assumptions for the sake of protecting our very highly targeted community. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.644863945578232
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dustinvs",
                    "index": "16",
                    "likes": "0",
                    "time": "14/08/2018-00:18:24",
                    "content": "Hoping you provide some facility a la my comments here:     EIP-1102: Opt-in provider access EIPs       So, re: The UX of EIP 1102 - looking for a way to guarantee both user control of privacy and preserve the relative ease of UX available with current Metamask/web3.  My general idea to solve this is basically to find a way to automatically push a refresh and injection of window.ethereum based on an application requesting that, upon install of Metamask, their still-open tab will be able to have a pending request of availability somehow notify the user that they\u2019ve requested access, and then upon a\u2026     If Metamask\u2019s going to permanently move in the direction of an obfuscated request-access system, hopefully you can at least provide a way for apps to seamlessly request access pre-Metamask install and then receive a refresh with window.ethereum available when it\u2019s granted. ",
                    "links": [
                        "https://ethereum-magicians.org/t/the-ux-of-eip-1102/814"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.71875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "17",
                    "likes": "0",
                    "time": "14/08/2018-16:27:54",
                    "content": "Since WebExtensions are not able to receive messages when they are not installed, detecting the moment one is installed would probably require a sort of hack like described above:  What we do is inject an iframe that refreshes until it detects web3 (since extensions can\u2019t inject into already loaded pages).  This could be done with an iFrame that requests a login, and wrapped into a general purpose library, enabling the UX that you\u2019re talking about. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.666666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JaceHensley",
                    "index": "18",
                    "likes": "0",
                    "time": "14/08/2018-17:17:24",
                    "content": "I thought about sending a request from the iframe but I don\u2019t like that much since the user should be in control of when that request is sent. Really I think that a limited fingerprinting surface area is a great middle ground. For instance Brave has it\u2019s own userAgent. I think Metamask and others could follow that. Maybe not userAgent exactly but something like that ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.736607142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ricburton",
                    "index": "19",
                    "likes": "1",
                    "time": "14/08/2018-17:25:18",
                    "content": "One quick thought: every browser (including Brave) let\u2019s the page know that it is there. If we let the web page know a web 3 tool is there: Is it not the same principle? I think it is really helpful for a page to know whether the user has any of the tools necessary or not. Perhaps I am missing something  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.944444444444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ricburton",
                    "index": "20",
                    "likes": "0",
                    "time": "14/08/2018-17:27:48",
                    "content": "Just saw this. Yeah I agree. I am comfortable with the middle ground of: \u201cthis is someone who has got set up on Ethereum\u201d. Another example: Opra browser on Android? I just wonder if we are over-swinging from usability to privacy. Would love to hear more about how MetaMask is thinking about it. With that said, WalletConnect.org is opt-in with the QR code. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dustinvs",
                    "index": "21",
                    "likes": "0",
                    "time": "14/08/2018-19:35:57",
                    "content": "Unfortunately with the iframe approach, you lack the ability to enqueue an access request prompt before Metamask has been installed.  If you can use a cookie or localStorage entry to enqueue a request, then you don\u2019t have to implement something like a refreshing iframe or interval retry logic which could potentially bug the user if they\u2019re just rejecting the requests.  I think if you implement the totally opaque approach, then it\u2019s a must to implement a way of enqueuing a request before the extension is installed.  As a general rule it\u2019s bad practice in JS to implement polling logic instead of promises or event callbacks, this is the same principle. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.535714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "22",
                    "likes": "0",
                    "time": "15/08/2018-21:13:11",
                    "content": "    dustinvs:  If you can use a cookie or localStorage entry to enqueue a request, then you don\u2019t have to implement something like a refreshing iframe or interval retry logic which could potentially bug the user if they\u2019re just rejecting the requests.   A login cookie could also be added as an extension of this proposal (or as a subsequent extension), it seems like that could be a decent post-install way to instantly log-in. Web3 browsers could also limit this annoyance by only showing up to a single login request from a given page, so even if a page was polling the request from within an iFrame (to effectively detect the extension\u2019s installation), the user would only be prompted once. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.664021164021165
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "23",
                    "likes": "1",
                    "time": "15/08/2018-21:32:54",
                    "content": "    ricburton:  every browser (including Brave) let\u2019s the page know that it is there.   This isn\u2019t completely true. Brave provides a fingerprinting protection mode, a feature that we considered at MetaMask, but is actually impossible for extensions: An extension\u2019s contentscript is unable to make a synchronous query to global state (like whether or not a privacy mode is enabled) before a page loads. Chrome marked this concern a WONTFIX: https://bugs.chromium.org/p/chromium/issues/detail?id=54257 Without the option of letting a user opt into greater privacy vs not, minimizing fingerprintable surface seems to be the only option that is fully aligned with w3c\u2019s fingerprinting guidance: https://w3c.github.io/fingerprinting-guidance/ All that said, I do think there are pleasant design paths for this new pattern, they simply need to be explored. We shouldn\u2019t necessarily reject this proposal just because existing patterns don\u2019t work, we should consider whether other patterns could. A Pleasant 1102 UX Proposal An application following 1102 should have (1) a \u201cLogin\u201d or \u201cGet Started\u201d button that triggers the 1102-specified login request. If the user has a web3 browser, that web3 browser should (2) transition the view to the browser-provided login screen, ideally in a view that is either full screen or fully obscures the requesting website. The website meanwhile should render (3) a view that assumes the browser is not web3 enabled, and should suggest installing one, or any other login patterns that are available. (This view is invisible to web3 browser users) If the user approves the login, the website should immediately transition to (4) a logged in view, and the web3-browser using user should never see any assumption that they did not have a web3 enabled browser. Extra Notes If on view 3, the page suggests installing a browser extension (because a desktop browser is detected), the site could either recommend reloading the page after installation, or could use an iframe-polling hack to request login on a loop (this is working with a limitation of extensions) If on view 3 the user rejected the login request, they will see the fallback login options, which makes sense and is a natural next step. We\u2019ll be posting wire-frames and a sample dapp to demonstrate this flow soon. ",
                    "links": [
                        "https://bugs.chromium.org/p/chromium/issues/detail?id=54257",
                        "https://w3c.github.io/fingerprinting-guidance/"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.975296442687748
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JaceHensley",
                    "index": "24",
                    "likes": "0",
                    "time": "15/08/2018-22:37:25",
                    "content": "That brings me back to one of my earlier points  Wait for a user to try and do something and only after a user tries to interact with your dApp do you tell them they need something else.  That\u2019s frustrating from the users perspective. They click \u201cLogin\u201d and then they have to go install the extension, come back, remember to refresh the page, and then click \u201cLogin\u201d again and hope they don\u2019t need to do anything else ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "25",
                    "likes": "3",
                    "time": "15/08/2018-22:49:32",
                    "content": "Taking a step back, there\u2019s one main logic path that\u2019s made more diffuclt by the total privacy detailed in 1102: handling users who have no dapp browser installed. As many have mentioned, this is an important UX consideration, especially because it directly relates to user onboarding. There are a few options I see: Option 1: Total privacy The first option is to adjust current dapp UX around web3 detection to meet the requirements set forth in EIP-1102 as written today. This option provides total user anonymity on malicious sites, but makes UX more tedious because it relies on removing the ability for honest dapps to know if a user has a dapp browser installed. To be fair, malicious sites knowing if a user specifically has a dapp browser installed means they can reliably associate IP addresses with Ethereum usage and run targeted ads, phishing campaigns, and other attacks. If a website detects it\u2019s running in Chrome or some other non-dapp browser, these targeted attacks aren\u2019t possible in the same way. This makes dapp browser detection funamentally more dangerous than regular browser detection, at least for the forseeable future where no Ethereum-specific API is baked into the DOM. Some flows that we\u2019re mocking up on our end that may work for this option:   Full-screen login (@danfinlay\u2019s suggestion)  Request a provider at any time (e.g. after button click) Dapp browser shows full-screen approval view Dapp renders non-web3 view behind approval view After success, dapp renders web3 view Example:  option-1.jpg4840\u00d73602 947 KB      Dynamic reminder  Request a provider on page load On first action requiring provider, check for it If provider undefined, inform user of approval / download requirements Example:  option-2.jpg3350\u00d73474 1 MB      Constant reminder  Request a provider at any time (e.g. after button click) Concurrently inform user of connection attempt / download requirements Example:  option-3.jpg3350\u00d73602 713 KB      Timed reminder  Request a provider at any time (e.g. after button click) Inform user of connection attempt After timeout, inform user of approval / download requirements Example: same as \u201cconstant reminder\u201d above but download text only shown after timeout    Option 2: Minimally-fingerprintable API It\u2019s possible that total privacy shouldn\u2019t be the end-goal of EIP-1102 and it should only serve to standardize restricted access to the provider / web3. If this looser approach is taken, dapps could still be informed if a user has no dapp browser installed or if a user rejects provider access, but dapps won\u2019t be able to access anything beyond an error. This approach solves most UX concerns because existing flows that rely on knowledge of dapp browser installation are still possible, but has a major drawback in that it allows malicious sites to know if a certain IP address uses Ethereum. While the original intention of the proposal was to provide complete privacy to stop the influx of targeted phishing and ad campaigns, maybe it\u2019s sufficient to only restrict access to the provider / web3 and any useful information beyond knowing a user has a dapp browser. Option 3: Do nothing Another option is to maintain current behavior and continue injecting Web3 instances into every page a user navigates to. Dapps could continue to either use this environment-defined provider library or grab the provider from the Web3 instance and use it with their own library. This poses no UX issues at all since it\u2019s the flow we have today, but also doesn\u2019t address the major issues of 1) namespace collision from global injection, 2) the privacy issues of every site knowing about Ethereum use, or 3) every site being able to spam the user with web3 transactions.  I personally feel that we should find the best UX flow that satisfies option 1 above for the safety of Ethereum users. Any site knowing if a user is an Ethereum user (and in some cases their address) is like any site knowing the fiat bank a user may use (and in some cases their account number.) Still, I agree that current UX flows above are less than ideal (though the constant reminder as mocked up doesn\u2019t seem too horrible), and I also don\u2019t think a goal of total privacy should impede user adoption. ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/1X/e8d908609db57da16d5cbcc7cabf54d8ebaa2052.jpg",
                        "https://ethereum-magicians.org/uploads/default/original/1X/ec27fb660adc082db91ea73a90ede8e071b7c88b.jpg",
                        "https://ethereum-magicians.org/t/eip-1102-opt-in-provider-access/414/34"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.544084821428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "26",
                    "likes": "0",
                    "time": "15/08/2018-22:50:59",
                    "content": "The wording \u201cLogin\u201d seems like the frustrating part there. Maybe using something like \u201cGet started\u201d is a better UX, by better representing the app state. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ricburton",
                    "index": "27",
                    "likes": "1",
                    "time": "18/08/2018-18:28:48",
                    "content": " Screen Shot 2018-08-18 at 1.02.14 PM.jpg3360\u00d72100 947 KB  Just wanted to share some different states we have been adding for Brave, Chrome and Safari. Helping people figure out why they need to use certain tools is a big hurdle. I like the idea of connecting to something. Facebook Connect popularised that idea. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.267857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dustinvs",
                    "index": "28",
                    "likes": "0",
                    "time": "23/08/2018-01:17:47",
                    "content": "Another point of interest - maybe the level of web3 provider visibility should be a configurable option - maybe with the default being the low-fingerprint option discussed earlier?  Best of both worlds approach. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "29",
                    "likes": "0",
                    "time": "23/08/2018-04:18:06",
                    "content": "I agree this approach would be a best of both worlds. It may be an option for other clients, but as a browser extension, MetaMask does not have an opportunity to synchronously access global user configuration before a page loads. This may be a target for change amongst browser vendors, but is our current reality. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.09375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "30",
                    "likes": "2",
                    "time": "30/08/2018-14:16:19",
                    "content": "Cross-posting this here for anyone not following the technical 1102 thread (an updated 1102 proposal that should alleviate most UX concerns discussed so far ):     EIP-1102: Opt-in provider access EIPs       After successful community iteration with additional browser teams and dapp developers alike, EIP-1102 has been formally updated to reflect the latest thinking on user-approved provider exposure:  Browsers expose a provider populated with no accounts by default. Before initiating any RPC request that requires an account, like eth_sendTransaction, dapps must request a full provider by calling a new provider method, provider#enable. This method triggers the user interface that allows the user to a\u2026     ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.4602272727272725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/angilly",
                    "index": "31",
                    "likes": "1",
                    "time": "17/09/2018-23:16:39",
                    "content": "Hello Ethereum Friends. I\u2019ve been lurking on this thread for a few weeks now. Solid gold. I appreciate each and every one of you. One thing that\u2019s been bugging me is the potential confusion between \u201cconnecting your wallet\u201d and \u201clogging into metamask\u201d. As I understand it by looking at Metamask\u2019s source code, private keys are encrypted at rest and unlocked when a user logs in w/ their password. Post EIP-1102, Metamask will still be using a password-encrypted private key store. This means that simply clicking \u201cConnect\u201d in the provider access request screen will not be enough to give a dapp full access to the wallet. If that\u2019s true, I\u2019m unsure as to how they will manage this unlocking. We\u2019re going to have to ask users to connect their wallet, then we\u2019re gonna have to have text on our screens saying \u201clooks like metamask is locked! go login!\u201d Am I missing something here? Thanks! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.311197916666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "32",
                    "likes": "0",
                    "time": "18/09/2018-00:02:50",
                    "content": "    angilly:  Am I missing something here?   Yes, under the latest proposal, calling ethereum.connect() will prompt the user to log-in, and when that call\u2019s promise is returned, the user\u2019s account should be available if the user connected. That means while today you have to say \u201cYou\u2019re unlocked, go unlock!\u201d, under EIP 1102, you\u2019ll be able to display a \u201cLog in\u201d button, which prompts the user to select an account, (and potentially eventually other specific challenges), and then makes the resulting account available to the App. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.984375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/angilly",
                    "index": "33",
                    "likes": "0",
                    "time": "18/09/2018-01:57:57",
                    "content": "Ok so maybe I\u2019m conflating this eip with metamask specifics too much. In a medium post by the metamask team, the request provider access screen did not have any place to type in a password. Is the spirit of the spec that if they want to ask for a password to unlock a locally encrypted key store, it would be done in that request provider access screen? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "34",
                    "likes": "1",
                    "time": "18/09/2018-07:55:38",
                    "content": "Yeah, I think the spirit is that after calling ethereum.enable(), the wallet responsibly and with little friction gets the user to a point where they\u2019re ready to use your app. That might involve unlocking, or if already unlocked, it might just be an account selection. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.354166666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/angilly",
                    "index": "35",
                    "likes": "1",
                    "time": "18/09/2018-17:34:24",
                    "content": "Ok thanks Dan. That helps a lot. One last thing: I\u2019m looking at the EIP on GitHub, and you mean ethereum.enable() not ethereum.connect(), right? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.673214285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "36",
                    "likes": "0",
                    "time": "18/09/2018-19:46:44",
                    "content": "Yes, sorry, my mistake. Correcting/editing the post. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 2.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/joshpitzalis",
                    "index": "37",
                    "likes": "0",
                    "time": "30/10/2018-05:58:59",
                    "content": "Please point me in the right direction if this is the wrong thread for this question. I have a UX issue after making the ethereum.enable() changes. How do you get the custom image in the new popup? In the article crypto kitties has their little kitty, but in my app I\u2019m just getting an ugly domain name string. This article https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.034577922077922
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "38",
                    "likes": "0",
                    "time": "06/11/2018-19:52:32",
                    "content": "Hi @joshpitzalis, apologies for letting this slip through the cracks. MetaMask\u2019s current implementation (which is now live in v5.0.0 of the extension) uses a given dapp\u2019s favicon as the image on the approval popup. The actual UX of the popup isn\u2019t codified in the underlying proposal, so there\u2019s no specific API exposed to pass custom images to the popup (at least not at this point.) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.836363636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/joshpitzalis",
                    "index": "39",
                    "likes": "0",
                    "time": "07/11/2018-04:22:14",
                    "content": "Yup, that seems to be working. Thank you. I\u2019ll see if I can upload a higher res favicon because its all blurry and pixelated. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                }
            ]
        }
    ],
    "group_index": "296"
}