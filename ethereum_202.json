{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-6051-private-key-encapsulation/11604",
            "title": "EIP-6051: Private Key Encapsulation ",
            "index": 11604,
            "category": [
                "Wallets"
            ],
            "tags": [
                "private-key"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "1",
                    "likes": "1",
                    "time": "04/11/2022-09:53:44",
                    "content": "edit: EIP address: EIP-6051: Private Key Encapsulation pull request closed: https://github.com/ethereum/EIPs/pull/6051 ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/6051",
                        "https://ethereum-magicians.org/t/eip-5630-encryption-and-decryption/10761/68",
                        "https://ethereum-magicians.org/t/eip-5630-encryption-and-decryption/10761/72"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.833333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/firnprotocol",
                    "index": "2",
                    "likes": "0",
                    "time": "11/11/2022-03:15:58",
                    "content": "hi @Weiji, huge thanks for putting this together, and apologies for not responding sooner.     Weiji:  so that it could be securely relocated to another dApp without providing the seed.   the main thing I want to clarify is: are you envisioning here that the \u201cdapp\u201d would be running a separate backend server on a remote machine? from what you\u2019ve written above, it appears that way, but please correct me otherwise. i think this question\u2014i.e., is the \u201cdapp\u201d on a different machine, or not\u2014led to a degree of confusion in the other thread. so let\u2019s try to get that out of the way now. if you do imagine the dapp to be on a separate machine, then could you go through a few examples where you\u2019re imagining this\u2019d happen? in my view, the far-more-common case is where the \u201cdapp\u201d is static javascript running solely in the user\u2019s browser. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.620833333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/alenhorvat",
                    "index": "3",
                    "likes": "1",
                    "time": "11/11/2022-06:12:41",
                    "content": "Hi. Exporting/moving private keys (even in an encrypted form) is not a good security practice as it opens an attack surface. This doesn\u2019t mean there\u2019s no solution for it  What if, instead of designing a key transfer/encapsulation/\u2026 protocol, decentralised identifiers (DIDs) are introduced on the protocol level (not on the SC level)? (DID method on the SC level GitHub - uport-project/ethr-did: Create ethr DIDs) DID is a unique random string that resolves to a DID Document. DID Document is a collection of public keys controlled by the DID owner. You can add, update, and remove your keys, and the protocol ensures that you can add keys if and only if you control the DID (prove you own one of the DID controlling keys). This would mean that the core identifier in the protocol is no longer an ETH address but a DID. It is a substantial change, of course. Is anyone aware of whether the topic was already discussed elsewhere? BR, Alen ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.886363636363637
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "4",
                    "likes": "0",
                    "time": "11/11/2022-07:26:38",
                    "content": "Hi @firnprotocol , actually I have some possible use cases in mind and mostly the dApp is not remote, but also probably not a browser extension. Let me iterate: 1, for messaging use. Certainly users may generate a completely new key pair not related to existing seed. However then users will have to manage this new key pair as well as to publish the public key somehow. Without going into each individual situation, let\u2019s say there might be the case that users wish to generate a new key pair, and there might be the case that users wish to use existing key pair especially when its backup has already been taken care of. In such case, the \u201cdApp\u201d could be a standalone desktop application or mobile app. 2, hardware wallet \u2192 MPC case.     Weiji:  We might want to export one of many private keys from a hardware wallet, and split it with MPC technology so that a 3rd party service could help us identify potential frauds or known bad addresses, enforce 2FA, etc., meanwhile we can initiate transactions from a mobile device with much better UX and without carrying a hardware wallet.   There might not be a strong demand, but I believe it is a valid use. Users still have complete control over the private key, but a 3rd party service can still provide lots of value-added service. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.34598447529482
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "5",
                    "likes": "0",
                    "time": "11/11/2022-07:41:02",
                    "content": "    alenhorvat:  DID is a unique random string that resolves to a DID Document. DID Document is a collection of public keys controlled by the DID owner. You can add, update, and remove your keys, and the protocol ensures that you can add keys if and only if you control the DID (prove you own one of the DID controlling keys).   With regard to messaging & encryption, I think what you describe here might help with key discovery of EIP-5630, related but out of scope there. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.339285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/alenhorvat",
                    "index": "6",
                    "likes": "1",
                    "time": "11/11/2022-08:00:28",
                    "content": "Ok. I\u2019ll check that thread and see if I can help. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "7",
                    "likes": "0",
                    "time": "18/11/2022-07:19:16",
                    "content": "Thinking this through, it seems signature to the recipient public key is crucial for security, to ensure the ephemeral public key is indeed generated from a trusted party and has not been tampered with. The key sender then can verify the signature before proceeding to encapsulating the private key. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "8",
                    "likes": "0",
                    "time": "18/11/2022-09:41:10",
                    "content": "edit: see PR in the top (edited):     Weiji:  pull request here: Added EIP-6051 for private key encapsulation by weiji-cryptonatty \u00b7 Pull Request #6051 \u00b7 ethereum/EIPs \u00b7 GitHub   ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "9",
                    "likes": "0",
                    "time": "18/11/2022-14:15:56",
                    "content": "    Weiji:  request({     method: 'eth_generateEphemeralKeyPair',     params: [version, signerPubKey], })    Specifically, an external service (such as a MPC service) could publish its signer public key(s) for sender to verify. Then the signature could be calculated separately, and then appended to the generated public key. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "10",
                    "likes": "0",
                    "time": "19/11/2022-04:20:02",
                    "content": "    Weiji:  If signerPubKey is provided or recipient contains signature, the implementation MUST perform signature verification. Missing data or incorrect format etc. SHALL result in empty return and optional error logs.   If the signature to the recipient public key is not provided, sender implementation MAY choose to decline the request. Sender implementation MAY choose to trust only limited signer. In that case, the signer public key could be further signed by the trusted signer, and that signature is appended to signerPubKey. This is open for now and further specification is pending. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.8311688311688314
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "11",
                    "likes": "0",
                    "time": "28/11/2022-07:16:16",
                    "content": "Hi folks, I have created PR and updated the top post. Please continue to review and any feedback are welcome! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "12",
                    "likes": "0",
                    "time": "29/11/2022-03:40:49",
                    "content": "Here is the sample code to generate the test vectors, provided here as EIPs repository does not allowed external links: GitHub - Base-Labs/encapsulation-sample: sample application to demonstrate how to encapsulate private key according to eip-kem ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "13",
                    "likes": "0",
                    "time": "30/11/2022-08:16:15",
                    "content": "Quoting my own review comment from the pull request:   We might want to export one of many private keys from a hardware wallet, and split it with MPC technology so that a 3rd party service could help us identify potential frauds or known bad addresses, enforce 2FA, etc., meanwhile we can initiate transactions from a mobile device with much better UX and without carrying a hardware wallet.   Reviewing the motivation, however, it seems in this exact case we may have alternative request to R2 and R3, that is, each party P_i in a MPC setting may generate its own ephemeral key pair (r_i, R_i), and then Sender application may safely split sk into several pieces sk_i, then encapsulate each sk_i to R_i. This effectively replaces the usual Distributed Key Generation procedure in a typical MPC protocol. To be fair, this may be added as an amendment to EIP-6051 or a separate EIP. We also need to survey MPC protocols to see if the above suggestions work in their security models. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.87037037037037
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shadow",
                    "index": "14",
                    "likes": "0",
                    "time": "05/12/2022-07:02:02",
                    "content": "This is amusing. I was thinking about \u2018encapsulation\u2019 security just earlier today. The issue that I see / thought about\u2013with this: It doesn\u2019t make sense this late in the game. Methods to enumerate private keys are essentially exposed\u2013that is with the course of time and lots of GPU power. So a hypothetical encapsulation securing a private key essentially becomes useless but not unusable. Yes, a cryptographic shell or valence layer per se could work, If you are going to create security for something like an Ethereum Private Key, then the security around that private key must be unlocked and built encapsulating the original stored data and part of the complete mechanism needed to unlock the key. You can already bruteforce a private key (if you are lucky) so who cares about the \u201csecurity\u201d around it. You just can\u2019t effectively encapsulate something with the original door is outside of the capsule. Its like locking a  \u2018gym locker lock\u2019 without putting the the lock loop the whole. if that makes sense ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.288194444444444
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "15",
                    "likes": "0",
                    "time": "05/12/2022-07:51:56",
                    "content": "    shadow:  Methods to enumerate private keys are essentially exposed\u2013that is with the course of time and lots of GPU power.       shadow:  You can already bruteforce a private key (if you are lucky)   My friend, this seems a serious misunderstanding of cryptography, or at least of elliptic curve cryptography. You can theoretically enumerate every private key or crack one given its public key in a certain public key system, but in practice (or computationally) it needs at least billions of years even if you were given all the (classic) computers in the world. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.935574229691877
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shadow",
                    "index": "16",
                    "likes": "0",
                    "time": "05/12/2022-08:38:02",
                    "content": "As I said  in the post that you quoted me on\u2026     shadow:  with the course of time and lots of GPU power.       shadow:  (if you are lucky)   ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.958333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "17",
                    "likes": "0",
                    "time": "05/12/2022-08:44:19",
                    "content": "@shadow There is no luck in cryptography. Reading this page might give you some sense of \u201cbeing lucky\u201d (or unlucky): Security level - Wikipedia ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shadow",
                    "index": "18",
                    "likes": "0",
                    "time": "05/12/2022-08:48:46",
                    "content": "How is there no luck in cryptography. I think any random guess that provides a result that satisfies your original intention out of unfathomable chances is luck. A successful brute force is 100% luck. No this page did not provide me with a sense of \u201cbeing lucky\u201d towards anything. If anything at all,  mechanism that encapsulates data that is supposed to be secret is just a short cut for an attacker to located *that key\" or any key a mechanism using functions, algos, hashes or whatever it is encapsulating that private data is nothing more than a short cut to key identification. Instead of searching through every possible key, just find a way to get through and then you have what you are looking for with certainty. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.37797619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "19",
                    "likes": "0",
                    "time": "05/12/2022-09:23:07",
                    "content": "    shadow:  A successful brute force is 100% luck.   One may try that, but the chance of success is extremely low. Say, Alice has a key pair (a, A) under secp256k1 curve, and Bob wants to guess or brute force the private key a. For each guess, Bob\u2019s success rate is 1 in 2^256 (I should have used the group order of secp256k1 but let\u2019s keep this post simple). A not very accurate but close enough analog is, for Alice to randomly pick any atom in the known universe, then Bob tries to guess which one is her pick. No matter how hard Bob tries for how long, his chance of hitting the right atom is still extremely low. Hope this analog impresses you. An attacker will not simply guess, instead he will narrow down the guess range with various tricks but at the end, there is still a security level measuring how much guesswork must be done. Note that secp256k1\u2019s security level is 128, and 2^128 is indeed a very very large number.     shadow:  a mechanism using functions, algos, hashes or whatever it is encapsulating that private data is nothing more than a short cut to key identification. Instead of searching through every possible key, just find a way to get through and then you have what you are looking for with certainty.   That\u2019s the whole point of symmetric cipher (AES-128 etc.) here. The target security level of AES-128 is 128 (bits). The actual security level might be slightly smaller, but is still considered secure. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.274002549737844
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shadow",
                    "index": "20",
                    "likes": "0",
                    "time": "06/12/2022-00:56:45",
                    "content": "I hate that \u2018atom\u2019 analogy. There are far more atoms in existence than bitcoin possibilities. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.666666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "21",
                    "likes": "0",
                    "time": "06/12/2022-02:42:00",
                    "content": "    shadow:  There are far more atoms in existence than bitcoin possibilities.   I guessed that you had underestimated greatly about the count of possible secp256k1 key pairs. What I said earlier is not rocket science (yet) but maybe a bit out of common sense for those not familiar with cryptography. So let me explain in greater details. Scientists estimate that there are about 10^78 ~ 10^82 atoms in the known universe. You may find this number in a lot of creditable places online. The choice is yours. For the secp256k1 curve that bitcoin and Ethereum uses, the group order is: n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 There are totally n-1 possible key pairs. It is safe to say we have about 2^256 when compared to another estimated number. 2^256 ~= 10^77. So you see, it is a very close analog. Again, there is no luck in cryptography. All security parameters have been fine tuned to a point far beyond luck (as winning a lottery), when even the tiny possibility of such is not acceptable. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.823464912280701
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shadow",
                    "index": "22",
                    "likes": "0",
                    "time": "06/12/2022-05:31:19",
                    "content": "It\u2019s like trying to guess the correct combination of a digital safe while blindfolded and with your hands tied behind your back. The odds of correctly guessing the right Ethereum private key are so low that it would make winning the lottery look like child\u2019s play. It\u2019s ironic that estimating the probability of correctly guessing the correct Ethereum private key is easier than rocket science, yet the task itself is almost impossible to accomplish But please, continue\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.161172161172161
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jimf",
                    "index": "23",
                    "likes": "0",
                    "time": "18/12/2022-22:19:31",
                    "content": "(post deleted by author) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shadow",
                    "index": "24",
                    "likes": "0",
                    "time": "19/12/2022-03:57:09",
                    "content": "I suppose it depends on the rules of the lottery being played. But @Weiji argument isn\u2019t very strong.(imo) It\u2019s a standard argument most often heard and it is often used as a way to project an epitome in a condescending manner. Not only does that argument fail in point. The argument is essentially denouncing the credibility of every address before and after the correct selection. Ultimately, there has to be some selection before\u2013that mere existence is the chance of existence. Therefore, there is a chance ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.8125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "25",
                    "likes": "2",
                    "time": "20/12/2022-12:55:05",
                    "content": "@Weiji\u2019s argument is the basis of cryptography. Yes, there is a chance of brute forcing, but it\u2019s so unimaginably low that it can be approximated as zero. The worst-case scenario here is that the probability of brute forcing the key doubles. But double zero is still zero. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Weiji",
                    "index": "26",
                    "likes": "0",
                    "time": "17/01/2023-12:52:35",
                    "content": "Now that the EIP has been merged. Let\u2019s consider how we can proceed with MPC support:  We might want to export one of many private keys from a hardware wallet, and split it with MPC technology so that a 3rd party service could help us identify potential frauds or known bad addresses, enforce 2FA, etc., meanwhile we can initiate transactions from a mobile device with much better UX and without carrying a hardware wallet.  There are two party ECDSA). GG20 is pretty popular. There are also some other schemes. We need to decide which scheme to support and how. Here are my initiate thoughts: Since we already have the private key, there is no need for Distributed Key Generation. Now the wallet holding the private key shall act as a trusted party. It then splits the private key into a few pieces based on the scheme (as identified in the version string) and threshold parameters. We will need another method besides the existing eth_encapsulatePrivateKey. In our designated use cases, it seems unnecessary to have the initiating party of a transaction to prove that it has followed the scheme honestly, as it is usually the user him- or herself initiating the tx. And as the user, he or she already has the private key. I am bringing up this topic for further discussion. ",
                    "links": [
                        "https://eprint.iacr.org/2020/540"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0397727272727275
                }
            ]
        }
    ],
    "group_index": "202"
}