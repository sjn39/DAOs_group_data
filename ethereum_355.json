{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/minimalistic-erc721-approvable-interface/12968",
            "title": "Minimalistic ERC721 Approvable Interface ",
            "index": 12968,
            "category": [
                "Tokens"
            ],
            "tags": [
                "nft",
                "erc721"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "1",
                    "likes": "5",
                    "time": "18/02/2023-02:19:31",
                    "content": "Some projects require an interface to indicate whether a token is approvable, but not necessarily transferable. For instance, the Protector Protected Protocol (PPP) allows a Protector to own a protected vault that can contain NFTs, SFTs, and FTs. It\u2019s too risky to allow exchanges to trade these vaults, but the owner of a Protector can still transfer it to other wallets. In some cases, the owner can decide to trade it on an exchange and make it approvable. To address this need, I\u2019ve created an interface called IERC721Approvable that covers relevant use cases. This interface is especially relevant for security tokens that restrict approvability for added protection. It defines several functions: // SPDX-License-Identifier: MIT pragma solidity ^0.8.17;  // Author: Francesco Sullo <francesco@sullo.co>  interface IERC721Approvable {    // UPDATED on March 16th, 2023     // Must be emitted when the contract is deployed.   event DefaultApprovable(bool approvable);    // Must be emitted any time the status of a tokenId changes.   event Approvable(uint256 indexed tokenId, bool approvable);    // Returns true if the token is approvable.   // It should revert if the token does not exist.   function approvable(uint256 tokenId) external view returns (bool);    // A contract implementing this interface should not allow   // the approval for all. So, any actor validating this interface   // should assume that the tokens are not approvable for all.    // An extension of this interface may include info about the   // approval for all, but it should be considered as a separate   // feature, not as a replacement of this interface. }    Given the increasing number of security-based NFTs that restrict approvability, I think it might be worthwhile to propose this interface as a standard. Many people prioritize transferability when it comes to tokens, and I have proposed a minimalistic interface to facilitate this. However, the most critical factor to consider is whether a token is approvable. As the owner of a token, you know whether it is a collectible or soulbound, while exchanges and marketplaces do not have this knowledge. Therefore, before any transfer can take place, approval must be obtained. In my opinion, ensuring a token\u2019s approvability is more important than simply checking its transferability. What do you think? ",
                    "links": [],
                    "GPT-summary": "The author proposes an interface called IERC721Approvable to indicate whether a token is approvable, but not necessarily transferable. The post explains the need for such an interface and its relevance for security tokens that restrict approvability for added protection. The author suggests that this interface could be proposed as a standard due to the increasing number of security-based NFTs that restrict approvability. The post also invites feedback and opinions on the proposal.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 6.154411764705882
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "2",
                    "likes": "2",
                    "time": "18/02/2023-02:20:53",
                    "content": "The implementation of PPP (in alpha stage) is at   GitHub    GitHub - ndujaLabs/protector-protected-protocol: A protocol to manage... A protocol to manage application NFTs. Contribute to ndujaLabs/protector-protected-protocol development by creating an account on GitHub.      ",
                    "links": [
                        "https://github.com/ndujaLabs/protector-protected-protocol"
                    ],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "3",
                    "likes": "2",
                    "time": "19/02/2023-21:13:29",
                    "content": "I am probably going to create an EIP for it. Before doing it, it would be nice to see what is good, what is bad, if something is missed, etc. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "4",
                    "likes": "3",
                    "time": "20/02/2023-19:30:43",
                    "content": "After some exchange with other devs on other platforms, I realized that the function makeApprovable does not need to be part of the interface, since it is irrelevant for whoever checks the support of it. That would reduce the interface to interface IERC721Approvable {    event Approvable(uint256 indexed tokenId, bool approvable);    function isApprovable(uint256 tokenId) external view returns (bool);    function defaultApprovable() external pure returns (bool); }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.553571428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "5",
                    "likes": "2",
                    "time": "20/02/2023-19:34:10",
                    "content": "BTW, with this change, the interfaceId would change to 0xf98e5a0b. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Bizz",
                    "index": "6",
                    "likes": "3",
                    "time": "20/02/2023-21:08:33",
                    "content": "Really important! By making it a standard, it will limit the risk of unintended transaction. Love what I see here! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/BUll1sh",
                    "index": "7",
                    "likes": "2",
                    "time": "20/02/2023-21:32:40",
                    "content": "As use cases become more and more variable its defenetly beneficial when the processes for approvements become simplified! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.8125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "8",
                    "likes": "0",
                    "time": "17/03/2023-06:51:16",
                    "content": "The interface has evolved after the first implementations in a few projects. Now it has changed to interface IERC721Approvable {    event DefaultApprovable(bool approvable);    event Approvable(uint256 indexed tokenId, bool approvable);    function isApprovable(uint256 tokenId) external view returns (bool);  }  I updated the first post, to avoid that people read an old version. Thanks for all the feedback. I have also made a proposal for a similar interface for Lockable ERC721 at    ERC721 Lockable Proposal With Default Status Tokens       Many proposals for lockable ERC721 contracts exist in different phases of development:        and many others.  Unfortunately, any of them misses something or is too complicated and add extra functions that do not need to be part of a standard.  I tried to influence ERC-5192 making many comments and a PR that was closed by @Pandapip1 who suggested I make a new proposal. So, here we are.  interface ILockable {  // Must be emitted one time, when the contract is deployed,  // defining the default s\u2026     ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.334224598930481
                }
            ]
        }
    ],
    "group_index": "355"
}