{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/new-type-of-call-delegatestaticcall/12741",
            "title": "New type of call - DELEGATESTATICCALL ",
            "index": 12741,
            "category": [
                "EIPs"
            ],
            "tags": [
                "opcodes"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/0xdapper",
                    "index": "1",
                    "likes": "2",
                    "time": "28/01/2023-17:14:00",
                    "content": "The idea is pretty simple, introduce a DELEGATECALL like functionality that restricts state mutations on EVM level just like a STATICCALL does. The idea seems simple and surprised it doesn\u2019t already exist. So I am wondering if there\u2019s any reason this hasn\u2019t already been done? I am no EL dev, but I think the work should be very similar to all other type of calls and could use a lot of reuse(DELEGATECALL + STATICCALL). This also opens up a very simple way to allow users to write custom views on a foreign contract if the said contract chooses to expose a function that does arbitrary delegatestaticcalls. Would also allow contracts to only keep the core state mutating + necessary view functions and in turn give more room for more code given the code size limits. Could also serve as a poor man\u2019s opt-in workaround for EXTSLOADs too. contract SomeContract {   function extview(address _impl, bytes calldata _data) external view returns (bool _success, bytes memory _ret) {     (_success, _ret) = _impl.delegatestaticcall(_data);   } }  ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-2330"
                    ],
                    "GPT-summary": "The post proposes a new type of call called DELEGATESTATICCALL that restricts state mutations on EVM level like a STATICCALL. The author wonders why this hasn't been done before and suggests that it could be useful for allowing users to write custom views on a foreign contract. The post also includes an example contract that implements the proposed functionality. A 3rd party is asking if there are any reasons why this hasn't been done before.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.371212121212121
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/horsefacts",
                    "index": "2",
                    "likes": "0",
                    "time": "28/01/2023-19:44:51",
                    "content": "It\u2019s possible (but a bit of a hack) to do something like this by 1) making a normal delegatecall 2) reverting with its return data, and 3) catching the revert and decoding the result of the original call from the error. Here\u2019s one example of the pattern I know of in the wild. Would definitely be less expensive with its own opcode! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.817708333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/0xdapper",
                    "index": "3",
                    "likes": "1",
                    "time": "29/01/2023-07:58:36",
                    "content": "Yes, thats the way to do it right now for sure. But evm level restrictions on mutations would be nice just the same as staticcall. Technically could implement a static call in a similar fashion too. Revert method requires you to have a new CALL since you want to revert it. Couldn\u2019t be like a internal call jump to a _delegatestaticcall since it will revert the complete existing call. It\u2019d have to be like address(this).call(...) and require more gas as you said and everyone to implement it in their contracts. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.19185360094451
                }
            ]
        }
    ],
    "group_index": "331"
}