{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5000-muldiv-instruction/9930",
            "title": "EIP-5000: MULDIV instruction ",
            "index": 9930,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "evm",
                "opcodes",
                "shanghai-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "1",
                    "time": "13/07/2022-13:30:05",
                    "content": "This is the discussion topic for  Ethereum Improvement Proposals   EIP-5000: MULDIV instruction Introduce a new instruction to perform x * y / z in 512-bit precision      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5000",
                        "https://ethereum-magicians.org/t/create-a-new-opcode-for-muldiv/8574/11"
                    ],
                    "GPT-summary": "The post introduces the Ethereum Improvement Proposal EIP-5000, which suggests the introduction of a new instruction to perform multiplication and division in 512-bit precision. The post is mainly explaining the proposal, but also invites feedback and questions from third parties, including constructive criticism.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.681818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "2",
                    "likes": "2",
                    "time": "13/07/2022-16:35:38",
                    "content": "  twitter.com    @  Fixed point arithmetic is the most widely requested solidity feature in the last few years.  We (@alexberegszaszi, @chfast) are proposing the opcode `muldiv` (https://t.co/Zbe9YoSSP1) that will allow us to have a cheap and generalized way to perform these operations, and more!          This twitter thread has some interesting questions, mostly from @Recmo. Some initial discussions we had when writing the EIP:  Support both \u201cchecked\u201d (abort on overflow) and \u201cunchecked\u201d (do not abort) case Whether to return multiple stack items or not Support accessing the hi bits (after division) or not  The current design wanted to avoid multiple opcodes and returning multiple stack items, hence we arrived at having the special case with z=0. However we cannot accommodate the case of getting the hi bits after division, only before. If we do not have that special case, then we need multiple opcodes, and need to decide what happens in the z=0 case. Existing opcodes (such as DIV, ADDMOD, MULMOD, etc.) handle it specially by just returning zero. One would think however that division-by-zero should be an abort, and result in a revert. ",
                    "links": [
                        "https://twitter.com/_hrkrshnn/status/1547235200048013313",
                        "https://twitter.com/_hrkrshnn/status/1547235200048013313",
                        "https://twitter.com/_hrkrshnn/status/1547235200048013313"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.849107142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "3",
                    "likes": "1",
                    "time": "27/07/2022-20:25:29",
                    "content": "Nice idea. Current implementation in smart contract is way to heavy: openzeppelin-contracts/Math.sol at c11acfd9d3b8713e196791690a7feded496ebd99 \u00b7 OpenZeppelin/openzeppelin-contracts \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.767857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/radek",
                    "index": "4",
                    "likes": "0",
                    "time": "25/09/2022-20:45:17",
                    "content": "Have you considered the carry flag? - see EIP 1051 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "5",
                    "likes": "0",
                    "time": "25/09/2022-21:36:50",
                    "content": "In fact we did, the entire conversation started from there (see also EVM: overflow detection in arithmetic instructions \u00b7 Issue #159 \u00b7 ethereum/EIPs \u00b7 GitHub from 2016). These are the notes before we settled on the current design:  Checked opcode #1:  Abort on overflow  Checked opcode #2:  Returns two values (overflow flag)  Checked opcode #3:  New opcode which sets overflow flag  (For the following we introduce a CLEAROF (clears the flag) and GETOF (puts the value of the flag on the stack) instruction.) Overflow-check clear-per-instruction:  Perform the calculation Overwrite overflow flag  Overflow-flag set-if-not-set:  Perform the calculation Set overflow flag if it was zero prior the calculation  Overflow toggle:  Turn on overflow setting (two behaviours for opcodes like ADD)   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.136363636363637
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/radek",
                    "index": "6",
                    "likes": "0",
                    "time": "26/09/2022-11:39:16",
                    "content": "I see. Honestly, I still do not understand the carry flag was not pursued further when simple carry checks of arithmetic operations would result in smaller bytecode (comparing to safe math and now solc outcomes). But this is OT for this EIP. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.1
                }
            ]
        }
    ],
    "group_index": "1823"
}