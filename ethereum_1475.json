{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-4361-sign-in-with-ethereum/7263",
            "title": "EIP-4361: Sign-In with Ethereum ",
            "index": 7263,
            "category": [
                "EIPs"
            ],
            "tags": [
                "signatures",
                "identity",
                "siwe"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/wyc",
                    "index": "1",
                    "likes": "7",
                    "time": "14/10/2021-19:35:46",
                    "content": "Discussion for EIP-4361. You can find the latest updates on this work including recorded community calls with notes and links to the chat at login.xyz. ",
                    "links": [],
                    "GPT-summary": "The post is a discussion about EIP-4361, which is a proposal for Sign-In with Ethereum. The author provides updates on the work and directs readers to login.xyz for more information. The post also serves as an advertisement for the proposal and invites feedback and questions from third parties.",
                    "GPT-proposal-categories": [
                        "Identity and reputation systems",
                        "Smart contract updates",
                        "Interoperability and Scaleability",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal",
                        "None"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wyc",
                    "index": "2",
                    "likes": "0",
                    "time": "14/10/2021-19:42:23",
                    "content": "Ferrying some discussions over from the GitHub thread. ============= axic asked  Why is it preferable to have a new invented language and not some binary format, which is easier to parse (CBOR or even ERC-712)? Is the only reason because the signed message will be \u201creadily\u201d displayed in wallets without implementing support for it? If so, I think hardware wallets may be a big exception to that where some other more easily parsable format is more likely to gain support.  wyc responded  Hi axic, thanks for your concern. That is indeed the main reason, so that applications may adopt this specification without full buy-in from wallet vendors or significant degradation of their user experiences today. In our proposal response to the RFP, we actually specified EIP-712 as the signing format, but found the user experience across many wallets to be much worse than using EIP-191. Formats like CBOR, EIP-712, protobuf, etc. indeed specify structuring for data, but hardware wallets have spotty support for presentation of EIP-712 requests to the users already (please see ongoing issues Ledger/Trezor). We believe that if adoption of this specification relies on all wallet vendors upgrading how they do signing first, it is far less likely to see success. While pure technical merit is important to consider, adoption depends far more on talking to downstream users and understanding their concerns, what they are likely to truly adopt, etc. We have completed over 30 interviews towards this conclusion. We welcome anyone to let us know of any further user research in support or incongruent with this claim. Hope that helps!  ============= awoie asked  Since this is still a draft, it is feels a bit weird that folks have already approved this. wyc Is this going to be merged once all issues in the community calls get addressed?  wyc responded  awoie the PR is indeed in draft state, and therefore can\u2019t be merged right now. I appreciate everyone who signaled their support for it so far! We will discuss pretty important matters in the public community calls and attempt full resolution of any concerns prior to merge, but also we are on a timeline for delivery so this must be balanced too. Full details: login.xyz  ============= ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.864148239148239
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "3",
                    "likes": "1",
                    "time": "15/10/2021-08:35:11",
                    "content": "    wyc:  Discussion for EIP-4361   The mentioned link doesn\u2019t work for me. The correct link would be Create EIP-4361: Sign-In with Ethereum by wyc \u00b7 Pull Request #4361 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/4361/files"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "4",
                    "likes": "0",
                    "time": "15/10/2021-08:42:46",
                    "content": " hardware wallets have spotty support for presentation of EIP-712 requests  I don\u2019t see how not using EIP-712 improves the situation for hardware wallets. Wouldn\u2019t it make more sense to specify 1 specific EIP-712 struct that is expected? In this case hardware could optimize for this one. The issue for hardware wallets with EIP-712 is that it is fully dynamic and therefore quite complex to implement with limited resources. But if you pick one specific domain+struct it is trivial to implement. This would also allow easy support on contracts (as EIP-712 was designed with smart contract in mind). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.375661375661376
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "3",
                    "time": "22/11/2021-06:02:04",
                    "content": "TL;DR: Private Key != Identity.  Contract == Identity. I am pretty strongly opposed to this proposal because it doesn\u2019t support contract wallets.  Attaching an identity to a private key means users cannot rotate their private keys, something broadly considered a good security practice.  In general, we should try to minimize the number of situations where a user\u2019s private keys are tightly coupled with some feature. Instead, we should have a standard for a contract that has a method like, isAuthorizedTo(signature, permission_set).  Then a user would sign something (exactly what is up to the contract wallet they are using and not something that needs to be standardized) and the website could then ask the contract wallet associated with the user\u2019s identity if the supplied signature is one that is authorized to do the thing the user is doing (like sign-in to social media accounts with read access). This system also would support on-demand permission checking.  You could prompt the user for a signature, and then the website could ask the contract \u201cdoes the signer have permission to do X\u201d each time the user tries to do some new action.  You would probably want some standardized contract method for adding/removing access to a particular private key, but I think that could be in a separate standard (or many standards). Note: If one does implement a contract-friendly system as outlined above, then a registry like EIP-1820 should be used so that any contract that supports arbitrary method calls can work with it and it doesn\u2019t require every contract wallet to natively support it. If a user wants to roll their keys, they would only need to update their contract wallet with the new keys and they would not need to roll their keys with every single service they interact with. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.442855276907002
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wyc",
                    "index": "6",
                    "likes": "2",
                    "time": "22/11/2021-20:16:37",
                    "content": "Hi Micah, thanks for your thoughts! I\u2019m happy to report that the spec does indeed support smart contract wallets via EIP-1271. Please see the section titled \u201cSigning and Verifying with Ethereum Accounts\u201d. Hope this helps, please feel free to add anything further. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.664285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wyc",
                    "index": "7",
                    "likes": "0",
                    "time": "09/12/2021-20:50:22",
                    "content": "To conform with EIP-1, I am pasting the pieces moved out of the spec to here. Thank you to @lightclient for spotting these! From Motivation:  This work is sponsored by the Ethereum Foundation and Ethereum Name Service (ENS). It is being developed in the open through a series of recorded community calls and public repositories, and its development is informed by over twenty user interviews with a focus on currently-in-production uses, related prior EIPs, and fits within product roadmaps.  From Requirements:  RFP  From Additional Resources  Additional Resources Throughout the development process of this specification, community participation was encouraged and facilitated via weekly calls. This was to ensure coverage on major areas of concern, and accommodate a wide and diverse range of feedback from the Ethereum community. Additionally, resources and research were made public both in the form of the community calls, the minutes being published, and blog posts. Those resources can be found at the following locations:   Login.xyz - which served as the primary source of specification updates, news, and community call minutes.  An initial overview of required workflows - which helped inform the initial kickoff and discussions on the specification.  Research on related EIPs - which helped identify the necessary requirements around necessary EIPs to support.  A comparison of EIP-191 vs. EIP-712 - which helped lead to the decision to use EIP-191 in the first version of EIP-4361.   From Discussions and Acknowledgements:  Discussions and Acknowledgements    @awoie and @rh7 led the discussion on EIP-712 and EIP-191 signing schemes, including the benefits of structured data types and potential for extensions when using EIP-712.  @awoie surfaced a number of privacy and security considerations related to MITM attacks, replay attacks, relay attacks, and RP-binding.  @pedrouid suggested a YAML-inspired message format that struck the balance between human and machine readable.  @Amxx suggested adding the version indicator to allow forwards-compatibility, and also brought up important implications between EIP-1271 and network selection.  @mhluongo led discussion around i18n support and suggesting several improvements around the message format.  @oed suggested low-impact changes that could do a lot to enable capabilities-based permissioning models.  @kdenhartog advised on mitigating/calling out phishing attacks, domain binding security, OIDC models of identity, and examples of using EIP-712 to structure data.  @SamWilsn made several improvements to the ABNF grammar and additional security guidelines to wallet implementers to prevent phishing attacks.  @cfelde suggested a minor improvement to the ABNF grammar.   ",
                    "links": [
                        "https://login.xyz",
                        "https://blog.spruceid.com/sign-in-with-ethereum-proposed-architecture/",
                        "https://blog.spruceid.com/ethereum-identity-review-of-eips-over-time/",
                        "https://blog.spruceid.com/sign-in-with-ethereum-wallet-support-eip-191-vs-eip-712/"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.230978260869565
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "8",
                    "likes": "1",
                    "time": "17/12/2021-19:51:01",
                    "content": "I still don\u2019t understand how it is beneficial to use EIP-191 with an ABNF message that should get a custom interface by the wallet, compared to an EIP-712 struct where you can do the same. As we can see it takes a long time for wallets to adopt new standards (e.g. EIP-712) creating a new one which is equally hard to support on hardware wallets doesn\u2019t improve this situation (as mentioned before). Is there any more documented decisions/ discussions on the signing format, as the information on the EIP are quite limited and provides very little details? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.072426271645022
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "9",
                    "likes": "0",
                    "time": "21/12/2021-11:44:42",
                    "content": "I started implementing this, and found a quirk in the spec. Regarding the optional statement.    address LF     LF     [ statement LF ]     LF     %s\"URI: \" uri LF ... statement = *( reserved / unreserved / \" \" )  If I interpret this correctly, it means that the statement itself can be present or not, and also that the statement may be empty. So this is perfectly fine, being a message with a present-but-empty statement: service.org wants you to sign in with your Ethereum account: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2    URI: https://service.org/login Version: 1  So is this, a message without a statement: service.org wants you to sign in with your Ethereum account: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2  URI: https://service.org/login  This is a bit awkward, making correct parsing more complicated than it needs to be. I\u2019d propose to change it to read like this, to make the statement, if present, contain one of more characters: statement = 1*( reserved / unreserved / \" \" )  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.308333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "10",
                    "likes": "1",
                    "time": "21/12/2021-11:48:16",
                    "content": "There\u2019s also an ambiguity. This message can be interpreted either as a valid message with a statement, or as a malformed message (without statement): service.org wants you to sign in with your Ethereum account: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2  URI: https://not.the.service.org/its_a_statement  URI: https://service.org/login Version: 1 Chain ID: 1 Nonce: 32891756 Issued At: 2021-09-30T16:25:24Z  I don\u2019t know if there\u2019s anything to do about that, just throwing it out there as an example for parser-writers to be aware of. EDIT: One thing that would solve both these quirks, would be if the statement was also prefixed, like the other fields:    address LF     LF     [ %s\"Statement: \" statement LF ]     LF     %s\"URI: \" uri LF  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.541666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "11",
                    "likes": "0",
                    "time": "28/12/2021-12:37:05",
                    "content": "The reference implementation is not in line with the spec, so changing it is IMO a no-brainer: Implementation not according to spec \u00b7 Issue #30 \u00b7 spruceid/siwe \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "12",
                    "likes": "0",
                    "time": "09/01/2022-22:33:29",
                    "content": "I want to highlight a conflict within the spec:  The wallet presents the user with a structured plaintext message or equivalent interface for signing with the EIP-191 signature scheme (string prefixed with \u0019Ethereum Signed Message:\\ <length of message>). The message MUST incorporate an Ethereum address, version of the message, uri for scoping, nonce acceptable to the server, and issued-at timestamp.  The section \u201cSpecification\u201d mentions that the message MUST incorporate:  address version URI nonce issuedAt  However, the ABNF in the specification, as well as that in the reference implementation mandate more than those fields:  domain chainId  So which one is wrong? The ABNFs or the sentence in the EIP document? ",
                    "links": [
                        "https://github.com/ethereum/EIPs/blob/master/EIPS/eip-191.md",
                        "https://github.com/spruceid/siwe/blob/main/lib/abnf.ts#L4"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wyc",
                    "index": "13",
                    "likes": "1",
                    "time": "12/01/2022-15:22:29",
                    "content": "Thanks for addressing this in your PR! I\u2019ve approved it.   github.com/ethereum/EIPs         EIP-4361: fix mandatory fields (domain & chainId)   ethereum:master \u2190 TimDaub:patch-1            opened 10:38PM - 09 Jan 22 UTC               TimDaub             +1 -1       The spec's ABNF and the ABNF in the reference implementation all mandate `domain\u2026` and `chainId` to be required fields in a message, so we add them to the specification text for completeness as well.  Comment on Ethereum Magicians is here: https://ethereum-magicians.org/t/eip-4361-sign-in-with-ethereum/7263/11       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/4655",
                        "https://github.com/TimDaub",
                        "https://github.com/ethereum/EIPs/pull/4655/files",
                        "https://github.com/ethereum/EIPs/pull/4655"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sebastiantf",
                    "index": "14",
                    "likes": "1",
                    "time": "03/02/2022-05:28:23",
                    "content": "Something that was noticed while working with Gnosis Safe (implements EIP-1271) is that it requires sending an on-chain txn for signing \u201coff-chain\u201d messages with personal_sign et al. EIP-4361 and similar Sign-in with Ethereum workflows recommend using a nonce for each message, to prevent replay attacks. But using a nonce for each login would require the Gnosis Safe owner to send an on-chain txn spending the gas fees for each login, which is a bad UX. I think the Gnosis team is working on something for off-chain message signing with Safes, from talking to @rmeissner But, just wanted to share something here that I\u2019d come across, that\u2019s related to EIP-4361 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.300000000000001
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "15",
                    "likes": "0",
                    "time": "09/02/2022-01:00:19",
                    "content": "EIP-4361: Sign-In with Ethereum with @wyc      ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/htekdev",
                    "index": "16",
                    "likes": "0",
                    "time": "20/03/2022-18:16:43",
                    "content": "This is way bigger than simply being able to sign in with Ethereum. This could enable \u201cweb2.0\u201d architecture\u2019s ability to accept web3.0 user base. Not only that, but it could enable the consolidation of identity leading towards the dream goal of transitioning all data from centralized monopolies to the new decentralized paradigm. Im currently attempting to make a dent in this area with the health care industry (The biggest identity/privacy/centralized data nightmare in existence). I am trying to formulate a proposal that includes several components and one of those is the Trust Framework. Im guessing that\u2019s why no so recently ENS published their inclusion in the list of DIDs ENS names are Decentralized Identifiers (DIDs) | by Oliver Terbu | uPort | Medium Im trying to find how this standard fits with our drive-in health care interoperability starting with the consolidation of identity. I have been driving the conversations towards blockchain (Ethereum) and this standard would be the missing link. Real question: Am I understanding correctly or is any connection to the JWT standard not being included here? If that is true then it makes it difficult to consider EIP-4361 as a true standard (From the eyes of \u201cnon web3 organizations\u201d) which would cause difficult justifications for implementation to legacy relying-parties. Especially ones that are not decentralized in nature. Like you said in the video the dream is to have no centralization but in some situations, we must and for the current maturity of Ethereum and its applications, centralization still exists. If we are going to make any dent in this we need to think about how to include centralized-based authentication flows when designing new standards in order to make the transition to new decentralized paradigm smoother. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 4.9602272727272725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shobhit",
                    "index": "17",
                    "likes": "2",
                    "time": "18/07/2022-18:54:30",
                    "content": "Why do we need to have chain ID as a mandatory field? Signing in to an application to (say) check my RSS feeds does not need a chain. Same can be said for other use cases where you really don\u2019t need a reference to chain, just need to authenticate the user. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/j12t",
                    "index": "18",
                    "likes": "0",
                    "time": "26/07/2022-23:46:00",
                    "content": "Is this spec considered \u201cfinished\u201d at this point, or is there ongoing work, perhaps for additional related use cases? (Perhaps in other EIPs or outside of the EIP process?) If there is, where would I track this? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.791666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "19",
                    "likes": "0",
                    "time": "27/07/2022-07:02:58",
                    "content": "    wyc:  Discussion for EIP-4361 .   Can you please change this link to https://eips.ethereum.org/EIPS/eip-4361? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "20",
                    "likes": "2",
                    "time": "27/07/2022-07:20:06",
                    "content": "I agree with @shobhit that chain ID shouldn\u2019t be required for EOA verification, but it should be required for contract verification (you need to know what blockchain to do the contract execution against).  While the rationale for choosing 191 over 712 is all technically correct, I think it is mostly based on an a premise I disagree with which is that poorly designed wallets should result in using standards that are worse solutions to problems.  We should be pressuring wallets to do better at EIP-712 rendering, rather than just giving up and saying, \u201cwell, I guess we\u2019ll never get good 712 rendering so we will use 191 everywhere\u201d. 712 is more computer readable, while 191 is more human readable, and I think this standard should be focusing on computer readability rather than human readability and leaving it up to the presentation layer to present that to users. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.791666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/unenunciate",
                    "index": "21",
                    "likes": "0",
                    "time": "15/09/2022-01:05:05",
                    "content": "Can this be modified so that it is calling its own personal_sign_swie method, probaly not that method name though, so we can both enforce the data structure and so that, from the extension level, the request could be modified to represent the contract wallet if one is in place? (I am helping building an ERC-4337 platform and this would be very helpful personal and generally useful too) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/anonfunction",
                    "index": "22",
                    "likes": "0",
                    "time": "08/10/2022-13:20:19",
                    "content": "I would like to say that for many less technical users the current required information is actually more intimidating and seems riskier than what users may be more familiar with which usually stress that they are simply signing a simple plain text which cannot be used for nefarious purposes. There have been several phishing scams that got users to sign buy or sell orders and other types of data that resulted in theft of assets so this is something end users can be rightly wary of. For example here are some common signatures to verify: Imgur: The magic of the Internet For that reason I think sticking with 191 over 712 could be a better choice, even though I do think 712 is technically the right choice. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.4223057644110275
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/unenunciate",
                    "index": "23",
                    "likes": "0",
                    "time": "09/10/2022-16:40:11",
                    "content": "This is partially why I am suggesting the personal_sign_swie method because the 4337 wallet I am building flags all signature requests for non transactions like this as potentially dangerous. (and actual transactions are provided a preplay showing what events, balance changes, and source code for contracts interacted with). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 3.8333333333333335
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tay",
                    "index": "24",
                    "likes": "3",
                    "time": "26/10/2022-14:19:56",
                    "content": "Can someone please link to any (all) research and discussions regarding user safety\u2026e.g. phishing considerations, domain binding, etc. etc. etc. from this EIP or others. I know there have been a ton of these but over the years but they arent where they need to be which is in the spec itself or linked to from the spec itself. Right now the only real guidance is \u201cBoth the wallet and relying party have to implement this specification for improved security to the end user. Specifically, the wallet MUST confirm that the message is for the correct domain or provide the user means to do so manually (such as instructions to visually confirming the correct domain in a TLS-protected website prior to connecting via QR code or deeplink), otherwise the user is subject to phishing attacks.\u201d and frankly\u2026thats just not going to get the end user experience where it needs to be. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.227891156462585
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ivanmoralis",
                    "index": "25",
                    "likes": "1",
                    "time": "12/01/2023-19:01:31",
                    "content": "@wyc are you guys still working on this EIP? What is the status of this?  The industry needs this The industry needs this functionality, and without a standard approved wallets cant start implementing protections on their end.  Wallets and Browsers Parallel I see an interesting parallel to the Internet in how browsers are trusted with protecting cookies and only allow certain sites from certain domains to access them. The role of wallets in this EIP is similar - the wallet needs to ensure that the domain and message is correct.  I am not worried about message complexity I have seen some comments on the fact that the message structure is intimidating due to eip712. At the end of the day wallets will hide this complexity and show easy UI to the users. Users should never see the actual messages being passed.  Users will trust wallets like they trust browsers with cookie protection Just like users today trust the browsers to keep their cookie safe from unauthorized domains - the same will happen to wallets, users will most likely not double check and read the actual low-level message themselves.  Users will trust wallets like they trust browsers with TLS Just like you don\u2019t read the TLS certificate messages and signatures yourself - you trust the green lock icon in the browser to tell you that communication with the website is secure.  Im sending these messages here on this forum without verifying anything about how the encryption actually is established.  Should we give wallets this trust? The whole Internet is built on this \u201ctrust the browser\u201d model (and therefore all online banking handling trillions in assets). It is clearly successful. Therefore it makes sense that web3 follows the same model. Let me know if I am missing something.  Conclusion Therefore, I do not share the concerns about the message complexity/intimidation. In fact, we need to move away from showing raw-text and do real UI in the wallets.  Importance of this EIP - LFG As long as there is no standard we cant get to work as an industry and build - that\u2019s why I would love to see more activity in this EIP. Looking forward to more news about this eip! (and of course happy to help in any way I can) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 5.9293394777265735
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wyc",
                    "index": "26",
                    "likes": "1",
                    "time": "13/01/2023-04:46:40",
                    "content": "Hey Ivan, absolutely we are still working on this! I\u2019m glad that you share our excitement about how foundational this work is for the ecosystem, and I\u2019m happy to share that there are hundreds of projects using this specification already. Would you like to join our next community call and chat there? You can listen to the one that happened today here: https://twitter.com/signinwitheth/status/1613596784538030081 While I sympathize with your view (and remain optimistic) that eventually the wallets will abstract message signing and create trusted signing UX modals with potentially complex message formats under the hood, this hope simply didn\u2019t match up with our developer interviews across hundreds of dapps and many wallets, including MetaMask. In short, while you may not be worried about message complexity, implementers are\u2026so if you have a proposal that is a shoo-in for introducing a generalizable trusted consent screen for complex message formats in EIP712 then let\u2019s hear it!!! So far, we haven\u2019t been able to get the community to align around such an approach, and there are 3 versions of EIP712 so you have to be specific about which one you are referring to. Are recursive data structures something that all wallets will be able to implement and display a delightful+secure UX around (v3)? How widespread and correct are EIP712 implementations today? Are we committed to EIP712 or is there something potentially even better, such as how some integrity objects like biscuits and macaroons can be implemented via signed protobuf object or even COSE. We need concrete proposals on how this would happen for this direction to be a viable path, but we\u2019re totally open to it in future iterations of SIWE. So please join the community call or discord and we can continue the discussion there. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.728515625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ivanmoralis",
                    "index": "27",
                    "likes": "0",
                    "time": "14/01/2023-09:40:22",
                    "content": "Hey @wyc thanks for coming back! I will listen to the community call and join future ones. Are they weekly/monthly? Also - if you are interested I would love to interview you on our youtube https://www.youtube.com/channel/UCgWS9Q3P5AxCWyQLT2kQhBw  Reasoning of Wallets Interesting points about the implementers as it is key they are on board. Do we know their reasoning for it? Do they envision a future in which the users will read and verify the full messages? It would be great to interview end-users and do end-user testing. Wallets will choose whatever will make them outcompete other wallets. (interesting episode on wallet competition The Crypto Wallet War is coming | E08 - YouTube) So if we have users preferring a solution wallets will consider it seriously, and that\u2019s also how we ensure that we build things the users like and leads to mass adoption instead of building tech for other techies  One concern I can understand is that of being responsible for this secure UI. I can imagine wallets wanting to put all responsibility on the user to read and verify everything. But that\u2019s not how browsers are doing it with all Internet security, and where would the web be if users had to verify all SSL encryption etc. So maybe it makes sense to have a format in which some wallets show the raw-text and some wallets can do a nice UI and we let the market decide who wins.  Specifics of EIP721 Regarding the message types - I need to do more homework as I am only familiar with them on a very high level. And I am probably not the correct person to give opinions on the exact technical pros and cons of each format.  Steps ahead I am not sure where we are at exactly in the process but I would propose something like this:  Create an official working group consisting of wallets, projects, infra providers Come up with milestones, for example - agree on message format, agree on desired UI, etcetc Set deadlines for each milestone Do regular checkins with the working group  Do we have some sort of official working group yet? ",
                    "links": [
                        "https://www.youtube.com/watch?v=A_d_NtsyDtE"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.990679012345678
                }
            ]
        }
    ],
    "group_index": "1475"
}