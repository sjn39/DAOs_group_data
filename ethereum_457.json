{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/3-proposals-for-making-web3-a-better-experience/1586",
            "title": "3 Proposals For Making Web3 A Better Experience ",
            "index": 1586,
            "category": [
                "User Experience"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "1",
                    "likes": "3",
                    "time": "15/10/2018-07:02:03",
                    "content": "Hi, I am still new to the ethereum magicians but I feel this might be the best place to mention 3 proposals for web3 browsers that should improve the general web3 UX by removing unnecessary confirmations I explained it in details here : https://medium.com/@wighawag/3-proposals-for-making-web3-a-better-experience-974f97765700 It relies on the idea that web3 browsers checks the origin of the current document before signing and derypting data. Here is a summary of the 3 proposals: proposal 1 : automated decryption via checked origin injection : Whenever an application want to encrypt some data, it first prepend to the decrypted data, the origin(s) that would be allowed to decrypt. It then encrypt the result. Then when an application (could be the same) want to decrypt, it request description from the web3 browser. The web browser will   internally decrypt the data,   extract the origin   check if the origin of the document currently requesting decryption matches the (or one of the) origin prepended to the data.   4 a) if it matches, the data is given to the application decrypted 4 b) if it does not match, decryption is refused and the application get an error Since,with this scheme it is impossible for an application to decrypt without being part of the allowed origin and that the application having access to the data is the one that set the allowed origin, there is no risk in making such decryption without user confirmation, allowing a much nicer experience.  fa1a9827433027618735688ae4d86b24650049f6.png935\u00d7840 15 KB  proposal 2: automated origin check on EIP712 (or other signing method) This proposals modifiy EIP712 slightly to (using automated origin checks by the web3 browser) add extra security by ensuring verifiers can know from which origin the user has been requested to sign. This allow the verifier to only allow origin which the user explicitly approved, bringing a new mechanism for per-application approval. This scheme also enable proposal 3.  ad0b4df8554d88671fcc15f57b7858c46f9a3ae5.png1100\u00d7880 15.2 KB   ae84a814375f6b747fb4a316a09a3f5d292af2fb.png1040\u00d7880 14.9 KB  proposal 3: non-interactive signatures With this proposal (another addition to EIP712), applications can request so called \u201cnon-interactive signature\u201d which are signature signed by the user\u2019s private key without confirmation. These are recognizable by one of their bit/byte set to indicate non-interactivity. While that sounds scary at first sight, this is only an option and the verifier can choose to accept those or not. Since with proposal 2, applications cannot sign without prior-approval, applications can now provide a more seamless experience by allowing non-interactive signature for low-risks actions. Imagine a decentralised social platform where the application\u2019s front-end provides a form with text input and a submit button. It would be for many use cases too much for the users to confirm via an extra scary pop-up after they already pressed the \u201csubmit\u201d button. Remember that because the origin is checked, such application\u2019s origin would have to be approved by the users first anyway. And if the content of such origin is verifiable (IPFS, SWARM), the source code could be audited to ensure that no malicious behaviour is even possible.  83f0e25f13dc9ac8914b1555ae7fdb7a4c4d8909.png1197\u00d71200 21 KB   conclusion I think all of these proposals are actually objectively better that what we currently have and I would like to see them adopted as soon as possible so the general dapp\u2019s UX get improved significantly. ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/f/fa1a9827433027618735688ae4d86b24650049f6.png",
                        "https://ethereum-magicians.org/uploads/default/original/2X/a/ad0b4df8554d88671fcc15f57b7858c46f9a3ae5.png",
                        "https://ethereum-magicians.org/uploads/default/original/2X/a/ae84a814375f6b747fb4a316a09a3f5d292af2fb.png",
                        "https://ethereum-magicians.org/uploads/default/original/2X/8/83f0e25f13dc9ac8914b1555ae7fdb7a4c4d8909.png",
                        "https://ethereum-magicians.org/t/topics-for-wallet-ring-gathering-tomorrow-15-30-in-the-workshop-room-of-national-house-smichov/1693/4",
                        "https://ethereum-magicians.org/t/council-of-prague-announcement/1006/26",
                        "https://ethereum-magicians.org/t/the-ux-of-eip-1024-encrypt-decrypt/1243/5",
                        "https://ethereum-magicians.org/t/eip-erc-app-keys-application-specific-wallet-accounts/2742/4"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.3106060606060606
                }
            ]
        }
    ],
    "group_index": "457"
}