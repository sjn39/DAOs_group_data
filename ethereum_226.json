{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5988-add-poseidon-hash-function-precompile/11772",
            "title": "EIP-5988 - Add Poseidon hash function precompile ",
            "index": 11772,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "evm",
                "gas",
                "precompile"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/abdelhamidbakhta",
                    "index": "1",
                    "likes": "3",
                    "time": "17/11/2022-11:50:16",
                    "content": "Discussion about EIP-5988 - Add Poseidon hash function precompile. This EIP introduces a new precompiled contract which implements the hash function used in the Poseidon cryptographic hashing algorithm, for the purpose of allowing interoperability between the EVM and ZK / Validity rollups, as well as introducing more flexible cryptographic hash primitives to the EVM. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-6601-evm-modular-arithmetic-extensions-evmmax/13168/4"
                    ],
                    "GPT-summary": "The post discusses EIP-5988, which proposes the addition of a new precompiled contract to implement the hash function used in the Poseidon cryptographic hashing algorithm. The purpose of this proposal is to allow interoperability between the EVM and ZK/Validity rollups and introduce more flexible cryptographic hash primitives to the EVM. The post includes a discussion about the proposal, with some constructive criticism and questions from third parties.",
                    "GPT-proposal-categories": [
                        "Interoperability and Scalability",
                        "Smart contract updates",
                        "Token economics",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.590909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "2",
                    "likes": "1",
                    "time": "22/11/2022-13:42:40",
                    "content": "The main missing piece here seems to be the MDS matrix and the round constants. Since the precompile is intended to be arbitrary-size, we can\u2019t just save the round constants in the precompile as we do with SHA256, RIPEMD160, etc, we have to generate them. I see a few options:  Add an extra global execution context variable which stores which state sizes and round counts have been used before, and the MDS and RC values for those state sizes using some standard algorithm. When using a new (state size, round count), generate new values and charge extra gas for this. Generate the values in real time. Pass the values in as inputs.   Option 1: cache constants in global context variable (1) is in my view unlikely to pass, because it is a large increase in complexity, and it makes the precompile stateful (not a pure function), which is something that has not been done before.  Option 2: generate constants in real time (2) is more viable than one might think, because the constants would only need to be calculated once but would be used for calculations ~64 times. For example, the default MDS matrix used in many implementations is MDS[x][y] = 1/(2+x+y), which only requires N inversions (~= 3N field operations with Montgomery multi-inv), barely the cost of a single round. But this would require some tight coordination between the various Poseidon users, because it\u2019s possible that some users (eg. Goldilocks field users) have very specific MDS values in mind that are well-optimized for their specific use case. RC values are harder, because there are [width] of them per round. In existing implementations, eg. this one, the RC values are generated with a fairly complicated pseudo random number generator. We would have to agree on an algorithm for generating RC values that is very efficient but also generates good values. Would something like RC[i] = (i**3) ^ (i**5) where i = (round number) * width + index and ^ is binary xor work? No idea, need to ask the cryptanalysis experts.  Option 3: pass constants in as parameter (3) has the challenge that there are a lot of constants. For the MDS matrix, it would work if we insist that the matrix must be a Toeplitz matrix, so MDS[x][y] = D[x+y] for some length 2n-1 D. For round constants, it would not work, and we would need to find easy real-time-generateable values like in the previous option. The main benefit of allowing more arbitrary MDS values is that it would be more likely to satisfy the needs of specific teams that have specific algorithms that are highly optimized around particular prime fields. Because the round constant mixing step is relatively simpler, there is less need to optimize it, and so people would be more likely to simply accept whatever round constants we suggest as long as there is reason to believe that they are secure. ",
                    "links": [
                        "https://en.wikipedia.org/wiki/Toeplitz_matrix"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.958860494344365
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elistark",
                    "index": "3",
                    "likes": "1",
                    "time": "23/11/2022-07:58:40",
                    "content": "Hi! Super important initiative, thanks @abdelhamidbakhta and @vbuterin for leading this. A few comments, I\u2019ll let David say more (and correct me where I err).  Definitely in support of @vbuterin\u2019s option 2, in our Poseidon we generate the round constants using SHA2. To allow a bit of wiggle room for others, suggest to allow any of SHA2, SHA3, Keccak and Blake. And the input should probably include all the parameters of that version: p (modulus), # full rounds, # partial rounds, etc. As part of our effort to include the Poseidon builtin in Cairo and StarkNet, we\u2019ve contracted an independent expert evaluation of the security of the MDS matrices we use. David is checking efficiency compared to the MDS matrices @vbuterin mentioned. We\u2019ll try to bring the crypto expert on board to also vet and opine on the various other constructions. We\u2019ve also contracted an independent team to work on an efficient CPU implementation of (our version of) Poseidon, will try to also loop them in to help write the precompile in a super-efficient way. Will update on both 2, 3 once I get the relevant OKs from those teams.  Eli ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.769444444444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elistark",
                    "index": "4",
                    "likes": "0",
                    "time": "23/11/2022-08:08:58",
                    "content": "Update from @DavidLevitGurevich : The MDS matrix we use is 3 1 1 1 -1 1 1 1 -2 Multiplying by it requires no multiplications and only 8 additions/subtractions. According to our understanding, a single multiplication (modulo a 256 bit prime) costs ~7.5 additions, i.e., the matrix above will likely be faster to compute than anything which involves more than one multiplication and one addition. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.428571428571428
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elistark",
                    "index": "5",
                    "likes": "1",
                    "time": "23/11/2022-08:12:17",
                    "content": "BTW, I don\u2019t have permissions to mention more than 2 handles in a post, because I\u2019m new to the system. Can anyone pls grant me more permissions? @vbuterin @timbeiko (would add a few more names but, y\u2019know, I\u2019m not allowed  ) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None",
                        "None",
                        "None",
                        "None",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.436363636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DavidLevitGurevich",
                    "index": "6",
                    "likes": "0",
                    "time": "23/11/2022-10:59:52",
                    "content": "That\u2019s right. Our plan for the future includes also higher dimension matrices, all of a similar form of small values on the diagonal and 1 in the other places. The main advantage of these matrices is their CPU time, so I think they should be part of the precompile. It\u2019s important to mention that the independent expert advised us that these MDS matrices are secure as long as the round constants are not too small (we are fine because we use SHA256 to generate the round constants). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.281349206349207
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elistark",
                    "index": "7",
                    "likes": "0",
                    "time": "23/11/2022-11:05:18",
                    "content": "I\u2019d like to address the concerns that @CPerezz CPerezz raised on the EIP page, so will first quote him, then answer:  I do have a couple of concerns with this EIP proposal:  On which field is this going to be implemented? As there\u2019s a lot of BLS and BN curves and you\u2019ll need to have a pre-compile for each of them. Which seems unfeasible and not practical at all. The security parameters will change depending on the field on which you\u2019re working with and the security of the curve, bit size etc\u2026 You can implement Poseidon with different Arity parameters. So basically there\u2019s an infinite amount of permutations that can be added. And doesn\u2019t make sense that this is enforced by a precompile as many companies or users might find the precompile worthless.   Responses:  Suggest a small list of common fields (up to 5 or so should cover existing use cases), and then presumably new projects will opt for one of those. A different option is that the field be a parameter, but this this is unneeded Again, I\u2019d go with a small selection of parameters that are either currently used. Notice that Poseidon, as a sponge construction, can be applied to different compression ratios Right, and we\u2019ll curate a small reasonable number.  ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5988"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.829313543599258
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/timbeiko",
                    "index": "8",
                    "likes": "1",
                    "time": "23/11/2022-19:04:08",
                    "content": "    elistark:   Definitely in support of @vbuterin\u2019s option 2, in our Poseidon we generate the round constants using SHA2. To allow a bit of wiggle room for others, suggest to allow any of SHA2, SHA3, Keccak and Blake. And the input should probably include all the parameters of that version: p (modulus), # full rounds, # partial rounds, etc.    Can\u2019t help here, sorry! @jpitts should be able to, though! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.571428571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "9",
                    "likes": "1",
                    "time": "24/11/2022-15:47:25",
                    "content": "Hmm, it does feel inelegant to make the Poseidon precompile dependent on other hash functions for round constant generation. It would basically mean that a Poseidon precompile call requires calling those other hash functions, which are expensive in SNARKs, and so it would require the precompile to have a high cost in the EVM, and possibly have a complicated caching mechanic to only charge that cost once. Do you have any thoughts @elistark @abdelhamidbakhta on the possibility of using some simpler formula to generate round constants (like some bitwise thing as I mentioned)? Are there deep security concerns there that push strongly for round constants being fully \u201crandom\u201d? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.439583333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elistark",
                    "index": "10",
                    "likes": "0",
                    "time": "25/11/2022-05:56:15",
                    "content": "I don\u2019t see the problem here: E.g., in a recursive STARK setting in all but the top (Ethereum) layer we bake the round constants into the program/builtin. That\u2019s already done, so no need to prove SHA2/3 using the STARK. On the top layer, i.e., on Ethereum, it should be part of the pricing of using the precompile:  3 gas * number of invocations of SHA2/3/Keccak (replace 3 by the correct gas cost of those hashes). Notice that most often you\u2019ll have many invocations of Poseidon in a call to this precompile, so the amortized gas of computing the constants once is negligible. E.g., verifying a STARK takes ~ 2000 hash calls, but the number of round constants is ~ 100 - @DavidLevitGurevich will know the exact number. I\u2019m not an expert on precompiles, but can\u2019t a precompile generate constants to be stored in local memory and used by all calls to it inside a single transaction? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.645604395604396
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dror",
                    "index": "11",
                    "likes": "0",
                    "time": "25/11/2022-09:11:06",
                    "content": "Why not use parameter set in a contract code? cost should be equivalent to EXTCODECOPY (2600/100 for warm/cold access) it does require eip4758 (deactivate selfdestruct) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/DavidLevitGurevich",
                    "index": "12",
                    "likes": "0",
                    "time": "27/11/2022-09:28:59",
                    "content": "I am not an expert on precompiles either, but would it be possible to set a low price for industry common configurations? while the general case can be priced higher. @elistark your numbers are correct ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/LeoPerrin",
                    "index": "13",
                    "likes": "0",
                    "time": "28/11/2022-13:06:00",
                    "content": "Hello everyone, L\u00e9o Perrin here, I am a symmetric cryptographer and I had a look at several arithmetization-oriented hash functions. The need to support a vast number of distinct sets of parameters for a primitive is something that is completely new in this field, and which we are only started to learn how to handle from a security standpoint. Until now, when doing cryptanalysis, we look at a single (or a few) well specified primitive, say the three AESs (128, 192 and 256). Here, there is a lot more variety for any given primitive (field size, number of inputs), and this of course impacts the security analysis. For example, it is well known that some choices of the MDS matrix can lead to significant security issues with Poseidon [1,2]. However, the matrix suggested above is, as far as I can tell, completely safe, provided that the round constants are chosen pseudo randomly. This brings me to another point: it is in my opinion crucial that the MDS matrix and the round constants be provided as a \u201cbundle\u201d, i.e. implementers must not have the freedom to combine an MDS matrix from some set with round constants from another set. While not published yet, some colleagues and I found that some specific patterns in the combination of an MDS matrix and some round constants could be a security problem for some arithmetization-oriented permutation (not Poseidon at this stage, but still). It is nothing to worry about in practice provided that, again, matrix and constants are not allowed to be picked independently. Feel free to ask any question you may have regarding the symmetric crypto aspects, with one obvious caveat: while I know the state-of-the-art in this area pretty well, it is a brand new area where there has been too little work on cryptanalysis in my opinion. Thus, much remains to be investigated! [1] Out of Oddity \u2013 New Cryptanalytic Techniques Against Symmetric Primitives Optimized for Integrity Proof Systems. Beyne et al. CRYPTO\u201920 (also available on eprint). [2] Mind the Middle Layer: The HADES Design Strategy Revisited. Keller and Rosemarin. EUROCRYPT\u201921 (also available on eprint). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.354193722943723
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/CPerezz",
                    "index": "14",
                    "likes": "0",
                    "time": "01/12/2022-22:26:46",
                    "content": "Hey thanks for the reply!! My concern is that the small selection of parameters in the three different points, ends up with a pretty big permutation of implementations that we need to support/implement. I\u2019ve even seen implementations that use a custom x^13 S-Box and addition chains to optimize the in and out of circuit implementations at the same time. So I think will be hard to decide which are included and which excluded as it might not be fair for some projects. Also, and this is probably my biggest concern is that this pre-compile would make the ZKEVM super SUPER tricky to implement. As this pre-compile for Poseidon would need to support BigInteger arithmetic in all the fields that are supported and conditionally select them. Not only that but supporting all the permutations might be directly unfeasible. I haven\u2019t thought about it deeply TBH. But it doesn\u2019t look promising\u2026 And as one of the main contributors to the PSE/zkevm this is a real concern IMVHO for the project. And mainly for any other ZKEVM project that pretends to support the 100% of the EVM. On a final note, I\u2019d say this EIP arrives a bit late IMO. We\u2019re at a stage where lookups are getting cheaper and cheaper. Things like Baloo or Caulk+ will probably enable to have reasonable fast implementations for common hashing algorithms so that we don\u2019t need Poseidon as a precompile. If this could have arrived some years ago, and we could have taken a concrete setup as the reference. ",
                    "links": [
                        "https://eprint.iacr.org/2022/957.pdf"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.436631944444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elistark",
                    "index": "15",
                    "likes": "0",
                    "time": "01/12/2022-22:57:06",
                    "content": "What\u2019s your suggestion? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/elistark",
                    "index": "16",
                    "likes": "0",
                    "time": "01/12/2022-23:00:36",
                    "content": "Regarding lookup tables: for STARKs, Poseidon costs ~ 200 trace cells (field elements). Pedersen costs ~ 10x more (2K trace cells) and \u201cfast cpu hashes\u201d like SHA2/3/Blake are 10x or more worse than Pedersen (20K-100K trace cells). Are you claiming that with lookups you can prove a SHA2/3/Blake hash using ~200 constraints? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/CPerezz",
                    "index": "17",
                    "likes": "0",
                    "time": "01/12/2022-23:28:57",
                    "content": "No, not claiming that. I do agree that actually it\u2019s impossible to beat Poseidon (Indeed I know in PolygonHermez they can perform a Poseidon permutation in under 60 constraints IIRC). What I\u2019m saying is that with PIOPs w/ lookups proving fast-cpu hashing algorithms are slowly starting to reduce this enormous performance gap. And my intuition is that this will continue until we arrive to a point where hashing in circuits is no longer the most expensive thing. And therefore, we will have a precompile that will loose much of it\u2019s purpose. And to be clear, I\u2019m not saying I have a suggestion on how to include Poseidon as a precompile. Indeed, I think that this arrives really late. And by the time is added, will no longer be that relevant IMO. And if it was something less configurable, I\u2019d probably haven\u2019t even said anything in the discussion. But:  Is unacceptably expensive to generate the constants at runtime. Same happens for caching them. Unless we just implement 1 or 2 curves and 1 or 2 Poseidon configs. If we reduce the possibilities to a small, really small subset, which ARITY will we support? As that will be really unfair for some projects and really advantageous for others. After seeing how painful it\u2019s being now to deal with keccak in the ECDSA for example or in general in the storage. I don\u2019t think adding another hash function to the Ethereum core is the way to go. As what now can be useful for maybe a year or two (as this is not landing soon anyway), can be a pain in the longer term.  I think it\u2019s important to consider how challenging and tedious would be implementing all this inside a circuit. Which is what we will need to do at PSE if we want to do a proof of validity of the entire chain some day. Because a proof of validity will force us to implement everything as is in the EVM. So while zkevm projects can simply ignore the precompile on their L2\u2019s, we can\u2019t. I\u2019m sorry if I\u2019m not being constructive Eli. But my opinion on this EIP isn\u2019t really good TBH. Anyway, not here to block the discussions if you want to move it forward nor trying to prevent this from being actually implemented and merged. Just wanted to reply you and express why this is concerning in many aspects from my perspective that some projects might not be considering. On a sidenote Also, for what lookups and the future of proving systems refers, you might be interested on this zkresear.ch thread from Barry on lookup singularity. This might help to clarify what I was saying about fast-cpu hash functions. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.873397435897436
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mimoo",
                    "index": "18",
                    "likes": "0",
                    "time": "02/12/2022-19:49:29",
                    "content": "Late to the game! But I was asked to chime in. We use Poseidon and the Pasta curves in Mina (btw is there a similar EIP for supporting the pasta curves in the EVM?) and we already are running in production with our own parameters (yeah I know, another Poseidon variant ) meaning that we can\u2019t easily change them. I have some more information on the configuration we use here: proof-systems/poseidon.md at ebe59f35f5cb6bb33fc0ed3c4cb5040d8cd81247 \u00b7 o1-labs/proof-systems \u00b7 GitHub if that\u2019s of interest. My 2 cents would be: support different bundles the same way we can support different configurations for ECDSA or for SHA-2 (SHA-2-256, SHA-2-512, etc.) Perhaps the parameters used should be dictated by an argument to a poseidon function. This way it would force standardization of at least a small number of Poseidon implementations. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.180555555555556
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/CPerezz",
                    "index": "19",
                    "likes": "1",
                    "time": "02/12/2022-23:26:34",
                    "content": "    mimoo:  (btw is there a similar EIP for supporting the pasta curves in the EVM?)   I think I saw something in the ethresear.ch forum. It was about forgetting about BLS precompiles and implement pasta curves directly. See: Do not add bls12 precompile, implement Pasta curves w/o trusted setup instead - Cryptography - Ethereum Research Not sure how did it evolve. Hope it helps! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.2875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xzhang",
                    "index": "20",
                    "likes": "0",
                    "time": "06/12/2022-02:13:19",
                    "content": "This might be a bit off-topic but I remember StarkWare did a review of zk-friendly hash functions. What are your thoughts on using the Rescue/Rescue Prime hash? @elistark ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/naure",
                    "index": "21",
                    "likes": "0",
                    "time": "02/02/2023-09:47:56",
                    "content": "There is an important parameter missing: the initial capacity. There are multiple modes of operations that set different initial states. As an example, it can be used to hold the message length in bytes. Below are some suggestions from the paper. There is also a generalization of this called SAFE.  Concretely, there should be at least:  A parameter initial_capacity, of length t - rate. A parameter rate (unless we force it to t - 1). The parameter input_rate as currently written is a misnomer, the description sounds like it is chunk_count, that is the number of absorb steps.  Alternatively, do away with the notion of input rate. Instead accept inputs of size t to be added to the state between each permutation. Also return the entire final state. The caller can implement all modes of operations with this. The algorithm of the precompile is as follows (with example t=3): inputs = [ [1, 2, 3], [0, 4, 5], \u2026]    # Matrix of shape (chunk_count, t)  state = [0, 0, 0]                      # Zero vector of length t  for chunk in inputs:     state += chunk                     # Vector add     permute(state)  return state  The caller to hash a sequence of elements uses the following input, including a particular choice of initial capacity: inputs = [     [ initial_cap, input1, input2 ],     [ 0,           input3, input4 ],     [ 0,           input5, input6 ],     \u2026 ]  final_state = poseidon_hash(inputs) digest = final_state[0]  This design gives the flexibility to the caller to implement any mode of operation around the permutation. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.238888888888889
                }
            ]
        }
    ],
    "group_index": "226"
}