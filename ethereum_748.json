{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eth2-in-eth1-light-clients/2880",
            "title": "ETH2 in ETH1 light clients ",
            "index": 2880,
            "category": [
                "Light Clients"
            ],
            "tags": [
                "consensus-layer",
                "eth1x",
                "precompile",
                "light-client",
                "eth1-eth2-merge"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "1",
                    "likes": "10",
                    "time": "08/03/2019-05:04:32",
                    "content": "Here is a doc describing what implementing an eth2 light client would look like: https://notes.ethereum.org/s/B1DtMJZeV# It is written in an abstracted form that depends on the phase 0 and phase 1 specs here, but the gist is that it\u2019s ~80 kilobytes of Merkle multi-proof verification (see here for an implementation of compact Merkle multi-proofs) every ~9 days plus verifying a BLS aggregate signature to verify a new block header. The size of the stored state is as written largely ~30 kilobytes of validator data, though this could be shrunk to just ~10 kilobytes (pubkey + balance for 256 validators). The validator set update procedure gas cost seems low enough to process within one block:  80 kilobytes * 68 gas = 5.4m gas Saving 10 kilobytes = 2m gas (assuming you use the dirty trick of saving it as contract code, which is fine because the data doesn\u2019t need to be modified) Hashes: ~3200 * 42 = 134400 (goes up to ~2.56 million if we use SHA256 instead of Keccak!)  It\u2019s slightly over 8m, but that could be fixed by cutting the gas cost of tx data, which we want to do anyway. However, the block header verification procedure is complicated by the fact that it requires one pairing and 128 point additions in BLS-12-381, which eth1 currently does not support, and which is extra-inefficient in eth1 because it requires 384-bit numbers. This could be fixed by adding BLS-12-381 as a precompile in eth1, either as a standalone exception or as one of the first precompiles \u201cimplemented in WASM\u201d as per the plan we discussed at the Stanford workshop (preferred). But if we have that, then an eth2-in-eth1 client is actually not that hard, which opens the door to applications that use eth2 as an availability engine (ie. things like Plasma but waaay more powerful). ",
                    "links": [
                        "https://github.com/ethereum/eth2.0-specs",
                        "https://github.com/ethereum/research/blob/master/merkle_tree/merk.py",
                        "https://ethereum-magicians.org/t/constrained-resource-clients-mar-2019-update/2943",
                        "https://ethereum-magicians.org/t/ethereum-core-devs-meeting-58/3053",
                        "https://ethereum-magicians.org/t/constrained-resource-clients-september-2019-update/3625",
                        "https://ethereum-magicians.org/t/finality-gadget-for-ethereum1x-working-group/3177/4"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.10087481962482
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tvanepps",
                    "index": "2",
                    "likes": "0",
                    "time": "08/03/2019-22:23:02",
                    "content": " But if we have that, then an eth2-in-eth1 client is actually not that hard, which opens the door to applications that use eth2 as an availability engine (ie. things like Plasma but waaay more powerful).  Where can I read more about what \u201cavailability engines\u201d are? Is it at all related to something Justin mentioned at the Magician\u2019s chat on Monday?  One research idea is a single unified Plasma chain to pay tx fees on any shard.     Medium \u2013 4 Mar 19    Q + A on ETH 2.0 Serenity session at ETHMagicians: Paris 2019 Reading time: 13 min read       ",
                    "links": [
                        "https://medium.com/ethereum-magicians/q-a-on-eth-2-0-ab1d5d3ac133"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.6692176870748305
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "3",
                    "likes": "1",
                    "time": "10/03/2019-07:02:42",
                    "content": "    tvanepps:  Where can I read more about what \u201cavailability engines\u201d are? Is it at all related to something Justin mentioned at the Magician\u2019s chat on Monday?   Basically it\u2019s a catch all term for a blockchain that is being used to store data and prove that data can be downloaded by anyone. This allows plasma-like constructions without the need for complicated exit games or 2-week waiting periods or anything like that. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rossbulat",
                    "index": "4",
                    "likes": "1",
                    "time": "19/05/2019-06:03:04",
                    "content": "    vbuterin:  Here is a doc describing what implementing an eth2 light client would look like: https://notes.ethereum.org/s/B1DtMJZeV#    This link brings me to a 404 Not Found. Interested in reading if it can be reuploaded. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "5",
                    "likes": "1",
                    "time": "19/05/2019-13:14:43",
                    "content": "It\u2019s here now  https://github.com/ethereum/eth2.0-specs/blob/dev/specs/light_client/sync_protocol.md ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/alonmuroch",
                    "index": "7",
                    "likes": "0",
                    "time": "04/11/2020-14:12:06",
                    "content": "@vbuterin could the light client be implemented in Solidity for example (considering BLS operations are available via precompiles)? If so, a few questions:  Is security relies only on the selected committee? what happens if they accidentally or maliciously include an invalid block? Are there fraud-proofs that can be used to revert? Validator set changes is a different operation than LightClientUpdate?  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.6000000000000005
                }
            ]
        }
    ],
    "group_index": "748"
}