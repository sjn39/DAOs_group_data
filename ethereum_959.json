{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2386-walletstore/3792",
            "title": "EIP-2386: Walletstore ",
            "index": 3792,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/mcdee",
                    "index": "1",
                    "likes": "1",
                    "time": "21/11/2019-22:38:58",
                    "content": "Discussion thread for https://github.com/ethereum/EIPs/pull/2386 ",
                    "links": [],
                    "GPT-summary": "The post is a discussion thread for EIP-2386, which is a proposal on GitHub. The author is not explicitly asking for feedback, but the post is a discussion thread, so feedback and questions are expected.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mratsim",
                    "index": "2",
                    "likes": "0",
                    "time": "06/10/2020-09:56:25",
                    "content": "NCC had the following concerns while auditing the EIP-2386 implementation in Nimbus, see https://github.com/ethereum/EIPs/pull/2386#issuecomment-693575270:  Hi, I was reviewing nim-blscurve and nim-beacon-chain and had some observations on EIP 2386 as a dependency. Note that a companion/copy to this comment is at status-im/nim-blscurve#85 The EIP 2386 specification is silent on a number of aspects including:   The maximum length of the name string and expectations regarding Unicode normalization.   The type or maximum allowed nextaccount value.   The type or maximum expected version value (though this is currently hardcoded and thus not yet necessary).   Required or expected behavior when extraneous fields are present.   For example, allowing a name string of length one gigabyte is not necessary and may surface downstream impacts stemming from unexpected/unnecessary memory allocations. While the name string is a simple identifier, different UTF-8 encodings may arise from malicious intent or simply the broad range of participating devices, operating systems, languages and applications. Characters with accents or other modifiers can have multiple correct Unicode encodings. For example, the \u00c1 (a-acute) glyph can be encoded as a single character U+00C1 (the \u201ccomposed\u201d form) or as two separate characters U+0041 then U+0301 (the \u201cdecomposed\u201d form). In some cases, the order of a glyph\u2019s combining elements is significant and in other cases different orders must be considered equivalent. Normalization is the process of standardizing string representation such that if two strings are canonically equivalent and are normalized to the same normal form, their byte representations will be the same. Only then can string comparison and ordering operations be relied upon. Performing this step is best practice to support user expectations related to rendering consistency. Regarding nextaccount, values beyond 253 are likely not necessary and may encounter problems related to the JavaScript number type having a 53-bit floating-point mantissa. Further, if this value is related to an index in EIP 2333, then a constraint of 232 is more reasonable. Specifying similar constraints for version can be done alongside other modifications for completeness, though this is not currently necessary. Specifying required or expected behavior when extraneous fields are present will improve implementation interoperability. Mitigation Recommendation To summarize, it is recommended to consider a maximum string length for name and to indicate that implementations should immediately normalize this value to the NKFC form per section 2.11.2.B.2 of Unicode Technical Report #36. Additionally, consider specifying the type and maximum values for both the nextaccount and version values, as well as what should happen if extraneous fields are present.  ",
                    "links": [
                        "https://github.com/status-im/nim-blscurve",
                        "https://github.com/status-im/nim-beacon-chain/tree/nbc-audit-2020-2",
                        "https://github.com/status-im/nim-blscurve/issues/85",
                        "https://github.com/ethereum/EIPs/blob/4494da0966afa7318ec0157948821b19c4248805/EIPS/eip-2386.md",
                        "http://unicode.org/reports/tr15/tr15-22.html",
                        "https://blog.golang.org/normalization",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
                        "https://eips.ethereum.org/EIPS/eip-2333",
                        "http://www.unicode.org/reports/tr36/#Recommendations_General"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party auditing and reviewing proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.197573260073261
                }
            ]
        }
    ],
    "group_index": "959"
}