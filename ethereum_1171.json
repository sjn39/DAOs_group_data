{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/account-based-private-transaction-engine/4833",
            "title": "Account-based private transaction engine ",
            "index": 4833,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/snjax",
                    "index": "1",
                    "likes": "1",
                    "time": "15/10/2020-14:08:40",
                    "content": "Account-based private transaction engine Prior work Sapling is a well-known privacy engine, supporting N-to-M join-split transactions. For each spent note we should publish a separate nullifier. There could be the following issues:  Nullifiers take space onchain and require onchain computations. Number of nullifiers of the transaction is known and it is a potential data leak.  This work Let\u2019s represent new object Account = (dk, pos, amount, salt), where dk is the decryption key or another private identity of the account, pos is the biggest position of the spent leaf inside the Merkle tree, amount is current currency balance of the account, and salt is a random blinding parameter. The UTXO=(d, pk_d, amount, salt) will be the same as in Sapling. To reduce the number of circuit inputs we will store both UTXOs and accounts inside one Merkle tree. For example, for the N-to-2 case, even leaves will be accounts and odd leaves will be UTXOs. To initialize accounts, let\u2019s suppose, that there are any accounts with form (dk, 0, 0, 0) inside our privacy set. So, when we make the first transaction, we should publish the nullifier for the initial state of our account and we will never initialize any account with the same dk in the future. To transfer, we put Merkle root, old account nullifier and output_note = hash(new_account_hash, new_utxo_hash) to zkSNARK\u2019s public inputs, and data and Merkle proofs to private inputs. The SNARK checks, that sum of output equals to the sum of input, the nullifier is valid, the user is the owner of the notes, the new account\u2019s pos is greater or equals the previous one, and all nonzero UTXOs spent has a position between old and new accounts. Advantages We can spend any big number of UTXOs in one transaction without onchain overhead (and in-circuit overhead will not be so huge due to snark-friendly functions and novel proving systems) and data leaks. So, it\u2019s enough to publish 10 bytes per nullifier, 20 bytes per output note, and 4 bytes to link the Merkle root. 34 bytes total. Disadvantages The user should spend the UTXOs only one by one. So, the user cannot skip any number of dust UTXOs without burning them. Author Igor Gulamov, zeropool.network. ",
                    "links": [],
                    "GPT-summary": "The author proposes a new account-based private transaction engine that reduces the number of circuit inputs and allows for spending any number of UTXOs in one transaction without on-chain overhead. The proposal is explained in detail, including advantages and disadvantages. A 3rd party gives constructive criticism by pointing out potential issues with the proposal and asking questions for clarification.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.000108225108225
                }
            ]
        }
    ],
    "group_index": "1171"
}