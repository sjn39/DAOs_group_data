{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-747-wallet-watchasset/1048",
            "title": "EIP 747: wallet_watchAsset ",
            "index": 1048,
            "category": [
                "Wallets"
            ],
            "tags": [
                "eip-747",
                "token"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "1",
                    "likes": "8",
                    "time": "13/08/2018-23:31:29",
                    "content": "Hi there, I wanted to get a final round of comments on wallet_watchAsset before we add it to MetaMask. We\u2019ve made a properly formatted EIP document here:   github.com   estebanmino/EIPs/blob/master/EIPS/eip-747.md --- eip: <to be assigned> title: Add wallet_watchAsset to Provider author: Dan Finlay (@danfinlay), Esteban Mino (@estebanmino) discussions-to: https://ethereum-magicians.org/t/eip-747-eth-watchtoken/1048 status: WIP type: Interface category: Interface created: August 13, 2018 ---  <!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.-->  ## Simple Summary <!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.--> A method for allowing users to easily track new assets with a suggestion from sites they are visiting.  ## Abstract <!--A short (~200 word) description of the technical issue being addressed.--> Web3 JavaScript wallet browsers may implement `wallet_watchAsset()` to allow any website to suggest a token for the user's wallet to track.     This file has been truncated. show original       You can read the original discussion here:   github.com/ethereum/EIPs      Issue: New Web3 Provider Method: eth_watchToken  \t \topened by danfinlay \ton 2017-10-23 \t \t \t  Today, most web3-compatible browsers have a notion of watching tokens, usually to help a user watch their current balances of tokens. While...         In particular, I\u2019m curious to hear what people think about using a tokenImage URL as an image parameter. Is there a more secure option people can think of? Thanks! We appreciate it! Co-authored with @estebanmino Forgive the fund-recovery tag, clicking remove on it isn\u2019t working. ",
                    "links": [
                        "https://github.com/estebanmino/EIPs/blob/master/EIPS/eip-747.md",
                        "https://github.com/estebanmino/EIPs/blob/master/EIPS/eip-747.md",
                        "https://github.com/ethereum/EIPs/issues/747",
                        "https://github.com/danfinlay",
                        "https://github.com/ethereum/EIPs/issues/747",
                        "https://github.com/danfinlay",
                        "https://github.com/ethereum/EIPs/issues/747",
                        "https://ethereum-magicians.org/t/add-wallet-methods-to-improve-dapp-to-wallet-interaction/1848",
                        "https://ethereum-magicians.org/t/forming-a-ring-provider-ring/1852/7"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.663997933884297
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "2",
                    "likes": "1",
                    "time": "14/08/2018-16:25:10",
                    "content": "One change I might consider: Changing the Image parameter to be an Object, with a type property, so that it can be forward-compatible with future (non-DNS-based) image hosting solutions. Example web3.eth.watchToken(tokenAddress, tokenSymbol, tokenDecimals {    type: 'url',   value: imageUrl, })  // Leaves a path open for new formats, like swarm: web3.eth.watchToken(otherTokenAddress, otherTokenSymbol, otherTokenDecimals {    type: 'swarm',   value: swarmHash, })  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.227272727272727
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "3",
                    "likes": "1",
                    "time": "14/08/2018-16:33:12",
                    "content": "Another open question: Would we want the method to declare the format of token being suggested? ERC-20 is old and dated, and we should be looking forward. What if instead, the method was eth_watchAsset, and included a format field to describe the asset being added (like erc-20, or erc-721, even!). A bit more on NFTs I don\u2019t want to go too deep down the 721 rabbit hole, but just thinking ahead a bit: One thing NFTs require is a special way of looking up their individual images. Adding an NFT might also include a short template string, highly restricted, that instructs the client on how to add the given NFT to the user\u2019s wallet. That feature might require an additional parameter, or maybe we should just pack more of these into a big, unordered options object. Ordered params are annoying anyways. Thoughts on using an options object vs a series of parameters? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.286078042328041
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "4",
                    "likes": "0",
                    "time": "14/08/2018-21:16:57",
                    "content": "Removed the fund-recovery tag, kind of unclear how to do that in the UI. That tag got me to click though! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "1",
                    "time": "15/08/2018-10:10:21",
                    "content": "I support making this method support arbitrary asset types.  It would, presumably, include the asset type identifier (e.g., ERC20, ERC777, ERC721, etc.) and an object that includes parameters specific to that asset type.  If the wallet understands the referenced asset type, it will proceed to parse the object for details. The method would return an error if it doesn\u2019t understand the asset type (error response structure should be well defined so they are easy to switch on in dapps) and if the provided parameters don\u2019t match what is expected for the asset then it would similarly error. There may be value in creating a workflow (similar to how BIP does SLIPs) for getting new asset types registered (with their associated parameters structure). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.264069264069264
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tcoulter",
                    "index": "6",
                    "likes": "1",
                    "time": "20/08/2018-15:30:36",
                    "content": "This looks like a great addition. On first glance that feels very Metamask/wallet specific, and not necessarily something a client (like Ganache or geth) should implement. Would it be better to create a new prefix, perhaps something like metamask_watchToken or wallet_watchToken? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.347402597402597
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "7",
                    "likes": "1",
                    "time": "20/08/2018-17:09:39",
                    "content": "I totally agree, and in fact we\u2019ve already updated the EIP to reflect that change. I\u2019ll now edit the subject post, too. (Was initially eth_watchToken, is now wallet_watchAsset, for those viewing after edits). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.722222222222222
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "8",
                    "likes": "1",
                    "time": "30/08/2018-05:32:17",
                    "content": "I got pointed here after trying to get my BorisCoin added to MetaMask via Github PR, but I don\u2019t have a \u201creputation\u201d on EtherScan, so watching this with interest  Is the flow something like:  User visits BorisCoinDotClub with web3 enabled app BorisCoinDotClub prompts web3 provider to \u201ctrack BorisCoin\u201d or similar User accepts and web3 provider adds to wallet  Another thought is that this might be combined with receiving tokens in some way, but not sure how that would work. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "9",
                    "likes": "2",
                    "time": "30/08/2018-20:27:37",
                    "content": "Yes, the flow will be very much like that. I\u2019ve made a simple general purpose token-adding app that people can use for suggesting their tokens (only works with our current develop branch, you can pull a recent build like this one or take my word for it): Add DanCoin on Ropsten. ",
                    "links": [
                        "https://metamask.github.io/Add-Token/#add?tokenAddress=0xdc1adf1d0bf59ec597e1b1b8e3dceb31aafd793f&tokenImage=https%3A%2F%2Fpbs.twimg.com%2Fprofile_images%2F723268858644037632%2Fu-kjO4___400x400.jpg&tokenName=Danbucks&tokenNet=3&tokenSymbol=DBX&tokenDecimals=2"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.258333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/perpetualescap3",
                    "index": "10",
                    "likes": "0",
                    "time": "04/09/2018-13:40:36",
                    "content": "I like this idea for a new RPC endpoint / method! Is the proposed name wallet_watchAsset / web3.wallet.watchAsset or eth_watchAsset / web3.eth.watchAsset? @danfinlay ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.852272727272727
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "11",
                    "likes": "2",
                    "time": "26/09/2018-05:21:18",
                    "content": "The RPC-type method would be wallet_watchAsset, MetaMask is initially releasing it namespaced under metamask_watchAsset. Generally, the web3.js library exposes underscored namespaces as objects, so that would imply web3.wallet.watchAsset, although this EIP reflects no official endorsement from web3.js, nor would any RPC provider be required to implement this method, since it would really only be useful at the signer/wallet layer, hence the wallet_ namespace. We\u2019re trying to make wallet_ happen, because for too long it\u2019s been confusing when things were under eth_ whether they required a signature or not. Like eth_sendTransaction versus eth_sendRawTransaction. The namespace does not reflect the fact that one requires a signature and the other doesn\u2019t, which is a large fundamental difference. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.055803571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/perpetualescap3",
                    "index": "12",
                    "likes": "0",
                    "time": "05/10/2018-22:30:34",
                    "content": "Thanks @danfinlay, this will be very useful. Great work. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.316666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "13",
                    "likes": "0",
                    "time": "05/11/2018-13:11:35",
                    "content": "Hello, I first heared about this EIP at Devcon when metamask presented it\u2019s implementation and I was wondering about the hability to expand the watchAsset capability beyound ERC20 and ERC721 tokens. I am developping smart contracts that contain an (ERC20 based) Escrow. Users can deposit tokens to the escrow using the \u201callow-deposit\u201d scheme of ERC20. This increases the user balance. This balanced can be withdrawn. In the operation of the Escrow, the balanced can be locked. The locked stake will either be returned of seized depending on the users actions. My escrow has therefore a viewAccount(address) method that returns 2 uint256 (called \u201cstake\u201d and \u201clocked\u201d). I was wondering if there is any way to have these watched using an extension to EIP747. I\u2019m not aware of any EIP that discusses the API of escrow smart contracts, but that might be a first step. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.803571428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "14",
                    "likes": "1",
                    "time": "07/11/2018-18:57:35",
                    "content": "That\u2019s a very interesting and unique use case, probably meriting a fresh thread. We are definitely planning to expand this method to include ERC721 tokens, and as you can see, we\u2019ve kept the image rendering logic fairly open ended. Maybe once we have ERC721 support, we devise some image display logic that allowed us to render that given escrow\u2019s contained balance. If that seems hacky, I\u2019m sure we could also do other things, like making escrow its own type, although I\u2019m certain this will be slower to get all the wallets to implement (we have a long list of \u201casset types\u201d that we want to integrate, so finding common types is key to getting us to cover bases). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.901785714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/phraktle",
                    "index": "15",
                    "likes": "3",
                    "time": "13/03/2019-23:49:41",
                    "content": "@danfinlay there\u2019s a UX problem that this spec does not adequately address: when the user has already added the asset (manually or through wallet_watchAsset), there should be a way to avoid asking them to add it repeatedly in a dApp. IMO, this would be best achieved by specifying that a wallet_watchAsset should not prompt the user in case the asset is already monitored by the wallet, instead silently reporting success. This way a dApp could detect that the user has some tokens of a specific type and prompt the user to add it, which would just be a no-op in case they have already added these. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.133333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "16",
                    "likes": "1",
                    "time": "14/03/2019-14:47:05",
                    "content": "I think that\u2019s a very reasonable extension. I had also thought it might make sense to grant some sites (like etherscan, or whatever registry you prefer) permission to freely update your token list, and maybe even read from it (possibly as a separate permission). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.1
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PendicGordan",
                    "index": "17",
                    "likes": "0",
                    "time": "06/05/2019-18:14:20",
                    "content": "@danfinlay @phraktle Are there any news about this feature(checking if a token already exists in Metamask)? Now it\u2019s like very tricky for me to know that info, I must store flags in localStorage\u2026 But if localStorage is deleted or browser/machine changed, that user must again confirm the token. Or when token is manually deleted in Metamask, localStorage must be deleted. And further \u201cAdd Token\u201d popup is not showing explicitly every time, user sometimes must go to the Metamask and only then see the popup. Additionally I must save one flag for each account. So to much complications I think, this can be very useful feature\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.789999999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "18",
                    "likes": "0",
                    "time": "13/05/2019-18:16:34",
                    "content": "Yes, this is in MetaMask now: https://metamask.github.io/metamask-docs/Best_Practices/Registering_Your_Token ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "19",
                    "likes": "0",
                    "time": "19/10/2020-12:17:41",
                    "content": "    danfinlay:  In particular, I\u2019m curious to hear what people think about using a tokenImage URL as an image parameter. Is there a more secure option people can think of?   I think imageURL is bad, because it opens privacy concern of contacting a server everytime you open the wallet. I would prefer that EIP-1577 Contenthash is used, so the token image have to be downloaded from a decentralized storage. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.222222222222222
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "20",
                    "likes": "0",
                    "time": "19/10/2020-12:24:43",
                    "content": "I think that a page should not automatically request to add token, instead a user action should be needed, so user have to press something to request add token. Otherwise it might become a vector of phishing, e.g. user open a page it starts requesting to add fake tokens. WDYT? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.333333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "21",
                    "likes": "0",
                    "time": "19/10/2020-12:28:02",
                    "content": "Implementation discussion at Status: https://github.com/status-im/status-react/issues/10036 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Fran23",
                    "index": "22",
                    "likes": "0",
                    "time": "19/10/2020-12:42:33",
                    "content": "This seems super important. Was it implemented in the end? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Fran23",
                    "index": "23",
                    "likes": "0",
                    "time": "19/10/2020-12:45:32",
                    "content": "While I understand your point, I don\u2019t think it makes a huge difference. A user confirmation popup is requested already. A scammy website could still force the popup onto the user and scam them this way. If a website shows many popups unrequested, it\u2019s fairly likely a user will just exit anyway. Popups are an annoyance on any website. Abusing this is likely to get the browser tab closed anyhow. I guess this is one of the rationales behind the wallet requiring a unique Symbol for each token added? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.553571428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/danfinlay",
                    "index": "24",
                    "likes": "2",
                    "time": "23/10/2020-21:40:48",
                    "content": "    3esmit:  because it opens privacy concern of contacting a server everytime you open the wallet. I would prefer that EIP-1577 Contenthash is used, so the token image have to be downloaded from a decentralized storage.   Well wallets can still cache, but yes I agree there\u2019s a privacy leak through the image URL. I agree a multiformat/cid is a better thing to use, as the user can provide their own method of accessing it that could be more privacy-preserving.     3esmit:  I think that a page should not automatically request to add token, instead a user action should be needed, so user have to press something to request add token. Otherwise it might become a vector of phishing, e.g. user open a page it starts requesting to add fake tokens. WDYT?   I think this is an interesting idea, but I don\u2019t think a permissions request is less secure for loading on page load. I do think there\u2019s some benefit to requiring user interaction, but as a browser extension I don\u2019t have the ability to enforce this, and neither would a library-based wallet like WalletConnect, so that particular feature will need to be reserved for full browser manufacturers.  Implementation discussion at Status: https://github.com/status-im/status-react/issues/10036   Thanks for sharing!     Fran23:  This seems super important. Was it implemented in the end?   Yes, this is in MetaMask today. ",
                    "links": [
                        "https://github.com/multiformats/cid",
                        "https://github.com/status-im/status-react/issues/10036",
                        "https://docs.metamask.io/guide/registering-your-token.html"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.144444444444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/alsakhaev",
                    "index": "25",
                    "likes": "0",
                    "time": "28/12/2021-14:54:26",
                    "content": "@danfinlay @phraktle Hi! The link is broken. I found a similar article here: Registering Tokens with Users | MetaMask Docs But there is no information about \u201cchecking if a token already exists in Metamask\u201d. How to check an existance? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Tofunmi45",
                    "index": "26",
                    "likes": "0",
                    "time": "20/08/2022-10:27:19",
                    "content": "This post was flagged by the community and is temporarily hidden. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hiro",
                    "index": "27",
                    "likes": "0",
                    "time": "17/09/2022-09:44:58",
                    "content": "There are a couple of issues with wallet_watchAsset: (1) options does not include chainId. The same token can be deployed on different chains, and can be bridged between the chains using something like the Multichain router or the Polygon PoS bridge. Sometimes in these situations, the token uses the same symbol on all chains. The contract address may be the same or different on different chains. The wallet needs to keep track of which address is used on which chain. Basically the problem is that your wallet may end up with two tokens of the same name, with no distinguishing factors, and/or the token may be inaccessible on the current chain that the wallet is connected to (because it is deployed on a different chain, and/or at a different address on the current chain). Ideally the wallet should display the network name based on the chainId, e.g. for a token XYZ that is added with addresses for two different chainIds: XYZ (Ethereum Mainnet) XYZ (Polygon Mumbai) etc. (2) wallet_watchAsset should be idempotent if the token has already previously been added to the wallet. The spec needs to specify this, and MetaMask needs to implement this. The problem is that there is no API for querying a wallet to see if a token has already been added. Therefore, if a dapp is trying to helpfully suggest a token to add to a wallet, it has to suggest it every time the user uses the dapp (which is annoying). If they don\u2019t reject the suggestion the 2nd and subsequent time, then they end up with an ugly error that suggests that this may be a scam token:   github.com/MetaMask/controllers     \t      Please add `wallet_getAssets` method to `TokenController`, or silently ignore `wallet_watchAssets` if token already added            opened 08:08AM - 25 Jul 22 UTC               hiroshi-yamamoto-dublr                 `TokenController` defines a function `watchAsset` which implements EIP-747's `wa\u2026llet_getAssets`.  This EIP does not specify a way to determine whether a wallet already contains the given asset. This means that a dapp connecting to MetaMask cannot automatically keep suggesting their token, otherwise users are presented with the following warning the second and subsequent time `wallet_watchAssets` is called, if the user added the token the first time `wallet_watchAssets` was called:  ![image](https://user-images.githubusercontent.com/97215152/180727597-db847996-c5a4-46d4-a17c-f1cdd142be82.png)  >This action will edit tokens that are already listed in your wallet, which can be used to phish you. Only approve if you are certain that you mean to change what these tokens represent. Learn more about [scams and security risks.](https://metamask.zendesk.com/hc/en-us/articles/4403988839451)  Unfortunately this warning is shown *whether or not the options submitted to `watchAsset` exactly match a token already in the wallet*.  I propose two possible solutions:  1. Add a `wallet_getAssets` RPC call that returns the four `options` (`address`, `symbol`, `decimals`, `image`) provided to `wallet_watchAssets`, for all assets registered in the wallet. 2. Silently ignore `wallet_watchAssets` calls if the wallet already includes a token whose `options` exactly match all four of the `options` provided to `wallet_watchAssets`.       ",
                    "links": [
                        "https://github.com/MetaMask/controllers/issues/880",
                        "https://github.com/hiroshi-yamamoto-dublr"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.896708683473389
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hboon",
                    "index": "28",
                    "likes": "0",
                    "time": "24/02/2023-01:53:39",
                    "content": "I think specifying the chain ID is useful because we can\u2019t always assume the request is for the current chain. For example if a dapp offers a bridging transaction, it\u2019d be useful to invoke wallet_watchAsset to add the token in the destination chain. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "29",
                    "likes": "0",
                    "time": "24/02/2023-02:39:06",
                    "content": "The token symbol and decimals are available via the contract, so they shouldn\u2019t be supplied by the dapp.  We should assume that dapps are actively malicious and will lie about all sorts of things, and anything we can trustlessly acquire we should.  Imagine a dapp trying to add WETH with 6 decimals and a symbol ABC. Future attempts to add WETH would fail because it already exists, and it would perpetually have the wrong symbol/decimals.  I agree with comments above about idempotency (you should not get an error if you try to add a token the user already has, it should return a success without any indication that the token was already present) and chainId should be included in the parameters. In addition to adding chainId, if the wallet doesn\u2019t have an RPC for a particular chain, it should not add the token.  This is because the wallet cannot lookup the address on-chain to verify that it exists and get the symbol/decimals which means a malicious dapp could do whatever they wanted with zero validation.  With regards to the image URL, I feel like instead of adding it here, efforts should be made to adopt a standard that includes an image in the token contract itself.  This could either be a link or an inline (data) image.  As mentioned above, the wallet should never be trusting dapps, and they should be retrieving all metadata about a token from the token contract itself rather than from the dapp.  Adding image to this call will just discourage standardization of token images being embedded into contracts and make the situation worse long term.  Security considerations section should mention that the dapp could lie and it should not be trusted.  If all of the above feedback is applied, then this call becomes much safer (and no need for additional text in security considerations section) as it basically is just a hint to the wallet \u201chey, there is a token at address X, chain Y that the user might be interested in\u201d and the dapp doesn\u2019t have to be trusted for anything. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.906862745098039
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "30",
                    "likes": "0",
                    "time": "24/02/2023-19:33:24",
                    "content": "    MicahZoltu:  With regards to the image URL, I feel like instead of adding it here, efforts should be made to adopt a standard that includes an image in the token contract itself. This could either be a link or an inline (data) image. As mentioned above, the wallet should never be trusting dapps, and they should be retrieving all metadata about a token from the token contract itself rather than from the dapp. Adding image to this call will just discourage standardization of token images being embedded into contracts and make the situation worse long term.   Great minds think alike. Yesterday, I began work to move EIP-1046 out of Stagnant  I, in fact, plan to include a link to it in this EIP and recommend its usage, but am currently limited by the fact that EIP-1046 is still stagnant. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.232142857142858
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "31",
                    "likes": "1",
                    "time": "24/02/2023-19:34:05",
                    "content": "    hboon:  I think specifying the chain ID is useful because we can\u2019t always assume the request is for the current chain. For example if a dapp offers a bridging transaction, it\u2019d be useful to invoke wallet_watchAsset to add the token in the destination chain.       MicahZoltu:  I agree with comments above about idempotency (you should not get an error if you try to add a token the user already has, it should return a success without any indication that the token was already present) and chainId should be included in the parameters.       MicahZoltu:  In addition to adding chainId, if the wallet doesn\u2019t have an RPC for a particular chain, it should not add the token. This is because the wallet cannot lookup the address on-chain to verify that it exists and get the symbol/decimals which means a malicious dapp could do whatever they wanted with zero validation.       MicahZoltu:  Security considerations section should mention that the dapp could lie and it should not be trusted. If all of the above feedback is applied, then this call becomes much safer (and no need for additional text in security considerations section) as it basically is just a hint to the wallet \u201chey, there is a token at address X, chain Y that the user might be interested in\u201d and the dapp doesn\u2019t have to be trusted for anything.   Done, done, done, and done! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.763257575757575
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "32",
                    "likes": "0",
                    "time": "25/02/2023-04:50:07",
                    "content": "Are there any standards that extend ERC-20 or ERC-1193 that add a standard mechanism for getting the image from the token contract?  Perhaps something like imageUri() or image()?  If so, this standard should specify that if such a method is available it MUST override the value provided by the dapp. On a related note, I think we should just outright remove name, symbol, and decimals because all supported contracts already MUST have those fields, so the spec essentially asserts that you MUST always ignore the values the dapp provides for them.  I am not a fan of asserting what image types are supported in this specification.  The list of supported image types is already out of date (doesn\u2019t include webp) and even if we update it now it\u2019ll just be out of date again in a year.  We should leave it up to the community to decide what image types to use, and both dapps and wallets can add support for whatever makes sense at the time (which will constantly change).   If the resolved image is a bitmap, its dimensions SHOULD not exceed 512x512 pixels. Neither the URI nor the image it resolves to SHOULD have a size larger than 256kb.  What is the purpose of this line?  Why call out bitmaps specifically?  Why not just say that the image size should not exceed 512x512 or 256kb for all image types? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "33",
                    "likes": "0",
                    "time": "25/02/2023-04:53:30",
                    "content": "    MicahZoltu:  I agree with comments above about idempotency (you should not get an error if you try to add a token the user already has, it should return a success without any indication that the token was already present) and chainId should be included in the parameters.   Hmm, I didn\u2019t see this one in your PR.  Did I miss it? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "34",
                    "likes": "0",
                    "time": "25/02/2023-13:26:05",
                    "content": "    MicahZoltu:  Hmm, I didn\u2019t see this one in your PR. Did I miss it?   I made two PRs. The second one, among other things, added the following line:  If the asset is already listed in the user\u2019s wallet, a prompt to \u201cupdate\u201d the token information MUST be displayed to the user, even if no information is changed (this is to avoid fingerprinting). Regardless of whether the user chooses to update the token information, the call SHOULD succeed.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.791666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "35",
                    "likes": "0",
                    "time": "25/02/2023-13:26:30",
                    "content": "    MicahZoltu:  What is the purpose of this line? Why call out bitmaps specifically? Why not just say that the image size should not exceed 512x512 or 256kb for all image types?   Dimensions don\u2019t make sense for vector graphics ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "36",
                    "likes": "0",
                    "time": "25/02/2023-13:26:55",
                    "content": "    MicahZoltu:  I am not a fan of asserting what image types are supported in this specification. The list of supported image types is already out of date (doesn\u2019t include webp) and even if we update it now it\u2019ll just be out of date again in a year. We should leave it up to the community to decide what image types to use, and both dapps and wallets can add support for whatever makes sense at the time (which will constantly change).   This makes sense. I\u2019ll remove that bit. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "37",
                    "likes": "0",
                    "time": "25/02/2023-13:33:27",
                    "content": "    MicahZoltu:  On a related note, I think we should just outright remove name, symbol, and decimals because all supported contracts already MUST have those fields, so the spec essentially asserts that you MUST always ignore the values the dapp provides for them.   Actually, ERC-20 lists them as optional:  name Returns the name of the token - e.g. \"MyToken\". OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present. function name() public view returns (string)  symbol Returns the symbol of the token. E.g. \u201cHIX\u201d. OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present. function symbol() public view returns (string)  decimals Returns the number of decimals the token uses - e.g. 8, means to divide the token amount by 100000000 to get its user representation. OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present. function decimals() public view returns (uint8)   Regardless, I agree that those fields are effectively redundant, and will eventually remove them (I won\u2019t right now because there\u2019s another change I want to make simultaneously). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.896683673469387
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "38",
                    "likes": "0",
                    "time": "25/02/2023-13:34:24",
                    "content": "    MicahZoltu:  Are there any standards that extend ERC-20 or ERC-1193 that add a standard mechanism for getting the image from the token contract? Perhaps something like imageUri() or image()? If so, this standard should specify that if such a method is available it MUST override the value provided by the dapp.   Yes, there is, and that\u2019s the other thing I plan to do in the aforementioned change! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.229166666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "39",
                    "likes": "0",
                    "time": "25/02/2023-14:29:01",
                    "content": "    Pandapip1:  I made two PRs. The second one, among other things, added the following line:  If the asset is already listed in the user\u2019s wallet, a prompt to \u201cupdate\u201d the token information MUST be displayed to the user, even if no information is changed (this is to avoid fingerprinting). Regardless of whether the user chooses to update the token information, the call SHOULD succeed.    I don\u2019t think the specification should specify how wallets should behave internally (what to prompt the user with and what not to).  This is unenforceable and over-prescriptive.  However, I do think that the API should be clear on expected responses.  I do not believe there should be an error for \u201calready added\u201d.  The response should just be \u201cadded\u201d regardless of whether the token was added or already existed. So if the dapp makes a wallet_watchAsset request, there should be two possible responses:  Watched. Not-watched.  Whether the user is actually watching the asset, or whether they were already watching the asset, or if they previously rejected, or the wallet auto-rejected, or the user rejected, or the user rejected but the wallet returns \u201cwatched\u201d anyway to protect the user while allowing them to use the dapp. If you want to go even more extreme on protecting user privacy, you can have only a single allowed response of OK, which would essentially be the wallet responding with \u201cI understand the request\u201d.  This way the dapp can gain no information from the request other than whether the user is using a wallet that has some form of EIP-747 implementation. Is there a reason that the dapp needs to know whether the watch has been successful or not?  On the surface at least, it feels like the dapp shouldn\u2019t need to know this information so they shouldn\u2019t be informed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.232473544973545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "40",
                    "likes": "0",
                    "time": "25/02/2023-14:57:21",
                    "content": "    MicahZoltu:  If you want to go even more extreme on protecting user privacy, you can have only a single allowed response of OK, which would essentially be the wallet responding with \u201cI understand the request\u201d. This way the dapp can gain no information from the request other than whether the user is using a wallet that has some form of EIP-747 implementation.       MicahZoltu:  If you want to go even more extreme on protecting user privacy, you can have only a single allowed response of OK, which would essentially be the wallet responding with \u201cI understand the request\u201d. This way the dapp can gain no information from the request other than whether the user is using a wallet that has some form of EIP-747 implementation.   That seems like a good idea. I\u2019ll change that. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.685714285714285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "41",
                    "likes": "0",
                    "time": "28/02/2023-13:41:18",
                    "content": "EIP-747 now uses ERC-1046! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "63"
}