{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc20-comment-message-input-data/9918",
            "title": "ERC20 + Comment/Message/Input data ",
            "index": 9918,
            "category": [
                "EIPs"
            ],
            "tags": [
                "erc20"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/kleopartas",
                    "index": "1",
                    "likes": "0",
                    "time": "12/07/2022-14:01:44",
                    "content": "Hello, Most banking apps have a comment text field when sending a payment.  image1242\u00d7680 117 KB  Maybe I searched badly, but is there an ERC20 standard that has a comment field that will be in the event? interface IERC20Comment {      event Transfer(         address indexed from,          address indexed to,          uint256 value,          bytes indexed comment     );      function transfer(         address to,          uint256 amount,          bytes comment     ) external returns (bool);      function transferFrom(         address from,         address to,         uint256 amount,         bytes comment     ) external returns (bool); }  Thanks to this comment field, payment identifiers can be stored there, which will be in the WEB2 database. ",
                    "links": [],
                    "GPT-summary": "The author of the post is proposing the addition of a comment field to the ERC20 standard for payment identifiers to be stored in the WEB2 database. The post is explaining the proposal and asking if such a standard already exists or if it needs to be created.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Privacy, Security and risk management",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "2",
                    "likes": "0",
                    "time": "12/07/2022-16:07:40",
                    "content": "Banking interface store this type of message usually where it\u2019s either only accessible to you or you and the receiving party. However, your suggestion implies that the message would be visible to anyone that has access to an Ethereum node. This violates the privacy context-integrity principle IMO. The mockup you show with e.g. Metamask: That doesn\u2019t need an adjusted in ERC20. Metamask could just implement and store the messages locally. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.15625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kleopartas",
                    "index": "3",
                    "likes": "0",
                    "time": "12/07/2022-17:06:03",
                    "content": "Thanks for your reply. This message is not confidential. In this comment, I would like to store a hash of the transaction data. My backend: const secret = hash(itemIds, \"aa1efcb7221a61\"); const comment = hash(from, to, value, secret);  After the transaction, I check the Transfer event and make sure that the buyer has paid for the item. if (comment === hash(event.from, event.to, event.value, secret)) {     return \"success\"; }  Thanks to the comment, I can know exactly which set of goods the user paid for. Without the comment, a user could have two sets of items for the same amount, and I wouldn\u2019t be able to find out exactly what was paid for. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.454545454545454
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kleopartas",
                    "index": "4",
                    "likes": "0",
                    "time": "12/07/2022-20:56:01",
                    "content": "I think this extension would solve my problem. // SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; import \"@openzeppelin/contracts/utils/Context.sol\";  abstract contract ERC20Comment is Context, ERC20 {     /**      * @dev Emitted by {transferWithComment} or {transferWithCommentFrom}.      */     event Comment(         string indexed commment,         address indexed from,         address indexed to,         uint256 value     );      /**      * @dev See {IERC20-transfer}.      *      * - `commment` is additional field for custom message.      */     function transferWithComment(         address to,         uint256 amount,         string memory commment     ) public virtual returns (bool) {         address owner = _msgSender();         _transfer(owner, to, amount);         emit Comment(commment, owner, to, amount);         return true;     }      /**      * @dev See {IERC20-transferFrom}.      *      * - `commment` is additional field for custom message.      */     function transferWithCommentFrom(         address from,         address to,         uint256 amount,         string memory commment     ) public virtual returns (bool) {         address spender = _msgSender();         _spendAllowance(from, spender, amount);         _transfer(from, to, amount);         emit Comment(commment, from, to, amount);         return true;     } }   Now any seller who has received a token can always determine which product was paid for. It\u2019s a pity that the custom field was not added initially (ERC20 standard), it would have pushed wallets (Metamask, etc.) to add a comment field at the time of their creation. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.428571428571428
                }
            ]
        }
    ],
    "group_index": "1818"
}