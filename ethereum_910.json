{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/bigdecimal-bigint-for-contracts/3597",
            "title": "BigDecimal/BigInt for contracts ",
            "index": 3597,
            "category": [],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/hiddentao",
                    "index": "1",
                    "likes": "0",
                    "time": "28/08/2019-15:28:35",
                    "content": "I just came across the OpenZeppelin report on Compound, and in particular the note on how truncated division within Solidity can result in a borrower paying 0 interest on extremely small amounts (see https://blog.openzeppelin.com/compound-audit/amp/). Made me think it would be good if there was a BigDecimal-like library for Solidity so that precise calculations could be made to avoid these sorts of issues. Then again, using a much higher precision than is necessary with uint256 would solve this (which is essentially what a BigDecimal lib would do, anyway). Has anyone else had any thoughts on this? EDIT: just found https://github.com/dapphub/ds-math thanks to @thomasbarkercom ",
                    "links": [
                        "https://github.com/dapphub/ds-math"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.916666666666667
                }
            ]
        }
    ],
    "group_index": "910"
}