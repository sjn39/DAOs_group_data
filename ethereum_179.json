{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5806-delegate-transaction/11409",
            "title": "EIP-5806 Delegate transaction ",
            "index": 11409,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "1",
                    "likes": "3",
                    "time": "20/10/2022-14:26:16",
                    "content": "  github.com/ethereum/EIPs         Account abstraction through delegate transaction   ethereum:master \u2190 Amxx:EOA_delegate_transaction              opened 02:17PM - 20 Oct 22 UTC                 Amxx               +70 -0           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5806",
                        "https://github.com/Amxx",
                        "https://github.com/ethereum/EIPs/pull/5806/files"
                    ],
                    "GPT-summary": "The post is a proposal for EIP-5806, which suggests account abstraction through delegate transaction. The author has explained the proposal and provided a link to the GitHub page where it can be found. A third party has given constructive criticism and reviewed the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "2",
                    "likes": "0",
                    "time": "22/10/2022-14:08:15",
                    "content": "One of the point I think should be discussed is the \u201camount\u201d part of the transaction. Since this transaction is going to delegate call, the amount should not be sent to anyone, and should remain on the sender/signer\u2019s account. The delegate call mechanism cause the code that the is being executed to has access to the entire balance of the account. Consequently, the amount doesn\u2019t correspond to an actual transfer, and I believe it should not be part of the transaction parameters. On the other hand, that means that the code being called through the delegate will always have msg.value equal to 0. Is that acceptable? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.84375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "3",
                    "likes": "0",
                    "time": "03/03/2023-09:05:36",
                    "content": "Amazing concept, would be awesome to have it together with EIP-3074 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 9.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/optimalbrew",
                    "index": "4",
                    "likes": "0",
                    "time": "03/03/2023-17:44:12",
                    "content": "I think of contract storage as being tied to a specific contract. For instance, when \u201cupgrading\u201d contract code using create2 pattern the new code has to work with existing storage layout. So I am struggling to understand how arbitrary calls to different contracts via delegatecall  will work? Sorry if this is a silly question. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.196969696969697
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "5",
                    "likes": "0",
                    "time": "03/03/2023-19:22:42",
                    "content": "I\u2019m sorry I don\u2019t understand. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 2.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/optimalbrew",
                    "index": "6",
                    "likes": "0",
                    "time": "03/03/2023-22:11:14",
                    "content": "Only contracts have storage, not EOAs. That storage is managed by the contract\u2019s bytecode. You propose to create storage under the EOA - without any code to manage that storage. I am thinking about issues that arise when using delegatecall, such as storage collisions or the \u201cconstructor caveat\u201d mentioned here Proxy Upgrade Pattern - OpenZeppelin Docs  . How can you avoid such issues when your EOA\u2019s storage is completely at the mercy of external contracts you delegatecall? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.1
                }
            ]
        }
    ],
    "group_index": "179"
}