{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/working-draft-new-extension-for-erc1155/9177",
            "title": "[Working draft] New extension for ERC1155 ",
            "index": 9177,
            "category": [
                "Tokens"
            ],
            "tags": [
                "erc1155"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/ivanmmurcia",
                    "index": "1",
                    "likes": "3",
                    "time": "06/05/2022-10:27:20",
                    "content": "Hi everyone, I\u2019m here for propose my idea to Ethereum Magicians community, redirected by a kind user of the Open Zeppelin community. I hope I can explain myself well and also some guidance if my proposal is really liked and can become an official standard. I have been developing 2 extensions for ERC1155 as a personal purpose, but after discussing it with several developers I have been proposed to present it as an official extension. I saw that the ERC1155 standard does not have the possibility to approve tokens by id or amounts as for example in ERC20. So, to create more security to my clients, I have designed the following code to avoid my smart contract to be approved for all ids, later I thought to develop the same but with amounts. Code and explanations are here: GitHub - ivanmmurciaua/ERC1155ApprovalByAmount: A draft to do a safe approval by individual amounts by id for ERC1155 standard It would be a pleasure to humbly contribute to this great community of developers. Feel free to answer me and discuss with me. Greetings from Spain, Iv\u00e1n M.M. ",
                    "links": [
                        "https://ethereum-magicians.org/t/last-call-eip-5216-erc1155-approval-by-amount/9898"
                    ],
                    "GPT-summary": "The author is proposing a new extension for ERC1155 and is seeking feedback from the Ethereum Magicians community. The proposal aims to create more security for clients by allowing for approval by individual amounts by id for ERC1155 standard. The author has provided code and explanations on GitHub and is open to discussion and collaboration. A 3rd party may provide constructive criticism and ask questions about the proposal.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None"
                    ],
                    "Sentiment": 5.666821273964131
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dadabit",
                    "index": "2",
                    "likes": "1",
                    "time": "08/05/2022-22:33:10",
                    "content": "I think approving a specific amount for a specific id would be good and consistent with the erc20 usage patterns. I second this proposal ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.949999999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ivanmmurcia",
                    "index": "3",
                    "likes": "0",
                    "time": "09/05/2022-08:30:52",
                    "content": "Hi @dadabit . Thanks for the feedback and support. Hope other users second my proposal like you. Best regards. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.34375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dievardump",
                    "index": "4",
                    "likes": "1",
                    "time": "12/05/2022-15:58:41",
                    "content": "Hey there. It\u2019s not a bad idea when we see ERC1155 as a collection of fungibles.  ERC1155ApprovalById: I think the ApprovalById is redundant, you can simply approve amount to MAX_INT.  \u2192 I would totally remove ERC1155ApprovalById  ERC1155ApprovalByAmount Also I don\u2019t think safe(/Batch)TransferFromByAmount are necessary. safe(Batch)TransferFrom are already enough, you simply have to override them so they check for ApprovalForAll OR allowance. This also makes your extensions smaller, which increases the likeliness to appeal to people. Big extensions are bloating code that is already big enough. In term of API, I would also try to keep it more consistent:   if you use \u201csetAllowance()\u201d then use \u201cgetAllowance()\u201d   personally, I would prefer it more consistent with the erc20 api (approve(spender, tokenId, amount) & allowance(owner, spender, tokenId)) but that\u2019s just a preference.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.515625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ivanmmurcia",
                    "index": "5",
                    "likes": "0",
                    "time": "13/05/2022-14:17:25",
                    "content": "Hey @dievardump. Thanks for reply and feedback mate. I\u2019d like to go point by point: ERC1155ApprovalById: Only for have it this version, I created a branch which is unimplemented in main ERC1155ApprovalByAmount: I fit terms of my API to ERC-20 like you said: Now the names are 100% like ERC-20, approve, allowance and mapping _allowances. But I have one question regarding what you said about safe(Batch)TransferFrom. I understood that if someone wants to use the ByAmount extension, they would have to override the original ERC1155 safeTransferFrom function. Is this correct? If changes only the condition, I would understand it, but it should be noted that the line where the amount transferred is substracted of the operator allowance\u2026 wouldn\u2019t it be a bit dangerous to leave that to the free code of a programmer who doesn\u2019t know the extension? I don\u2019t quite understand/see how to implement this functionality without my extension becoming heavy and repetitive. Thanks for all, look forward to your answer. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.516025641025641
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dievardump",
                    "index": "6",
                    "likes": "1",
                    "time": "26/05/2022-17:32:16",
                    "content": " wouldn\u2019t it be a bit dangerous to leave that to the free code of a programmer who doesn\u2019t know the extension?  Any implementations of ERCs is let to the implementer. ERC and their extensions are only supposed to provide the interface. The idea would be to then create a reference implementation (like OpenZeppelin) of your extension (this implementation would be the one overriding the safe(Batch)TransferFrom) that other users would use directly. Very few developer have the wish (or even can) implement a standard. They want the code to come to them already made. Your extension would extend ERC1155, add the 2 functions allowance()/approve() and override safe(Batch)TransferFrom() to verify if operator is approvedForAll (the normal process) OR has enough allowance. And if operator is not approvedForAll, you reduce their allowance on the given token. There shouldn\u2019t be a need for verbose safe(Batch)TransferFromByAmount, safeTransferFrom should be enough. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.758333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ivanmmurcia",
                    "index": "7",
                    "likes": "0",
                    "time": "26/05/2022-19:06:21",
                    "content": " The idea would be to then create a reference implementation (like OpenZeppelin) of your extension  Thanks for the explanation @dievardump. I\u2019ve implemented a reference implementation in ./contracts/ReferenceImplementation.sol. I override safe(Batch)TransferFrom from ERC1155 and deleted safe(Batch)TransferFromByAmount from extension. Great advice. Do you think it\u2019s better override it in a reference implementation or would be better override it in extension? I think that override it in extension would be worse. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.6000000000000005
                }
            ]
        }
    ],
    "group_index": "1731"
}