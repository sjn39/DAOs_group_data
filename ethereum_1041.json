{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2537-bls12-precompile-discussion-thread/4187",
            "title": "EIP-2537 (BLS12 precompile) discussion thread ",
            "index": 4187,
            "category": [
                "EIPs"
            ],
            "tags": [
                "core-eips",
                "precompile",
                "shanghai-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "1",
                    "likes": "3",
                    "time": "07/04/2020-10:33:20",
                    "content": "Reference thread from the EIP itself. Resources:   spec until it\u2019s accepted from PR test vectors  ",
                    "links": [
                        "https://github.com/matter-labs/eip1962/tree/master/src/test/test_vectors/eip2537",
                        "https://ethereum-magicians.org/t/shanghai-core-eip-consideration/10777/25"
                    ],
                    "GPT-summary": "The post is a reference thread from the EIP itself regarding EIP-2537 (BLS12 precompile). The author is asking for feedback and advertising the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "None",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "2",
                    "likes": "0",
                    "time": "11/04/2020-22:23:47",
                    "content": "Doing a testing pass:  First, can you provide a test vector for pairings where in the pairing contract \u201cAny of G1 or G2 points are not in the correct subgroup\u201d is triggered?  All the test vectors are happy path.  Not on G1 or G2 is trivial to produce, subgroup is a bit more involved.  This will be needed for reference tests. Second, does the padded space need to be zeros only?  i.e. is ff00000000000000000000000000000012196c5a43d69224d8713389285f26b98f86ee910ab3dd668e413738282003cc5b7357af9a7af54bb713d62255e80f560000000000000000000000000000000006ba8102bfbeea4416b710c73e8cce3032c31c6269c44906f8ac4f7874ce99fb17559992486528963884ce429a992fee a valid G1 point for the contract? (the first set of zeros has junk data in it)  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "3",
                    "likes": "0",
                    "time": "22/06/2020-15:43:02",
                    "content": "Just saw that the EIP now has a section about \" Prevention of DDoS on error handling\" . Can someone explain what distributed denial of service attack can be carried out if we blow all gas on a subroutine error (like we do on all other types of errors, always?) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "4",
                    "likes": "0",
                    "time": "23/06/2020-12:36:09",
                    "content": "Hello Martin. EIP text actually will be updated because now (in latest commit in master) it reflects a \u201cdesired\u201d behavior for calls to the precompile (only nominal cost is burned), but such desired behavior will not be implemented. In any case, there is no DDoS vector if precompile burns all the gas of the current frame (what was sent along with a staticcall) and supplied gas is more than a gas cost from the schedule. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "5",
                    "likes": "0",
                    "time": "23/06/2020-12:39:37",
                    "content": "Negative vectors are also available in 1962 repo (in \u201cnegative\u201d folder), there are cases with invalid subgroup there. Padding with zeroes should be enforced with ABI because field element is required to be \u201cin the field\u201d, so it must be strictly less than modulus, and if leading bytes are non-zero (and we use BE encoding) the element will be not \u201cin a field\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.888888888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "6",
                    "likes": "0",
                    "time": "01/07/2020-16:48:09",
                    "content": "Hey, we are implementing the multiExp precompiles at EthereumJS. The gas used is not very clear to me. In the pairing precompile it is clear that if the input length is 0, or the length of the input is not of an expected length, then we use the base gas. However, what should this be if I input an empty byte to multiExp? 0 gas (this is what Geth does)? What if I input 1 byte (i.e. the length is not a multiple of 160 bytes). Should I also use 0 gas here? What if I input 161 bytes? Should I deduct the \u201ccorresponding gas\u201d (1 pair) or also 0 gas? Geth seems to floor the division of the input (i.e. floor(len(input)/160)), calculate the gas, and then deduct this if the len(input) % 160 != 0. (To be clear: in this case thus more than 0 gas is deducted) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.788461538461538
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "7",
                    "likes": "1",
                    "time": "05/07/2020-13:04:17",
                    "content": "Hello @jochem-brouwer A PR with the clarification and explicit formulas for variable length cases is pending the bot approval at the moment, but you can still access the document here. Sincerely, Alexander ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "8",
                    "likes": "0",
                    "time": "09/07/2020-11:13:05",
                    "content": "Thanks Alexander for the update! I have a question about the encoding of Fp points. Sorry for my ignorance about this. Is the only check necessary for a Fp point to be on the curve that it is strictly less than the base field modulus? (I.e. < 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab). Does the same apply for Fp2 points (c0 is less than the base field modulus)? Is there any requirement for the c1 point of Fp2? Kind regards, Jochem ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.208333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "9",
                    "likes": "0",
                    "time": "09/07/2020-17:13:48",
                    "content": "Field elements (either Fp or Fp2) in pairs for the affine coordinates (x, y) of the curve point. They must satisfy the equation like y^2 = x^3 + b for the BLS12-381 curve (b coefficient can be found in the EIP itself). Then point is \u201con curve\u201d and this check is always performed during deserialization. c0 and c1 elements of Fp2 element are just Fp elements, so all corresponding encoding rules apply. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party advertising proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "10",
                    "likes": "0",
                    "time": "15/07/2020-15:16:06",
                    "content": "The input to the mapToG1 precompile takes 64 bytes (top 16 bytes are zero). This is a single number. I don\u2019t see how I can then check if they satisfy that equation? Shouldn\u2019t this strictly less check as mentioned before be the sole check? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.3273809523809526
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "11",
                    "likes": "0",
                    "time": "16/07/2020-11:00:56",
                    "content": "mapToG1 takes as an input a single Fp element (not a curve point) and outputs a valid curve point. So the only check here is that input element must be \u201cin the field\u201d (properly encoded). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 4.8809523809523805
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "12",
                    "likes": "0",
                    "time": "28/07/2020-08:09:02",
                    "content": "Hey @shamatar, I just had a discussion with @MariusVanDerWijden on discord about this particular test. Geth currently outputs a zero point of this multiexp call. However, to me it seems that per the EIP, these zero points are \u201cnot on curve\u201d and thus should throw an error instead of returning the zero point (infinity point (?)) as output. See the pic below from the EIP which is the part which confuses me. Should thus the precompile yield an output and thus make the call succeed (current implementation) or should it throw? I think by the EIP it should throw? image789\u00d7132 15.5 KB ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/2/298deac61a817cedf23abc566da753098e1a3311.png"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.277777777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "13",
                    "likes": "0",
                    "time": "28/07/2020-19:23:15",
                    "content": "Hey @jochem-brouwer Well, it\u2019s only a wording problem, that\u2019s why I\u2019ve called it \u201cconvention\u201d. On BLS12-381 point of infinity is \u201cvirtual\u201d, in a sense that there is no point O with some coordinates (x,y) that is on curve and that for any point P one has P + O = P. Do achieve necessary functionality nevertheless this EIP follows the BN254 one where \u201cpoint of infinity\u201d is encoded as (0,0) for both input and output purposes (it\u2019s not that hardly needed for inputs cause it can be filtered out in Solidity if really necessary, but valid outputs can be points of infinity). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.635416666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jannikluhn",
                    "index": "14",
                    "likes": "0",
                    "time": "27/10/2020-15:39:07",
                    "content": "Both this EIP and the existing BN254 precompile only allow performing pairing checks, not evaluations (get the result C = e(A, B) for further processing). What\u2019s the reason for this? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "15",
                    "likes": "1",
                    "time": "27/10/2020-16:43:38",
                    "content": "It\u2019s kind of no point to output Gt (Fp12) element in plain text we also don\u2019t give the Fp12 arithmetic operations. But such addition would make this (already quite large) proposal really enormous. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.6000000000000005
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "16",
                    "likes": "2",
                    "time": "20/01/2021-04:34:15",
                    "content": "EIP-2537 explained in five slides by Alex Vlasov - https://youtu.be/al4YpfDVmS4 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wbl",
                    "index": "17",
                    "likes": "0",
                    "time": "06/01/2022-17:14:38",
                    "content": "I\u2019m interested in seeing this proposal move forward, and I\u2019m rather new to the community. Right now it is listed as stagnant despite being implemented in go-ethereum. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.12012987012987
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ralexstokes",
                    "index": "18",
                    "likes": "2",
                    "time": "06/01/2022-22:49:23",
                    "content": "me (and many others) are also interested in BLS precompiles in the EVM! we made a lot of good progress but there was some hesitation around this EIP as it adds a lot of very complex functionality to the EVM (in the form of BLS arithmetic) and it wasn\u2019t super clear at the time it delivered enough value to justify going into a crowded upgrade schedule. so activity around it has slowed and we are in a bit of limbo as development resources at the moment are nearly exclusively focused on the merge. this EIP could conceivably go into the upcoming execution layer upgrade Shanghai but this will likely be the second half of 2022 at the earliest. this being said it facilitates a lot of use cases around scaling rollups with sharding so should become very important very quickly once we deploy the merge. it is on my personal bucket list to track post-merge so hopefully we see BLS precompiles sometime soon  edit: may see some progress here: Proposal to add EIP-2537 (BLS Precompile) to Shanghai \u00b7 Issue #343 \u00b7 ethereum/pm \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.8475
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/kladkogex",
                    "index": "19",
                    "likes": "0",
                    "time": "17/01/2022-14:03:23",
                    "content": "We have been waiting for this for sooo long \u2026 It is amazing it is taking so much time. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ralexstokes",
                    "index": "20",
                    "likes": "1",
                    "time": "18/01/2022-00:36:54",
                    "content": "patience is rewarded  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PeterCCLiu",
                    "index": "21",
                    "likes": "0",
                    "time": "25/05/2022-16:46:40",
                    "content": "Quick update in May 2022: Summary: The implementation of EIP-2537 has been completed and is now in go-ethereum codebase\u2014 it is only pending activation of this functionality. Next steps: Enable the precompiles by editing /core/vm/contracts.go, similar to what is done for Byzantine/Istanbul/Berlin:  Create a new default set of pre-compiled Ethereum contracts used in the next release, including the new precompiles of EIP-2537. Modify init() and ActivePrecompiles() functions to activate the new precompiles.  Other points to mention: There exist another implementation that is marginally more performant regards to gas consumption and running time (blst utilizing wasm). But the workload to move on to the other implementation is high and discarding the past hard work is unworthy. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.218127705627706
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bbuddha",
                    "index": "23",
                    "likes": "0",
                    "time": "19/08/2022-06:38:37",
                    "content": "Does this EIP also add support for hash to curve operations used for BLS signatures? Specifically those used on the beacon chain\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/QEDK",
                    "index": "24",
                    "likes": "0",
                    "time": "19/09/2022-21:04:02",
                    "content": "@shamatar I think this EIP should be tagged with #shanghai-candidate? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "25",
                    "likes": "1",
                    "time": "20/09/2022-12:04:53",
                    "content": "Sure! Done now Need 20 symbols\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cyanface",
                    "index": "26",
                    "likes": "0",
                    "time": "26/10/2022-05:02:26",
                    "content": "so what is the result? it\u2019s not included in shanghai? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ralexstokes",
                    "index": "27",
                    "likes": "2",
                    "time": "26/10/2022-17:10:55",
                    "content": "we will discuss on the next ACD if there is time there is a lot to squeeze into Shanghai so keep that in mind \u2013 many pieces to prioritize and everything needs to take its own time to get to mainnet ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 6.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vethereum",
                    "index": "28",
                    "likes": "0",
                    "time": "28/10/2022-09:13:02",
                    "content": "Hey guys. This pre-compile is really important and under-rated. If it can be discussed on ACD that would be amazing. Thanks so much ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/JustinZal",
                    "index": "29",
                    "likes": "0",
                    "time": "28/10/2022-09:14:16",
                    "content": "Any effort to prioritize this EIP in the Shanghai would be greatly appreciated. I believe this would benefit a lot of protocols since a lot of data relating to consensus layer would be verifiable on-chain. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ralexstokes",
                    "index": "30",
                    "likes": "0",
                    "time": "28/10/2022-15:56:34",
                    "content": "@vethereum @JustinZal thanks for chiming in, adding your support here makes community demand for this EIP more legible and is helpful when client developers are prioritizing what to include in Ethereum upgrades. we didn\u2019t have time on yesterday\u2019s ACD but it is on the agenda for the next one ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 6.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jtguibas",
                    "index": "31",
                    "likes": "4",
                    "time": "28/10/2022-21:46:18",
                    "content": "@vethereum @JustinZal While the BLS precompile would make verifying data relating to the consensus layer easier, my team and I at Succinct have actually been able to get around this by verifying BLS signatures inside a zkSNARK and then verifying that proof on-chain. Using this technique, we have created a gas-efficient trust-minimized light client for Ethereum which can be deployed on any execution layer that supports the BN254 curve (Proof of Consensus Bridging between Ethereum and Gnosis Chain | Succinct Labs Blog). Inside our smart contract, we have a zkBLSVerify function which can be called to emulate the BLS precompile. The tradeoff is that a proof must be generated off-chain (< 2 minutes). The function below is taken from our smart contract (code here), so it\u2019s specific to our use case, but it can very easily be generalized to any other application that requires the precompile. function zkBLSVerify(bytes32 signingRoot, bytes32 syncCommitteeRoot, uint256 claimedParticipation, Groth16Proof memory proof) internal view returns (bool) {         require(sszToPoseidon[syncCommitteeRoot] != 0, \"Must map SSZ commitment to Posedion commitment\");         uint256[34] memory inputs;         inputs[0] = claimedParticipation;         inputs[1] = uint256(sszToPoseidon[syncCommitteeRoot]);         uint256 signingRootNumeric = uint256(signingRoot);         for (uint256 i = 0; i < 32; i++) {             inputs[(32 - 1 - i) + 2] = signingRootNumeric % 2 ** 8;             signingRootNumeric = signingRootNumeric / 2**8;         }         return verifySignatureProof(proof.a, proof.b, proof.c, inputs);     }  If the BLS precompile is a blocker for an exciting application you have in mind, please let us know and we would be happy to help out (just email us at hello@succinct.xyz). ",
                    "links": [
                        "https://github.com/succinctlabs/eth-proof-of-consensus/blob/main/contracts/src/lightclient/BeaconLightClient.sol"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.303138528138527
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/weikengchen",
                    "index": "32",
                    "likes": "0",
                    "time": "29/10/2022-02:00:13",
                    "content": "Agreed with @jtguibas. Without a precompile contract for BLS curve, verifying the signature can be difficult. By the way, when we talk about BLS signature, it is BLS12-381 BLS signatures right? (The two BLS are different). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.642857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/QEDK",
                    "index": "33",
                    "likes": "0",
                    "time": "09/12/2022-08:36:38",
                    "content": "I assume at this point, it\u2019s safe to assume that this will not be a part of the Shanghai upgrade?  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/matt",
                    "index": "34",
                    "likes": "0",
                    "time": "09/12/2022-16:22:15",
                    "content": "Yes, safe to assume at this point. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dankrad",
                    "index": "35",
                    "likes": "0",
                    "time": "19/01/2023-10:53:39",
                    "content": "I was wondering if there is a motivation for not including compression/decompression in the EIP? Is it because providing uncompressed elements is cheaper at 16 gas/byte? In that case, it may be that we need to reconsider this as for rollups this ratio will be different and data will be much more expensive as compared to computation. Since the desire of many rollups is to stay as close as possible to Ethereum L1, maybe we should add precompiles for decompression? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "36",
                    "likes": "0",
                    "time": "19/01/2023-20:55:58",
                    "content": "The reason to not include decompression is indeed the cost (on L1 ). There was already large scope in this EIP and so G1 and G2 decompressions were skipped. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 6.071428571428571
                }
            ]
        }
    ],
    "group_index": "1041"
}