{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-3005-batched-meta-transactions/4673",
            "title": "EIP-3005: Batched Meta Transactions ",
            "index": 4673,
            "category": [
                "EIPs"
            ],
            "tags": [
                "eip-3005",
                "erc-3005"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/cmango",
                    "index": "1",
                    "likes": "0",
                    "time": "25/09/2020-22:44:26",
                    "content": "Here\u2019s the place to discuss EIP-3005: EIP-3005: Batched meta transactions Link to the PR: https://github.com/ethereum/EIPs/pull/3005 tl;dr:  The EIP defines a function called processMetaBatch() that extends any fungible token standard (like ERC-20). The function can process a batch of meta transactions sent as data in a single on-chain transaction.  Other meta tx relaying implementations can only process 1 meta tx per 1 on-chain tx. Some allow batching, but only a batch of meta txs from a single sender (not multiple senders). EIP-3005 allows sending multiple meta txs from multiple senders (in 1 on-chain tx) which reduces the gas cost per meta transaction (compared to other relaying solutions).  I have also conducted gas usage tests and compared the results to other relaying services and also to just doing a normal on-chain token transaction. You can see the results and conclusions here. Looking forward to your feedback  ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/3005",
                        "https://github.com/defifuture/erc20-batched-meta-transactions#types-of-batched-meta-transactions",
                        "https://ethereum-magicians.org/t/batched-meta-transactions-from-multiple-users-is-this-ready-for-an-eip-draft/4613/19"
                    ],
                    "GPT-summary": "The author of the post is introducing EIP-3005, which proposes a new function called processMetaBatch() that can process a batch of meta transactions sent as data in a single on-chain transaction. The author is explaining the benefits of this proposal and has conducted gas usage tests to compare it with other relaying services. The author is asking for feedback and the post also includes a link to the proposal on Github.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.846726190476191
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "2",
                    "likes": "0",
                    "time": "28/09/2020-03:35:25",
                    "content": "I question whether the gas savings (32 bytes of calldata per transaction) are worth the cognitive complexity introduced by having the nonces not included in the transaction.  While this solution will work, it makes it harder to understand the code since the data being signed is not all included in the calldata. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "3",
                    "likes": "0",
                    "time": "28/09/2020-03:37:09",
                    "content": "I believe that an array of tuples would be easier to work with rather than a bunch of arrays. If you did an array of \u201ctuples\u201d, you could bitpack which would let you give you some gas savings and would let you add the nonce to the payload at lower gas cost.  For example, first 20 bytes is the sender, next 20 bytes is the recipient, next 32 bytes is the amount, next 32 bytes is the relayer fees, next 5 bytes is the timestamp, next 2 bytes is the nonce, next byte is v, followed by 32 bytes for r and 32 bytes for s.  This would reduce your calldata size by quite a bit and make adding in the nonce pretty inexpensive (which makes the specification easier to describe and grok). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.3125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "4",
                    "likes": "0",
                    "time": "28/09/2020-03:39:40",
                    "content": "Layer 1 sponsored transactions are something being worked on.  Is this still useful in the face of such transactions? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cmango",
                    "index": "5",
                    "likes": "0",
                    "time": "28/09/2020-15:07:54",
                    "content": "Hi Micah, thanks again for your feedback!  About the nonce and bitpacking data: makes sense, I\u2019ll try it out and see how it works out. The main reason why I left out nonce from parameters was actually not gas savings, but avoiding the \u201cStack too deep\u201d error. Not sure if the same error would happen when unpacking a payload, but it\u2019s worth trying. EIP-2711: This is a very interesting proposal! I must have missed it in my research because it uses a term \u201csponsored transactions\u201d, not meta transactions (but I understand why). If this goes through, it will probably make meta txs obsolete (including my proposal), but I wouldn\u2019t mind it  EDIT: I see the EIP-2711 talks about batched txs from the same user. Do you think batched transactions from different users would be possible to implement? This is what EIP-3005 focuses on. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.581439393939394
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "6",
                    "likes": "0",
                    "time": "29/09/2020-05:25:43",
                    "content": "    cmango:  The main reason why I left out nonce from parameters was actually not gas savings, but avoiding the \u201cStack too deep\u201d error.   This issue can be solved in other ways, usually just by re-ordering variables or creating local scopes and helper methods.     cmango:  I see the EIP-2711 talks about batched txs from the same user. Do you think batched transactions from different users would be possible to implement? This is what EIP-3005 focuses on.   There are no immediate plans for a layer 1 solution to transaction batches from multiple users.  I personally believe the use case for that is pretty narrow so I haven\u2019t pushed for it in layer 1 since it increases complexity for all transactions if present. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.943452380952381
                }
            ]
        }
    ],
    "group_index": "1156"
}