{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/article-the-evm-is-fundamentally-unsafe/2219",
            "title": "Article: The EVM Is Fundamentally Unsafe ",
            "index": 2219,
            "category": [],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/lrettig",
                    "index": "1",
                    "likes": "2",
                    "time": "15/12/2018-03:45:18",
                    "content": "Emily Pillmore, an engineer at Kadena, just published this article about the differences between EVM/Solidity and Kadena\u2019s VM/its interpreted smart contract language, Pact, which makes some very different design decisions than ours. I\u2019ll leave deeper technical analysis to the experts and folks such as @gregc/@gcolvin who know far more about VM design than I, but a few high-level thoughts:   Many of the issues highlighted in the article are in the process of being fixed. E.g., to a large extent, I believe \u201cdispatch\u201d and lack of native-multisig support are addressed by CREATE2 and account abstraction, and the lack of a trusted \u201cstandard library\u201d and ability to inline libraries will be addressed by Ewasm.   Kadena has taken a fundamentally different design direction with Pact than we have with EVM/Solidity, exemplified by the question of Turing-completeness. The Ethereum ethos seems to be, \u201cwe make everything possible, so the onus is on the smart contract developer to write safe code,\u201d whereas the ethos with Pact seems to be, \u201cwe make the most dangerous things impossible in the first place.\u201d This inspired my Disney World vs. Burning Man analogy. Obviously, there is no single right or wrong choice here: a different set of considerations has led to a different set of design decisions. I think we\u2019d both gain a lot by having more dialog on this topic!   Among Ewasm, shards, and sidechains, I wonder if it wouldn\u2019t be possible to have different state execution environments in \u201cgreater Ethereum\u201d that allow developers to opt into one or the other mindset, for different applications with different sets of security considerations.   ",
                    "links": [
                        "https://medium.com/@lrettig/pact-is-disney-world-to-soliditys-burning-man-60dcc1361a51"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.382440476190476
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "2",
                    "likes": "1",
                    "time": "15/12/2018-05:47:36",
                    "content": "Thanks for the pointer, Lane.  She is of course right that there is a lot not to like about the EVM.  Still\u2026 There was some other project with a non-Turing complete functional VM I saw, but not this one.  And of course if you give up Turing-completeness you make many programs, and problems, difficult to code.  Not impossible\u2013you just have to use multiple contracts to pull it off. I have no idea why she thinks interpreters can be as fast as compilers, pointing at SQL and Javascript.  Oracle\u2019s SQL has been compiled for nearly 20 years now in order to get better performance, and eWasm grew out of compiled Javascript.  And human-readable bytecode?  It already needs to balance compact encoding, efficient decoding, and rapid execution. Precompiles amount to a small standard library of crypto routines, and already are a burden on client development.  The JVM\u2019s library was big from the start, providing support for an internet-enabled, multi-threaded, object-oriented, garbage-collected, dynamic programming environment with a full Posix file system and many other Posix system calls.  This is not what I would want for the blockchain.  I want libraries of code on the blockchain itself. But her idea of a \u201cproper\u201d VM is close to the JVM, and mine is only a layer or so more abstract than eWasm.  And neither EVM, eWasm, or Pact is the VM I would design for a blockchain, but it\u2019s too late now.  There\u2019s an old saying in Texas politics, \u201cYa dance with the one that brought ya.\u201d ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.462662337662337
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lrettig",
                    "index": "3",
                    "likes": "0",
                    "time": "15/12/2018-06:09:25",
                    "content": " if you give up Turing-completeness you make many programs, and problems, difficult to code. Not impossible\u2013you just have to use multiple contracts to pull it off.  I\u2019d be very curious to see an example or two if any are front of mind! This would help me better understand the tradeoff.  neither EVM, eWasm, or Pact is the VM I would design for a blockchain, but it\u2019s too late now  Out of curiosity, what would it look like? What are the main, high-level differences? Thanks Greg! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.283854166666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "4",
                    "likes": "0",
                    "time": "15/12/2018-06:24:39",
                    "content": "If you don\u2019t have loops you can\u2019t have programs that don\u2019t terminate. I\u2019d like something similar to eWasm, so far as being just machine operations, not a whole environment, but more abstract.  For instance, only vector operations, and those up to indefinite powers of two.  So close to the SIMD hardware and CPU registers at small powers, but limited by gas rather than arbitrary machine boundaries at large powers. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.162698412698412
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lrettig",
                    "index": "5",
                    "likes": "0",
                    "time": "15/12/2018-07:33:00",
                    "content": "    gcolvin:  If you don\u2019t have loops you can\u2019t have programs that don\u2019t terminate   Even without loops in the VM, to some degree you could still emulate this behavior at the language level, in the compiler, by unrolling loops, couldn\u2019t you? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "6",
                    "likes": "1",
                    "time": "15/12/2018-11:09:53",
                    "content": "The article might have some good point, but it reads as quite biased and unstructured. Why does she need to repeat \u201cEVM does not have dispatch\u201d so many times, without even once explaining that she actually means by \u201cdispatch\u201d. I assume by lack of dispatch she means that there is a single entry point into a contract, and the functions are simply an abstraction that exist on the level higher than EVM. In this way, EVM contracts are like executables in Unix - when you call them, you specify the input via command line and stdin. Contrast it will shared libraries, which come with host of advantages (referencing objects by name), but also with issues to resolve (name mangling to avoid collision, namespaces, dependency hell, etc.). I do not believe that EVM creators did not know about dispatch and other things, they chose not to implement these features in order to ship within the time the budget would have allowed it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.895408163265307
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mcdee",
                    "index": "7",
                    "likes": "0",
                    "time": "15/12/2018-12:56:28",
                    "content": "    lrettig:  Even without loops in the VM, to some degree you could still emulate this behavior at the language level, in the compiler, by unrolling loops, couldn\u2019t you?   Not if you don\u2019t know the number of iterations in the loop, for example if you are looping over an array where the number of items in the array are unknown before runtime. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lrettig",
                    "index": "8",
                    "likes": "0",
                    "time": "15/12/2018-15:37:46",
                    "content": "Thanks, this makes sense. Dynamic loops, dynamic jumps. Got it. Are there other big examples of things you cannot do without Turing-completeness? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.074999999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/virgil",
                    "index": "9",
                    "likes": "2",
                    "time": "16/12/2018-18:49:58",
                    "content": "I didn\u2019t pay a lot of attention in computing theory class but I recall that you\u2019re also limited in recursion based on conditions.  I think it\u2019s isomorphic to the loop constraint. If it helps, I think the current philosophy on this issue is to always have Completeness at the base layer and if you want to prove fancy safety properties you will do that at a turing-incomplete high-level language before compiling to eWASM. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.5476190476190474
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "10",
                    "likes": "0",
                    "time": "17/12/2018-17:29:43",
                    "content": "You handle loops by unrolling them to the maximum number of iterations required, then running only as much of the unrolled code as needed.  So instead of max = 5; if (n > max)    revert(); while (i < n)    f(i);  you do the obviously cleaner and safer switch(i) { case (4):    f(i) case (3):    f(i) case (2):    f(i) case (1):    f(i) case (0):    f(i)    break; default:    revert(); }  (Uncompiled C code off the  top of my head, pre-coffee.) You convert recursion to iteration with an explicit stack, and unroll the iteration.  I\u2019m not awake enough to write the code.  So I think all you actually need is some sort of conditional branch to emulate a limited one-tape Turing machine. I\u2019ve made these comments on the original. ",
                    "links": [
                        "https://medium.com/@gregcolvin/ps-i-dont-know-what-to-make-of-the-argument-that-a-compiled-language-will-be-more-performant-ccb4f16c72"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.627232142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "11",
                    "likes": "0",
                    "time": "17/12/2018-21:03:44",
                    "content": " you make many programs, and problems, difficult to code.  I actually disagree. It depends on how restricted of a Turing subset you\u2019re using, but I assume here only limiting to an execution environment that guarantees totality. This is highly desirable with smart contracts anyway. From the denotational side, many kinds of loops are total (ie: convergence doesn\u2019t require Turing completion). to use more functional language maps, folds, and filters all fit into this paradigm. Further, we could get accurate gas measurements before actually running the program, they\u2019re much much easier to test, write proofs for, and so on. Because Turing-complete languages encompass all incomplete ones, we can restrict ourselves within languages that we already use. In fact, I\u2019d bet that a very high percentage of production Ethereum smart contracts are either already in this subset (because of the weaker guarantee / incentive from the gas limit), or could be improved by restriction to this subset. I STRONGLY agree with the authors of Pact; if I had to design a smart contract execution environment, I would absolutely restrict it to a total subset with strong semantics. I\u2019ve put a fair amount of thought into this previously. I realize that this is the opposite of Greg\u2019s view (Hi Greg ), and am more than happy to discuss the reasons for this (at length\u2026 as a PLT geek, this is one of my favourite topics to rant about ) Aside: At a previous company, I wrote a declarative DSL (constraint solver, &c) for financial smart contracts that had a bunch of these guarantees. Totality, static gas analysis, highly optimizable, easily composition / reuse, and correct-by-construction. Turing completion is great in general, but not the be-all-and-end-all.  you could still emulate this behavior at the language level, in the compiler, by unrolling loops, couldn\u2019t you?  Yup! But you don\u2019t even need to unroll the loop, per se. Just need a richer grammar for the VM, and most programs will compile to that target normally, only rejecting divergent programs at compile time (via syntactic analysis). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.168654100529101
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/expede",
                    "index": "12",
                    "likes": "0",
                    "time": "17/12/2018-21:27:02",
                    "content": "I had someone ping me asking what \u201cconvergence\u201d is. The short answer is loopor recursion that are limited to a finite number of steps / will actually return an answer. Of course this is unsolvable in general (Halting Problem), but we can solve it for known subsets, both with language constructs or by analyzing a program syntactically (ex. looking at the AST for known forms). // Divergent while (true) { ... } // No way to end the loop (without an explicit `break`) const diverge = f => f(f(f), f(f)); // Calls itself forever const backForth = (x) => backForth(x % 2 === 0 ? x + 1 : x - 1); // Never reduces problem size  // Convergent finiteList.map(x => x + 1); // Limited by number of elements in the finite list for (x = 0 ; x < 5 ; x++) { ... } // Limited by the counter `x` to 5 steps  const factorial = (n) => {   if ( n === 1 ) {     return 1; // Base case   } else {     return n * factorial( n - 1 ); // Next step operates on the smaller problem `n - 1`   } }  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.119047619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/charles-cooper",
                    "index": "13",
                    "likes": "0",
                    "time": "18/12/2018-01:00:31",
                    "content": "    expede:  I STRONGLY agree with the authors of Pact; if I had to design a smart contract execution environment, I would absolutely restrict it to a total subset with strong semantics. I\u2019ve put a fair amount of thought into this previously. I realize that this is the opposite of Greg\u2019s view ( Hi Greg ), and am more than happy to discuss the reasons for this (at length\u2026 as a PLT geek, this is one of my favourite topics to rant about ) Aside: At a previous company, I wrote a declarative DSL (constraint solver, &c) for financial smart contracts that had a bunch of these guarantees. Totality, static gas analysis, highly optimizable, easily composition / reuse, and correct-by-construction. Turing completion is great in general, but not the be-all-and-end-all.   Sounds interesting! Care to expand?  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.507957393483709
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "14",
                    "likes": "3",
                    "time": "18/12/2018-05:40:38",
                    "content": "So far as designing safe languages I mostly agree, @expede.  For virtual machines, not so much.  I want VMs to be an easily-implemented abstraction of typical real machines, and leave decisions about what kinds of languages to implement on them to others.   (My example was more tongue-in-cheek than it might have appeared, and checking the docs I see that Pact eventually relented and put those harmful conditionals in.) ",
                    "links": [
                        "https://pact-language.readthedocs.io/en/latest/pact-reference.html#if-considered-harmful"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.309523809523809
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "15",
                    "likes": "4",
                    "time": "18/12/2018-19:46:04",
                    "content": "    expede:  Further, we could get accurate gas measurements before actually running the program   I really don\u2019t see this as a compelling reason: We can do gas estimation in reasonable time right now just by running the code. It\u2019s possible to write a program that is difficult  to estimate, but we\u2019re not in an adversarial environment where we have to get accurate estimates for uncooperative programs. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.642857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexeyAkhunov",
                    "index": "16",
                    "likes": "0",
                    "time": "18/12/2018-20:35:16",
                    "content": "    Arachnid:  I really don\u2019t see this as a compelling reason: We can do gas estimation in reasonable time right now just by running the code. It\u2019s possible to write a program that is difficult to estimate, but we\u2019re not in an adversarial environment where we have to get accurate estimates for uncooperative programs.   I suspect it is compelling if you are trying to compile the code to binary and do not want to inject metering (with \u201cif (gas > gaslimit) then throw OutOfGasException\u201d all over the place), and just estimate it, for performance reasons (in context of eWASM research, for example) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.741071428571428
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "17",
                    "likes": "0",
                    "time": "18/12/2018-20:47:12",
                    "content": "Fair enough, but even most turing subsets would require dynamic gas costing, unless you just want to always charge users the maximum. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/samlavery",
                    "index": "18",
                    "likes": "0",
                    "time": "18/12/2018-21:55:47",
                    "content": "This is pure marketing nonsense. I\u2019m angry at the clickbait title, and couldn\u2019t finish the article after the 4th totally absurd claim presented.  It\u2019s not breaking news that bitcoin transactions are less complex, since bitcoin only does one thing(sends bitcoins).  If bitcoin does 1 thing, pact does 2 things, the evm does both and more, when do I care about the first two? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.686011904761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/trustfarm-dev",
                    "index": "19",
                    "likes": "0",
                    "time": "20/12/2018-09:27:57",
                    "content": "  gist.github.com   https://gist.github.com/trustfarm-dev/cbbc9aa1ab76983cb7dbaa329097c1c3 (ENG) Ethereum-gas-fee-autochange.txt (ENG) Ethereum-gas-fee-autochange.txt   Ethereum Contract GasFee Autochange Idea. review on recent DDOS attacks.   From the beginning ethereum has object to be a world computer and smart contract coin platform. Recent days of DDOS attacks, ETHEREUM normal node (geth , parity) has over consumed 16GB of Runtime memory and sometimes stuck over 10s minutes, or finally, Out of Memory error occurs and down.  It's not suitable for lite IoT systems, it needs less consume of run-time memory, not by sw footprint. If operate nodes, that's possible to lite client which connect remote full nodes. This file has been truncated. show original (KOR) Ethereum-gas-fee-\uc790\ub3d9\ubcc0\uacbd.txt Gas\ube44 \uc790\ub3d9\ubcc0\uacbd\uc5d0 \ub300\ud55c \uc544\uc774\ub514\uc5b4.  \uc560\uc2dc \ub2f9\ucd08 ETHEREUM \uc744 \ubcf4\uba74, computer \uc640 smart contract \uc774 \ub3d9\uc791\ud560\uc218\uc788\ub294 \ucf54\uc778 \ud50c\ub7ab\ud3fc\uc774\uc5c8\ub2e4.   \ucd5c\uadfc DDOS \ub97c \ubcf4\uc558\uc744\ub54c, ETHEREUM \ub178\ub4dc\uac00 \uc7a1\uc544\uba39\ub294 \ub7f0\ud0c0\uc784 \uba54\ubaa8\ub9ac\uac00 16GB \uac00 \ub118\uc5b4\uac00\uace0, \ub178\ub4dc\uac00 \uba87 10\ubd84\uc744 \ud5e4\uba54\ub2e4, \ubee3\uac70\ub098 \uc774\ub807\uac8c \ub418\uc5c8\ub2e4.   lite \ud55c IoT \uc2dc\uc2a4\ud15c\uc5d0 \uc62c\ub9ac\uae30\uc5d0\ub294 \uc18c\ud504\ud2b8 \uc0ac\uc774\uc988\uac00 \ubb38\uc81c\uac00 \uc544\ub2cc, \ub7f0\ud0c0\uc784 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub54c\ubb38\uc5d0 \ud604\uc2e4\uc801\uc73c\ub85c \ubd88\uac00\ud55c \uc0c1\ud669\uc774\ub2e4.   \uad73\uc774 \ud55c\ub2e4\uace0 \ud574\ub3c4, \uc6d0\uaca9\uc9c0 \uc11c\ubc84 \ub178\ub4dc\uc5d0 \uc811\uc18d\ud574\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8 \uae30\ub2a5\ub9cc \ub123\uc744\uc218\uc788\uc9c0, Full node \ub294 \ud798\ub4e0 \uc0c1\ud669\uc774\ub2e4.   This file has been truncated. show original        Gas fee autochange idea will help for solve current EVM Gas problem. And, @gcolvin @lrettig I think script language is good solution for a verifying the contract source. But, in view of normal people, even though script is opened, but Can\u2019t verify and can\u2019t understand well. And, More large computation resources, for executing contract. it is not much better than current EVM bytecode. So, I am researching, source code contained binary  at least bytecode itself can be verified by given sourcecode. make compiler also indicated in bytecode. for strong performance and adaption on lite IoT devices, use real cpu architecture based bytecode (e.g RISC-V or OpenRisc)  ",
                    "links": [
                        "https://gist.github.com/trustfarm-dev/cbbc9aa1ab76983cb7dbaa329097c1c3",
                        "https://gist.github.com/trustfarm-dev/cbbc9aa1ab76983cb7dbaa329097c1c3",
                        "https://gist.github.com/trustfarm-dev/cbbc9aa1ab76983cb7dbaa329097c1c3"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.595793650793651
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lrettig",
                    "index": "20",
                    "likes": "1",
                    "time": "20/12/2018-13:42:59",
                    "content": "    trustfarm-dev:  for strong performance and adaption on lite IoT devices, use real cpu architecture based bytecode (e.g RISC-V or OpenRisc)   This is precisely what Wasm (WebAssembly) is designed for. I did see another project recently that was building a (deterministic?) virtual machine based on RISC-V but the name slips my mind. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.291666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/trustfarm-dev",
                    "index": "21",
                    "likes": "0",
                    "time": "20/12/2018-15:39:25",
                    "content": "Webassembly also very heavy, because it runs on top of browser stack (eg. webkit). And it\u2019s resemble low level instructions. But is run on high level sw abstacted layers. Just looks like low level, but it\u2019s on top of very high level abstacted sw layers. And it is scripts. My project idea is here. https://forum.tao.foundation/topic/23/tao-architecture-conference-presentation PPT files direct download link is here. Tao tokenizeit ppt  Screenshot_20181221-003729.png1080\u00d71920 300 KB   Screenshot_20181221-003746.png1080\u00d71920 328 KB  ",
                    "links": [
                        "https://trustcoinmining.com/bbs/download.php?bo_table=notice&wr_id=19&no=0&sst=wr_datetime&sod=desc&sop=and&page=299260",
                        "https://ethereum-magicians.org/uploads/default/original/2X/d/de3f654353b85e4fcc3079d2e15cab09ff79f073.png",
                        "https://ethereum-magicians.org/uploads/default/original/2X/4/41d3492845b2c363d9ad060a54ccd42a68a4b33a.png"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.755
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "22",
                    "likes": "1",
                    "time": "22/12/2018-06:11:38",
                    "content": "   Medium \u2013 20 Dec 18   Hi Emily. \u2013 Greg Colvin \u2013 Medium Thanks for your interest and thoughtful response. I think you hit the core of our disagreements with, \u201cKadena simply does not have the\u2026 Reading time: 2 min read       ",
                    "links": [
                        "https://medium.com/@gregcolvin/hi-emily-4361a415c2a4"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                }
            ]
        }
    ],
    "group_index": "597"
}