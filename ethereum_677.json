{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/natspec-radspec/2586",
            "title": "Natspec->Radspec ",
            "index": 2586,
            "category": [
                "Wallets"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "1",
                    "likes": "2",
                    "time": "04/02/2019-15:41:50",
                    "content": "Moving this discussion from twitter to the magicians so we are not limited in character count:   twitter.com          Jorge Izquierdo \ud83e\udd85 (izqui9)     Working on a lightweight format to define radspec strings for already deployed contracts.  Coupled with a very simple registry, it would help improve UX and security so much.  Thoughts? @avsa @danfinlay @pedrouid   https://t.co/jEQNhKH8T6  6:23 AM - 4 Feb 2019     8          2            My current questions:  Are the radspec keywords documented somewhere? when googling for \u201c@tokenAmount\u201d or \u201c@formatPct\u201d I only find usages but no documentation. Would especially be interested in a list of possible keywords. who can publish to the registry - in natspec it was part of the solidity compilation - not yet sure how this would work for radspec as @pedrouid correctly mentioned - while attacking this problem we could also think about localisation  ",
                    "links": [
                        "https://twitter.com/izqui9/status/1092428328491982848",
                        "https://twitter.com/izqui9/status/1092428328491982848"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.772321428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/izqui",
                    "index": "2",
                    "likes": "1",
                    "time": "04/02/2019-15:56:25",
                    "content": "  Are the radspec keywords documented somewhere? when googling for \u201c@tokenAmount\u201d or \u201c@formatPct\u201d I only find usages but no documentation. Would especially be interested in a list of possible keywords.     twitter.com          Jorge Izquierdo \ud83e\udd85 (izqui9)     @mr_ligi @pedrouid @avsa @danfinlay There is not a lot of documentation besides the source code inline comments. Those keywords are what we call helpers (basically radspec precompiles), whose logic is implemented in JS directly (they are all in src/helpers)  6:23 AM - 4 Feb 2019     1              who can publish to the registry - in natspec it was part of the solidity compilation - not yet sure how this would work for radspec   The registry needs to be designed and we can get as crazy as our imagination takes us. I think to get started something fairly centralized is fine, you just need a way to prevent spam and encourage submissions for the most used smart contracts. I was thinking a model where you have bonded curators/maintainers that \u2018merge\u2019 contributions that get rewarded. Changing an existing description should be way harder than adding a new one. Radspec strings for new contracts can be extracted from solidity files in the same way as Natspec strings do, so they are also part of the Solidity source code hash swarm link at the end of the bytecode.   as @pedrouid correctly mentioned - while attacking this problem we could also think about localisation   Absolutely. This is the format I thought of when adding meta-radspec string support and hardcoding some strings in the package. It would be trivial to convert it into an object in which lang identifiers are the keys and the localized strings are the value:   github.com/aragon/radspec       [WIP] Implement @radspec helper     by izqui   on 02:57PM - 04 Feb 19 UTC   3 commits   changed 8 files   with 1648 additions   and 1306 deletions.       ",
                    "links": [
                        "https://twitter.com/izqui9/status/1092448010758512640",
                        "https://twitter.com/izqui9/status/1092448010758512640",
                        "https://github.com/aragon/radspec/pull/55/files#diff-1b6b9fc7882ad4fc606bd4e46ad9991e",
                        "https://github.com/izqui",
                        "https://github.com/aragon/radspec/pull/55",
                        "https://github.com/izqui",
                        "https://github.com/aragon/radspec/pull/55"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.901226551226552
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "3",
                    "likes": "0",
                    "time": "04/02/2019-15:57:03",
                    "content": "If we keep radspec operations basic enough we might not need it to be done on client-side @tokenAmount(self, $3) could be replaced by div($3, pow(10, self.decimals)) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/izqui",
                    "index": "4",
                    "likes": "0",
                    "time": "04/02/2019-15:58:38",
                    "content": "I totally get your point, but if you look at the actual implementation of the helper you will be surprised at how non-trivial it is to properly format token amounts    github.com   aragon/radspec/blob/master/src/helpers/tokenAmount.js import BN from 'bn.js' import { toUtf8 } from 'web3-utils' import { ERC20_SYMBOL_BYTES32_ABI, ERC20_SYMBOL_DECIMALS_ABI, ETH } from './lib/token' import { formatBN, tenPow } from './lib/formatBN'  export default (eth) =>   /**    * Format token amounts taking decimals into account    *    * @param {string} tokenAddress The address of the token    * @param {*} amount The absolute amount for the token quantity (wei)    * @param {bool} showSymbol Whether the token symbol will be printed after the amount    * @param {*} precision The number of decimal places to format to. If set, the precision is always enforced.    * @return {Promise<radspec/evaluator/TypedValue>}    */   async (tokenAddress, amount, showSymbol = true, precision) => {     const amountBn = new BN(amount)     const fixed = !!precision      let decimals     This file has been truncated. show original      ",
                    "links": [
                        "https://github.com/aragon/radspec/blob/master/src/helpers/tokenAmount.js",
                        "https://github.com/aragon/radspec/blob/master/src/helpers/tokenAmount.js"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.732007575757576
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pedrouid",
                    "index": "5",
                    "likes": "0",
                    "time": "04/02/2019-16:03:24",
                    "content": "Yeah, because I didn\u2019t include the symbol and precision. Honestly I don\u2019t mind so much about the off-chain computation of the metadata. Currently it\u2019s much worse so this definitely is a significant improvement. No need to be purist now as we should move this to be adopted as soon as possible ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.775
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "6",
                    "likes": "1",
                    "time": "04/02/2019-16:04:51",
                    "content": "Was just talking to chriseth about this and we think creating a registry is not really needed. We can just fix natspec (remove the dependency to/usage of JS - seems(*1) to be not really used anyway) - solidity is not actually doing something with the JS expressions - just piping them through. So the JS stuff could just be removed from natspec and we should be done. That said: it would not really solve the localisation problem. (*1) - we should gather some data on this ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/izqui",
                    "index": "7",
                    "likes": "0",
                    "time": "04/02/2019-16:21:57",
                    "content": "If you remove JS, you need to add a way to perform basic data transformations so the descriptions can be useful UI. This is why we built radspec. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "8",
                    "likes": "0",
                    "time": "04/02/2019-16:26:11",
                    "content": "Sure - but this can be added to NatSpec. Having NatSpec and RadSpec at the same time makes things quite ugly. No real reason to fork here - just improve/fix whats there already. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/izqui",
                    "index": "9",
                    "likes": "0",
                    "time": "04/02/2019-16:40:32",
                    "content": "Radspec is just Natspec but it uses its own DSL rather than JS\u2019 evals for executing code. Radspec strings are placed in Solidity code in the same place that Natspec strings are, so all the Natspec extractors (solc included) work with Radspec out of the box. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "10",
                    "likes": "0",
                    "time": "04/02/2019-16:49:11",
                    "content": "But why would you need the registry then? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "677"
}