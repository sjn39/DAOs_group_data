{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1109-remove-call-costs-for-precompiled-contracts/447",
            "title": "EIP-1109: Remove call costs for precompiled contracts ",
            "index": 447,
            "category": [
                "EIPs"
            ],
            "tags": [
                "opcodes",
                "gas"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/jbaylina",
                    "index": "1",
                    "likes": "0",
                    "time": "22/05/2018-17:07:55",
                    "content": "This topic is intended be the discussion for EIP-1109.  Any comment or feedback is very much appreciated!   Ethereum Improvement Proposals   PRECOMPILEDCALL opcode (Remove CALL costs for precompiled contracts) Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-1109",
                        "https://ethereum-magicians.org/t/eip-1352-restricted-address-range-for-precompiles-system-contracts/1151/28",
                        "https://ethereum-magicians.org/t/eip-1344-add-chain-id-opcode/1131/21"
                    ],
                    "GPT-summary": "The author of the post is introducing EIP-1109, which is a proposal to remove call costs for precompiled contracts in Ethereum. The author is asking for feedback on the proposal, while also explaining what it entails. The post invites comments and constructive criticism from third parties, who may also ask questions or review the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maurelian",
                    "index": "4",
                    "likes": "0",
                    "time": "23/05/2018-01:36:51",
                    "content": "(I deleted my previous comment asking for a link, maybe delete your response) I like this proposal. A few questions:  Are there resources that explain how the cost per opcode was set initially? My guess is that much of the cost of CALL is based on the need to retrieve the callee from the disk, but I don\u2019t know. Is it possible that the existing precompile costs have already been reduced by 700? I noticed the test cases don\u2019t mention \u201cprecompiled\u201d contracts at all.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.833333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jbaylina",
                    "index": "5",
                    "likes": "0",
                    "time": "23/05/2018-03:13:53",
                    "content": "1.- Yes, CALL gas cost was increased highly after Shanghai attacks to take in account disk access. For precompiled contracts this makes no sense. 2.- No, it has not been reduced. I tested again now.  If you check this TX: https://ropsten.etherscan.io/vmtrace?txhash=0x3d020fef1b87a4b4b4ff64206c1d1feb4c7e8def9b2d5086fdac3851b30e05d3  in the Line 60 of Geth trace you will see that the cost of the CALL is 872 ( 700 for the CALL, 60 for the SHA256 precompiled contract and 12 becouse there is 1 word as a parameter). 3.- Fixed. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.6499999999999995
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jbaylina",
                    "index": "6",
                    "likes": "0",
                    "time": "23/08/2018-11:28:30",
                    "content": "Just Updated the EIP for introducing the new OPCODE PRECOMPILEDCALL. Please, feedback\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.681818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "7",
                    "likes": "0",
                    "time": "24/08/2018-15:35:29",
                    "content": "I think it is a bad idea to create a new call opcode. For a long while I was meant to create an EIP to clarify the range of precompiles, but finally did it: https://github.com/ethereum/EIPs/pull/1352 (Also added a topic here: EIP-1352: Specify restricted address range for precompiles/system contracts) I think with having an accepted range specified, this cost reduction EIP would be much simpler to be specified. I would actually propose to only reduce the cost for STATICCALL since precompiles should be called with that, given they do not modify the state. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-1352-specify-restricted-address-range-for-precompiles-system-contracts/1151",
                        "https://ethereum-magicians.org/t/eip-2046-reduced-gas-cost-for-static-calls-made-to-precompiles/3291/2"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.704545454545455
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jbaylina",
                    "index": "8",
                    "likes": "0",
                    "time": "03/09/2018-18:10:41",
                    "content": "Reducing the cost for all STATICCALL is not a good idea.  There is a vector attack (exploited in Changai attacks) that allows to make multiple calls to multiple contracts forcing the client to search and load the code from the disk of the clients.  That is why this cost was incremented at that time. According to the core devs meeting, it is more easy to define a new code that to touch the acutual call code of the clients.  That is why I refactor the full EIP and created a new opcode. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.753787878787879
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "9",
                    "likes": "0",
                    "time": "04/09/2018-17:35:29",
                    "content": "Isn\u2019t this issue only about reducing cost for calls targeting precompiles? What is to be loaded from disk in that case? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "10",
                    "likes": "0",
                    "time": "04/09/2018-17:36:06",
                    "content": "    axic:  I would actually propose to only reduce the cost for STATICCALL since precompiles should be called with that, given they do not modify the state.   To clarify, this refers to \u201creduce the cost for STATICCALL when targeting precompiles\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jbaylina",
                    "index": "11",
                    "likes": "0",
                    "time": "21/06/2019-10:58:02",
                    "content": "Static calls do not have to load the state, but they have to load the code. So going in that direction would implicate that the cost of STATICCALL should be higher than 2. Also note, that this EIP was redesigned in order to not having to touch any thing from the current  CALxxx  code. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "12",
                    "likes": "0",
                    "time": "21/06/2019-18:42:49",
                    "content": "    axic:  I would actually propose to only reduce the cost for STATICCALL since precompiles should be called with that, given they do not modify the state.   For reference, this has been proposed as EIP-2046: Reduced gas cost for static calls made to precompiles ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "13",
                    "likes": "0",
                    "time": "21/06/2019-18:46:39",
                    "content": "    jbaylina:  Static calls do not have to load the state, but they have to load the code. So going in that direction would implicate that the cost of STATICCALL should be higher than 2.   The same requirement applies to PRECOMPILEDCALL and STATICCALL. Both need to check upfront, before loading any state, if the destination address is on the \u201clist of precompiles\u201d. I do not see any difference in complexity whether that is done in a new opcode or it is done amending an existing one. However a new opcode seems to be an extra opcode without much benefit over augmenting the existing one. Additionally with a new opcode the cost reduction is only applied to newly deployed contracts. (There is some discussion here why it may be a bad idea not applying these reductions to existing contracts.) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.3615702479338845
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jbaylina",
                    "index": "14",
                    "likes": "0",
                    "time": "21/06/2019-21:16:37",
                    "content": "The number of precompiled smart contracts is going to be always limited. In the other hand the callable contracts from static are much higher.  So you probably will have to load it from disk. Or you can have an attack of just calling many different contracts from the same smart contract. I saw that in EIP-2046 you already distinguish the 2 different types of calls. Another reason is that a precompiled smart contract  should not change the context.  It just executes a specific code in the client. So the treatment can be different. I understand this CALL not as an external call to a different smart contract but an extension of the opcodes in the EVM.  I\u2019m thinking that this opcode should be very low gas. Also, in the old the core devs call #44, implementers said that they prefer to have a new opcode. You can check the notes here: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2044.md ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.565020505809979
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "15",
                    "likes": "0",
                    "time": "22/06/2019-10:40:03",
                    "content": "    jbaylina:  The number of precompiled smart contracts is going to be always limited. In the other hand the callable contracts from static are much higher. So you probably will have to load it from disk.   I still don\u2019t understand what difference it makes in which opcode the system checks whether the destination is a precompiled address. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.767857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MrChico",
                    "index": "16",
                    "likes": "0",
                    "time": "18/10/2019-11:16:42",
                    "content": "STATICCALL should have better performance than CALL in general since no snapshot of state needs to be stored, so it might make sense for STATICCALL to be cheaper in general. If we knew the breakdown of the cost of a CALL in terms of cost needed for new bytecode retrieval + cost needed to store current callframe + cost needed for state snapshot we\u2019d be able to give a motivated answer to the cost of STATICCALL, cost of call-to-self and call to precompiles. For some reason geth still does a snapshot https://github.com/ethereum/go-ethereum/issues/20180 for STATICCALL though\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.03030303030303
                }
            ]
        }
    ],
    "group_index": "1105"
}