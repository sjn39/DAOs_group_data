{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-3860-limit-and-meter-initcode/7018",
            "title": "EIP-3860: Limit and meter initcode ",
            "index": 7018,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "evm",
                "shanghai-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "1",
                    "time": "07/09/2021-13:39:35",
                    "content": "This is the discussion topic for  Ethereum Improvement Proposals   EIP-3860: Limit and meter initcode Limit the maximum size of initcode to 49152 and apply extra gas cost of 2 for every 32-byte chunk of initcode      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-3860",
                        "https://ethereum-magicians.org/t/eip-2677-limit-size-of-initcode/4550/10"
                    ],
                    "GPT-summary": "The post is an explanation of the Ethereum Improvement Proposal EIP-3860, which suggests limiting the maximum size of initcode to 49152 and applying an extra gas cost for every 32-byte chunk of initcode. The post also invites discussion on the proposal. A 3rd party could provide constructive criticism of the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "2",
                    "likes": "0",
                    "time": "10/12/2021-01:23:14",
                    "content": "This has been implemented in Geth (core/vm: implement EIP-3860: Limit and meter initcode by gumb0 \u00b7 Pull Request #23847 \u00b7 ethereum/go-ethereum \u00b7 GitHub) and state tests have been created (Tests for EIP-3860: Limit and meter initcode by gumb0 \u00b7 Pull Request #990 \u00b7 ethereum/tests \u00b7 GitHub). ",
                    "links": [
                        "https://github.com/ethereum/tests/pull/990"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "3",
                    "likes": "0",
                    "time": "15/12/2021-16:22:49",
                    "content": "If a contract uses a CREATE/CREATE2 opcode and the resulting initcode_size exceeds the maximum, then there is an exceptional abort. But, in what context does it abort? Does it fail in the CREATE frame or does it fail in the context of the contract which calls the CREATE opcode? So the quesiton here is, if there is an exceptional abort, does the 0 address get put on the stack after executing CREATE/CREATE2, or does the contract which calls CREATE/CREATE2 go OOG? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "4",
                    "likes": "0",
                    "time": "04/03/2022-14:09:05",
                    "content": "What do you think about non-charging 32k or gas when returned deployment code is empty? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "5",
                    "likes": "0",
                    "time": "15/03/2022-01:38:07",
                    "content": "    k06a:  non-charging 32k   Assuming the reasoning here would be to use creation transactions as a \u201cpoor man\u2019s\u201d batched transactions? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "6",
                    "likes": "0",
                    "time": "15/03/2022-09:38:24",
                    "content": "This is also safe way to have create2 factory of proxies for delegatecalls. No need to care of proxy selfdestruction if it was not even deployed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "7",
                    "likes": "1",
                    "time": "08/04/2022-14:20:00",
                    "content": "PEEPanEIP-3860: Limit and meter initcode with @axic @chfast      ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "8",
                    "likes": "0",
                    "time": "24/10/2022-21:49:55",
                    "content": "Hi all, since we consider this for Shanghai and we want 3540 (EOF contracts) 3670 (EOF code validation) in it, plus this EIP, we now run into a situation where the interaction between these three EIPs are not clear. What if: I deploy an EOF contract which has a code section of size lower than than the max initcode, but the entire container is larger than the max intitcode? Is the 2 gas charged on the entire container per word, or only the code section? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.95
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "9",
                    "likes": "0",
                    "time": "31/10/2022-22:04:13",
                    "content": "Running into the code size limit is a very frequent problem for smart contract developers (Solidity developers, at least), and the workarounds are often not pretty. There is hope that this limit will be lifted or at least increased in the future. Does this EIP affect the chances that that will happen? In particular, one of the things that concern me is that the EIP mentions as a motivation that EVM engines could implement the program counter as a 16 bit sized type. This would be incompatible with code size increases beyond that. Granted, that still allows for a 2x increase of today\u2019s limit, but not for lifting the limit. I believe I\u2019ve seen proposals in the past to lift it (sadly can\u2019t find them), so I\u2019d like to hear your thoughts on those prospects. If this is accepted and engines implement this change, it would probably still be possible to later increase the allowed size of code pointers, but it would require larger code changes as opposed to a simpler parameter change. Additionally, if there is an EVM-compatible chain/rollup that decides it can support higher code size limits and increases this parameter, it would not be able to reuse the execution engine without those code changes. A possible alternative is to instead suggest a 32 or 24 bit type for representing code pointers, to allow for potential further increases in the future, though this can\u2019t be more than a recommendation I guess.  As a second question, have you looked in the history of the chain to see if there have been transactions with init code larger than 48kB, and if so how frequently? I\u2019m wondering if this will be a new frequent annoyance for developers. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.12964917027417
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "10",
                    "likes": "0",
                    "time": "28/11/2022-10:51:04",
                    "content": "EIP was clarified regarding nonce update and gas deduction in case of initcode size above the limit for CREATE/CREATE2: Update EIP-3860: Clarify nonce rules by gumb0 \u00b7 Pull Request #6040 \u00b7 ethereum/EIPs \u00b7 GitHub Also tests were updated accordingly: EIP-3860: Update tests for CREATE/CREATE2 according to spec change by gumb0 \u00b7 Pull Request #1105 \u00b7 ethereum/tests \u00b7 GitHub ",
                    "links": [
                        "https://github.com/ethereum/tests/pull/1105"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "11",
                    "likes": "0",
                    "time": "29/11/2022-13:03:44",
                    "content": "    jochem-brouwer:  What if: I deploy an EOF contract which has a code section of size lower than than the max initcode, but the entire container is larger than the max intitcode? Is the 2 gas charged on the entire container per word, or only the code section?   There is no special rule for EOF, i.e. the entire container is counted for the EIP-3860/EIP-170 limits. Doing otherwise could quickly become overly complicated, and the \u201ccode size limit\u201d is actually for limiting data storage, not for limiting executable code. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.808201058201059
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "12",
                    "likes": "1",
                    "time": "30/11/2022-20:19:10",
                    "content": "    frangio:  Running into the code size limit is a very frequent problem for smart contract developers (Solidity developers, at least), and the workarounds are often not pretty. There is hope that this limit will be lifted or at least increased in the future. Does this EIP affect the chances that that will happen?   I agree it is concerning, and we considered several times to submit a proposal to increase the limit. I don\u2019t think this particular proposal has an effect on it, especially because we have defined it to state:  MAX_INITCODE_SIZE 2 * MAX_CODE_SIZE Where MAX_CODE_SIZE is defined by EIP-170 as 24576.  This is for hoping that the initcode limit is scaled when the code limit is changed.     frangio:  In particular, one of the things that concern me is that the EIP mentions as a motivation that EVM engines could implement the program counter as a 16 bit sized type. This would be incompatible with code size increases beyond that.   With the \u201cfull suite of EOF\u201d (= function sections), each function section can be 2^16 bytes big, which in practice removes any feasible limit. This is what is considered for adoption.     frangio:  As a second question, have you looked in the history of the chain to see if there have been transactions with init code larger than 48kB, and if so how frequently?   We did some investigation back in the day, but also a back of the envelope calculation: since EIP-2028 non-zero bytes are 16 gas in calldata, i.e. 768432 gas, however deploying ~48k would cost ~9.6M gas. The likely case where problems could arise is contracts containing a significantly heavy constructor. I wonder however if even those cases where a lot of gas is used, is it because of a lot of code, or is it because of performing calculations. ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-2028"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.959060846560846
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/marioevz",
                    "index": "13",
                    "likes": "0",
                    "time": "07/12/2022-22:25:59",
                    "content": "I\u2019m implementing tests on the python tests repository, and I\u2019m having trouble understanding this change referenced here. It seems like the hashing costs for CREATE2 are charged even when the initcode exceeds the max length, which doesn\u2019t make much sense to me since there should be no hashing performed at all. Is this the correct behavior or should the hashing costs not be charged in this case? I\u2019m currently testing using latest version here: GitHub - ewasm/go-ethereum at eip-3860 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "14",
                    "likes": "0",
                    "time": "29/12/2022-11:28:08",
                    "content": "Your understanding is correct, just the tests were generated from the incorrect implementation. The implementation is fixed now: https://github.com/ethereum/go-ethereum/pull/23847 and tests are updated: Fix tests for EIP-3860 by gumb0 \u00b7 Pull Request #1125 \u00b7 ethereum/tests \u00b7 GitHub ",
                    "links": [
                        "https://github.com/ethereum/tests/pull/1125"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "15",
                    "likes": "2",
                    "time": "29/12/2022-11:43:06",
                    "content": "In CREATE and CREATE2 we have OOG errors (terminating the current execution context) and \u201clight\u201d errors (instruction returns 0 address).  CREATE2 pre EIP-3860:  Memory expansion (OOG) Initcode hashing cost (OOG) Call depth check (light) Balance check (light)   CREATE2 after EIP-3860:  Memory expansion (OOG) Initcode size limit check (light) Initcode hashing cost (OOG) Initcode cost (OOG) Call depth check (light) Balance check (light)  The 3 and 4 can be combined into single one, but 3 does not exist in CREATE. The light check are sensitive to the order of checks while OOG checks can happen in any order. Somehow EIP-3860 introduced a light check in between of two OOG checks. This caused a lot confusion and bugs in implementations. To the point the official ethereum/tests still contains incorrect tests as of today. I think this design choice was a mistake and we should change the limit check to OOG one. Interpretation: the cost of initcode above the limit is infinite. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.285714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "16",
                    "likes": "0",
                    "time": "29/12/2022-12:04:23",
                    "content": "    chfast:  I think this design choice was a mistake and we should change the limit check to OOG one. Interpretation: the cost of initcode above the limit is infinite.   I fully agree about this. It makes the semantics and implementation a lot simpler. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "17",
                    "likes": "0",
                    "time": "05/01/2023-15:37:59",
                    "content": "This change has been accepted. Please raise concerns if you have any. EIP-3860: Change the failure to OOG by chfast \u00b7 Pull Request #6249 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 3.416666666666667
                }
            ]
        }
    ],
    "group_index": "1439"
}