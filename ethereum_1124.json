{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2677-limit-size-of-initcode/4550",
            "title": "EIP-2677: Limit size of initcode ",
            "index": 4550,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm",
                "core-eips"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "0",
                    "time": "28/08/2020-20:01:42",
                    "content": "Discussion topic for  Ethereum Improvement Proposals   EIP-2677: Limit size of `initcode` Details on Ethereum Improvement Proposal 2677 (EIP-2677): Limit size of `initcode`      This was suggested during the discussion of EIP-2315: EIP-2315 \"Simple Subroutines for the EVM\" - Analysis - #35 by chfast  Enforce a maximum size limit ( max_initcode_size ) for  initcode . If the size of  initcode  exceeds  max_initcode_size , then contract creation fails with an out of gas error. Since EIP-170 was implemented, there has been a size limit of  24576  ( 0x6000 ) on contract code. We propose to also limit the size of executable code to  2x  the above limit, i.e.  49152  ( 0xc000 ). This also leads to two nice properties:  instruction offset in code fits 16-bit value, code size fits 16-bit value.   ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-2677",
                        "https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/35",
                        "https://eips.ethereum.org/EIPS/eip-170"
                    ],
                    "GPT-summary": "The post discusses Ethereum Improvement Proposal 2677, which suggests enforcing a maximum size limit for initcode. The proposal aims to limit the size of executable code to 2x the current limit of 24576, i.e., 49152. The post also mentions that this proposal was suggested during the discussion of EIP-2315. The post does not advertise the proposal, nor does it contain entirely positive or negative feedback.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Law and regulations",
                        "Privacy, Security and risk management",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/esaulpaugh",
                    "index": "2",
                    "likes": "0",
                    "time": "29/08/2020-19:17:56",
                    "content": "Is the rationale that this will reduce the worst-case resource consumption of initcode, enabling a price reduction? Or is it that initcode is priced too low already and this change will bring resource consumption in line with the current price? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "3",
                    "likes": "0",
                    "time": "06/09/2020-23:15:38",
                    "content": "Ensuring a limit for init code makes analysis of it easier. While the lack of this limit may not be a problem currently, it makes the introduction of new EVM features harder. A good example is EIP-2315. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.920454545454545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/esaulpaugh",
                    "index": "4",
                    "likes": "0",
                    "time": "07/09/2020-18:21:46",
                    "content": "hmm, current stack width is 256 bits, but I guess the new return stack will be slimmer, only operating on program counters and not data ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.227272727272727
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MrChico",
                    "index": "5",
                    "likes": "0",
                    "time": "18/03/2021-18:30:52",
                    "content": "If the cost of the jumpdest analysis scales linearly with the codesize, wouldn\u2019t it make more sense to charge per initcode byte, instead of just imposing a hard cap? Currently we charge 6 gas per 32 bytes for the keccak cost of CREATE2, maybe this can be added to CREATE as well? Possible wtih an increase in the per byte cost to make jumpdest analysis attacks unfeasible. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.260416666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chriseth",
                    "index": "6",
                    "likes": "0",
                    "time": "06/04/2021-09:11:10",
                    "content": "Can you please provide an explanation in the EIP document that tells why the same effects cannot be achieved by charging a cost per byte, as @McChico proposes? I would find such a mechanism much more natural. Of course, it has to be partly charged per execution instead of per deployment, but isn\u2019t that where we want to go anyway? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "7",
                    "likes": "0",
                    "time": "16/04/2021-09:30:40",
                    "content": "Sorry,I missed this. Yes, I totally agree that that mecanism would work to, and arguably be even better, since it would be more accurate. My reason for proposing a hardcap is simply that I think it\u2019s a more minimal change with less chances of leading to consensus errors. If we didn\u2019t already have a hard-cap on deployed-code size, then I would not have suggested this (otherwise quite hacky) solution. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.020833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "8",
                    "likes": "0",
                    "time": "30/04/2021-19:36:46",
                    "content": "Would it be possible to limit executable code to 0xc000 or lower instead of the entire initdata being capped at 48k?  Allowing data to exist beyond the execution cap?  i.e. the PC will not jump past 0xc000 (or 0x6000 to match deployed contract sizes) but the initcode can CODECOPY well past the execution limit, for example to CREATE or CREATE2 multiple contracts based on call args. The reason I ask is I\u2019ve seen some contracts that will deploy a notable amount of \u201csatellite\u201d contracts and would benefit from atomic deployment. It doesn\u2019t take many contracts before you are at the 24k limit for a factory contract and have to move into initcode for deployments. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.357142857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "9",
                    "likes": "0",
                    "time": "06/05/2021-18:54:00",
                    "content": "Myeah maybe. Although, now that it\u2019s definitely not slated for london, we have some more time on our hands. I might run a chain analysis to see what the largest (successful) execution ever was ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 7.083333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "10",
                    "likes": "0",
                    "time": "07/09/2021-13:43:11",
                    "content": "A new proposal has been pushed which introduces both a hard cap and a charge:    EIP-3860: Limit and meter initcode Core EIPs       This is the discussion topic for          MrChico:  If the cost of the jumpdest analysis scales linearly with the codesize, wouldn\u2019t it make more sense to charge per initcode byte, instead of just imposing a hard cap?       chriseth:  Can you please provide an explanation in the EIP document that tells why the same effects cannot be achieved by charging a cost per byte, as @McChico proposes?   The answer to this can be found in the rationale of the new proposal. In short, having a hard cap helps in crafting worst case scenarios to measure the cost against. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.387626262626262
                }
            ]
        }
    ],
    "group_index": "1124"
}