{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/evm384-feedback-and-discussion/4533",
            "title": "EVM384 - Feedback and discussion ",
            "index": 4533,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm",
                "core-eips"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "4",
                    "time": "21/08/2020-10:56:15",
                    "content": "EVM384 is a proposal to extend the EVM with some primitives for efficient 384-bit arithmetics. This would enable the implementation of some operations on new elliptic curves, such as BLS12-381. The Ewasm team has released an early proposal in May, and today we are releasing a larger write up with the aim to give a comprehensive explanation, and to show some benchmarks:    HackMD    EVM384 \u2013 Can we do Fast Crypto in EVM? - HackMD # EVM384 \u2013 Can we do Fast Crypto in EVM?  Text jointly authored (in reverse alphabetic order) by Pau      Please leave any feedback here. ",
                    "links": [
                        "https://notes.ethereum.org/@axic/evm384-preview",
                        "https://notes.ethereum.org/@axic/evm384",
                        "https://notes.ethereum.org/@axic/evm384",
                        "https://notes.ethereum.org/@axic/evm384",
                        "https://ethereum-magicians.org/t/a-case-for-a-simpler-alternative-to-eip-3074/6493/19",
                        "https://ethereum-magicians.org/t/eip-5843-evm-modular-arithmetic-extensions/12425"
                    ],
                    "GPT-summary": "The post is a proposal to extend the EVM with primitives for efficient 384-bit arithmetics. The author is asking for feedback on the proposal and has released a comprehensive write-up with benchmarks. The post also invites constructive criticism and questions from third parties, and some third parties have extended to the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.530303030303029
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "2",
                    "likes": "0",
                    "time": "21/08/2020-17:30:55",
                    "content": "Was a subgroup check included into the benchmarks by the way? Number of ops looks quite close to the numbers from the pairing algorithms papers. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "3",
                    "likes": "0",
                    "time": "22/08/2020-16:27:18",
                    "content": "Also you mention an implementation of the BN254 ops through EVM ops that is as gas-cost efficient as a precompile. Was it before the precompile repricing in 1107/1108 or after? Concrete numbers would be great. I also remember one of the core devs has mentioned that \u2018mulmod\u2019 is underpriced, and if it\u2019s true then this comparison is kind of invalid. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/oniki",
                    "index": "4",
                    "likes": "0",
                    "time": "23/08/2020-09:09:26",
                    "content": "    shamatar:  Also you mention an implementation of the BN254 ops through EVM ops that is as gas-cost efficient as a precompile. Was it before the precompile repricing in 1107/1108 or after? Concrete numbers would be great.   Yes, it was gas efficient before 1108. See introduction of Weierstrudel  When EIP-1108 goes live all of this work will immediately become redundant  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.107954545454546
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "5",
                    "likes": "0",
                    "time": "27/08/2020-22:32:05",
                    "content": "I\u2019ve mentioned elsewhere that I prefer a stack-based interface to a memory-based one, as it seems we\u2019d need to use the stack to get things to and from memory anyway.  If stack pressure is a concern I\u2019m inclined to increase the stack size anyway. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "6",
                    "likes": "0",
                    "time": "28/08/2020-17:57:15",
                    "content": "Would an opcode that directly use memory pointer be more efficient then a combination of 2xMLOAD and popping two words from the stack after? I try to look at the Huff implementation of point multiplication to get a sense of now many swaps/dups have to be made. It may be much worse for operations in extension fields where primitive multiplication is kind of N^2 naive multiplication of two polynomials with coefficients of 384 bits. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "7",
                    "likes": "0",
                    "time": "28/08/2020-18:12:54",
                    "content": "I\u2019m not familiar enough with the code that is being written - or could be written - with these operators to gauge efficiency at that level. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.53125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "8",
                    "likes": "1",
                    "time": "18/09/2020-11:29:45",
                    "content": "We have published a new update at    HackMD    EVM384 -- Update on the interface - HackMD # EVM384 -- Update on the interface  Text jointly authored (in reverse alphabetic order) by Paul Dwo      ",
                    "links": [
                        "https://notes.ethereum.org/@poemm/evm384-interface-update"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.681818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mratsim",
                    "index": "9",
                    "likes": "1",
                    "time": "24/09/2020-08:29:28",
                    "content": "Posting my comment from the Discord channel: (edited 2 links per user  If jwasinger\u2019s EIP1962 (github/jwasinger/eip1962/tree/f472efd5911f395352594bfee13f9fedf14dce1f) is derived from the same code as https://github/kobigurk/wasm_proof it is missing a significant amount of optimizations. State of the art pairing on BLS12-381 should be between 0.650ms to 0.9ms  on 3.0+GHz CPUs from the past 6 years with either MCL github/herumi/mcl or BLST github/supranational/blst or even Consensys Gurvy github/ConsenSys/gurvy or Kilic\u2019s Go implementation github/kilic/bls12-381 Kilic\u2019s EVMBLS might be worth looking at as well (but BN254 github/kilic/evmbls) Here is a short review of wasm_proof algorithms: https://github.com/vacp2p/research/issues/7#issuecomment-690083000 with items worth 10% to 2200% performance boost that are applicable at a high-level (i.e. no assembly).  So given your base speed of 5.5ms image1173\u00d71130 30.2 KB  I\u2019m confident we can get significantly faster than the Rust native code.         ",
                    "links": [
                        "https://github.com/vacp2p/research/issues/7#issuecomment-690083000",
                        "https://ethereum-magicians.org/uploads/default/original/2X/c/c29f9c55d22bd75a8c139e934a3aacb71d02ebd3.png"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.931818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "10",
                    "likes": "0",
                    "time": "02/10/2020-14:59:31",
                    "content": "To keep things in one place simple tower structure updates for 1962 would give the following numbers without the subgroup checks, on-curve checks, ABI parsing, etc. and without the turbo-boost (that affects numbers by 30%). test bench::bls12_381_engine::bench_bls12_381_engine_pair_2                             ... bench:   3,127,921 ns/iter (+/- 22,700) test bench::bls12_381_engine::bench_bls12_381_engine_pair_4                             ... bench:   4,318,937 ns/iter (+/- 36,437) test bench::bls12_381_engine::bench_bls12_381_engine_pair_6                             ... bench:   5,489,411 ns/iter (+/- 37,720)  Regarding implementations and potential optimizations:  it uses empty extra bits in field representation fused multiplication and reduction is not used to have simpler implementation (it\u2019s a generic library at the end of the day) no addition chain in Miller loop (same - generality). Addition: looks like e.g. BLS12-381 addition chain is of length 72, while naive miller loop is 64 doublings and 6 additions, so it\u2019s not obviously necessary for all of the cases Fp6 multiplication is sparse Lazy reduction is not used (was not even aware of this optimization actually)  So 1962 implementation can be considered as \u201ckind of convenient tool for playing\u201d but should not be considered as the fastest one in a west. Assembly alone would provide 40% benefit in speed and most likely would bring it very close to other example above. Extra 10% most likely can be shaved on quite a few allocations inside  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.113095238095237
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mratsim",
                    "index": "11",
                    "likes": "0",
                    "time": "02/10/2020-18:09:10",
                    "content": "My current benchmarks are: Clang + Assembly image1625\u00d7644 90.5 KB Clang without Assembly (30% slowdown) image1625\u00d7662 97.1 KB GCC without Assembly (100% slowdown) image1624\u00d7666 97.6 KB CPU has a 3.0GHz nominal clock but is overclocked at 4.1GHz all core turbo and I have a warmup to ensure I\u2019m running at 4.1GHz before bench. You need to scale the time/clock/throughput by 4.1/3 for comparison. The discrepancy between Clang and GCC in no assembly is because GCC is just bad at bigints. Note that my numbers are for a single pairing, multi-pairing is not implemented yet. N-way pairing would be N * Miller-loop + 1 final exponentiation. So using Clang without assembly would take about 1.8ms as it stands with/without the following optimizations:  no extra bits, use full word bitwidth (which lead to carries which GCC doesn\u2019t properly deal with without assembly) no assembly CIOS or FIPS multiplication (those are generics to all fields like the separate mul and reduce, called SOS) no addition chain in Miller loop addition chain in final exponentiation by x addition chain for inversion Towering is Fp -> Fp2 -> Fp4 -> Fp12 (mostly because I had trouble debugging line functions with Fp6 towering) Sparse Fp12 x line multiplication no lazy reduction (didn\u2019t work for me, will revisit) projective coordinates with constant-time formulae no fused line evaluation and elliptic addition/doubling mixed addition in Miller loop  BLST on my machine is https://github.com/status-im/nim-blst/issues/1 Pairing (Miller loop + Final Exponentiation)                   1315.289 ops/s       760289 ns/op      2280892 cycles Pairing (Miller loop + Final Exponentiation) MULX/ADOX/ADCX    1639.054 ops/s       610108 ns/op      1830347 cycles  MCL has a recent PR that fixed inversion and takes a similar amount of time 1.9 Mcycles so about 630 ns/op. Note: scaling factor between my overclock and the nominal clock. I expect my biggest contributor to my 20% diff with BLST and MCL is that they are using the Fp6 line evaluation formulas that fused line evaluation and point doubling/addition. They don\u2019t exist in straight line code for Fp4 so I didn\u2019t get to implement them yet (though I\u2019ll likely switch back to Fp6). So in conclusion from @shamatar\u2019s post and mine I think 2ms double-pairing for native code is a reasonable baseline to compare the EVM against. Also many of those optimizations are generic and portable to the EVM except addition chains which like @shamatar mentions doesn\u2019t save that much for BLS12-381 (a couple thousand cycles out of 2 millions) Additionally the code for Zexe supports all required curves and has underwent significant optimizations, including assembly code generation and can be use for benchmarks or also as an extra implementation to test against: https://github.com/scipr-lab/zexe/issues/162 ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/9/90c1368c1811f546262d7d5d500bdd331b3df11d.png",
                        "https://ethereum-magicians.org/uploads/default/original/2X/e/e78640f3d998232a7eec0c3008837adc91d026e8.png",
                        "https://github.com/status-im/nim-blst/issues/1",
                        "https://github.com/scipr-lab/zexe/issues/162"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.292328042328043
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shamatar",
                    "index": "12",
                    "likes": "0",
                    "time": "02/10/2020-20:38:49",
                    "content": "Did anyone try to explore partial Montgomery reduction for BLS12-381? It has enough space at the top of the highest limb, so some additions/subtractions can be made branchless, same for Montgomery multiplication - final reduction can be avoided. I\u2019d suspect around 10-15% here. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.4
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mratsim",
                    "index": "13",
                    "likes": "0",
                    "time": "03/10/2020-15:29:42",
                    "content": "I use it. Not on my machine but IIRC without assembly I had 136 cycles without and 115 cycles with the optimization. MCL via LLVM IR has 122 cycles without the optimization. My basic Montgomery Mul with MULX, ADOX, ADCX + partial reduction is 88 cycles. AFAIK Geth also uses that optimization since Kilic\u2019s BLS12-381 was merged into Geth and does use it: https://github.com/kilic/bls12-381, https://github.com/ethereum/go-ethereum/pull/21018 BLST and MCL do not use that optimization. Zexe should use it. ",
                    "links": [
                        "https://github.com/ethereum/go-ethereum/pull/21018"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "14",
                    "likes": "0",
                    "time": "16/10/2020-15:07:22",
                    "content": "We have published a new update at    HackMD    EVM384 Update 3 - HackMD # EVM384 Update 3  [TOC]  ## Introduction  This EVM384 update is a follow-up to the [previous update      Spoiler: A lot of progress has been made on implementing the pairing operation on bls12-381: the miller loop is implemented, but the final exponentation is not yet. ",
                    "links": [
                        "https://notes.ethereum.org/@poemm/evm384-update3"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.94949494949495
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poemm",
                    "index": "15",
                    "likes": "2",
                    "time": "25/11/2020-00:57:41",
                    "content": "We have published a new update at https://notes.ethereum.org/@poemm/evm384-update4 Spoiler: BLS12-381 pairings implementation is done. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.681818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "16",
                    "likes": "0",
                    "time": "04/12/2020-12:40:23",
                    "content": "During the ETHOnline summit @poemm gave an overview of EVM384:    ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "17",
                    "likes": "2",
                    "time": "22/01/2021-20:03:42",
                    "content": "The next update discussing gas prices can be found at    HackMD    EVM384 Update 5: First Gas Cost Estimates - HackMD # EVM384 Update 5: First Gas Cost Estimates  Text jointly authored by (in alphabetic order by last n      ",
                    "links": [
                        "https://notes.ethereum.org/@poemm/evm384-update5"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poemm",
                    "index": "18",
                    "likes": "1",
                    "time": "19/03/2021-06:30:24",
                    "content": "@jwasinger implemented MiMC in EVM384. https://hackmd.io/bHRfQfWaRmuIbNLTEQ6fyg?view ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jwasinger",
                    "index": "19",
                    "likes": "0",
                    "time": "27/04/2021-06:43:34",
                    "content": "Here is a client implementation/benchmarking update: Go-ethereum Benchmark Update for EVM384 and Friends - HackMD .  Hopefully this can help client implementers and also help to tune the pricing model.  There is an issue with a compile-time blowup when I attempted to support 256 limbs as a maximum so I capped it at 128.  Hopefully this is just an implementation quirk that can be fixed fairly easily by someone with more Go experience. This is the remaining in-progress work I had with regards to EVM384 and I don\u2019t intend to do anything else on this project in the immediate future. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.291666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "20",
                    "likes": "1",
                    "time": "26/01/2023-13:10:05",
                    "content": "As an evolution of evm384, @jwasinger has published    EIP 5843: EVM Modular Arithmetic Extensions Core EIPs       This is a proposal to add EVM opcodes for efficient modular addition/subtraction/multiplication in cases where the modulus is odd, 1-1024 bits and fixed for many operations.  It is an iteration from previous work on EVM384.  It makes use of the following observations to construct a more efficient model for modular arithmetic operations in the EVM:   If the modulus is odd and fixed for multiple operations and we also precompute some values using it, caching these and the modulus in ephemeral ca\u2026     ",
                    "links": [
                        "https://ethereum-magicians.org/t/evm384-feedback-and-discussion/4533"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.388888888888888
                }
            ]
        }
    ],
    "group_index": "1121"
}