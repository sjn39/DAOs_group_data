{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-4931-generic-token-upgrade-standard/8687",
            "title": "EIP-4931: Generic Token Upgrade Standard ",
            "index": 8687,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/john-peterson",
                    "index": "1",
                    "likes": "1",
                    "time": "22/03/2022-20:41:38",
                    "content": "Token contract upgrades typically require each asset holder to exchange their old tokens for new ones using a bespoke interface provided by the developers. EIP-4931 allows for the implementation of a standard API for ERC20 token upgrades. This standard specifies an interface that supports the conversion of tokens from one contract (called the \u201csource token\u201d) to those from another (called the \u201cdestination token\u201d), as well as several helper methods to provide basic information about the token upgrade. There is also an extension optionally available to provide downgrade functionality. Upgrade contract standardization will allow centralized and decentralized exchanges to conduct token upgrades more efficiently while reducing security risks and enabling a frictionless user experience for anyone holding an ERC20 asset during an upgrade. The proposal - EIP-4931 EIP-4931 - Generic Token Upgrade Standard Reference Implementation ",
                    "links": [
                        "https://github.com/coinbase/eip-token-upgrade"
                    ],
                    "GPT-summary": "The post introduces the EIP-4931 proposal, which aims to standardize the process of upgrading ERC20 tokens. The proposal suggests an interface that allows the conversion of tokens from one contract to another, along with helper methods to provide information about the upgrade. The proposal aims to make token upgrades more efficient, reduce security risks, and provide a frictionless user experience. The post also includes a reference implementation of the proposal. The post does not advertise the proposal, ask for collaboration, or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "Privacy, Security and risk management",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.372960372960373
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "2",
                    "likes": "0",
                    "time": "05/04/2022-15:57:39",
                    "content": "Would previous and next be better descriptions for the contracts (instead of source and destination)? Since ratio() returns a tuple, it somewhat limits the conversion rate, and I think its purpose is served by computeUpgrade and computeDowngrade. I think it could be removed? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.555555555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cygnusv",
                    "index": "3",
                    "likes": "0",
                    "time": "13/04/2022-16:14:08",
                    "content": " Would previous and next be better descriptions for the contracts (instead of source and destination)?  Perhaps, we went with source and destination because they were more immediate terms for us at that moment, but there may be other alternatives, e.g., previous/next, original/updated, etc. I guess this may be fairly subjective.  Since ratio() returns a tuple, it somewhat limits the conversion rate, and I think its purpose is served by computeUpgrade and computeDowngrade. I think it could be removed?  The purpose of ratio() is informational (that is, being able to clearly state from the contract that this upgrade is, say, a 3-to-2 conversion), but ratio() is not meant to be used directly, as there are many pitfalls for users of the contract that can be solved if the amount that wants to be converted is tried first via computeUpgrade and computeDowngrade. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.274305555555556
                }
            ]
        }
    ],
    "group_index": "1661"
}