{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-5732-commit-interface-to-support-commit-reveal-schemes/11115",
            "title": "ERC-5732 Commit Interface to support commit-reveal schemes ",
            "index": 11115,
            "category": [
                "EIPs"
            ],
            "tags": [
                "erc-721",
                "erc-20",
                "erc1155",
                "erc1202"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "1",
                    "likes": "0",
                    "time": "29/09/2022-19:23:44",
                    "content": "Hi all, I am proposing a simple commit interface to support commit-reveal schemes. See the PR here: Add EIP-5732: Commit Interface by xinbenlv \u00b7 Pull Request #5732 \u00b7 ethereum/EIPs \u00b7 GitHub  Links  Current published version: EIP-5732: Simple Commit Interface  Pending PRs Pull requests \u00b7 ethereum/EIPs \u00b7 GitHub    Open Questions  Will there ever be use-cases where the commit function needs a returns value? If so, how important do we see such use cases How shall we handle when a contract wallet is trying to make a commit? Should we add a address from parameter to the commit interface? How often do we see the use case for a contract wallet to need to commit?  ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5732",
                        "https://github.com/ethereum/EIPs/pulls?q=is%3Apr+is%3Aopen+eip-5732",
                        "https://ethereum-magicians.org/t/eip-1202-voting-interface-discussion-thread/11484"
                    ],
                    "GPT-summary": "The author is proposing a simple commit interface to support commit-reveal schemes and has provided a link to the PR. The post also includes open questions for discussion, such as whether the commit function needs a return value and how to handle contract wallets making a commit. A 3rd party could provide constructive criticism or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Not a proposal"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "2",
                    "likes": "0",
                    "time": "30/09/2022-04:48:21",
                    "content": "This specification assumes that somebody will want to consume this information, in a generic way, across multiple implementations. I\u2019m not seeing that spelled out anywhere. And I haven\u2019t seen evidence of such in the wild. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "3",
                    "likes": "0",
                    "time": "30/09/2022-05:35:34",
                    "content": "@fulldecent thank you for the feedback. I am not sure if I fully understand what you mean. Can you ellaborate? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.59375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "4",
                    "likes": "0",
                    "time": "30/09/2022-18:05:47",
                    "content": "The purpose of having a standard is that somebody else will want to interact with a contracts following that specification. For example ERC-20 creates fungible tokens. Other things interact with those tokens for DeFi, reporting, and tracking tools. (Those applications are probably all illegal, but I digress.) Such is a strong motivating factor for ERC-20 to be written up. If ERC-20 was not written up then DeFi, reporting tools would not be possible or there would be extreme effort required to do them. I would like to see a similar strong motivation for ERC-5732 to be a candidate for publishing. As such I don\u2019t see this. This topic comes up a lot so I have also published this concept at What kinds of things should be standardized? \u2013 William Entriken Blog ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.053030303030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "5",
                    "likes": "0",
                    "time": "30/09/2022-20:57:22",
                    "content": "Sure. Here is a real world example and prior use case of a commit-reveal: The Decentraland DAO explained | Decentraland Remember: You must wrap MANA and/or commit LAND/ESTATE before the proposal\u2019s creation block in order to be allowed to vote. You can\u2019t wrap MANA and vote if voting has already commenced.  Here is an other example GitHub - ConsenSys/PLCRVoting: Partial Lock Commit Reveal Voting System that utilizes ERC20 Tokens It can be supported by this standardization. The main use case is for Commit-Reveal of Voting, but it doesn\u2019t limit to voting. The way to pre-commit a future action can be general. The plan is to use this in combine this EIP with a few other executable trust establishing EIPs such as Smart Endorsement Legitimacy, Jurisdiction and Sovereignty Smart Proposal Plus the main voting standard EIP-1202: Voting Standard to create a fully operable on-chain governance ",
                    "links": [
                        "https://github.com/ConsenSys/PLCRVoting",
                        "https://eips.ethereum.org/EIPS/eip-5453",
                        "https://eips.ethereum.org/EIPS/eip-5247",
                        "https://eips.ethereum.org/EIPS/eip-1202"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.312324929971989
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "6",
                    "likes": "0",
                    "time": "06/10/2022-01:31:44",
                    "content": "@fulldecent I was just trying to buy a ENS domain and via the TX just stumble upon the ENS ETHRegistrarController.sol that uses a commit mechanism. To my surprise (or not supprisingly) the ETHRegistrarController happen to use the exact same method name function commit(bytes32) that I prose, except for that mine have a extra method.   github.com   ensdomains/ethregistrar/blob/916dff21bf427771e67af11611b811f870aa7200/contracts/ETHRegistrarController.sol#L79-82                                           function makeCommitmentWithConfig(string memory name, address owner, bytes32 secret, address resolver, address addr) pure public returns(bytes32) {                 bytes32 label = keccak256(bytes(name));                 if (resolver == address(0) && addr == address(0)) {                     return keccak256(abi.encodePacked(label, owner, secret));                 }                 require(resolver != address(0));                 return keccak256(abi.encodePacked(label, owner, resolver, addr, secret));             }                           function commit(bytes32 commitment) public {                 require(commitments[commitment] + maxCommitmentAge < now);                 commitments[commitment] = now;             }                           function register(string calldata name, address owner, uint duration, bytes32 secret) external payable {               registerWithConfig(name, owner, duration, secret, address(0), address(0));             }                           function registerWithConfig(string memory name, address owner, uint duration, bytes32 secret, address resolver, address addr) public payable {                 bytes32 commitment = makeCommitmentWithConfig(name, owner, secret, resolver, addr);                           Which is a good justification that someone will want to consume such information, e.g. a competing interface or automating interface will need to send commit if they want to register an ENS domain Here is the list of Ethereum mainnet activity of TX with commit https://etherscan.io/address/0x283af0b28c62c092c9727f1ee09c02ca627eb7f5?method=Commit~0xf14fcbc8 Inviting @Arachnid for comment ",
                    "links": [
                        "https://github.com/ensdomains/ethregistrar/blob/916dff21bf427771e67af11611b811f870aa7200/contracts/ETHRegistrarController.sol#L79-82",
                        "https://etherscan.io/address/0x283af0b28c62c092c9727f1ee09c02ca627eb7f5?method=Commit~0xf14fcbc8"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.503968253968254
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "7",
                    "likes": "0",
                    "time": "26/10/2022-04:28:11",
                    "content": "There are also two other design questions  Will there ever be use-cases where the commit function needs a returns value? If so, how important do we see such use cases How shall we handle when a contract wallet is trying to make a commit? Should we add a address from parameter to the commit interface? How often do we see the use case for a contract wallet to need to commit?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.458333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lanlan3322",
                    "index": "8",
                    "likes": "1",
                    "time": "26/10/2022-06:21:55",
                    "content": "Kleros (blockchain dispute resolution) might be a good use case for you to consider. Jurors voting for more than binary options might require return value during commit. But it would add security concerns during the handling of the returned value too. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 8.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "9",
                    "likes": "0",
                    "time": "01/11/2022-00:07:43",
                    "content": "Happy to hear that. Look forward to collaboration ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 9.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "10",
                    "likes": "0",
                    "time": "07/11/2022-22:12:41",
                    "content": "I have addressed some copy editing issues in Address some copy editing issues by fulldecent \u00b7 Pull Request #5890 \u00b7 ethereum/EIPs \u00b7 GitHub  There are some serious problems in this DRAFT which need to be addressed to be even a specification. First, the specification requires that commitments have timestamps which are STRICTLY INCREASING. This means two commits cannot happen in the same block. The proposed reference implementation does not follow any of the proposed best practices identified in the standard. This is not a reference implementation. The text states that \u201cDo not use the reference implementation in production\u201d. This is a red flag and means that it is not a reference application. Please produce an actual reference implementation. But you are welcome to say \u201cdon\u2019t use the DEMO APPLICATION IN PRODUCTION\u201d. Much better still would be to demonstrate that the author is capable of making something useful with the proposed specification. secret_salt is unspecified. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.234848484848485
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "11",
                    "likes": "0",
                    "time": "08/11/2022-19:54:12",
                    "content": "Thank you @fulldecent for the suggestion and reviewing.  First, the specification requires that commitments have timestamps which are STRICTLY INCREASING. This means two commits cannot happen in the same block.  This is a great. I addressed it in my comment on your PR, in particular, Address some copy editing issues by fulldecent \u00b7 Pull Request #5890 \u00b7 ethereum/EIPs \u00b7 GitHub The text states that \u201cDo not use the reference implementation in production\u201d. This is a red flag and means that it is not a reference application. Please produce an actual reference implementation. But you are welcome to say \u201cdon\u2019t use the DEMO APPLICATION IN PRODUCTION\u201d.  I wish to! However Currently EIP editor group enforce a very strict policy and it\u2019s very hard to link to actual implementation from EIP. I\u2019d rather just remove reference implementation in this case. Most solidity code are nowhere near production on ERCs in general and my impression that when I and other ERC authors use \u201creference implementation\u201d they mean more of proof of concept rather than battle tested code. I do like  your better wording \u201cdon\u2019t use the DEMO APPLICATION IN PRODUCTION\u201d.  secret_salt is unspecified.  There is sentence in the second from last requirement in the spec when talking about reveal function.  But there MUST be a way to supply an extra field of secret_salt , so that committer can later open the secret_salt in the reveal TX that exposes the secret_salt . The size and location of secret_salt is intentionally unspecified in this EIP to maximize flexibility for integration.  And the reason is articulated in Rationale. We intentionally keep it open. Again, thank you so much for editing and reviewing, let me know if you have any other unaddressed comments! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.633413461538462
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "12",
                    "likes": "0",
                    "time": "10/11/2022-19:27:34",
                    "content": "Hi @fulldecent thank you for the help. With PR 5910 and PR 5909  The editorial suggestions are accepted and incorporated. The specification ambiguity about \u201cSTRICTLY INCREASING\u201d is clarified. The question that secret_salt is unspecified is clarified The demo reference implementations are removed, the only one left is ENS\u2019s actual implementation.  By now I believe I\u2019ve addressed all your feedbacks. Thank you very much! For you and everyone else, please let me know if there are any other suggestions / feedback for this EIP before we finalize it ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5909"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.2
                }
            ]
        }
    ],
    "group_index": "145"
}