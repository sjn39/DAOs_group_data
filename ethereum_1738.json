{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5081-expirable-transaction/9208",
            "title": "EIP-5081: Expirable Transaction ",
            "index": 9208,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "gas"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "1",
                    "likes": "0",
                    "time": "08/05/2022-23:12:13",
                    "content": "Hi all, I started a draft for 5081 as a re-pursueing the transaction expiration. Please find the draft content here: Create eip-5081.md Expirable Transaction by xinbenlv \u00b7 Pull Request #5081 \u00b7 ethereum/EIPs \u00b7 GitHub Here is a list of previous attempt to pursue the transaction expiration.  EIP pull request 599  EIP-2711: Separate gas payer from msg.sender #2711, it\u2019s withdrawn  EIP-2718: Typed Transaction Envelope #2718 diverted from the purpose of expiring transactions.  Add temporal replay protection #1681 stagnant and I don\u2019t think there is a reliable way to use clock/ timestamp EIP pull request 773 Transaction Expiration Init EIP  Please conment in this trhead. TODO: consider creating a follow up network EIP to add gosspi_ttl ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/599",
                        "https://github.com/ethereum/EIPs/pull/2711",
                        "https://github.com/ethereum/EIPs/pull/2718",
                        "https://github.com/ethereum/EIPs/pull/1681",
                        "https://github.com/ethereum/EIPs/issues/773",
                        "https://ethereum-magicians.org/t/transaction-expiration-initial-eip-proposal/8118"
                    ],
                    "GPT-summary": "The author of the post is sharing a draft proposal for an Expirable Transaction and is asking for feedback from the community. They also provide a list of previous attempts to pursue transaction expiration. A 3rd party could give constructive criticism or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Not a proposal"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 4.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "2",
                    "likes": "0",
                    "time": "09/05/2022-00:06:58",
                    "content": "In response to  @MicahZoltu\u2019s comment about DoS attack in which I quote here:  Expiring transactions run into the problem of opening up an attack vector against the chain because someone can submit a transaction (which results in it being propagated around the network, which is not free) and then they end up not having to pay anything in the end. In general, we want every transaction that is propagated to result in a non-trivial cost to the sender. One option to work around this is to have an expired transaction still be includable, but it would just cost 21,000 gas and otherwise do nothing. The 21,000 gas is to cover signature validation, cold account loading, balance read, and balance write. Maybe it could be a little less, since there is guaranteed to be no second account loaded (recipient).  One solution I can think if is to suggest (but not require) propagating nodes initialize a gossip_ttl and deduct at their choice in the unit of blocknum. The node will only propagate tx that is far enough away from the expire_by blocknum (at least gossip_ttl blocks ahead).  In this way, a malicious transaction signer will risk causing transaction fees should their tx are executed within blocknum A malicious transaction signer\u2019s tx will not be include for propagation if it\u2019s after or too close from expiring. A malicious node who ignores gossip_ttl from other node will be waiting their network / processing resource because their receipient of propagation might drop that tx. Choosing the unit of gossip_ttl to be in blocknum so that propagating nodes with different network behavior protocols can make their choice in this unified way, because gossip_ttl is not network protocol-specific. Giving control of initializing and deducting gossip_ttl to nodes also gives flexibility for them to come up with dynamic solutions for their network nature.  Credit to: @Arachnid who originally think a concept of gossip_ttl. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 4.623511904761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "3",
                    "likes": "0",
                    "time": "09/05/2022-07:00:22",
                    "content": "I have two problems with a suggested TTL:  If the default behavior is to drop transactions, then the attack vector exists even if people can choose to not drop the transaction. Currently, miners could choose to drop transactions that fail but they don\u2019t, because it is profitable to include them.  This would still be true after this change and it is against a miner\u2019s interest to drop a transaction that they could include.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "4",
                    "likes": "0",
                    "time": "09/05/2022-07:15:48",
                    "content": "Thank you Micah. I could understand Point 1   If the default behavior is to drop transactions, then the attack vector exists even if people can choose to not drop the transaction.   But could you help me better understand the Point 2 why it\u2019s profitable to include them for miners?   Currently, miners could choose to drop transactions that fail but they don\u2019t, because it is profitable to include them. This would still be true after this change and it is against a miner\u2019s interest to drop a transaction that they could include.   If we say that any tx.expire_by can be included in a block, but with a failed status and charged fee, then yes, miners are incentivized to include that tx that fails. But this is not what we choose. In EIP-5081, I intend to rule this type of tx out completely as invalid tx. Help me understand in this case is miner still incentive to keep expired tx? It\u2019s not very obvious to me so. I humbly believe no. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "0",
                    "time": "09/05/2022-07:29:35",
                    "content": "Sorry, (1) applies if the transactions become invalid, (2) applies if the transactions remain valid. If the transaction becomes invalid, then the attack vector is that someone can submit a bunch of transactions that they know won\u2019t be included and the network has to pay to gossip them but the attacker doesn\u2019t have to pay anything other than the cost to construct and send them. If the transaction remains valid, then miners will include them because it is profitable. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 3.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "6",
                    "likes": "1",
                    "time": "09/05/2022-08:20:18",
                    "content": "    MicahZoltu:  (1) applies if the transactions become invalid   Let me clarify: Yes the current snapshot of EIP-5081\u2019s intended behavior is (1) that tx becomes invalid. Plus suggesting but not require that node not only drop already invalid tx, but also drop soon-to-expire tx. The threshold of how soon can be decided by implementation of that particular instance of gossip-protocol that the node run. If that node decide that current block num is too close to the expire blocknum. In this case, the tx will be dropped. The introducing of expire_by creates three scenarioes worth of discussion:   that attackers could send many already-expired tx e.g. specify a expire_by that is smaller than the current block number: to my understanding, a tx being invalid due to expiration, is no different other scenarios that renders a tx invalid, e.g. colliding nonce. I\u2019d assume our network protocol is already well handling this problem as a solved one. (I will come back with a question about knowledge of the current network protocol though)   that attackers could send many soon-to-expire tx: In this case, since some of these TXs will expire during the time of propagation, but also some of these TXs will arrive and be mined un-expired, that causes some costs for attackers. The risk is that the sooner these TX set for the blocknum, the more often such TX expiration happens during propagation. Now if we suggest each node to at least set some threshold before which they will stop propagating the TXs, but it\u2019s up-to-them to decide how big such threshold to be.   that attackers sends too many not expiring soon TXs, e.g. with a very large blocknum. These TXs are no different than not specifying an expire_by, just like today\u2019s valid TXs.   Now comes back to my question about the gossip protocol: what\u2019s the current way of incentive for nodes to propagate tx? What incentives do nodes get that motivates them to choose whether or not to propagate a tx? The best reference I could find is the devp2p/eth.md#transaction-exchange  When new transactions appear in the client\u2019s pool, it should propagate them to the network using the Transactions and NewPooledTransactionHashes messages. The Transactions message relays complete transaction objects and is typically sent to a small, random fraction of connected peers.  It seems all tx will be propagated is just because the protocol mandates conveniently that all tx in the node\u2019s local pool shall be querieable by that node\u2019s connected peers. But it doesn\u2019t seem obvious to me will there ever be any mechanism that stops specific version of implementation of nodes to ignore a transaction outright and reject propagating a particular transaction. Technical, dropping a tx can happen in the following stage [source[(devp2p/eth.md at 26e380b1f3a57db16fbdd4528dde82104c77fa38 \u00b7 ethereum/devp2p \u00b7 GitHub)  On receipt of a NewPooledTransactionHashes announcement, the client filters the received set, collecting transaction hashes which it doesn\u2019t yet have in its own local pool.  Maybe one way is to in addition to maintain just one transaction pools, also maintain a separate pools of tx that a node is aware of, but decided not worthy of propagating because of too soon to expire, let\u2019s call it TooSoonToExpireTxPool (TSTETP). So any request to get a hash fall in that TSTETP will be rejected with some status code and hence stops propagation. ",
                    "links": [
                        "https://github.com/ethereum/devp2p/blob/26e380b1f3/caps/eth.md#transaction-exchange",
                        "https://github.com/ethereum/devp2p/blob/26e380b1f3/caps/eth.md#transactions-0x02",
                        "https://github.com/ethereum/devp2p/blob/26e380b1f3/caps/eth.md#newpooledtransactionhashes-0x08",
                        "https://github.com/ethereum/devp2p/blob/26e380b1f3/caps/eth.md#transaction-exchange"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.318894520114032
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "7",
                    "likes": "0",
                    "time": "09/05/2022-09:06:55",
                    "content": "The problem is that users can construct transactions that are valid to gossip but unlikely to be mined.  For example, you can set the max fee to something small.  With never expiring transactions, you will eventually have to pay for that transaction (or a more expensive one).  With expiring transactions, the same transaction would gossip and then expire out of the mempool and no fee would be paid. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "8",
                    "likes": "0",
                    "time": "10/05/2022-08:13:33",
                    "content": "that is scenario #2 which is resolved by node maintaining its \u201cdrop in advance\u201d threshd(gossip_ttl) to reduce such risk, i wonder if I made my argument clear. If attacker set a low price but a very far away expire date, as if it will next expire, it is essentially scenario 3 which already exists in today\u2019s case: attack risks such tx to actually be executed and incurs costs? Maybe we could have a live discussion if that helps? I\u2019ve apply to sign up this EIP for May 13 coredev meeting, will you be there this week? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.2035353535353535
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "9",
                    "likes": "0",
                    "time": "10/05/2022-09:13:02",
                    "content": "The cost is born as soon as the transaction is gossiped across the network, which only takes a handful of seconds.  If the transaction is dropped from the pool later, the network has already eaten the majority of the operational cost of that transaction. You are correct that someone can lowball a transaction today and then hope that it falls out of the mempool.  However, mempool sizes are incredibly variable between different node operators, with some running mempools that are incredibly large and they will rebroadcast (or include in a block) transactions that fell out of many people\u2019s mempools.  This gives some attack protection because it is not possible for the transaction author to know whether their transaction has in fact been dropped from the pool or not, so they may not be able to replace their transaction without a fee increase across the network. With expiring transactions, the transaction author knows with certainty when a transaction is no longer valid and this occurs at a well defined point in time across the whole network.  This gives an attacker a huge advantage over the current situation because they know exactly when they can submit a new transaction (without a gas price bump) and have it override their previous transaction. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.047850958565244
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "10",
                    "likes": "0",
                    "time": "12/05/2022-19:29:40",
                    "content": "Agreed and understand that even low ball transactions today and hope it falls out. How do you like the idea of suggest / require client implement some approach to drop near-expire transaction? E.g. if propagation takes about O(10s) max, make any TX to be dropped in Mempool from (expired_by - gossip_ttl) whereas gosspi_ttl = 2 ~ 4 (blocks) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "11",
                    "likes": "0",
                    "time": "13/05/2022-05:34:51",
                    "content": "I think you still end up with the same problem that someone can just game the expiration time.  Make a transaction that will expire a few seconds after whatever expiration would allow the attacker to be confident that the transaction has propagated across the whole network. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.1
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "12",
                    "likes": "0",
                    "time": "13/05/2022-15:39:23",
                    "content": "A presentation for further the discussion of EIP-5081   docs.google.com    EIP-5081 Expirable Transaction EIP-5081 Expirable Transaction First Feedback Requested Zainan Victor Zhou (xinbenlv@github) 2022-05-13 for Ethereum Core Devs Meeting      Please comment here in the ethereum-magician thread ",
                    "links": [
                        "https://docs.google.com/presentation/d/1XuXuF-TFVKT1Q_GEd0lOS8o7Ff2RmUG_rjF63JQlF_Y/edit#slide=id.g12a091fd80b_0_35",
                        "https://docs.google.com/presentation/d/1XuXuF-TFVKT1Q_GEd0lOS8o7Ff2RmUG_rjF63JQlF_Y/edit#slide=id.g12a091fd80b_0_35"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "13",
                    "likes": "0",
                    "time": "15/05/2022-06:55:45",
                    "content": "@MicahZoltu hey Micah, thank you for your feedback, while I am still working on resolving the security issue, since you previously have pursued this issue, do you mind to consider co-author or advice this EIP? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party wanting to collaborate on proposal"
                    ],
                    "Sentiment": 4.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "14",
                    "likes": "0",
                    "time": "17/05/2022-05:26:58",
                    "content": "Lets wait to add me as an author until the EIP is further along so I can decide whether it is something I support or not.    I\u2019m a big fan of expiring transactions, but I am concerned about the denial of service vector introduced and at the moment I would still rather see expiring transactions still end up on-chain, just at very low gas cost (less than 21,000 gas for expired transaction).  It is possible I could be convinced that free expiration could work, but at the moment I\u2019m not. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.194444444444445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Brayton",
                    "index": "15",
                    "likes": "0",
                    "time": "17/05/2022-07:47:44",
                    "content": "I think there\u2019s two questions at heart here:   Should users be charged for included/attempted expired transactions?   Does it matter if the charge is < 21,000 gas or > 21,000 gas?   Imposing a non-zero cost will penalise spam and generally internalise the externalities: post-1559 miners are unlikely to receive much benefit from intentionally included these tx if they\u2019ve been holding onto them for quite some time and let them expire. The user is harmed more than the miner benefits. This perhaps prevents miners/validators from including very short-lived transactions, then propagating them, such that they\u2019re valid for the originating miner yet invalid for all others. Given that users who benefit from expiring transactions will likely benefit quite a bit, I\u2019d guess they\u2019ll be fine if the cost is much greater than 21,000 gas. If post-London 5% of Uniswap tx revert, costing perhaps ~60,000 gas, then it should be fine if expiring tx are more expensive than non-expiring. It\u2019s less fun, since the whole purpose of expiring tx are to expire some of the time. I\u2019d rather get them as low as safe of course. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.769607843137255
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "16",
                    "likes": "0",
                    "time": "17/05/2022-12:34:18",
                    "content": "    Brayton:  Given that users who benefit from expiring transactions will likely benefit quite a bit, I\u2019d guess they\u2019ll be fine if the cost is much greater than 21,000 gas. If post-London 5% of Uniswap tx revert, costing perhaps ~60,000 gas, then it should be fine if expiring tx are more expensive than non-expiring. It\u2019s less fun, since the whole purpose of expiring tx are to expire some of the time.   I think we can do less than 21,000 gas.  21,000 gas covers signature validation, loading two accounts from storage, updating the nonce and balance of one account and the balance of the other account, and then writing both accounts back to storage. An expired transaction needs to cover signature validation and loading, updating, and storing one account.  I don\u2019t know what the exact cost would end up being, but it should be strictly less than 21,000 because we only need to load/store a single account. It is worth noting that an expired transaction can also be used as a cancellation transaction that costs less than current cancellations (21,000 gas), so we would kill two birds with this one change. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.400062656641604
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "17",
                    "likes": "0",
                    "time": "17/05/2022-17:45:40",
                    "content": " Lets wait to add me as an author until the EIP is further along so I can decide whether it is something I support or not.  I\u2019m a big fan of expiring transactions, but I am concerned about the denial of service vector introduced and at the moment I would still rather see expiring transactions still end up on-chain, just at very low gas cost (less than 21,000 gas for expired transaction). It is possible I could be convinced that free expiration could work, but at the moment I\u2019m not.  Thanks Michah! I understand that you like the idea of tx expiration, but unconvinced if it can go free of charge to avoid DoS. Can I try to summarize the current question of design and the (partial) consensus among us?:   Priority: Is Expirable Transaction high priority?  My understand is that you @MicahZoltu and I @xinbenlv  have consensus that it\u2019s relatively high. Other core developers needs convince or proof that the cost to implement is lower than the priority. I am a bad writer of motivation, and since you @MicahZoltu  authored Typed Transaction (2718), can you help with your experience to write / suggest better motivation use-cases / argument for this EIP?   Cost: Should we let expired TX stay on chain or can we leave it out free? Can I try to validate if we have the following consensus among us: @Brayton @MicahZoltu, @xinbenlv    a) we should charge as little as possible Gas for expired transaction, if it that\u2019s required for avoiding DoS b) if the assumption holds that it\u2019s possible to avoid DoS and other side-effects of free expiration, we should allow transaction to go expired free.  Are these statements a good assumption of our current consensus? If so, I can further do the research on whether counter-DoS requires on-chain costs and come back. Any help is apprecated too. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.368672839506173
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "18",
                    "likes": "1",
                    "time": "18/05/2022-10:46:29",
                    "content": "    xinbenlv:  Priority: Is Expirable Transaction high priority? My understand is that you @MicahZoltu and I @xinbenlv have consensus that it\u2019s relatively high. Other core developers needs convince or proof that the cost to implement is lower than the priority. I am a bad writer of motivation, and since you @MicahZoltu authored Typed Transaction (2718), can you help with your experience to write / suggest better motivation use-cases / argument for this EIP?   It is often easier to show that an EIP is incredibly simple, rather than showing that it is incredibly valuable.  I suspect either solution for (2) would be quite easy to implement in any major client, and validating that with a reference implementation may be a good first step.  Perhaps this would be a good opportunity to give the new executable spec a try? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.221998834498834
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "19",
                    "likes": "0",
                    "time": "19/05/2022-05:11:45",
                    "content": "Sounds good, I will give it a try. I will start with the reference of the commit ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.5
                }
            ]
        }
    ],
    "group_index": "1738"
}