{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1285-increase-gcallstipend-gas-in-the-call-opcode/941",
            "title": "EIP-1285: Increase Gcallstipend gas in the CALL OPCODE ",
            "index": 941,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/ben-kaufman",
                    "index": "1",
                    "likes": "0",
                    "time": "03/08/2018-09:01:09",
                    "content": "Hey fellows  I\u2019ve created EIP-1285 which propose to increase the gas stipend given by the CALL OPCODE for a call to another contract for non zero value transfers. This proposal main motivation is to allow decent fallback logic for Proxy contracts. On average, a call to a Proxy costs about 800 to 1,000 gas units for the DELEGATECALL and SLOAD OPCODES (loading the address of the logic contract and forwarding the call. This is a severe issue when another contract calls the Proxy\u2019s logic contract fallback function. Currently, the EVM gives a stipend of 2,300 gas units to the contract to allow execution of its fallback function. This stipend is intentionally low in order to prevent the called contract from spending a lot of gas or attacking the caller contract (for example re-entrancy). This limitation shall allow some basic logic to be executed like using LOG. However, when using the proxy pattern, there are only about 1,300 gas units left for the actual logic execution. This is barely enough for a simple LOG, and from my own experience, it was enough for one LOG with a single, non-indexed parameter (it might allow a bit more in some cases, but still not enough for proper logic). EIP-1285 proposes to increase the given stipend from 2,300 to 3,500 gas units. You\u2019re welcome to share your thoughts and join that discussion here or on the issue linked below.   github.com/ethereum/EIPs     \t      EIP-1285: Increase Gcallstipend  in the CALL OPCODE            opened 12:39PM - 01 Aug 18 UTC               ben-kaufman               eip: 1285 title: Increase Gcallstipend gas in the CALL OPCODE author: Ben Kaufman <ben@daostack.io> status: Draft type: Standards Track category: Core created: 2018-08-01 Simple Summary Increase the Gcallstipend fee...         Please find the PR for the EIP here: EIP 1285: Increase Gcallstipend gas in the CALL OPCODE by ben-kaufman \u00b7 Pull Request #1286 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/1286",
                        "https://github.com/ethereum/EIPs/issues/1285",
                        "https://github.com/ethereum/EIPs/issues/1285",
                        "https://github.com/ben-kaufman",
                        "https://github.com/ethereum/EIPs/pull/1286"
                    ],
                    "GPT-summary": "The author of the post is explaining a proposal (EIP-1285) to increase the gas stipend given by the CALL OPCODE for a call to another contract for non-zero value transfers. The proposal's main motivation is to allow decent fallback logic for Proxy contracts. The post invites feedback and discussion on the proposal. A 3rd party could give constructive criticism or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.529448621553885
                }
            ]
        }
    ],
    "group_index": "1756"
}