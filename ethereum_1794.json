{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-3525-the-semi-fungible-token/9770",
            "title": "EIP-3525: The Semi-fungible Token ",
            "index": 9770,
            "category": [
                "Tokens"
            ],
            "tags": [
                "nft",
                "eip",
                "semi-fungible"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "1",
                    "likes": "6",
                    "time": "28/06/2022-14:04:37",
                    "content": "We proposed a Semi-fungible Token for define and implement customizable financial instruments, EIP-3525. This standard describes a new token format that have both ID and value property, where the ID property has the same semantics as ERC-721, and the value has the same meaning as ERC-20. The semi-fungibility of the tokens is defined by the SLOT property, when two tokens have the same SLOT, their value are fungible, that is: they can be add together like ERC-20 tokens do. This structure is best for defining flexible financial instruments, since one does not need to create a separate ERC-20 contract for each financial product. Also the value of the financial products can be manipulated in standard level, rather than treated separately at implementation level (like Uniswap V3\u2019s LP which is using ERC-721). ",
                    "links": [],
                    "GPT-summary": "The post proposes a new token format, EIP-3525, which combines the ID property of ERC-721 and the value property of ERC-20 to create semi-fungible tokens. The post explains how this structure is useful for creating flexible financial instruments and manipulating their values at a standard level. The post also invites feedback and questions about the proposal, and welcomes constructive criticism and auditing.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.516528925619834
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "2",
                    "likes": "1",
                    "time": "28/06/2022-14:24:51",
                    "content": "This is the discussion thread for ERC-3525, The Semi-fungible Token Standard. The newest proposal document can be found at Ethereum EIP repository: EIP-3525 This version introduces significant changes from the last version, including two major aspects:  Adopting the value/transfer conventional model as general ERC standards, remove the split/merge functions that are more related to business logic of apps Move some functions to optional interfaces, such as enumerable, etc.  Also the whole contents of the descriptions are completely revised. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.520292207792208
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/aram",
                    "index": "3",
                    "likes": "0",
                    "time": "02/07/2022-20:17:40",
                    "content": "Is my understanding correct that the difference with ERC1155 is that for a specific TokenID there can only be 1 owner, but there\u2019s a fungible value attached to each token? If yes, then will having a slot make this ERC effectively similar to ERC1155? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ymonk",
                    "index": "4",
                    "likes": "0",
                    "time": "04/07/2022-05:32:44",
                    "content": "ERC3525 serves a different purpose from ERC1155. The former is designed to represent financial instruments, the latter the game items. So if you have a ERC1155 token with a balance of 10, you have 10 identical items; while it\u2019s a ERC3525 token with a value of 10, you have one item with face value of 10. TokenID is universally unique, as which in ERC721. Slot is a set of attributes collectively determining the exact category of the token. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.160714285714285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "5",
                    "likes": "0",
                    "time": "04/07/2022-08:21:32",
                    "content": "The key logic of ERC-3525 is that \u2018an ID can have a value\u2019, and the slot is an technic to judge whether the values of different IDs are fungible to each other. The logic behind ERC-1155 is that \u2018an address can have several tokens of a certain ID\u2019. So that although the ID in ERC-1155 is somewhat like the slot concept in ERC-3525, in that a slot can have fungible values, but the token logic is very different. For example, ERC-3525 introduces ID-to-ID value transfer model(with the help of slot), in which IDs are treated as a value holder, quite like the role of an address. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.778061224489796
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ethean",
                    "index": "6",
                    "likes": "0",
                    "time": "07/07/2022-12:59:34",
                    "content": "We usually classify non-fungible objects by their features, such as branch, region, and year, to make them fungible. There are no two identical leaves in the world, but they are both, leaves. It makes sense that the crypto world needs semi-fungible token standard just as it needs ERC-20 and ERC-721. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "7",
                    "likes": "0",
                    "time": "27/07/2022-09:33:04",
                    "content": "\u201cSafe Transfer\u201d should not require the receiver have a specific function implemented, because this breaks compatibility with most existing wallets that don\u2019t support upgradability.  Almost every contract wallet supports the ability to call an external contract though, so using a registry will give far broader wallet support and doesn\u2019t require people replace their wallets to gain compatibility with this. I believe there is an EIP somewhere that defines a mechanism for this, but I forget its number. You might be able to use something like EIP-1820, but I recommend looking around to see if there is a standard specifically for this and compare them. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.916666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "8",
                    "likes": "0",
                    "time": "27/07/2022-09:48:13",
                    "content": "Thanks for that. We define a new ERC3525TokenReceiver only for those wallets as well as contracts that already specially support for EIP-3525, so that for these wallets they can call this special function when they transfer values rathe than ID to a contract. If the destination contract does not support EIP-3525, a wallet can simply call ERC-721\u2019s \u201cSafe Transfer\u201d to transfer a whole ID to that contract, and the contract just receives a ERC-721 token. Hope this explains the design purpose of ERC3525TokenReceiver. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.893320964749536
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "9",
                    "likes": "0",
                    "time": "27/07/2022-10:13:21",
                    "content": "The problem is that the caller may be a generalized contract (e.g., Uniswap) and the receiver may be a contract wallet that can make arbitrary calls but cannot implement arbitrary interfaces.  In this scenario, the caller will attempt to do a SafeTransfer and this will fail because the receiver hasn\u2019t implemented ERC3525TokenReceiver, even though the transfer would be perfectly safe because the receiver can make arbitrary contract calls. This pattern has been used in the past, and it is really bad for contract wallets because not every contract wallet has the ability to implement arbitrary interfaces (nor should they do so).  On the other hand, almost every contract wallet supports making arbitrary calls, so the registry pattern is compatible with basically all existing wallets. ERC-721 is one of the most well known bad actors here with their implementation of SafeTransferFrom which only allows transferring the token to contract wallets that have explicitly implemented ERC-721 support.  We should not be following the behavior of ERC-721 here and instead should be doing better than ERC-721. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.575
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "10",
                    "likes": "0",
                    "time": "27/07/2022-10:29:25",
                    "content": " ERC-721 is one of the most well known bad actors here with their implementation of SafeTransferFrom which only allows transferring the token to contract wallets that have explicitly implemented ERC-721 support. We should not be following the behavior of ERC-721 here and instead should be doing better than ERC-721.  Got the idea of your suggestion, we will discuss for that thoroughly. From this perspective, simply removing the obligation of calling ERC3525TokenReceiver in the standard also works, right? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.366071428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "11",
                    "likes": "2",
                    "time": "27/07/2022-11:48:14",
                    "content": "    will-edge:  From this perspective, simply removing the obligation of calling ERC3525TokenReceiver in the standard also works, right?   In general, I think it is better to leave the decision to do recipient protection up to the caller rather than having it as part of the token.  This allows for maximum flexibility and for the caller to utilize additional contextual information they have available to make such a decision. One can imagine a separate EIP that provides a mechanism for recipient checking (like a registry or introspection mechanism), and the caller can use that prior to making the call if they like, no need for the token to do anything special. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.884920634920635
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "12",
                    "likes": "2",
                    "time": "29/07/2022-08:04:40",
                    "content": "    MicahZoltu:  In general, I think it is better to leave the decision to do recipient protection up to the caller rather than having it as part of the token. This allows for maximum flexibility and for the caller to utilize additional contextual information they have available to make such a decision.   Yes, of course, we will make necessary changes in the proposal for both flexibility and recipient protection patterns. There is only one special scenario we need to consider: sometimes transferring of value will result in a new token to be created and transferred to the receiver, in this case, if the token is considered as a ERC-721 token (since ERC-3525 tends to be compatible with ERC-721) , whether the standard should force implementations to obey ERC-721\u2019s logic when SafeTransfer is called. Of course if we totally remove the \u2018Safe Transfer\u2019 pattern from this proposal, the above problem no longer exists, but I think we can/are possible to design a pattern for both compatible and flexible purposes. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.601461038961038
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "13",
                    "likes": "0",
                    "time": "11/08/2022-08:01:27",
                    "content": "Hi all, we are going to revise the value transfer model, by removing the SafeTransferFrom method, and introduce a \u2018Check, Notify and Response\u2019 model for better flexibility as well as simplicity.  Design decision: Notification/acceptance mechanism instead of \u2018Safe Transfer\u2019 EIP-721 and some later token standards introduced \u2018Safe Transfer\u2019 model, for better control of the \u2018safety\u2019 when transferring tokens, this mechanism leaves the choice of different transfer mode (safe/unsafe) to the sender, and may cause some potential problem:  In most situation the sender don\u2019t know how to choose between two kinds of transfer methods (safe/unsafe); If the sender calls the safeTransferFrom method, the transfer may fail when the recipient contract didn\u2019t implements the callback function, even if the recipient contract can receive and manipulate the token with no problem.  This EIP defines a simple \u2018Check, Notify and Response\u2019 model for better flexibility as well as simplicity:  No extra safeTransferFrom methods are needed, all transfer functions only need to obey the same logic; All EIP-3525 contracts MUST check for the onERC3525Received function if the receiver is a smart contract, when the function exists, they MUST call this function after the value transfer and check the result to decide whether the transfer should succeed or fail; Any smart contract can implement onERC3525Received function for purpose of being notified after receiving values, in this function it can return certain pre-defined value to accept the transfer, any other cases SHOULD cause the transfer to fail.  The corresponding interface definitions is as folows:  pragma solidity ^0.8.0;  /**  * @title EIP-3525 token receiver interface  * @dev Interface for any contract that wants to be informed by EIP-3525 contracts when receiving values from other addresses.  * Note: the EIP-165 identifier for this interface is 0x009ce20b.  */ interface IERC3525Receiver {     /**      * @notice Handle the receipt of an EIP-3525 token value.      * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the recipient contract, if the      *  recipient contract implements this function, the EIP-3525 contract MUST call this function after a       *  value transfer (i.e. `transferFrom(uint256,uint256,uint256,bytes)`).      *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,      *  uint256,bytes)'))`) if the transfer is accepted.      *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.      *  The EIP-3525 smart contract that calls this function MUST revert the transfer transaction if the return value       *  is not equal to 0x009ce20b.      * @param _operator The address which triggered the transfer      * @param _fromTokenId The token id to transfer value from      * @param _toTokenId The token id to transfer value to      * @param _value The transferred value      * @param _data Additional data with no specified format      * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))`       *  unless the transfer is rejected.      */     function onERC3525Received(address _operator, uint256 _fromTokenId, uint256 _toTokenId, uint256 _value, bytes calldata _data) external returns (bytes4);  }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.279285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "14",
                    "likes": "0",
                    "time": "17/08/2022-05:14:44",
                    "content": "Hi, We are going to move EIP-3525 to Last-Call, hope more suggestions from everyone, thanks! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/will-edge",
                    "index": "15",
                    "likes": "0",
                    "time": "17/08/2022-06:19:53",
                    "content": " \u201cSafe Transfer\u201d should not require the receiver have a specific function implemented, because this breaks compatibility with most existing wallets that don\u2019t support upgradability. Almost every contract wallet supports the ability to call an external contract though, so using a registry will give far broader wallet support and doesn\u2019t require people replace their wallets to gain compatibility with this.   I believe there is an EIP somewhere that defines a mechanism for this, but I forget its number. You might be able to use something like EIP-1820, but I recommend looking around to see if there is a standard specifically for this and compare them.  Now that we made it as a \u201ccheck, notify and response\u201d model, to give the choice and control of the transfer procedure to all parties: For the callers, they don\u2019t need to choose between TransferFrom and SafeTransferFrom, this will give most compatibility for all wallets, also prevent the failure of transfer when the caller calls the SafeTransferFrom but the recipient didn\u2019t implement ERC3525TokenReceiver. For the recipient, they can decide whether to implement ERC3525TokenReceiver, this gives the flexibility to wallets that cannot upgrade to implement arbitrary interfaces. This pattern also keeps the ability for the recipient to refuse receiving certain tokens. For the implementation contracts of EIP-3525, they must check for the existence of ERC3525TokenReceiver (e.g. via EIP-165) and call the interface respectively. This decouples the caller and recipient in the transfer procedure, give the flexibility to both parties. Further more, for mechanics like EIP-1820, it\u2019s actually compatible with above solution, since an EIP-3525 implementation can add a registry function to let any wallets to register its ERC3525TokenReceiver for calling on token transfer. In this case, a wallet need not to implement the ERC3525TokenReceiver so that it won\u2019t be called twice. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.632539682539682
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/GMADigitalBonds",
                    "index": "16",
                    "likes": "0",
                    "time": "05/01/2023-13:18:57",
                    "content": "Is this protocol open source? I can create an asset using this 3525?? Or is it more of those projects that only works in the hands of the developers themselves? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "17",
                    "likes": "0",
                    "time": "05/01/2023-14:17:53",
                    "content": "EIPs are public domain. You can always create your own implementation of any Standard Track EIP, including this one. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/YeeTsai",
                    "index": "18",
                    "likes": "0",
                    "time": "05/01/2023-14:47:09",
                    "content": "This is the reference implementation of ERC-3525.    GitHub    GitHub - solv-finance/erc-3525: ERC-3525 Reference Implementation ERC-3525 Reference Implementation. Contribute to solv-finance/erc-3525 development by creating an account on GitHub.      You can develop your implementation of ERC-3525 also. This is a step-by-step guide to get you started with the ERC-3525 reference implementation.    Medium \u2013 27 Dec 22    ERC-3525 Starter Kit: Developer Edition A basic framework for developing your own ERC-3525 Semi-Fungible Token to serve your unique use.  Reading time: 13 min read       ",
                    "links": [
                        "https://github.com/solv-finance/erc-3525",
                        "https://medium.com/solv-blog/erc-3525-starter-kit-developer-edition-9d734ca62bd0",
                        "https://medium.com/solv-blog/erc-3525-starter-kit-developer-edition-9d734ca62bd0"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.625
                }
            ]
        }
    ],
    "group_index": "1794"
}