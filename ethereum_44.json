{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-eip-5298-ens-trust-to-hold-tokens/10374",
            "title": "ERC/EIP-5298 ENS Trust to hold Tokens ",
            "index": 10374,
            "category": [
                "EIPs"
            ],
            "tags": [
                "erc"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "1",
                    "likes": "1",
                    "time": "14/08/2022-03:06:43",
                    "content": "Please find this proposal:  github.com/ethereum/EIPs         Create EIP-5298: ENS Trust to hold NFTs under ENS name   ethereum:master \u2190 xinbenlv:patch-19              opened 11:27PM - 20 Jul 22 UTC                 xinbenlv               +149 -0       Starting the file       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5300",
                        "https://github.com/xinbenlv",
                        "https://github.com/ethereum/EIPs/pull/5300/files"
                    ],
                    "GPT-summary": "The post is an announcement of a proposal for the creation of EIP-5298, which aims to establish an ENS Trust to hold NFTs under ENS name. The author is explaining the proposal and providing a link to the proposal on Github. A third party has given constructive criticism of the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Identity and reputation systems",
                        "Token economics",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "2",
                    "likes": "1",
                    "time": "15/11/2022-15:04:32",
                    "content": "A few thoughts:  Why not separate functions for EIP-721 and EIP-1155? Is EIP-1363 worth supporting? Why not remove all references to ENS and support an arbitrary bytes with arbitrary verification? Can a function that gets whether a user is authorized or not be added?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.15
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "3",
                    "likes": "0",
                    "time": "17/11/2022-15:02:55",
                    "content": "Thank you for the questions, @Pandapip1   Why not separate functions for EIP-721 and EIP-1155?   We are currently working on a general version of reference implementation, hopefully it will support EIP-1155 and EIP-721 plus EIP-20.   EIP-1363 worth supporting?   I love to be able to support ERC-20. Regarding how to support ERC-20 with safeTransfer type of form, I am debating between EIP-1363 vs EIP-4524 these two competing ERCs based on their adoptability.   Why not remove all references to ENS and support an arbitrary bytes with arbitrary verification?   Yeah, actually I am thinking of that too, I think ENS specific use case can be a good one to begin with, but we could generalize it to arbitrary bytes with arbitrary verification. Unsure if it should be done within this EIP or a separate EIP. Looking forward to your advice here.   Can a function that gets whether a user is authorized or not be added?   Yep, was thinking of using EIP-5982 Role-based Access Control, but not sure yet. Advice are appreciated! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.633333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "4",
                    "likes": "0",
                    "time": "18/11/2022-11:52:38",
                    "content": "    xinbenlv:  I love to be able to support ERC-20. Regarding how to support ERC-20 with safeTransfer type of form, I am debating between EIP-1363 vs EIP-4524 these two competing ERCs based on their adoptability.   EIP-1363 is final and is agnostic about contract accounts vs EOAs, whereas  EIP-4524 is not agnostic nor is it final. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "5",
                    "likes": "0",
                    "time": "18/11/2022-14:57:40",
                    "content": "I read 4524 also agnostic of EOA vs Contract account, no? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "6",
                    "likes": "0",
                    "time": "20/11/2022-17:46:12",
                    "content": "Well\u2026 EIP-4524 is stagnant. I like the function naming better, but to avoid this:  I suggest you use EIP-1363. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "7",
                    "likes": "0",
                    "time": "20/11/2022-18:18:37",
                    "content": "The debate between EIP-1363 vs EIP-4524 worth a separate debate, e.g.  ERC721 and ERC1155 has established safeTransferFrom as a naming convention that EIP-1363 is ignoring and create a new name transferAndCall. If the transferAndCall function is being used to only verify the recipient account being a contract account If the transferAndCall function is being used anything other than verifying the recipient account being a contract account, I think there is a lot of limitations of EIP-1363 for example,  the parameter choice and implied technical direction of EIP-1363 has significant restrictions, e.g.   the value of transfer(to, value, data) assume it can call the to but doesn\u2019t support specifying ether Value which makes it not able to support general case of a remote function call that includes ethers required. It also doesn\u2019t support extra data so it couldn\u2019t make a more flexible call It doesn\u2019t support a transfer call to specific which method inside of that recipient function to call, and restricting it to only onTransferReceived, renders it much less useful other than just verifying the recipient being an account, and instead introduced a lot of risk of re-entry attack.  In short, I am a bit hesitant to consider EIP-1363 ready to be massively adopted and thus hesitant to consider EIP-5298 to depend on EIP-1363. I do see there are some value to consider how to support a further call function after claiming. I am not sure if EIP-5298 needs to be opinionated about such call function or could just leave the choice entirely to implementor ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.18362977602108
                }
            ]
        }
    ],
    "group_index": "44"
}