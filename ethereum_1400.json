{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/durin-secure-offchain-data-retrieval/6728",
            "title": "Durin: Secure offchain data retrieval ",
            "index": 6728,
            "category": [
                "EIPs"
            ],
            "tags": [
                "data",
                "scaling"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "1",
                    "likes": "6",
                    "time": "27/07/2021-01:14:39",
                    "content": "This is a discussion thread for EIP 3668 - Durin: Secure offchain data retrieval. Durin is ENS\u2019s approach to supporting offchain lookups of data without requiring clients to understand how to query each possible data source. It\u2019s capable of being transparently integrated into client libraries such as web3 and Ethers in a way that doesn\u2019t require the application author to care about how queries are executed or where they source their data. Feedback on the EIP is very much appreciated. ",
                    "links": [],
                    "GPT-summary": "The post is a discussion thread for EIP 3668, which proposes Durin, a secure offchain data retrieval system for ENS. The author is seeking feedback on the proposal, which is explained in the post. Third parties are encouraged to provide constructive criticism, ask questions, and review the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Privacy, Security and risk management",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.035714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "2",
                    "likes": "0",
                    "time": "29/07/2021-01:17:49",
                    "content": "@Arachnid, this is a really well-structured proposal! Is \u201cprefix\u201d intended to be a code which changes per each query to the original contract, or at least unique given the caller and function parameters? The name of this may be confusing to some developers, although perhaps there is ample precedent in other smart contracts? If I understand \u201cprefix\u201d, the concept reminds me of \u201cauthorization codes\u201d used in cross-web-app redirects. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.349489795918368
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "3",
                    "likes": "1",
                    "time": "29/07/2021-02:29:51",
                    "content": "Basically, the prefix has to commit to the relevant parts of the query, so that the gateway can\u2019t provide a valid answer to a different query. A concrete example may help. Suppose you\u2019re implementing ERC20\u2019s balanceOf function using Durin: function balanceOf(address addr) public returns(uint256)  Your implementation wants the gateway to go off and get the result, with some proof data, and call this function: function balanceOfWithProof(address addr, uint balance, bytes memory proof) returns(uint256)  If the prefix specified by the first function were empty, the gateway could return a call to any function at all on the contract, which would be bad. If the prefix contains just the 4-byte function ID, the gateway would need to return a call to balanceOfWithProof, but it could have any arguments at all - meaning it could return a proof of the balance of a different account. If the prefix contains the function ID and the first argument, the gateway can only return calls with the correct address - so it no longer has the freedom to mislead the caller or the contract. This can be easily implemented in the contract by making the prefix the result of abi.encodeWithSelector(balanceOfWithProof, addr). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.368055555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "4",
                    "likes": "0",
                    "time": "29/07/2021-07:58:26",
                    "content": "Thanks for clarifying! I was off the mark. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/molekilla",
                    "index": "5",
                    "likes": "1",
                    "time": "01/08/2021-21:30:32",
                    "content": "@Arachnid I like the specs and I think I can help with, do you think this gateway if using multiformats / ipld can be the proof? More here Explaining XDV Protocol Explaining XDV Protocol. Here is the XDV Protocol architecture\u2026 | by IFESA | Jul, 2021 | Medium ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "6",
                    "likes": "1",
                    "time": "02/08/2021-01:10:04",
                    "content": "    molekilla:  do you think this gateway if using multiformats / ipld can be the proof?   The proof can be formatted any way that both the gateway and the contract agree on. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/juanfranblanco",
                    "index": "7",
                    "likes": "0",
                    "time": "03/08/2021-07:01:48",
                    "content": "So when we are executing transactions, we can pass a byte array collection of \u201cfunctions with Proofs\u201d that can be selected from the input? CallData[function balanceOfWithProof(address addr, uint balance, bytes memory proof) returns(uint256)] Also, do you envision the proof to be a signature that can be recovered? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "8",
                    "likes": "0",
                    "time": "03/08/2021-23:42:14",
                    "content": "    juanfranblanco:  So when we are executing transactions, we can pass a byte array collection of \u201cfunctions with Proofs\u201d that can be selected from the input?   I\u2019m not sure what you mean by this. The Durin gateway will return the call data for a single call or transaction, formatted to match the expectations of the contract that initiated a Durin call. It won\u2019t return an array of calldatas.     juanfranblanco:  Also, do you envision the proof to be a signature that can be recovered?   I expect that to be one common way to do things where the trust model permits it, but the proof can be anything - for example, a contract and gateway that connect to Optimism would contain merkle proofs against the Optimism state root on mainnet. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 3.8325892857142856
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "9",
                    "likes": "0",
                    "time": "06/01/2022-01:48:53",
                    "content": "I\u2019ve been working extensively on this EIP in conjunction with the Chainlink team, and I believe it\u2019s ready for use. I\u2019ve asked the editors to move it to Last-Call status. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "10",
                    "likes": "1",
                    "time": "08/01/2022-20:27:52",
                    "content": "Hi all, as I briefly mentioned on twitter (https://twitter.com/wighawag/status/1478999358968406018) the spec is currently not fully compatible with IPFS for these reasons:  404 errors won\u2019t be able to be json in case the ipfs url points to a non-existing file ipfs gateway\u2019s current way to handle mime-type seems to be in flux still. the go implementation (GitHub - ipfs/go-ipfs: IPFS implementation in Go) currently uses the following mechanism to detect mime type (as can be seen here : go-ipfs/gateway_handler.go at 7c76118b0b7026fba8357807e5a67b59fc2b684b \u00b7 ipfs/go-ipfs \u00b7 GitHub) :  check extension (which cause issues like : MIME type sniffing bug (filename prioritized over content?) \u00b7 Issue #4543 \u00b7 ipfs/go-ipfs \u00b7 GitHub) check for pattern in the content and for that recently switched from golang builtin http package - net/http - pkg.go.dev to GitHub - gabriel-vasile/mimetype: A fast Golang library for media type and file extension detection, based on magic numbers to detect the mime-type from the content of the file. While it supports json, it fill brittle. There has been some discussion on supporting mime-type as metadata in unixfs but I am not sure what the latest, see : State of UnixFS v2 \u00b7 Issue #86 \u00b7 ipfs/go-unixfs \u00b7 GitHub and ipld/fs.md at master \u00b7 ipld/ipld \u00b7 GitHub     Solutions: For 1. we could simply update the spec to not force the use of json in case of error. client simply look at the HTTP status code For 2, we could  A. assume json detection will work without extension needed to be added B. add in the spec that url need to finish with .json and assume the file name extension is a valid mechanism for ipfs gateway to detect mime-type (at least for json) C. do not force the use of application/json and simply assume the response is json.  ",
                    "links": [
                        "https://github.com/ipfs/go-ipfs",
                        "https://github.com/ipfs/go-ipfs/blob/7c76118b0b7026fba8357807e5a67b59fc2b684b/core/corehttp/gateway_handler.go#L518",
                        "https://github.com/ipfs/go-ipfs/issues/4543",
                        "https://pkg.go.dev/net/http#DetectContentType",
                        "https://github.com/gabriel-vasile/mimetype",
                        "https://github.com/ipfs/go-unixfs/issues/86#issuecomment-776469816",
                        "https://github.com/ipld/ipld/blob/master/_legacy/specs/data-structures/fs.md"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "11",
                    "likes": "1",
                    "time": "09/01/2022-23:04:57",
                    "content": "    wighawag:   404 errors won\u2019t be able to be json in case the ipfs url points to a non-existing file    Thanks - I already updated the spec to not require errors have application/json content-type.     wighawag:  ipfs gateway\u2019s current way to handle mime-type seems to be in flux still.   A better solution here might be to specify that the URL has a meta-variable that is replaced with the query - much like EIP 1155. I\u2019ll draft a change with this. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.4
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/serenae-fansubs",
                    "index": "12",
                    "likes": "0",
                    "time": "11/01/2022-16:47:01",
                    "content": "I posted this on the ENS discourse as well:  One example of a valid implementation of balanceOf would thus be:  function balanceOf(address addr) public view returns(uint balance) {     revert OffchainLookup(         address(this),         [url],         abi.encodeWithSelector(Gateway.getSignedBalance.selector, addr),         ContractName.balanceOfWithProof.selector,         abi.encode(addr)     ); }   Note that in this example the contract is returning addr in both callData and extraData , because it is required both by the gateway (in order to look up the data) and the callback function (in order to verify it). The contract cannot simply pass it to the gateway and rely on it being returned in the response, as this would give the gateway an opportunity to respond with an answer to a different query than the one that was initially issued.  Doesn\u2019t this open the door for poor/naive implementations where devs will fail to read the full spec and just rely on the correct response being returned? I notice this is pointed out below in the Security Considerations as well, but I\u2019m worried about a hasty implementer missing this. What if the original callData was also passed to the callback as well? (bytes originalCallData, bytes response, bytes extraData) That way the callback is always guaranteed to receive the original data. And then extraData can still be used for anything that your callback needs but that you don\u2019t want to send to the gateway (or other arbitrary contextual data). Or, do you think that would be inappropriate/superfluous for most cases? It seems like it would be helpful for the current balanceOfWithProof example at least. But it doesn\u2019t eliminate the problem: If verification is needed, implementers would still need to actually do that verification against originalCallData. Admittedly this also means that you would probably be passing additional information to the callback function that it wouldn\u2019t ever need, like Gateway.getSignedBalance.selector in this case. So yeah, now that I\u2019ve typed this out I can see the pros and cons, either way the dev is going to need to be aware of the security best practices here, and passing the original calldata might just be more overhead. Curious to hear your thoughts though! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.565476190476191
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/serenae-fansubs",
                    "index": "13",
                    "likes": "0",
                    "time": "11/01/2022-16:49:57",
                    "content": "It looks like the link in the initial post still points to the durin branch, and the latest changes @Arachnid made aren\u2019t merged in there (not sure if they\u2019re meant to be or not). The latest version of the spec is here I believe:  github.com   Arachnid/EIPs/blob/master/EIPS/eip-3668.md --- eip: 3668 title: \"CCIP Read: Secure offchain data retrieval\" description: CCIP Read provides a mechanism to allow a contract to fetch external data. author: Nick Johnson (@arachnid) discussions-to: https://ethereum-magicians.org/t/durin-secure-offchain-data-retrieval/6728 status: Review type: Standards Track category: ERC created: 2020-07-19 ---  ## Abstract Contracts wishing to support lookup of data from external sources may, instead of returning the data directly, revert using `OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData)`. Clients supporting this specification then make an RPC call to a URL from `urls`, supplying `callData`, and getting back an opaque byte string `response`. Finally, clients call the function specified by `callbackFunction` on the contract, providing `response` and `extraData`. The contract can then decode and verify the returned data using an implementation-specific method.  This mechanism allows for offchain lookups of data in a way that is transparent to clients, and allows contract authors to implement whatever validation is necessary; in many cases this can be provided without any additional trust assumptions over and above those required if data is stored onchain.  ## Motivation Minimising storage and transaction costs on Ethereum has driven contract authors to adopt a variety of techniques for moving data offchain, including hashing, recursive hashing (eg Merkle Trees/Tries) and L2 solutions. While each solution has unique constraints and parameters, they all share in common the fact that enough information is stored onchain to validate the externally stored data when required.       This file has been truncated. show original        Ethereum Improvement Proposals   EIP-3668: CCIP Read: Secure offchain data retrieval CCIP Read provides a mechanism to allow a contract to fetch external data.      ",
                    "links": [
                        "https://github.com/Arachnid/EIPs/blob/master/EIPS/eip-3668.md",
                        "https://github.com/Arachnid/EIPs/blob/master/EIPS/eip-3668.md",
                        "https://eips.ethereum.org/EIPS/eip-3668",
                        "https://eips.ethereum.org/EIPS/eip-3668"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.678571428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Krayola",
                    "index": "14",
                    "likes": "0",
                    "time": "12/01/2022-19:21:31",
                    "content": "So, in theory, the 3 step process will be only necesary the first time you want to call an offchainlookup related function right? If you called it once already and it returned you the gateway url info, the following times you need to call the original function you could skip step 1 and make a request to the gateway directly right? Or I am missing something? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.622767857142858
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "15",
                    "likes": "0",
                    "time": "12/01/2022-19:51:04",
                    "content": "    Krayola:  So, in theory, the 3 step process will be only necesary the first time you want to call an offchainlookup related function right? If you called it once already and it returned you the gateway url info, the following times you need to call the original function you could skip step 1 and make a request to the gateway directly right?   The contract determines the input data to the gateway - so you will always need to call the contract first in order to obtain the correct input data. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.904017857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/naomsa",
                    "index": "16",
                    "likes": "1",
                    "time": "14/01/2022-11:43:27",
                    "content": "Hi, sorry for the dumb questions, but some things are still unclear to me:  What does During means? Is there any live implementation we could take a look at? How can I query reverts and Errors from ethers.js or web3.js? When the user requests the off chain data, the call is reverted and then he needs to retrieve the results on another view call, right?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.433847402597403
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "17",
                    "likes": "1",
                    "time": "16/01/2022-20:55:03",
                    "content": "    naomsa:   What does During means?    It\u2019s the original codename for this standard.     naomsa:   Is there any live implementation we could take a look at?       github.com   GitHub - smartcontractkit/ccip-read at rewrite rewrite Contribute to smartcontractkit/ccip-read development by creating an account on GitHub.          naomsa:   How can I query reverts and Errors from ethers.js or web3.js?    Ethers throws an exception with error information in the exception object. See the ethers provider plugin in the above repository for a way to handle EIP 3668 contracts transparently to the JS code.     naomsa:   When the user requests the off chain data, the call is reverted and then he needs to retrieve the results on another view call, right?    That\u2019s right. All of this can be handled transparently for the user via the web3 library, however. ",
                    "links": [
                        "https://github.com/smartcontractkit/ccip-read/tree/rewrite",
                        "https://github.com/smartcontractkit/ccip-read/tree/rewrite"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.9023268398268405
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "18",
                    "likes": "0",
                    "time": "17/01/2022-21:45:54",
                    "content": "EIP-3668: CCIP Read: Secure offchain data retrieval  with @Arachnid      ",
                    "links": [
                        "https://www.youtube.com/watch?v=y7BDRt0zCJQ"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "19",
                    "likes": "0",
                    "time": "18/01/2022-17:32:08",
                    "content": "I\u2019m a little confused by the use of balanceOf as the example, as if implying that the ERC makes sense in that context. Such a contract would clearly not be ERC-20 compliant, right? Even if it is compliant technically it would simply not interoperate at all with the ERC-20 ecosystem. Might be worth using a different function for the examples? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.971230158730159
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hyperbart",
                    "index": "20",
                    "likes": "0",
                    "time": "20/01/2022-00:42:38",
                    "content": "Sorry for being very late to the discussion. I believe in its current iteration, EIP-3668 is a very dangerous feature. I think not having a global mechanism for verifying the validity of the gateway response is incredibly dangerous. Application-specific validation is just not good enough. Instead of having a blanket CCIP read, we should really have functions for off-chain merkle tree retrieval with built in verification. Same for verifying signatures. You could have a function verifySignatureFromUrl which returns you the signed message ONLY if it was signed by the trusted public key. Validation SHOULD NOT be application-specific. Same for merkle tree inclusion. There\u2019s really no good reason for not implementing built-in validation. Sure, just having a CCIP read call allows to swoop all of those use cases in one go, but it creates a glaring hole for abuse for anyone who will be using this for anything else rather than signature validation and merkle tree inclusion tests. Devs will most certainly use it as a weird half-baked oracle. Someone will probably build a protocol which entirely revolves on misusing this feature. There\u2019s a lot to be said about \u2018sane defaults\u2019 and this is not one of them. This feature will misguide newcomers and make them think you can just \u201cmagically\u201d read things from external gateways, and by having data inside EVM it suddenly becomes permissionless and fine to use. This feature will misguide web3 critics, who will think, just like in the case of ERC721 tokenURI, that you can just import any data from external gateway and do away with the trusted environment assumptions. The ERC271 tokenURI debacle was a bombshell when it was pointed out by Moxie in his article Moxie Marlinspike >> Blog >> My first impressions of web3  image1854\u00d7644 63.2 KB , this feature on its own will be just as much of a setback for the ecosystem as well. I really urge for the spec to have full bullet-proof validation of the inputs. I don\u2019t think it can become a ERC in the current way it is - it will be misused, abused, mocked by critics and ultimately be a huge detriment to web3. You could argue that CCIP read misuse tracking is something we outsource to contract auditors. I disagree. Contract auditing is a necessary evil, but we should avoid making a misguided protocol decisions which allow developers to shoot themselves and their users in the foot. I believe that having a more limited, but robust protocol is beneficial. Maybe we should have a special mark for any contract that uses EIP-3668. Perhaps to use this feature, you need to specify pragma ccip_read; so that users and devs can see straight away that this particular contract uses the feature and evaluate it accordingly. Cheers. ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/d/dcf930a255f0fed4cc4af739b33fbb019971ada3.jpeg"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None"
                    ],
                    "Sentiment": 5.067543859649123
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "21",
                    "likes": "2",
                    "time": "20/01/2022-01:27:19",
                    "content": "There\u2019s really no way to build in validation without requiring it to be in specific formats - which obviates the entire point of the protocol, which is to allow clients (web browsers) to fetch data needed to execute contracts without having to understand the format of the data they\u2019re fetching. Further, doing this wouldn\u2019t really help, as it the proofs would still have to be verified onchain by the contracts receiving the data. If people want to submit data from offchain insecurely, they can do that today with a simple string field and by first fetching the data in the user\u2019s browser; EIP 3668 doesn\u2019t add anything new here. I think it would be extremely misguided to reject a generic data-fetching standard because some people may use it badly. There will absolutely be standardised Solidity libraries for validating proofs, and JS libraries for generating them, which will make \u201cdoing the right thing\u201d as easy as possible. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.023650369238605
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hyperbart",
                    "index": "22",
                    "likes": "0",
                    "time": "20/01/2022-01:47:32",
                    "content": "I think it is more important to think about what programming patterns the feature will allow in the future rather than compatibility with the existing code/protocols (such as Chainlink I assume). If the programming pattern we\u2019re allowing is \u201cfetch anything from a url\u201d, we\u2019re setting ourselves up for a major precedent. I can imagine there would be a StackOverflow question somewhere, with a newcomer asking on how to fetch some data from a REST API in Solidity with someone answering \"just use OffchainLookup\", completely missing the point of a permissionless environment. An argument about \u201cwashing\u201d the data into EVM by supplying it via a string field and then just assuming it to be trusted is fair, but I think OffchainLookup really does obfuscate that anti-pattern. The input won\u2019t even be shown as an input on Etherscan, it\u2019s a \u201chidden\u201d input that you need to look for in the source code. How can we make it easier to analyse/automatically track the misuse of this feature? Ideally the misuse would be outlawed, but if we can flag them, that would be just as great. In regards to standard libraries for generating/validating proofs - that is great. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.734375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "23",
                    "likes": "1",
                    "time": "20/01/2022-01:57:17",
                    "content": "    hyperbart:  I think it is more important to think about what programming patterns the feature will allow in the future rather than compatibility with the existing code/protocols (such as Chainlink I assume).   There\u2019s no existing protocol we\u2019re trying to preserve compatibility with; I\u2019m saying that if you try and hardcode the verification mechanism into the protocol, it becomes useless as a general-purpose protocol, which makes it more or less useless full-stop.     hyperbart:  If the programming pattern we\u2019re allowing is \u201cfetch anything from a url\u201d, we\u2019re setting ourselves up for a major precedent. I can imagine there would be a StackOverflow question somewhere, with a newcomer asking on how to fetch some data from a REST API in Solidity with someone answering \"just use OffchainLookup\", completely missing the point of a permissionless environment.   But a naive developer can do this right now without EIP 3668. They can fetch data from a URL and supply it as an argument to a smart contract function.     hyperbart:  The input won\u2019t even be shown as an input on Etherscan, it\u2019s a \u201chidden\u201d input that you need to look for in the source code.   If you\u2019re sending a transaction using EIP 3668, it will show up as input on Etherscan. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.113782051282051
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "24",
                    "likes": "0",
                    "time": "27/01/2022-09:23:30",
                    "content": "I\u2019ve made some changes in response to review here, adding support for POST requests back if desired by the gateway, and adding some further security considerations. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/trillion",
                    "index": "25",
                    "likes": "0",
                    "time": "16/02/2022-12:34:53",
                    "content": "Hi @Arachnid What are the gas implications of this call? This is very crucial as it may allow an abuse of Ethereum if it costs almost zero gas to make this call. For example instead of balanceOf, how about if I used this for transfer? i.e I call myToken.transfer on L1 and it is passed on as a http://mytoken.io/transfer to my L2. L2 is my private Ethereum network. I will be able to create an ERC20 token on Ethereum and transfer at will at very low gas costs etc. As the token contract will actually be executing arbitrary code on my own L2 server. So any contract functionality can be executed on L2 at almost zero gas cost on Ethereum, where Ethereum is used as a \u201cstub server\u201d and all code executed on L2. (This may be a considered a good feature or a serious bug) The more serious matter is that if updation of data on L2 and simply mirroring it on L1 is allowed, then Ethereum will simply throw exceptions if the L2 server is shut down and all the contracts on L1 will appear to be invalidated. Hope that makes sense. Interested to know your thoughts. On another note, I was looking to implement a few nice features on top of ENS using this type of a utility. Will be happy to discuss with you. Cheers Rajesh ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.875730994152047
                }
            ]
        }
    ],
    "group_index": "1400"
}