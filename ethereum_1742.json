{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc721-timed-ownership-rental-without-apps-integration/9257",
            "title": "ERC721 Timed Ownership (Rental) without apps integration ",
            "index": 9257,
            "category": [
                "Tokens"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/tommyshieh",
                    "index": "1",
                    "likes": "0",
                    "time": "14/05/2022-17:07:08",
                    "content": " Abstract This standard is an extension of ERC721. It proposes a new TimedOwner concept in addition to the existing Owner concept. For example address A is the TimedOwner of token P until  X timestamp. After X timestamp, the TimedOwner of the token P becomes B. This concept can easily achieves NFT rental without any extra third party integration which want to validate the ownership of a token. Also there\u2019s no gas fee needed as there\u2019s no transaction engaged.  Motivation There are many proposals to support \u201crental\u201d functionality for ERC721.  For example:  EIP4907: ERC-721 User And Expires Extension ERC721 extension to enable rental EIP-4400: ERC-721 Consumable Extension  However, most of them introduce a new role (user, functional user, consumer\u2026etc) and they require apps to integrate with the new interface in order to validate the renter/functional/consumer user. Also, transaction/gas fee is needed when renting a token. This whole thing can be simpler.  Proposed solution  Summary   Introduce \u201cTimedOwner\u201d, the owner of a token in a period of time.   Extend the ERC721 interface and introduce a timedTransferFrom method. This method transfers the ownership of  from the current owner to . The timed ownership is valid until the  time   During the timed ownership, the ERC721 ownerOf function returns the address of timeOwner. This is the ONLY thing timedOwner can do and the restriction is enforced on the smart contract. TimeOwner CAN NOT do any other operation on the token, for example transfer, approve, burn\u2026 etc.   With this proposal, any app can seamlessly integrate with the smart contract to validate the current ownership of a token.  Interface (extend ERC721) interface IERCXXX {     /// @notice Transfer the token from owner to timedOwner with expirationTime     /// @dev The zero address indicates there is no user     /// Throws if `tokenId` is not valid NFT     /// @param timedOwner  The timedOwner of the NFT     /// @param expires  UNIX timestamp, The ownerOf function will return timedOwner before expires     function timedTransferFrom(uint256 tokenId, address timedOwner, uint64 expirationTime) external;      /// @notice Get owner of an NFT. And NFT can have sudoOwner and timedOwner at the same time.     /// @dev The zero address indicates that there is no user or the user is expired     /// @param tokenId The NFT to get the user address for     /// @return The user address for this NFT     function sudoOwnerOf(uint256 tokenId) external view returns(address); }   Implementation /*  Introducing a new timed_owners mapping that maps from token ID to a  map of timeStamp to owner address, for example:  {    1: [ \t    {             \u201ctimestamp\u201d: 0             \u201cOwner\u201d <address of owner 1>         },         { \t        \u201ctimestamp\u201d: 1654041600  \t        \u201cOwner\u201d <address of owner 2>         }       ] } */  struct TimedOwner {     uint expirationTime;     address owner   }  mapping(uint256 => TimedOwner[]) private timed_owners;    When the existing TransferFrom function is called, no data is added to the timed_owners as the TransferFrom is not a timed ownership transfer. Everything works same as how it works today.   When the timedTransferFrom function is called, the expirationTime information is also stored in this timed_owners.   When OwnerOf(A) is called, the smart contract first:  Check if there\u2019s an entry A in timed_owners, if no, use the original logic openzeppelin-contracts/ERC721.sol at master \u00b7 OpenZeppelin/openzeppelin-contracts \u00b7 GitHub  If the entry A is presented in the timed_owners, compare the current timestamp with the record in the timed_owners to figure out the current owner.    Many functions in the ERC721 need to be overridden to prevent the timedOwner from doing operations like approve, transfer, burn \u2026 etc, I am skipping those parts in this post.   Feedback? ",
                    "links": [
                        "https://ethereum-magicians.org/t/erc721-extension-to-enable-rental/8472",
                        "https://eips.ethereum.org/EIPS/eip-4400",
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L70"
                    ],
                    "GPT-summary": "The post proposes an extension of ERC721 called TimedOwnership, which introduces a new concept of TimedOwner in addition to the existing Owner concept. The TimedOwner is the owner of a token for a period of time until a specified timestamp, after which the ownership is transferred to another address. The proposal aims to achieve NFT rental without any extra third-party integration and without any transaction or gas fee. The post also provides an interface and implementation details for the proposed solution and invites feedback and questions.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.39058790671694
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TylerMeta",
                    "index": "2",
                    "likes": "0",
                    "time": "15/05/2022-09:19:32",
                    "content": "  github.com/ethereum/EIPs         EIP-5058:Lockable ERC-721 Standard   ethereum:master \u2190 radiocaca:master            opened 06:39PM - 29 Apr 22 UTC               radiocaca             +945 -0           EIP-5058 is an erc721 extension that supports block height-based locking of nft, which can meet rental needs without transferring nft. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5058",
                        "https://github.com/radiocaca",
                        "https://github.com/ethereum/EIPs/pull/5058/files"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1742"
}