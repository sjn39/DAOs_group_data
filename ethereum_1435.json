{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/discussion-to-eip-3788-strict-enforcement-of-chainid/7001",
            "title": "Discussion to EIP-3788: Strict enforcement of ChainId ",
            "index": 7001,
            "category": [],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "1",
                    "likes": "0",
                    "time": "03/09/2021-11:01:29",
                    "content": "Link to EIP. ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "2",
                    "likes": "1",
                    "time": "03/09/2021-11:46:53",
                    "content": "I don\u2019t think this change is a good idea because it doesn\u2019t add value to the protocol and it breaks backward compatibility. Any wallet/signing tool that wants this can easily add it and we don\u2019t benefit from adding it to the core protocol in ways that we cannot achieve by just convincing wallets/signers to add it. In general, anything that can be solved at a higher layer than the core protocol I believe should be solved at a higher layer than the core protocol, and the core protocol should be as permissive as possible when given a choice between permissive and restrictive. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.489583333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "3",
                    "likes": "0",
                    "time": "03/09/2021-12:21:59",
                    "content": "I also think this is a bad idea. Also FYI some backlash we got in the geth repo after blocking pre EIP-155 transactions by default: https://github.com/ethereum/go-ethereum/issues/23152 In our case people can work around it via --rpc.allow-unprotected-txs but when this EIP gets accepted which I do not hope it will - then this really breaks it and should for sure be in the Backward compatibility section of the EIP. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "4",
                    "likes": "1",
                    "time": "03/09/2021-16:51:52",
                    "content": " Also FYI some backlash we got in the geth repo after blocking pre EIP-155 transactions by default: https://github.com/ethereum/go-ethereum/issues/23152   This was actually one of my main motivations (FWII, we were one of the parties affected, although no one was griefed) because geth is already blocking these transactions be default. We were using geth\u2019s signing package to sign transactions on other chains, when we realized that geth was not respecting the chainId we were adding to transactions. It\u2019s specifically for that reason that I\u2019m proposing this, as we cannot assume or trust that the next million developers who start developing tooling and applications will understand the ramifications of L1/L2 interactions. Ultimately I find it to be completely unsafe. To also comment on the actual feedback that was raised, the notion of repayable transactions may have been quite useful in certain situations, but I believe it to be one of those situations where we created a design flaw by trying to be clever.  I don\u2019t think this change is a good idea because it doesn\u2019t add value to the protocol and it breaks backward compatibility.  I mean, it does add safety, its my main motivation behind this. I would be curious to know how many transactions are being submitted with a chainId of 0, I\u2019ll see if I can get something created on DuneAnalytics.  [\u2026] and the core protocol should be as permissive as possible when given a choice between permissive and restrictive.  This resonates with me quite a bit and I completely understand that. I\u2019d like to hear some other people\u2019s feedback regardless, alternatively I could also perhaps open a PR to the wallet interface or informational section for wallets. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.337946428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sak",
                    "index": "5",
                    "likes": "0",
                    "time": "03/09/2021-20:50:14",
                    "content": " In general, anything that can be solved at a higher layer than the core protocol I believe should be solved at a higher layer than the core protocol, and the core protocol should be as permissive as possible when given a choice between permissive and restrictive.  maybe this can be viewed as complete/incomplete info (instead of permissive/restrictive) ? I mean, if the chainId is explicit (!=0), the info is complete, incomplete otherwise. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.216145833333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "6",
                    "likes": "0",
                    "time": "04/09/2021-08:45:18",
                    "content": "    sak:  maybe this can be viewed as complete/incomplete info (instead of permissive/restrictive) ? I mean, if the chainId is explicit (!=0), the info is complete, incomplete otherwise.   A pre-155 transaction is not incomplete, it is complete, just a different transaction type.  Ethereum Mainnet currently has 4 transaction types: Legacy: This is the pre-155 transaction type. Legacy-155: This is post-155 transaction type. 1: EIP-2930 transaction type 2: EIP-1559 transaction type None of these are more complete than any other, though some are newer than others.  There are valid reasons for submitting pre-155 transactions, and post 155 transactions, and 2930 transactions, and 1559 transactions.  Arguably, 2930 is the least valuable as very few people use it and there is no functionality it provides that cannot be provided by 1559.  After that is 155 transactions which are incredibly widely used but provide no additional value beyond 1559 transactions.  The last one to deprecate IMO is pre-155, because its functionality is not currently available anywhere else. @greg I wonder if you have interest in creating an EIP that introduces a new transaction type that is like type 2 transactions (including supporting access lists), but explicitly skips the chain ID check?  With that, I would be more in favor of a long-term EOL policy and process for pre-155 transactions. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.097105823863637
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "7",
                    "likes": "1",
                    "time": "04/09/2021-08:47:25",
                    "content": "Another option would be an EIP that introduces something like https://github.com/Zoltu/deterministic-deployment-proxy as a pre-compile or as a new deployment transaction type.  This would ensure that the ability to deploy code to deterministic addresses is conserved across future Ethereum testnets, forks, and mainnet which would give us a clean path to deprecating pre-155 transactions. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.838383838383838
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "8",
                    "likes": "0",
                    "time": "05/09/2021-20:44:57",
                    "content": "    MicahZoltu:  @greg I wonder if you have interest in creating an EIP that introduces a new transaction type that is like type 2 transactions (including supporting access lists), but explicitly skips the chain ID check? With that, I would be more in favor of a long-term EOL policy and process for pre-155 transactions.   This is actually quite interesting, I could get behind this as a better way to \u201cease\u201d it out. Also this would allow us to potential deprecate legacy based transactions (signing libs can just bump legacy to type 0x3 or whatever).     MicahZoltu:  Another option would be an EIP that introduces something like https://github.com/Zoltu/deterministic-deployment-proxy  as a pre-compile or as a new deployment transaction type. This would ensure that the ability to deploy code to deterministic addresses is conserved across future Ethereum testnets, forks, and mainnet which would give us a clean path to deprecating pre-155 transactions.   Why would you need this as a pre-compile, it works perfectly fine the way it is? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.002525252525253
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "9",
                    "likes": "1",
                    "time": "06/09/2021-04:43:56",
                    "content": "    greg:  Why would you need this as a pre-compile, it works perfectly fine the way it is?   The primary legitimate use case for transactions that can be replayed across chains is for deterministic addresses of contracts deployed on multiple blockchains.  Deterministic Deployment Proxy works and has been deployed to all existing public test networks and Mainnet, as well as several L2 chains and side chains.  However, if we were to deprecate L1 support for replayable transactions, you would be unable to deploy the proxy to any new chains (like future public testnets or private testnets) created after such a change went live. By providing users a way to reliably do deterministic address deploys to all future Ethereum-like chains (particularly testnets), we will remove the one legitimate use case for replayable transactions, and I would no longer argue against removing support for them from the protocol (which would mean setting up an EoL schedule for pre-155 transactions). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.147853535353535
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "10",
                    "likes": "0",
                    "time": "06/09/2021-04:47:24",
                    "content": "    greg:  Also this would allow us to potential deprecate legacy based transactions (signing libs can just bump legacy to type 0x3 or whatever).   Deprecating legacy transactions is going to be an uphill battle, but one that someone needs to undertake at some point in time.  The difficulty is that someone with an offline wallet, pre-signed transaction, or un-upgradable hardware wallet will no longer be able to sign transactions.  We have been very loath to make such a breaking change in the past because we don\u2019t know how many (if any) people might be in such a situation. One potential workaround for this would be to create a pre-compile that can be called with a signature that would execute a legacy signed transaction.  This way it could be removed from the bulk of the protocol and the complexity for handling legacy transactions can live in a fairly well isolated location within the EVM as a precompile. If you do decide to take on this project, I encourage and support you doing so!  Just be aware that it is going to be a big project. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.921401515151516
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/greg",
                    "index": "11",
                    "likes": "0",
                    "time": "06/09/2021-09:22:58",
                    "content": "    MicahZoltu:  If you do decide to take on this project, I encourage and support you doing so! Just be aware that it is going to be a big project.   Been scheming it with lightclient for some time now, using a pre-compile  is something I didn\u2019t think of before to ease the transition. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/spalladino",
                    "index": "12",
                    "likes": "1",
                    "time": "07/09/2021-23:54:57",
                    "content": "    MicahZoltu:  Another option would be an EIP that introduces something like https://github.com/Zoltu/deterministic-deployment-proxy  as a pre-compile or as a new deployment transaction type. This would ensure that the ability to deploy code to deterministic addresses is conserved across future Ethereum testnets, forks, and mainnet which would give us a clean path to deprecating pre-155 transactions.   FWIW there was a proposal and discussion for such a precompile here: EIP Proposal: CREATE2 contract factory precompile for deployment at consistent addresses across networks ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-proposal-create2-contract-factory-precompile-for-deployment-at-consistent-addresses-across-networks/6083"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.753030303030303
                }
            ]
        }
    ],
    "group_index": "1435"
}