{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/thoughts-on-software-engineering-maintenance-costs/20050",
            "title": "Thoughts on Software Engineering Maintenance Costs ",
            "index": 20050,
            "category": [
                "Miscellaneous",
                "Developers"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/brianmcmichael",
                    "index": "#1",
                    "likes": "23",
                    "time": "03/03/2023-16:07:59",
                    "content": "I want to share a link below to a short essay on software maintenance costs provided by George Mason University. It\u2019s important for developers and voters to understand that the cost of software deployments is not limited to the initial sticker price of construction and deployment. Software maintenance is a sometimes forgotten cost in the thrill of getting new projects and protocols online. It has been estimated that software maintenance can account for up to 90% of a project\u2019s cost. (Sommerville, 2004) While smart contracts often contain a higher up-front cost due to the necessity to reduce all possibilities of bugs or adverse behavior, any new deployment on-chain will incur ongoing maintenance costs in real and opportunistic terms. New modules often require keeper integration and maintenance, integration to existing testing frameworks, additional documentation and updates, or upgrades in case an actual bug is found or an evolution of the design or modifications to the underlying blockchain necessitate it. Additionally, each new module adds opportunity cost in the form of additional cognitive overhead to developers, technical writers, integrators, and the voters expected to maintain it. In particular I want to highlight a few points from the essay:  Some common technical cost factors are:   Complexity of code: Complex control and logic structure is hard to understand and therefore hard to change.   Changes in programming languages: If the code to change is written in a language that is no longer commonly used, it is hard to change. Even harder is if new code has to be written in a different language.   Changes in software infrastructure: If the underlying software, middleware, or libraries have changed, then the programmers have to understand how the software to change interacts with them, which is very difficult.   Quality of code formatting and style: Messes always create maintenance debt. Perhaps the worst problem is when names are poorly chosen.   Program age and structure: As programs age, changes start to degrade their structure, making them harder to understand and change.    Some key takeaways for voters regarding technical cost are to remember that the existing Maker codebase is complex. In most software projects, it is expected that a new engineer will take around six months to become comfortable with an existing codebase, due to the nature of the Maker codebase, we might want to consider that timeframe to be a minimum. The solidity programming language is also in a constant state of flux, and developers must keep up to date with the latest changes. The programming language has changed to the point that the code for the original MCD deployment cannot be deployed using the current version without heavy modification to the initial codebase. As we move to L2\u2019s, it\u2019s quite reasonable to expect that entire portions of the existing code will need to be re-written and re-tested to account for these changes. Quality of code formatting and style is also an important cost to keep in mind. PE has been maintaining a checklist of standards for external developers who wish to deploy modules within the Maker system. When in doubt, we use the dss repository as our generic style guide. We encourage external developers to adhere to these standards not just to streamline their code into the system\u2019s existing architecture and style, but to ease the maintenance costs on existing developers and integrators. There are additional human costs associated with maintenance.  Some common human cost factors are:   Team stability: Maintenance costs are greater if the original developers are not available.   Contractual responsibility: If the original developers were not expected to be responsibe for future changes, they had very little incentive to design for change.   Staff skills: Maintenance tasks are sometimes given to entry-level engineers, summer interns, or poorly educated low-skilled programmer. This means they may take longer and their changes may be less reliable.    The original dapphub developers who created the MCD system are no longer with the project, however, the PE team does benefit from the expertise of several senior developers who have been with the project for years. We cannot fully rely that these developers will continue with the project in the long-term, and leaving the project in the hands of newer developers will increase costs of maintenance. A module built and deployed via a contract engagement or project-based grant will also incur additional maintenance costs because the developers of that project are not responsible for future maintenance of that module, so the module itself will be less likely to be streamlined into the system with an eye toward maintainability, upgradeablity, interface coherence, and integrations.   Ripple Effect: Changes in one software location can impact other components. Ripple effects cannot be fully understood with static analysis of the source, so dynamic analysis must be used. That is, we have to run the program.   Software that is developed in isolation (i.e. on a per-project basis) cannot be safely evaluated in isolation. It must be wholistically integrated into the existing system for it\u2019s effects to be monitored. As the Maker system expands, additional moving parts must be simulated within the context of all of the other moving parts that can be affected by the addition. Each new module must be integrated and simulated with respect to every existing module, which increases the number of connections with each additional module. This incurs additional costs not only on the technical side, but increases the overhead to existing and new voters who must internalize any new parameters that must be voted on, and their relationship to the system as a whole. Also note some of the software \u201cmyths\u201d that the essay lays out and which should be dispelled in the context of MakerDAO.  Myth: Once we write the program and get it to work, our job is done. Reality: Someone once said that \u201cthe sooner you begin \u2018writing code,\u2019 the longer it\u2019ll take you to get done.\u201d Industry data indicate that between 60 and 80 percent of all effort expended on software will be expended after it is delivered to the customer. Myth: The only deliverable work product for a successful project is the working program. Reality: A working program is only one part of a software configuration that includes many elements. Documentation provides a foundation for successful engineering and, more important, guidance for software support.  I want to remind Maker voters that while it may seem fun and exciting to \u201cmove fast\u201d with new modules and protocols, that often involves \u201cbreaking things\u201d, which, when discussing the management of billions of dollars worth of user assets, should be considered soberly. Maintenance is part of the safety and security of a protocol, and the costs are often much greater than the initial proposed price. A fast and cheap addition can often be very costly in the long-run. Anyways I provide the link to the essay here and encourage voters and developers to read it as a gateway to understanding software engineering maintenance costs.   cs.gmu.edu   Overview of Software Maintenance and Evolution Overview of Software Maintenance and Evolution      ",
                    "links": [
                        "https://github.com/makerdao/dss",
                        "https://cs.gmu.edu/~offutt/classes/437/maintessays/maintEvolutionOverview.html",
                        "https://cs.gmu.edu/~offutt/classes/437/maintessays/maintEvolutionOverview.html"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.322132307927763
                },
                {
                    "author_link": "https://forum.makerdao.com/u/quntangled",
                    "index": "#2",
                    "likes": "0",
                    "time": "08/03/2023-10:36:24",
                    "content": "Thanks @brianmcmichael for the cautionary tale on protocol software maintenance costs. According to a study by the IMF (see chart), DeFi has lowest costs among FIs in both advanced economies (AE) and emerging markets (EM). This is due to almost non-existent of labour and other operational costs given smart contract technology (may be more true for some protocols than others). Would be good to get an \u2018insider\u2019 engineer\u2019s view on how sustainable this cost advantage is. Other operational cost advantage may fade away if DeFi is in some way regulated (no more regulatory arbitrage).  image966\u00d7838 44.8 KB  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.869642857142857
                },
                {
                    "author_link": "https://forum.makerdao.com/u/brianmcmichael",
                    "index": "#3",
                    "likes": "2",
                    "time": "08/03/2023-20:34:40",
                    "content": "MakerDAO is not a solid-state smart contract that is deployed and left to an ecosystem to build upon. It is an actively managed software apparatus that undergoes nearly weekly updates and additions. While it\u2019s true that we probably have fewer costs than traditional financial institutions and we do indeed operate with a rounding error of a fraction fewer engineers than, say, JP Morgan, which currently employs approximately 50,000 developers globally alone, it would not be accurate to consider that our maintenance burden or professional responsibility to maintain the project doesn\u2019t come without cost. ",
                    "links": [
                        "https://github.com/makerdao/spells-mainnet/tree/master/archive"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.262896825396826
                }
            ]
        }
    ]
}