{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-4883-composable-svg-nft/8765",
            "title": "EIP-4883: Composable SVG NFT ",
            "index": 8765,
            "category": [
                "Tokens"
            ],
            "tags": [
                "nft",
                "graphics"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/AlexPartyPanda",
                    "index": "1",
                    "likes": "7",
                    "time": "31/03/2022-16:43:51",
                    "content": " EIP-4883 Composable SVG NFT Discussion for EIP-4883 NFT has public render function returning SVG body that can be composed. SVG specification Rendering model: SVG 1.1 specification section 3  Implementations Implementations of composable SVGs:  Fancy Loogies Loogie Tank Party Panda   BuidlGuidl BTF - Composable SVG NFTs demo Fancy Loogies & Loogie Tanks      Party Panda Example of a Party Panda NFT with a background and foreground: Party Panda #88 on Rinkeby OpenSea  Render function name Need to standardize render function name: Loogies uses renderTokenById  github.com   scaffold-eth/scaffold-eth/blob/c3cb9e6aa7d20957f84a17401589f48a1f950228/packages/hardhat/contracts/Mustache.sol#L101                                 string memory svg = string(abi.encodePacked(                   '<svg width=\"400\" height=\"400\" transform=\"translate(150,-100) scale(4 4)\" xmlns=\"http://www.w3.org/2000/svg\">',                     renderTokenById(id),                   '</svg>'                 ));                               return svg;               }                             // Visibility is `public` to enable it being called by other contracts for composition.               function renderTokenById(uint256 id) public view returns (string memory) {                 // mustache svg from https://www.svgrepo.com/svg/85048/mustache-shape with CCO Licence                 string memory render = string(abi.encodePacked(                   '<g class=\"mustache\" transform=\"translate(140,195) scale(1.50 1.50)\">',                       '<path fill=\"#',color[id].toColor(),'\" d=\"M21.455,13.025c-0.604-3.065-5.861-4.881-7.083-2.583c-1.22-2.299-6.477-0.483-7.081,2.583C6.501,16.229,2.321,17.11,0,15.439c0,3.622,3.901,3.669,6.315,3.9c5.718-0.25,7.525-2.889,8.057-4.093c0.532,1.205,2.34,3.843,8.058,4.093c2.416-0.231,6.315-0.278,6.315-3.9C26.423,17.11,22.244,16.229,21.455,13.025z\"/>',                     '</g>'                   ));                               return render;               }             }                           Party Panda uses render  github.com   AlexPartyPanda/party-panda-nft/blob/4ccf7940882565a845195fc57c8dc4ee1b2158fd/src/PartyPanda.sol#L167                                         '<path d=\"M177 92c-17.5-35.5-52-35.5-70.5-3-8.666 23.757-9.202 33.968 4 42 27.357 18.75 41.337 16.44 69 0 3.5-5.5 6.499-24.919-2.5-39Z\" fill=\"#FFF\" stroke=\"#000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>'                         '<path d=\"M131.5 125.5c9.101 3.874 10.24 3.497 18 0\" stroke=\"#000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>'                         '<path d=\"M129 111.5c4.5-4.5 17-2.5 19 1-5 5-14 4-19-1ZM125 87c5.099 5.584 2.743 5.485 4.5 9-4.985.625-8.844 3.99-17.5 15-1.172-3.319-1.471-3.485-3-8.5-1.529-5.014 10.901-21.084 16-15.5Z\" fill=\"',colourValue, '\" stroke=\"#000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>'                         '<circle cx=\"119\" cy=\"98\" r=\"4\" fill=\"#000\"/>'                         '<path d=\"M162.5 85c-6.664 2.996-9.447 5.477-12.5 11.5 8.04 4.452 12.128 8.376 18.5 18.5l5.5-7.5c-2.463-11.46-4.46-17.073-11.5-22.5Z\" fill=\"',colourValue, '\" stroke=\"#000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>'                         '<circle cx=\"159\" cy=\"99\" r=\"4\" fill=\"#000\"/>'                         '</g>'                     );             }                           function render(uint256 tokenId)                 public                 view                 override                 returns (string memory)             {                 return                     string.concat(                         _renderBackground(tokenId),                         _renderBody(tokenId),                         _renderForeground(tokenId)                           ",
                    "links": [
                        "https://w3.org/TR/SVG11/render.html",
                        "https://github.com/scaffold-eth/scaffold-eth/tree/fancy-loogies",
                        "https://github.com/scaffold-eth/scaffold-eth/tree/oe-loogie-tank-prod",
                        "https://github.com/AlexPartyPanda/party-panda-nft",
                        "https://www.youtube.com/watch?v=mnErFJwujSg",
                        "https://testnets.opensea.io/assets/0x6093683ffb289711d48b63e2ea117a2236d50596/88",
                        "https://github.com/scaffold-eth/scaffold-eth/blob/c3cb9e6aa7d20957f84a17401589f48a1f950228/packages/hardhat/contracts/Mustache.sol#L101",
                        "https://github.com/scaffold-eth/scaffold-eth/blob/c3cb9e6aa7d20957f84a17401589f48a1f950228/packages/hardhat/contracts/Mustache.sol#L101",
                        "https://github.com/AlexPartyPanda/party-panda-nft/blob/4ccf7940882565a845195fc57c8dc4ee1b2158fd/src/PartyPanda.sol#L167",
                        "https://github.com/AlexPartyPanda/party-panda-nft/blob/4ccf7940882565a845195fc57c8dc4ee1b2158fd/src/PartyPanda.sol#L167"
                    ],
                    "GPT-summary": "The post explains the EIP-4883 proposal for Composable SVG NFTs, including the public render function and implementations. The post also discusses the need to standardize the render function name. A third party provides constructive criticism and extends the proposal by suggesting the need for a standard for the metadata of the NFTs. The third party also asks questions about the implementation and the possibility of using the proposal for other types of NFTs.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 4.336538461538462
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/abcoathup",
                    "index": "2",
                    "likes": "2",
                    "time": "01/04/2022-00:07:15",
                    "content": " Rights I added that the caller of render must have rights to use the SVG body in a composed SVG.  Relationships I haven\u2019t specified how this must be done, so any relationship can be used. When @AlexPartyPanda and I first started playing with adding accessories to pfps we had a token holder owning both the pfp and the accessory and creating a link between the two. FancyLoogies introduced us to that the pfp could be the token holder of the accessory and that a linkage could be setup on transfer. Need to find wording to describe the two tokens, composer and composee feel a bit clumsy. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "3",
                    "likes": "1",
                    "time": "06/04/2022-13:30:44",
                    "content": "If I am a contract that\u2019s composing together multiple SVGs, I\u2019ll probably know the position and z-index of where I want to put my child SVGs. What scenarios do you envision where the child SVG knows what z-index to render at, but the composer does not?  Have you considered using the link tag instead of concatenating SVGs on-chain? Would have to more formally describe the URI format, but as a really rough example: <svg>   <image width=\"10\" height=\"10\" href=\"eth://0x1234...abcd/image?u256=34\"></image> </svg>  ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-4804-web3-url-to-evm-call-message-translation/8300/13"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "4",
                    "likes": "1",
                    "time": "06/04/2022-16:13:04",
                    "content": "Two more non-formatting related questions: Should the optional methods revert if they aren\u2019t supported? Would they be better placed in a separate optional interface? What units are width and height in? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/abcoathup",
                    "index": "5",
                    "likes": "0",
                    "time": "07/04/2022-04:34:36",
                    "content": "Great questions @SamWilsn  Need to agree if zindex, width and height are required in the EIP or if a render function is sufficient. A test was adding Party Pandas and Nouns glasses to a Loogie Tank using only a render function.  Need to dig in if sizing would help here, as currently the elements go out of the tank.      SamWilsn:  What scenarios do you envision where the child SVG knows what z-index to render at, but the composer does not?   In PartyPanda there is permissionless linking, a token holder can add a child SVG NFT that is either a background or an accessory by transferring ownership of the child to the composable NFT. Though this could be implemented in the child SVG NFT to provide a zindex as part of the transfer, so then it wouldn\u2019t need to be part of the standard.   github.com   AlexPartyPanda/party-panda-nft/blob/main/src/ERC721PayableMintableComposableSVG.sol#L167                             ) external returns (bytes4) {                 uint256 tokenId = Bytes.toUint256(idData);                               if (!_exists(tokenId)) revert NonexistentToken();                 if (ownerOf[tokenId] != from) revert NotTokenOwner();                               IERC4883 composableToken = IERC4883(msg.sender);                 if (!composableToken.supportsInterface(type(IERC4883).interfaceId))                     revert NotComposableToken();                               if (composableToken.zIndex() < zIndex) {                     if (composables[tokenId].background.tokenAddress != address(0))                         revert BackgroundAlreadyAdded();                     composables[tokenId].background = Token(                         msg.sender,                         composableTokenId                     );                 } else if (composableToken.zIndex() > zIndex) {                     if (composables[tokenId].foreground.tokenAddress != address(0))                         revert ForegroundAlreadyAdded();                     composables[tokenId].foreground = Token(                               SamWilsn:  Have you considered using the link tag instead of concatenating SVGs on-chain? Would have to more formally describe the URI format, but as a really rough example:   I hadn\u2019t considered using a link tag. Concatenating SVGs on-chain works today, it allows for the child SVG to change based on state, and when combined with the parent holding the child, enforces ownership. I assume a new URI format would require a huge effort to get adoption, compared with the output of concatenated SVGs working with current browsers. (See the SVG from OpenSea with composable SVGs)     SamWilsn:  Should the optional methods revert if they aren\u2019t supported? Would they be better placed in a separate optional interface?   The optional methods should be in optional interfaces. Still need to agree if zindex and size are required in the EIP.     SamWilsn:  What units are width and height in?   \u201cFor SVG-specific properties, the length unit identifier is optional. If a unit is not provided, the length value represents a distance in the current user coordinate system.\u201d https://www.w3.org/TR/SVG11/types.html#DataTypeLength ",
                    "links": [
                        "https://github.com/AlexPartyPanda/party-panda-nft/blob/main/src/ERC721PayableMintableComposableSVG.sol#L167",
                        "https://www.w3.org/TR/SVG11/types.html#DataTypeLength"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.931818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "6",
                    "likes": "1",
                    "time": "07/04/2022-06:55:09",
                    "content": "    abcoathup:  A test was adding Party Pandas and Nouns glasses to a Loogie Tank using only a render function. Need to dig in if sizing would help here, as currently the elements go out of the tank.   Ah! That makes total sense. Otherwise the composer would have to parse the SVG to get the total size. Probably a good example to put in the EIP\u2019s Rationale section!     abcoathup:  Though this could be implemented in the child SVG NFT to provide a zindex as part of the transfer, so then it wouldn\u2019t need to be part of the standard.   Oh, I didn\u2019t mean to imply that there wouldn\u2019t be a z-index in the composer. Just that you\u2019d probably have setBackground(address, uint256) and addAttachment(address, uint256) in the composer, and those would know what z-index to use, instead of the child only being usable at a single z-index.     abcoathup:  I assume a new URI format would require a huge effort to get adoption, compared with the output of concatenated SVGs working with current browsers. (See the SVG from OpenSea with composable SVGs)   I think this step could be implemented by preprocessing the SVG, and while it would increase the amount of work done off-chain, I think it might be worth while to reduce the amount of work on-chain. For example, this would be super useful to any NFT that currently base64 encodes data on the fly. That said, I\u2019d be happy with concatenation as well. Just wanted to throw the suggestion out there. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.989102332852333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/qzhodl",
                    "index": "7",
                    "likes": "2",
                    "time": "27/04/2022-07:08:12",
                    "content": "    abcoathup:  I hadn\u2019t considered using a link tag. Concatenating SVGs on-chain works today, it allows for the child SVG to change based on state, and when combined with the parent holding the child, enforces ownership.   Concatenated SVG on-chain will work when the image size is small, and when the pfp image size is big (the image may have more details), the cost of uploading metadata will be very high (cyberbroker used nearly 100 ETH to upload their metadata). Also, the read gas could be very high and may exceed the gas limit. As @SamWilsn said, \u201clink\u201d tag could help by reducing the on-chain image size, but as @abcoathup said, opensea compatibility is an issue right now. The SVG image with the image link could not be rendered properly by opensea, it shows an empty image when I tested it on rinkeby (https://testnets.opensea.io/assets/0x618d06a965917794c9df3e5f875ce3a63c6fe250/1) it seems that there is no perfect tech solution for composable NFT ",
                    "links": [
                        "https://testnets.opensea.io/assets/0x618d06a965917794c9df3e5f875ce3a63c6fe250/1"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.225857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/qzhodl",
                    "index": "8",
                    "likes": "2",
                    "time": "26/05/2022-07:31:48",
                    "content": "SVG format has great composability, and it can combine multiple PNG images into an SVG image by smart contracts in a very efficient way. It will release all artists\u2019 creativity by enabling PNG image composability. The format will be like this:  <svg viewBox=\"0 0 1000 1000\">      <image xlink:href=\"data:image/png;base64,', Base64.encode(bgPng), '\"/>      <image xlink:href=\"data:image/png;base64,', Base64.encode(accessoriesPng), '\"/> </svg>  But the PNG files will consume a lot of storage, so we can either upload them to Ethereum by consuming a lot of gas or use a programmable storage L2  to store the PNG and assemble them according to the state of L1\u2019s NFT. We have a super cool demo here and use Web3Q as the programmable storage L2 layer. ",
                    "links": [
                        "https://web3q.io/home.w3q/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.5813492063492065
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "9",
                    "likes": "1",
                    "time": "08/09/2022-08:29:58",
                    "content": "Really cool EIP. Thanks for writing it and building such cool projects! Just reading it and got a few comments  A) The EIP should focus on the technical specification only  If the caller of the render function composes an SVG NFT they must have rights to use the SVG body in a composable SVG.  The token holder could optionally hold both the SVG and rendered SVG NFTs or the token holder could hold the SVG NFT, and the SVG NFT could hold the rendered SVG NFT.  This should not be specified in my opinion and I strongly feel about this, the EIP should focus on the technical spec.  B) viewbox information I see that the rendered svg omits the SVG tag so it can be composed more easily, unfortunately it removes an important aspect of many SVG: the viewbox on which they were designed for. As such we should somehow add that back in the returned data. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.706944444444444
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/abcoathup",
                    "index": "10",
                    "likes": "0",
                    "time": "09/09/2022-04:32:16",
                    "content": "    wighawag:  This should not be specified in my opinion and I strongly feel about this, the EIP should focus on the technical spec.   I\u2019d be ok with removing text around ensuring that users have appropriate rights before composing from the EIP.  Legal rights to use will be on a project basis. Providing potential options for linking NFTs could be useful, but also don\u2019t have to be in the EIP.     wighawag:  I see that the rendered svg omits the SVG tag so it can be composed more easily, unfortunately it removes an important aspect of many SVG: the viewbox on which they were designed for. As such we should somehow add that back in the returned data.   An early draft of the EIP included dimensions and a z-index.  We stripped this back to just the renderByTokenId function. What do you think is the minimum information required for viewBox - SVG: Scalable Vector Graphics | MDN in the EIP? Could this be optional? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.977777777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/anthonygraignic",
                    "index": "11",
                    "likes": "1",
                    "time": "27/09/2022-21:11:46",
                    "content": "Thanks for this much needed & cool EIP ! I had a technical question about the SVG spec version considered. Should the renderTokenById function only support SVG 1.1 or SVG 2 (currently still in Candidate Recommendation) is OK ? Concerning the viewBox, I made a few tests with a composable SVG marker. And after grabbing some random SVGs on the internet, it appears that wrapping the content in an <svg viewBox=\"0 0 X X\"> (if not already present) was mandatory to control the final rendering. This can be done either by the composed SVG NFT or by the composable SVG NFT. Which raise 2 questions for me:   What do I want to return in the renderTokenById and control the rendering (to allow full composition with svg elements and taking the risk of being cropped or restrict it) ? And also should it be the same as tokenURI ?   Who should handle it ?   Both are outside of this EIP for me and I like the simple yet very efficient renderTokenById(uint256 id). I think a recommandation guide would help heading in the same direction. Also maybe later, an additional function returning an ENUM or an identifier, could specify the rendering, allowed composition uses and maybe pricing (a new kind of royalties/fees for using this composable NFT) ? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.480965909090909
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/abcoathup",
                    "index": "12",
                    "likes": "0",
                    "time": "28/09/2022-08:53:00",
                    "content": "    wighawag:  This should not be specified in my opinion and I strongly feel about this, the EIP should focus on the technical spec.   I have removed the rights requirement from the EIP: EIP-4883: remove rights requirement by abcoathup \u00b7 Pull Request #5726 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.083333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/abcoathup",
                    "index": "13",
                    "likes": "2",
                    "time": "28/09/2022-09:46:37",
                    "content": "    anthonygraignic:  I had a technical question about the SVG spec version considered. Should the renderTokenById function only support SVG 1.1 or SVG 2 (currently still in Candidate Recommendation) is OK ?   Do you know if SVG 2 draft is backwards compatible with SVG 1.1?  I see references to compatibility but nothing specified at a high level. https://svgwg.org/svg2-draft/single-page.html#intro-RelationshipToPrevious     anthonygraignic:  What do I want to return in the renderTokenById and control the rendering (to allow full composition with svg elements and taking the risk of being cropped or restrict it) ? And also should it be the same as tokenURI ?   We have been returning an SVG group element, with accessories, background and pfp all using the same coordinates (viewBox) for Party Panda 2.0/Merge Bears.  Essentially not including the <svg> element. So tokenURI includes the svg element whilst renderTokenById is just grouped elements.   github.com   TeamPartyPanda/party-panda-2.0/blob/a37781dfed4400549c3a6d8d32df1b7732ea63c0/src/ERC4883Composer.sol#L169                                 }                               return accessories;             }                           function renderTokenById(uint256 tokenId) public view virtual override returns (string memory) {                 if (!_exists(tokenId)) {                     revert NonexistentToken();                 }                               return string.concat(_generateBackground(tokenId), _generateSVGBody(tokenId), _generateAccessories(tokenId));             }                           function addAccessory(uint256 tokenId, address accessoryTokenAddress, uint256 accessoryTokenId) public {                 address tokenOwner = ownerOf(tokenId);                 if (tokenOwner != msg.sender) {                     revert NotTokenOwner();                 }                               // check for maximum accessories                 uint256 accessoryCount = composables[tokenId].accessories.length;                             github.com   TeamPartyPanda/party-panda-2.0/blob/a37781dfed4400549c3a6d8d32df1b7732ea63c0/src/PartyPanda2.sol#L92                                     _generateAccessories(tokenId),                     \"</svg>\"                 );                               return svg;             }                           function _generateSVGBody(uint256 tokenId) internal view virtual override returns (string memory) {                 string memory colourValue = _generateColour(tokenId);                               return string.concat(                     '<g id=\"partypanda-2-0-',                     Strings.toString(tokenId),                     '\">' \"<desc>Party Panda 2.0 is Copyright 2022 by Alex Party Panda https://github.com/AlexPartyPanda</desc>\"                     '<g stroke=\"black\" stroke-width=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\">' '<g fill=\"',                     colourValue,                     '\">'                     '<path d=\"M141.746 364.546C88.0896 338.166 67.7686 339.117 54.9706 378.618C58.0112 418.292 64.3272 429.537 80.7686 437.25C104.636 448.709 170.876 432.772 247.283 422.005C354.846 435.377 424.823 445.054 438.422 437.25C458.371 424.569 466.499 414.297 464.22 378.618C445.099 351.034 433.356 339.684 403.243 356.338L365.719 336.403L141.746 364.546Z\"/>'                     '<path d=\"M289.498 101.876C331.996 80.7832 329.868 101.341 328.195 149.954L289.498 101.876Z\"/>'                     '<path d=\"M166.371 134.71C159.627 93.6161 168.829 83.778 208.586 96.0128L166.371 134.71Z\"/>' \"</g>\"                     '<g fill=\"snow\">'                           It was suggested by one of the editors that we standardize viewBox=\"0 0 500 500\".  An early draft of the EIP had sizing but we removed to keep the EIP as simple as possible.     anthonygraignic:  Who should handle it ?   I think the composer should handle any scaling/transforms, as it is their responsibility to compose the SVGs as they require. I played with translate and scale on a Merge Bear.  I used the renderTokenById function from a Loogie Bow and an OE40 and manually added to a Merge Bear in https://www.svgviewer.dev/ and adjusted the translate and scale so that it fit. Example manual SVG with Merge Bear, Crown, Bow and OE40:   gist.github.com   https://gist.github.com/abcoathup/573782a5a7ada73a7bc988c896fb1e1f MergeBearWithAccessories.svg <svg id=\"merge-bear\" width=\"500\" height=\"500\" viewBox=\"0 0 500 500\" xmlns=\"http://www.w3.org/2000/svg\">   <g id=\"merge-bear-1721\">     <desc>       Merge Bear     </desc>     <g stroke=\"black\" stroke-width=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\">       <path d=\"M141.746 364.546C88.0896 338.166 67.7686 339.117 54.9706 378.618C58.0112 418.292 64.3272 429.537 80.7686 437.25C104.636 448.709 170.876 432.772 247.283 422.005C354.846 435.377 424.823 445.054 438.422 437.25C458.371 424.569 466.499 414.297 464.22 378.618C445.099 351.034 433.356 339.684 403.243 356.338L365.719 336.403L141.746 364.546Z\" fill=\"#383838\"/>       <path d=\"M289.498 101.876C331.996 80.7832 329.868 101.341 328.195 149.954L289.498 101.876Z\" fill=\"#383838\"/>       <path d=\"M166.371 134.71C159.627 93.6161 168.829 83.778 208.586 96.0128L166.371 134.71Z\" fill=\"#383838\"/>       <path d=\"M328.195 149.954C287.152 66.6969 206.241 66.6969 162.853 142.918C142.529 198.634 141.272 222.583 172.234 241.419C236.394 285.393 269.181 279.975 334.058 241.419C342.266 228.521 349.3 182.978 328.195 149.954Z\" fill=\"#F8F8F8\"/>     This file has been truncated. show original        Looking at this example, ERC4883 composers could optionally accept translate and scale so that the end user could craft the SVG as desired.     anthonygraignic:  I think a recommandation guide would help heading in the same direction.   Agree.  We are still very early, as we work out how to compose, especially across different ERC4883 projects.     anthonygraignic:  Also maybe later, an additional function returning an ENUM or an identifier, could specify the rendering, allowed composition uses and maybe pricing (a new kind of royalties/fees for using this composable NFT) ?   I removed the rights requirement from the EIP as suggested by @wighawag I would like to see a license that allows an ERC4883 to be composed by it\u2019s holder as long as not used in hate speech.  (something along the lines of The Can\u2019t Be Evil NFT Licenses - a16z crypto ",
                    "links": [
                        "https://github.com/TeamPartyPanda/party-panda-2.0/blob/a37781dfed4400549c3a6d8d32df1b7732ea63c0/src/ERC4883Composer.sol#L169",
                        "https://github.com/TeamPartyPanda/party-panda-2.0/blob/a37781dfed4400549c3a6d8d32df1b7732ea63c0/src/ERC4883Composer.sol#L169",
                        "https://github.com/TeamPartyPanda/party-panda-2.0/blob/a37781dfed4400549c3a6d8d32df1b7732ea63c0/src/PartyPanda2.sol#L92",
                        "https://github.com/TeamPartyPanda/party-panda-2.0/blob/a37781dfed4400549c3a6d8d32df1b7732ea63c0/src/PartyPanda2.sol#L92",
                        "https://optimistic.etherscan.io/address/0x7a6d1925cdaf97295d0e401c3450e32f8c39c817#readContract",
                        "https://optimistic.etherscan.io/address/0x5763f564e0b5d8233da0accf2585f2dbef0f0dfa#readContract",
                        "https://www.svgviewer.dev/",
                        "https://gist.github.com/abcoathup/573782a5a7ada73a7bc988c896fb1e1f",
                        "https://gist.github.com/abcoathup/573782a5a7ada73a7bc988c896fb1e1f",
                        "https://gist.github.com/abcoathup/573782a5a7ada73a7bc988c896fb1e1f",
                        "https://a16zcrypto.com/introducing-nft-licenses/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None"
                    ],
                    "Sentiment": 4.964853076216713
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/anthonygraignic",
                    "index": "14",
                    "likes": "1",
                    "time": "29/09/2022-21:00:17",
                    "content": "    \"abcoathup:  Do you know if SVG 2 draft is backwards compatible with SVG 1.1? I see references to compatibility but nothing specified at a high level. Scalable Vector Graphics (SVG) 2   It\u2019s not fully backwards compatible but is \u201cbuilds upon SVG 1.1 Second Edition\u201d. So it won\u2019t be a problem for most SVG elements but there still is a few breaking changes SVG 2 breaking changes \u00b7 w3c/svgwg Wiki \u00b7 GitHub (You can also see the new features here SVG 2 new features \u00b7 w3c/svgwg Wiki \u00b7 GitHub for a more readable version of Appendix K) My concern was raised by the <use> element <use> - SVG: Scalable Vector Graphics | MDN and its older xlink:href with the associated namespace xlink: that might not be supported at some point by browsers. But is still heavily used\u2026 In addition, the status of this W3C standard is very unclear to me as there was no significant progress/interest since 2018, but still the browsers implemented it (\"svg use: href\" | Can I use... Support tables for HTML5, CSS3, etc) So again, composer responsibility ?     \"abcoathup:  I would like to see a license that allows an ERC4883 to be composed by it\u2019s holder as long as not used in hate speech. (something along the lines of The Can\u2019t Be Evil NFT Licenses - a16z crypto   Me too  And thanks for all the details/explanations ! ",
                    "links": [
                        "https://github.com/w3c/svgwg/wiki/SVG-2-breaking-changes",
                        "https://github.com/w3c/svgwg/wiki/SVG-2-new-features",
                        "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use",
                        "https://caniuse.com/?search=svg%20use%3A%20href",
                        "https://a16zcrypto.com/introducing-nft-licenses/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.878716856060606
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/abcoathup",
                    "index": "15",
                    "likes": "1",
                    "time": "30/09/2022-02:54:38",
                    "content": "    anthonygraignic:  So again, composer responsibility ?   I am not sure it would be worth adding the SVG version to the EIP. as there is some backwards compatibility.  If a composer attempts to compose with an incompatible SVG then the user can undo any composing/linking. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/anthonygraignic",
                    "index": "16",
                    "likes": "1",
                    "time": "30/09/2022-13:43:17",
                    "content": "Yes totally, adding it would create a limitation. So it shouldn\u2019t be added to the EIP  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1678"
}