{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/remote-procedure-call-specification/1537",
            "title": "Remote procedure call specification ",
            "index": 1537,
            "category": [
                "Interfaces"
            ],
            "tags": [
                "json-rpc"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "1",
                    "likes": "11",
                    "time": "05/10/2018-19:53:56",
                    "content": "Much of Ethereum\u2019s effectiveness as an enterprise-grade application platform depends on its ability to provide a reliable and predictable developer experience. Nodes created by the current generation of Ethereum clients can expose RPC endpoints with differing method signatures; this forces applications to work around method inconsistencies to maintain compatibility with various Ethereum RPC implementations. Both Ethereum client developers and downstream dapp developers lack a formal Ethereum RPC specification. This proposal attempts to standardize such a specification in a way that\u2019s versionable and modifiable through the traditional EIP process. This initial draft was based on the current Ethereum RPC wiki documentation, so feedback is highly encouraged. Proposal draft Related to ethereum/EIPs#1442 ",
                    "links": [
                        "https://github.com/bitpshr/EIPs/blob/eip-rpc/EIPS/eip-rpc.md",
                        "https://github.com/ethereum/EIPs/issues/1442",
                        "https://ethereum-magicians.org/t/oasis-eip-stewarding-process/3156/17"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.027272727272727
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/perpetualescap3",
                    "index": "2",
                    "likes": "2",
                    "time": "05/10/2018-22:36:52",
                    "content": "Thank you for formalizing this, glad to see a section that defines a process for adding new RPC methods too, albeit a bit sparse. Would be great to get anyone from geth / parity to chime in to help refine the actual specification for key RPC endpoints too, but I expect this to evolve over time. This is very-much needed and this markdown format looks great compared to the current wiki RPC article everyone relies on today. Long overdue. A1 effort for the doing this for the community @bitpshr. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.366477272727273
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "3",
                    "likes": "3",
                    "time": "05/10/2018-23:29:10",
                    "content": "This is excellent. I\u2019m super appreciative of this. As a frequent user of the existing spec, may I suggest that one of the best parts of those specs is the \u2018curl\u2019 examples. I\u2019m not sure how hard that would be to add, but I constantly copy and paste those commands as I\u2019m adding new features to my code. Also, I very much encourage the addition of a process for enhancing/expanding the RPC interfaces. There\u2019s a lot of things that can be improved. Finally, I wonder how hard it would be to attach some documentation on using the IPC interfaces. The requests are the same, but the connection is different (not sure how). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.782121212121211
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "4",
                    "likes": "1",
                    "time": "06/10/2018-00:23:46",
                    "content": "Hi @tjayrush, thanks for your feedback. I updated all method examples with proper curl syntax and strengthened the verbiage around the process for adding or modifying RPC methods. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/veox",
                    "index": "5",
                    "likes": "2",
                    "time": "08/10/2018-09:01:20",
                    "content": "    tjayrush:  I wonder how hard it would be to attach some documentation on using the IPC interfaces.   As I understand, this EIP is about standartising a set of JSON-RPC requests, and associated responses. Information on using IPC (local sockets), HTTP (or websockets), or some other transport are likely out of scope for this document. At least I hope so, as otherwise it\u2019d make the scope very broad. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.470486111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/veox",
                    "index": "6",
                    "likes": "1",
                    "time": "08/10/2018-09:09:08",
                    "content": "    bitpshr:  This initial draft was based on the current Ethereum RPC wiki documentation , so feedback is highly encouraged.   There is a mention of \u201ccompact notation\u201d, but no in-document explanation, or outside reference, to what that is. There may be value in adding the generic section on RFC2119 keywords, like in this EIP, for example. The shh (Whisper) methods likely shouldn\u2019t be in this spec. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/blob/ed621645c8f3bc5756492f327cda015f35d9f8da/EIPS/eip-1123.md#rfc2119"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.133333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "7",
                    "likes": "3",
                    "time": "08/10/2018-15:49:34",
                    "content": "Thanks for the feedback @veox. I made a few updates to the proposal:  Clarified the verbiage around \u201ccompact hex notation\u201d Added the verbiage suggested by RFC-2119 Removed the whisper RPC methods since they aren\u2019t technically Ethereum RPC methods  Also, you are correct that the sole intention of this EIP is to standardize Ethereum RPC requests, not to standardize semantics around underlying transport layers or their connections (though I do think that would be worthwhile in the future, @tjayrush.) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/veox",
                    "index": "8",
                    "likes": "2",
                    "time": "09/10/2018-12:08:42",
                    "content": "    bitpshr:  Clarified the verbiage around \u201ccompact hex notation\u201d   Nice! It would perhaps be worthwhile to include all of 0x, 0x0, 0x00 for both Quantity and Data, to make the tables as explicit as possible. For Quantity:   0x - invalid - empty not a valid quantity  0x0 - valid - interpreted as a quantity of zero  0x00 - invalid - extra leading 0 digit  For Data:   0x - valid - interpreted as empty data  0x0 - invalid - each byte must be represented using two hex digits  0x00 - valid - interpreted as a single zero byte   ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.698979591836735
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "9",
                    "likes": "2",
                    "time": "09/10/2018-14:16:38",
                    "content": "Good call @veox, updated. This type of feedback is valuable and very much appreciated. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carver",
                    "index": "10",
                    "likes": "0",
                    "time": "09/10/2018-17:15:57",
                    "content": "For eth_estimateGas, how about adding a note for what should happen in different scenarios:  revert throw ran out of gas, at the pending block\u2019s gas limit  In my opinion, it should return an \u201cerror\u201d instead of a \u201cresult\u201d. None of the error codes is an obvious match to me, so maybe we need a new code (or a few). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.920454545454546
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hiddentao",
                    "index": "11",
                    "likes": "1",
                    "time": "10/10/2018-13:24:16",
                    "content": "In the ethereum clients list you should also include Ganache. On a larger note, it\u2019s important that clients focussed on testing also implement this interface correctly. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dekz",
                    "index": "12",
                    "likes": "1",
                    "time": "16/10/2018-02:07:23",
                    "content": "This makes me incredibly happy as a library developer. Would love to contribute in any shape or form. I had begun work on a test suite which executed some known tests against various providers and output their result. Sort of a compliance framework. This was focused on the Provider signing behaviour (eth_sign). Revert with Reason is another inconsistent response from RPC providers. Definitely documenting the error responses is just as important as documenting the success responses. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dekz",
                    "index": "13",
                    "likes": "0",
                    "time": "17/10/2018-07:41:10",
                    "content": "How would you like to go about discussing defining the non-success error cases for things like eth_call. This is an interesting \u201cerror\u201d response since the eth_call can fail or a number of reasons (usual JSON RPC error, contract not found) and it can also fail and return data, such as the revert with reason. Last time I checked, Geth and Parity differ in how they return this data. Geth && Ganache: {   \"jsonrpc\": \"2.0\",   \"id\": 824,   \"result\": \"0x08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000017494e56414c49445f4f524445525f5349474e4154555245000000000000000000\" }  Parity: {   \"jsonrpc\": \"2.0\",   \"id\": 16,   \"error\": {     \"code\": -32015,     \"data\": \"Reverted 0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000f5452414e534645525f4641494c45440000000000000000000000000000000000\",     \"message\": \"VM execution error.\"   } }  There are two things that are important here:  The call reverted The revert returned some data, revert with reason   With Geth/Ganache it is hard to determined if in fact the eth_call was a Revert. Luckily no one has ran into a bytes4 collision with 0x08c379a, yet\u2026 Parity\u2019s response alerts you to the fact that it did revert, though having to parse out the Reverted string to detect this is inconvenient. I am also not 100% convinced that this is an error case, but am happy to be convinced otherwise. I would like to discuss this case behave similar to a eth_call success, but with the introduction of the status field. Status field behaves as expected with other JSONRPC calls: status - 1 if this transaction was successful or 0 if it failed Revert With Reason: {   \"jsonrpc\": \"2.0\",   \"id\": 16,   \"status\": \"0x00\",   \"result\": \"0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000f5452414e534645525f4641494c45440000000000000000000000000000000000\", }  Revert: {   \"jsonrpc\": \"2.0\",   \"id\": 16,   \"status\": \"0x00\",   \"result\": \"0x\", }  Successful call: {   \"jsonrpc\": \"2.0\",   \"id\": 16,   \"status\": \"0x01\",   \"result\": \"0xcafe\", }  Standard error response: {     \"jsonrpc\": \"2.0\",     \"id\": 1337,     \"error\": {         \"code\": -32000,         \"message\": \"Invalid Input\"     } }  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.9753086419753085
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ryanschneider",
                    "index": "14",
                    "likes": "1",
                    "time": "17/10/2018-15:41:22",
                    "content": "I think adding status to the top-level result is a little too far outside the bounds of the JSONRPC 2.0 spec: https://www.jsonrpc.org/specification#response_object While the spec doesn\u2019t expressly forbid adding new top-level fields, it doesn\u2019t allow it either, and most JSONRPC parsers would at best ignore the status field and at possibly throw an error. So, I think any solution to the problem needs to be JSONRPC 2.0 compliant.  Parity\u2019s \u201creverted\u201d format is in-spec, but could be tweaked slightly to make it easier to parse: {   \"jsonrpc\": \"2.0\",   \"id\": 16,   \"error\": {     \"code\": -32015,     \"data\": {        \"result\": \"0x\",  // is the 0x08c379a... data useful? if so include it        \"status\": \"reverted\",     },     \"message\": \"VM execution error: transaction reverted\"   } }  Alternatively, as you said, if reverting isn\u2019t an error, the only real option is to make the eth_call result an object instead of a single string, but that will be a breaking change for many web3 libraries. In hindsight, the result field for all RPCs should always be a complex object, so that fields can be added easily in the future.  Perhaps that should be an EIP requirement for new methods going forward, but I think is too onerous to back port to the existing methods. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.078682230467945
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cdetrio",
                    "index": "15",
                    "likes": "7",
                    "time": "17/10/2018-17:15:49",
                    "content": "copying from the PR description:  Note:  There doesn\u2019t appear to be any RPC-friendly API documentation standard, otherwise I\u2019d be open to using that over markdown. Still, this EIP is meant to provide a human-readable RPC specification and isn\u2019t necessarily meant to be program-readable or to drive other documentation tooling (though the markdown itself could drive tooling if desired).  My expectation is that if the RPC specification is only human readable, then it will quickly become outdated just like the current wiki. A human-readable spec relies on volunteers (client developers and users) to update the documentation, which is a laborious burden that people tend to grow tired of. As a solution, I proposed a machine-readable spec (https://github.com/ethereum/EIPs/issues/217), and kickstarted the effort with a multi-client testrunner and proof-of-concept compatibility table:  http://cdetrio.github.io/eth-compat-table It was recently dusted off and run again on the the latest clients: https://github.com/karalabe/hive/issues/119 Here\u2019s a screenshot of the table:  45170761-f5e57580-b200-11e8-89f8-7db9320c9cab.png1146\u00d7857 102 KB  It only has the JSON schema specs for a handful of rpc methods, so the main remaining todo is to add the rest. Additionally, I was planning to the description field in the json schema to auto-generate the wiki documentation. This way we would not be relying on volunteers to keep the documentation up to date. Rather, the testrunner automatically checks which clients are compatible with the spec, and the human-readable documentation is generated from the spec. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/217",
                        "http://cdetrio.github.io/eth-compat-table",
                        "https://github.com/karalabe/hive/issues/119",
                        "https://ethereum-magicians.org/uploads/default/original/1X/984f59430e35c79e1058b5a4f379d5941ca7ac7d.png"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.026785714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tjayrush",
                    "index": "16",
                    "likes": "0",
                    "time": "19/10/2018-12:42:18",
                    "content": "I totally support the idea that the spec should be machine readable. The human readable spec should be an output of the machine readable spec. The test results could be added to the human-readable machine-generated documentation. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dekz",
                    "index": "17",
                    "likes": "0",
                    "time": "23/10/2018-04:15:59",
                    "content": "I think this is a fine suggestion. Backporting or supporting older callers is possible but likely to be an extreme pain and disruption. Here is a real example of where the inconsistencies causes errors in projects like Metamask. Inconsistencies in these error cases cause wild and unexpected behaviours. \"status\": \"reverted\" I don\u2019t particularly want to bikeshed on this but usually this is a hex value no? eth_call is a simple way to validate a transaction has a chance of success before sending. So defining the failure case and standardising will help projects a lot. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.252604166666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dekz",
                    "index": "18",
                    "likes": "0",
                    "time": "23/10/2018-04:55:27",
                    "content": "Any thoughts on what to do about things in the ecosystem which hijack certain JSONRPC requests. For example, Metamask handles eth_sign but forwards all data fetching, though the responses can be different when going through Metamask versus a client directly. Is it easy to add additional less conventional \u201cclients\u201d to this test suite? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.338095238095239
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "19",
                    "likes": "1",
                    "time": "23/10/2018-05:36:45",
                    "content": "    dekz:  Any thoughts on what to do about things in the ecosystem which hijack certain JSONRPC requests. For example, Metamask handles eth_sign but forwards all data fetching, though the responses can be different when going through Metamask versus a client directly.   As I have argued in the past, signers and clients should be separated!  There is \u201cthe thing that signs stuff\u201d and there is \"the thing that sends/receives data from the blockchain.  It is most unfortunate that the early Ethereum clients combined these two functionalities into the same API rather than keeping them as separate APIs. I would love it if we could split the current API into two separate APIs, one for signing and one for fetching/submitting data from/to the blockchain.  Some tools would fulfill both APIs, but having them separate would allow you to mix and match as appropriate. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.500811688311689
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dekz",
                    "index": "20",
                    "likes": "0",
                    "time": "23/10/2018-08:41:33",
                    "content": "Agree and we can definitely see the carving up of responsibilities, its just at the library level right now. We do this in 0x.js and we encourage all developers to do this (via our developer docs and samples). Mix and match Ledger/Trezor/MM/Generic with a general JSONRPC data provider. At the very least I think we can section them off and call it out in the JSONRPC spec/wiki. Do you have thoughts on what this would ultimately look like? I imagine their specs should follow similar behaviour (in terms of errors and layout of results). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.954761904761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "21",
                    "likes": "0",
                    "time": "23/10/2018-09:20:46",
                    "content": "I haven\u2019t thought super deep on the implementation details.  In general, anything that requires a private key to complete should be part of the signer API and antsything that requires chain interaction would be part of the other API. This does get murky when you want to do things like verifiable signing UIs, because the signer needs chain access.  In such cases I would argue that should be part of the signing API, as the signer can gracefully degrade if it doesn\u2019t have chain access. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.223958333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shanejonas",
                    "index": "22",
                    "likes": "3",
                    "time": "03/04/2019-17:04:29",
                    "content": "we have been working on a solution that is now at 1.0.0, it is akin to openapi but specifically designed for JSON-RPC.    GitHub    open-rpc/spec The OpenRPC Specification Repository. Contribute to open-rpc/spec development by creating an account on GitHub.      here is the EIP PR   github.com/ethereum/EIPs       EIP-1901: Add OpenRPC Service Discovery To JSON-RPC Services     by shanejonas   on 06:43PM - 02 Apr 19 UTC   2 commits   changed 1 files   with 67 additions   and 0 deletions.        love to get some feedback and see how we can work to standardize JSON RPC descriptions. ",
                    "links": [
                        "https://github.com/open-rpc/spec",
                        "https://github.com/ethereum/EIPs/pull/1901",
                        "https://github.com/shanejonas",
                        "https://github.com/ethereum/EIPs/pull/1901",
                        "https://github.com/shanejonas",
                        "https://github.com/ethereum/EIPs/pull/1901"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/charles-cooper",
                    "index": "23",
                    "likes": "0",
                    "time": "03/04/2019-17:56:18",
                    "content": "@bitpshr How would one go about updating this specification? E.g. https://github.com/ethereum/EIPs/pull/1898. Just submit a PR modifying eip-1474.md? ",
                    "links": [
                        "https://github.com/ethereum/EIPs/blob/4e169dcb6e1d237c9f2e75eb347efb3c94b54f74/EIPS/eip-1474.md"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bitpshr",
                    "index": "24",
                    "likes": "0",
                    "time": "06/04/2019-14:01:00",
                    "content": "@charles-cooper: That works for me. If you tag me in a PR, I\u2019ll be sure to review it. I\u2019m also open to adding an additional EIP maintainer to 1474 so I\u2019m not the sole reviewer and don\u2019t be come bottleneck. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "25",
                    "likes": "1",
                    "time": "29/04/2019-14:41:57",
                    "content": "I posted something similar to this in the EIP PR for discussion on OpenRPC, but can these OpenRPC documents be composed?  i.e. if we had a standard set of documents \u201cthese OpenRPC files represent the standard eth_* RPCs for 1.0\u201d can I then publish a document on my node that includes the standard RPCs and includes my server specific endpoint name? My reason for asking is that a spec for this should not consist of \u201cplease use OpenRPC\u201d but instead it should be \u201chere are the standard OpenRPC mappings for EIP X, EIP Y, and EIP Z, they live at URLs A, B, and C, and here is a sample of MultiGeth composing those into one endpoint.\u201d  Otherwise this EIP is noting more than \u201cOpenRPC is cool, please use it.\u201d ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5479797979797985
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/boris",
                    "index": "26",
                    "likes": "0",
                    "time": "29/04/2019-18:17:08",
                    "content": "    shemnon:  My reason for asking is that a spec for this should not consist of \u201cplease use OpenRPC\u201d but instead it should be \u201chere are the standard OpenRPC mappings for EIP X, EIP Y, and EIP Z, they live at URLs A, B, and C, and here is a sample of MultiGeth composing those into one endpoint.\u201d Otherwise this EIP is noting more than \u201cOpenRPC is cool, please use it.\u201d   Yes! Excellently phrased. Same goes for GraphQL and anything else. @bitpshr want to take another crack at making a separate JSON-RPC repo? I don\u2019t have time to lead this process, but much like devp2p now has a separate repo to gather interested parties I think this would be valuable. This one is basically empty and can be ready to go: https://github.com/spadebuilders/ethereum-json-rpc-spec But obviously any home base repo for the spec & related standards/implementations would work. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.701486013986015
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shanejonas",
                    "index": "27",
                    "likes": "1",
                    "time": "30/04/2019-19:24:07",
                    "content": "@shemnon I\u2019ve added the entire openrpc.json for #1474 + #1436 and eth_getRawTransaciton* methods to the Pull Request here: https://raw.githubusercontent.com/ethereum/EIPs/dbf64faff4dfe2f832d752292a39b8d7b9b46d2a/assets/eip-1901/openrpc.json And to answer the question around composition, yes its possible, having relative paths is a bit of an edge case, but see my comment here: https://github.com/ethereum/EIPs/issues/1902#issuecomment-488075648 I think that having 1 canonical EIP that contains ALL the methods will help get everyone on the same page, rather than breaking it out to separate files. The same way the #1474 gets updated. Any client can easily extend it. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/1902#issuecomment-488075648"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.361111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "28",
                    "likes": "2",
                    "time": "30/04/2019-22:35:44",
                    "content": "My concern with one canonical EIP is then clients that do not implement all the endpoints will need to edit the canonical file to remove them, and if clients are chopping up canonical files their value is diminished. As an example Pantheon does not implement eth_send* and eth_sign* methods because we do not integrate a key management system for wallet keys in the node (this is a deliberate security decision). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shanejonas",
                    "index": "29",
                    "likes": "1",
                    "time": "01/05/2019-05:39:17",
                    "content": "I like the idea of just removing eth_send* and eth_sign* (except send raw) from the specification altogether. I\u2019d rather users not be able to keep their funds in clients either. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.673076923076923
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shanejonas",
                    "index": "30",
                    "likes": "2",
                    "time": "01/05/2019-08:21:18",
                    "content": "Took the time to put this repo together let me know what you think: https://github.com/etclabscore/ethereum-json-rpc-specification Hopefully this addresses the comments above. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "31",
                    "likes": "2",
                    "time": "02/05/2019-06:32:09",
                    "content": "EIP-1767 (the GraphQL EIP) also didn\u2019t implement the send and sign transactions as a non-essential call for nodes.  There appears to be some consensus on that.  A second file with those APIs may be useful to clients who do implement it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "32",
                    "likes": "0",
                    "time": "23/05/2019-16:38:05",
                    "content": "eth_signTypedData says that the second parameter\u2019s type is Data but it is not, it is a complex object. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shanejonas",
                    "index": "33",
                    "likes": "1",
                    "time": "29/06/2019-18:53:00",
                    "content": "Here is the talk from EDCON 2019 on OpenRPC and how we can level up the ecosystems tooling:  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/hu55a1n1",
                    "index": "34",
                    "likes": "0",
                    "time": "22/01/2020-21:55:10",
                    "content": "The draft says the following with regard to eth_getLogs -  Note:  The return value of  eth_getLogs  when retrieving logs from  eth_newBlockFilter  and  eth_newPendingTransactionFilter  filters will be an array of hashes, not an array of Log objects.  I think it would be nice to clarify how to use eth_getLogs with block/pendingTransaction filters. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tasd",
                    "index": "35",
                    "likes": "1",
                    "time": "27/02/2020-01:54:33",
                    "content": "Bumping this topic up, and calling for people from various organizations to participate in the OpenRPC standards development process that is being run (as sort of a pilot project) by OASIS (see https://github.com/ethereum-oasis/oasis-open-project and OASIS-EIP stewarding process). Is OpenRPC important to you?  Do you see anything in the current spec that you\u2019d like to change or improve?   If so, please consider supporting the OpenRPC standard development process by joining the Technical Steering Committee.  Contact me for details. ",
                    "links": [
                        "https://ethereum-magicians.org/t/oasis-eip-stewarding-process/3156/17"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.541666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/marmistrz",
                    "index": "36",
                    "likes": "0",
                    "time": "06/06/2022-08:11:31",
                    "content": "What\u2019s the expected behavior of eth_getLogs if the blockHash does not correspond to any block? This is not just a theoretical consideration, since chain reorganizations might cause a blockHash to no longer be valid. I\u2019ve seen implementations which return the error code -32000 (invalid input) with the message \"unknown block\", I\u2019ve seen implementations which simply return an empty array. Perhaps -32001 (resource not found) would be a better error code, but I didn\u2019t see it in any implementation. I think that the behavior for unknown blocks should be standardized. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.071428571428571
                }
            ]
        }
    ],
    "group_index": "446"
}