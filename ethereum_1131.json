{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2935-save-historical-block-hashes-in-state/4565",
            "title": "EIP-2935: Save historical block hashes in state ",
            "index": 4565,
            "category": [
                "EIPs"
            ],
            "tags": [
                "data",
                "opcodes",
                "eip-2935"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "1",
                    "likes": "1",
                    "time": "03/09/2020-05:36:11",
                    "content": "Store historical block hashes in a contract, and modify the BLOCKHASH (0x40) opcode to read this contract.   github.com/ethereum/EIPs         Save historical block hashes in state   ethereum:master \u2190 ethereum:vbuterin-patch-4            opened 05:35AM - 03 Sep 20 UTC               vbuterin             +63 -0           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/2935",
                        "https://github.com/vbuterin",
                        "https://github.com/ethereum/EIPs/pull/2935/files"
                    ],
                    "GPT-summary": "The post is an explanation of a proposal called EIP-2935, which suggests storing historical block hashes in a contract and modifying the BLOCKHASH opcode to read this contract. The author of the proposal is providing an explanation of the proposal. Additionally, a third party is giving constructive criticism of the proposal, and the proposal is being audited and reviewed.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "2",
                    "likes": "0",
                    "time": "03/09/2020-05:59:56",
                    "content": "Big fan personally, because it would make it so https://github.com/Keydonix/uniswap-oracle/ could work over longer periods of time than 1 hour. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ajsutton",
                    "index": "3",
                    "likes": "0",
                    "time": "03/09/2020-06:13:52",
                    "content": "While it\u2019s probably ok to have this list be ever increasing in size, given we currently have a 256 block limit on block hash it seems sensible to put an upper bound on the history stored.  That should be as simple as using sstore(HISTORRY_STORAGE_ADDRESS, block.number - 1 % 256, block.prevhash) for storage and sload(HISTORY_STORAGE_ADDRESS, arg % 256) to load, preserving the current checks that arg < 256. We could still increase the limit from 256 if desired but avoiding the assumption that history will be available indefinitely seems wise, especially since the ETH2 history only preserves a limited range and it\u2019s unlikely that ETH1 will be moved into ETH2 within that timeframe (~13 hours). Otherwise we risk it becoming a backwards incompatible change when moving to ETH2 or being stuck storing unlimited block history forever. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.616071428571429
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "4",
                    "likes": "0",
                    "time": "07/09/2020-09:00:24",
                    "content": "This EIP doesn\u2019t mention any repricing of BLOCKHASH. Seems to me that the current 20(?) will be far too low, seeing as this will have to traverse a (with time) pretty large trie. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.564285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "5",
                    "likes": "0",
                    "time": "07/09/2020-09:08:41",
                    "content": "   Ethereum Research \u2013 20 Apr 20    The curious case of BLOCKHASH and Stateless Ethereum TLDR: It would be useful to consider EIP-210 (or a variant of it) for Stateless Ethereum.  The BLOCKHASH opcode can be used to query the hash of the past 256 blocks. Blocks and block hashes are not part of the state trie, but are only referenced by... Reading time: 2 mins \ud83d\udd51 Likes: 9 \u2764      After this I had a few discussions and it seems having the blockhash in state, but not in a contract/account, is what would work the best with witnesses and transaction packaging. If it is part of an account\u2019s state, then witnesses have to have a special case for this account or it would not be easy for \u201crelayers\u201d to batch and update witnesses for the blockhash. By having it in the state I mean to store its root in the block header and keep it separate to the account trie, similar to historical hashes on the beacon chain. ",
                    "links": [
                        "https://ethresear.ch/t/the-curious-case-of-blockhash-and-stateless-ethereum/7304"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.558170995670996
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "6",
                    "likes": "0",
                    "time": "07/09/2020-12:11:35",
                    "content": "    axic:  By having it in the state I mean to store its root in the block header and keep it separate to the account trie, similar to historical hashes on the beacon chain.   Interesting. It would definitely reduce the \u2018witness-churn\u2019, and one could imagine having a BLOCKROOT opcode to retrieve the cht-root. That type of solution could, if given a (number,hash) check if it\u2019s in the history, whereas the proposed 2935 is more powerful; given a number, it could look up the hash. Dunno enough about the indended usecases to know whether that\u2019s sufficient or not. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.6171875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "7",
                    "likes": "0",
                    "time": "07/09/2020-12:39:42",
                    "content": "    holiman:  Interesting. It would definitely reduce the \u2018witness-churn\u2019, and one could imagine having a BLOCKROOT opcode to retrieve the cht-root . That type of solution could, if given a (number,hash) check if it\u2019s in the history, whereas the proposed 2935 is more powerful; given a number , it could look up the hash . Dunno enough about the indended usecases to know whether that\u2019s sufficient or not.   Actually that is a good question, what are the intended use cases:   I would think many still use it as a terrible source of randomness. Which is discouraged.   For creating proofs, one can definitely expect the sender to provide their expected root hash (supposedly they compare that against what BLOCKHASH returns) and it would not be unheard of to ask for the appropriate block number too. So I think a system like BLOCKROOT would not hinder the use cases where a proof is validated.   Is there any other use case out there? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.6826923076923075
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/holiman",
                    "index": "8",
                    "likes": "0",
                    "time": "07/09/2020-13:02:13",
                    "content": "    axic:  For creating proofs, one can definitely expect the sender to provide their expected root hash (supposedly they compare that against what BLOCKHASH returns) and it would not be unheard of to ask for the appropriate block number too. So I think a system like BLOCKROOT would not hinder the use cases where a proof is validated.   Although\u2026 this would also suffer from the same churn. Say you provide hashes 15 root elements, and a few more hashes along the way to prove your BLOCKHASH. And ship that off in a transaction\u2026 Well, whether it goes into block N or N+1 will make all the difference whether your proof is valid or not. Btw, sidenode: geth uses chts, both hardcoded (we update the cht when we make new releases) and in contract-form (which we submit new cht signatures into around the time of releases). Those cht:s are in certain section sizes, of 32768 blocks. See https://github.com/ethereum/go-ethereum/blob/master/contracts/checkpointoracle/contract/oracle.sol ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.65945165945166
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/BoltonBailey",
                    "index": "9",
                    "likes": "0",
                    "time": "08/09/2020-02:04:24",
                    "content": "This would also make it more straightforward to implement a FlyClient-type client. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.1875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/yoavw",
                    "index": "10",
                    "likes": "1",
                    "time": "08/09/2020-02:19:42",
                    "content": "One use case to consider is an \u201cintrospection engine\u201d that allows contracts to consider assertions about any past state.  Similar to verifying a fraud proof against optimistic rollup data, but more generalized.  It becomes possible to trustlessly look at any blockchain data from inside EVM. For this use case, the block number and block hash are known when making the transaction, so it would work fine even if the block hash can only be verified in EVM rather than queried.  It\u2019s just proof validation. One use I\u2019m exploring for such introspection engine is trustless blockchain read access through a network of staked nodes.  A client would be able to query the history (at cost), get a signed reply, and be able to verify it with other staked nodes who would be able to slash any node that provided clients with bogus history.  That makes ultra-light clients quite easy to implement. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.03125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "11",
                    "likes": "0",
                    "time": "08/09/2020-02:27:13",
                    "content": " By having it in the state I mean to store its root in the block header and keep it separate to the account trie, similar to historical hashes on the beacon chain.  This is indeed how it\u2019s done on eth2. The challenge I see is just that on eth1 this would be more challenging to implement, requiring a whole new data structure etc etc. Whereas the storage-based solution is much more surgical and non-intrusive. Any opcodes would just seamlessly migrate from being based off of the eth1 blockhash store to being based off of the eth2 blockhash store. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.902146464646465
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tkstanczak",
                    "index": "12",
                    "likes": "0",
                    "time": "10/10/2020-10:37:01",
                    "content": "Suggested minor fix:   github.com/ethereum/EIPs         Update eip-2935.md   ethereum:master \u2190 tkstanczak:patch-6            opened 10:30AM - 10 Oct 20 UTC               tkstanczak             +2 -2           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/3033",
                        "https://github.com/tkstanczak",
                        "https://github.com/ethereum/EIPs/pull/3033/files"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tkstanczak",
                    "index": "13",
                    "likes": "0",
                    "time": "10/10/2020-10:37:23",
                    "content": "Implementation in Nethermind:   github.com/NethermindEth/nethermind         Eip2935   NethermindEth:master \u2190 NethermindEth:eip2935            opened 10:31AM - 10 Oct 20 UTC               tkstanczak             +162 -5           ",
                    "links": [
                        "https://github.com/NethermindEth/nethermind/pull/2368",
                        "https://github.com/tkstanczak",
                        "https://github.com/NethermindEth/nethermind/pull/2368/files"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tkstanczak",
                    "index": "14",
                    "likes": "0",
                    "time": "10/10/2020-10:39:08",
                    "content": "I am suggesting the cost of SLOAD (800) instead of the cost of BLOCKHASH (20) when searching. Interesting case is - > shall we always charge 20 for the last 256 blocks or start charging 800 for everything after the FORK_BLKNUM + 256. I suggest 800 always as we wanted to raise the BLOCKHASH cost anyway. And the last thing -> I suggest creating an account with the bytecode of [\u2018STOP\u2019] at the BlockhashStorage address at FORK_BLKNUM to avoid the strange case where we have an account with no code but with storage. This could lead to various problems with existing behaviours. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.45
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sinamahmoodi",
                    "index": "15",
                    "likes": "0",
                    "time": "12/10/2020-07:26:57",
                    "content": "I\u2019d like to argue for adding all block hashes since genesis to the history contract and not only the ones since the HF block. Otherwise if we want to build a light-client sync protocol on top of this EIP, the HF block becomes sort of a new hard-coded genesis. It should also be useful for the L2 networks stated in the motivations of the EIP. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.170454545454546
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "16",
                    "likes": "0",
                    "time": "14/10/2020-06:48:02",
                    "content": " I\u2019d like to argue for adding all block hashes since genesis to the history contract and not only the ones since the HF block.  Unfortunately doing large one-time state changes like that would require machinery that we don\u2019t yet have. I\u2019d recommend that we just have an \u201cuntrusted setup ceremony\u201d where people run a script to generate a Merkle root of the first FORK_BLKNUM block hashes, and that gets hardcoded into all the wallets and anything else that needs to access history; anyone can run the script to check the root themselves later if they wish. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.964285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "17",
                    "likes": "0",
                    "time": "27/10/2020-20:25:08",
                    "content": "can this be done without the storage trie write?  Couldn\u2019t BLOCKHASH simply be re-written to say \u201ceither 256 blocks or since the fork\u201d and let the clients choose their own storage mechanism?  Perhaps Kate Commitments instead?  I really don\u2019t like the idea of adding an unbound merkle trie update to every block.  With the miner reward and other contracts at least the trie is not mandated to grow for each block, whereas this requires one storage trie to always update. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sinamahmoodi",
                    "index": "18",
                    "likes": "0",
                    "time": "28/10/2020-09:35:49",
                    "content": "I agree the BLOCKHASH opcode and history contract are not dependent on each other as you say, but most of the use-cases become feasible with the history contract. So ideally we\u2019d have that even if without the BLOCKHASH opcode modification (since you can prove old blocks in EVM when you have the commitment).  whereas this requires one storage trie to always update.  If the concern is the cost of this update, can\u2019t the tx base fee be increased to account for it? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.575
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "19",
                    "likes": "0",
                    "time": "20/01/2021-04:32:13",
                    "content": "EIP-2935 explained by Tomasz Stanczak - https://youtu.be/QH5yuNd3B6o ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/yoavw",
                    "index": "20",
                    "likes": "0",
                    "time": "11/02/2021-01:12:05",
                    "content": "Good talk by @tkstanczak. Regarding the comment about not feeding prehistory (block hashes from before the fork) I think that\u2019s fine although I intend to (rarely) access prehistory in one of my contracts. I intend to solve by running a script, after the fork, which generates a merkle tree of all prehistorical hashes, and stores the root in a contract that has a verification function.  Caller would provide block number, block hash, and merkle path to prove it.  The script itself will be published so anyone would be able to run it independently to verify the merkle root before trusting that contract.  Since prehistory never changes after the fork, you only need to run it once. Storage is O(1), at the cost of merkle verification on every access.  Probably a reasonable trade-off for those rare cases where a contract needs to access ancient blocks. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.510416666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "21",
                    "likes": "0",
                    "time": "19/03/2021-08:29:02",
                    "content": "Can we please use an address close to the bottom of the address space? Anything smaller than 2*32 will be fine. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.041666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gpsanant",
                    "index": "22",
                    "likes": "0",
                    "time": "21/03/2022-04:41:02",
                    "content": "Before this opcode becomes available, the problem with storing a merkle root of blockhashes up to a certain block number, is that you can\u2019t update the merkle root securely to get the hash of more recent blocks. To combat that, before this EIP is implemented, I wrote a fun little optimistic rollup (based on interactive fraud proofs) to figure out determine historical blockhashes optimistically. It\u2019s super experimental and not tested, but all of the elements are there . ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.030059523809523
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dwardu",
                    "index": "23",
                    "likes": "1",
                    "time": "07/06/2022-23:41:01",
                    "content": "Are there any plans to implement this proposal please? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1131"
}