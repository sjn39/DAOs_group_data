{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2294-explicit-bound-to-chain-id/11090",
            "title": "EIP-2294: Explicit bound to Chain ID ",
            "index": 11090,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm",
                "opcodes",
                "core-eips",
                "chain-id",
                "shanghai-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "1",
                    "likes": "0",
                    "time": "28/09/2022-18:47:01",
                    "content": "I came across this EIP-2294 and think it\u2019s important. Highlighting it here for the community discussion. Related prior discussion  EIP-1344: Add chain id opcode EIP-1344: Update uint256 field size to uint64 by fubuloubu \u00b7 Pull Request #2263 \u00b7 ethereum/EIPs \u00b7 GitHub  So far the biggest chainid that\u2019s publically known to us is   868,455,272,153,094 aka 0x 3 15DB 0000 0006  from in github.com/ethereum-lists/chains  Update 2022-10-18: Here are two mutually exclusive scenarios the EIP try to prevent/resolve   With the increasing number of chains, in particular in the post-sharding future of EVMs, some people want to use some hash function for collision resilient hashing functions e.g. keccak256(<human-readable-string\") as a way to generate new chainIds which will be the full space of uint256   ChainId was being used be added to the parity bit for signatures e.g. EIP-712 which has a ceiling of floor(MAX_UINT64 / 2) - 36 unless we manipulate the algorithm.   These two requirement for chainId space must be resolved and I urge that we make a decision before Shanghai hardfork   Invite to comment  Authors of EIPs that might be affected  EIP-712:  @recmo et al EIP-1191: @juli et al EIP-1271: @frangio et al EIP-1344: @rmeissner at al EIP-1959: @wighawag at al EIP-3770: @lukasschor at all  ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-1344-add-chain-id-opcode/1131",
                        "https://github.com/ethereum/EIPs/pull/2263",
                        "https://github.com/ethereum-lists/chains/blob/master/_data/chains/eip155-868455272153094.json"
                    ],
                    "GPT-summary": "The author of the post is sharing an EIP-2294 proposal and inviting the community to discuss it. The proposal aims to address two scenarios related to the increasing number of chains and the use of chainId. The author is asking for feedback and inviting authors of EIPs that might be affected to comment. The post also provides related prior discussions and information about the biggest known chainId.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Law and regulations",
                        "Community and engagement",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None"
                    ],
                    "Sentiment": 5.7206439393939394
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "2",
                    "likes": "0",
                    "time": "28/09/2022-23:48:15",
                    "content": "Resuming the EIP-2294 as PR EIP-2294: Explicit bound to Chain ID size by xinbenlv \u00b7 Pull Request #5728 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "3",
                    "likes": "3",
                    "time": "04/10/2022-20:17:47",
                    "content": "One major concern I have with limiting chain IDs to ~63 bits is that you cannot then have a hash used as a chainID.  I would want the limit to be 256, 384, or 512, or unspecified. ~63 bits of entropy is not sufficient collision resistance for a hash function, reasonable use or not. What may be needed is for clients to present loud warning messages when chain IDs that are not supported by hardware wallets are used (and I think 32 bits is the real limit for that). Just a  loud obnoxious warning if block height is < 100k (i.e. soon enough to reconsider your chain), not a hard block. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.505208333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "4",
                    "likes": "0",
                    "time": "05/10/2022-00:21:12",
                    "content": "Hi all, I am moving the EIP-2294 to Review status   github.com/ethereum/EIPs         Move EIP-2294 to Review   ethereum:master \u2190 xinbenlv:chainidsize            opened 12:45AM - 07 Oct 22 UTC               xinbenlv             +4 -5       When opening a pull request to submit a new EIP, please use the suggested templa\u2026te: https://github.com/ethereum/EIPs/blob/master/eip-template.md  We have a GitHub bot that automatically merges some PRs. It will merge yours immediately if certain criteria are met:   - The PR edits only existing draft PRs.  - The build passes.  - Your GitHub username or email address is listed in the 'author' header of all affected PRs, inside <triangular brackets>.  - If matching on email address, the email address is the one publicly listed on your GitHub profile.       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5763",
                        "https://github.com/xinbenlv",
                        "https://github.com/ethereum/EIPs/pull/5763/files",
                        "https://github.com/ethereum/EIPs/pull/5763"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.438311688311687
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "5",
                    "likes": "0",
                    "time": "18/10/2022-17:19:44",
                    "content": "@shemnon Totally agree with that rationale. Let me address them and loop in other authors for comment ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "6",
                    "likes": "1",
                    "time": "10/11/2022-15:41:19",
                    "content": "In today\u2019s ACD, @xinbenlv advocated to prioritize EIP-2294 into shanghai fork. @MariusVanDerWijden responded that if it\u2019s low cost, let\u2019s do it, but don\u2019t need to have a deadline to be shipped before Shanghai fork. @MicahZoltu responded support EIP-2294 that bounds chainId at its current proposed ceiling. Because it has been a de facto rule. @MicahZoltu further proposed that we don\u2019t need to do any coding immediately, just need to agree as a group and call it a rule. @shemnon responded whether we should accept such bounding just because no one has ever used any chainId above bounds. Ask to think twice. Please correct me if I were wrong. ",
                    "links": [
                        "https://github.com/MariusVanDerWijden",
                        "https://github.com/MicahZoltu",
                        "https://github.com/MicahZoltu",
                        "https://github.com/shemnon"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "7",
                    "likes": "1",
                    "time": "10/11/2022-15:42:09",
                    "content": "@sambacha responded on github Metamask has a hardcoded value for rejecting chainId\u2019s over a certain number. That number is calculated based off of source from remarks, metamask engineer From ethereumjs-util@7.0.5, we have that:    v = recovery + (chainId * 2 + 35)  Per the above discussion, we also have that:    int_max = 2**53 - 1   recovery_max = 3   chainId_max = ?  Therefore:    v_max = 3 + (chainId * 2 + 35) = chainId * 2 + 38     &&   v_max <= int_max        ->        2**53 - 1 = MAX_SAFE_CHAIN_ID * 2 + 38        ->        // Since we're dealing with integers, we round down.      MAX_SAFE_CHAIN_ID = floor( ( 2**53 - 39 ) / 2 ) = 4503599627370476  Ethereumjs-util as referenced above has BigInt support since 7.0.9, regardless metamask has encoded this value within their application. see https://github.com/ethereumjs/ethereumjs-util/releases/tag/v7.0.9 ",
                    "links": [
                        "https://gist.github.com/rekmarks/a47bd5f2525936c4b8eee31a16345553",
                        "https://github.com/ethereumjs/ethereumjs-util/releases/tag/v7.0.9"
                    ],
                    "GPT-discussion-categories": [],
                    "Sentiment": 4.858730158730158
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sbacha",
                    "index": "8",
                    "likes": "1",
                    "time": "10/11/2022-16:02:49",
                    "content": "Here is an example of how replay protection safe chainId is used in a contract: tweak: add block.chainid as per t11s public shaming \u00b7 yieldprotocol/yield-utils-v2@13ec941 \u00b7 GitHub A more comprehensive example: BoringSolidity/Domain.sol at master \u00b7 boringcrypto/BoringSolidity \u00b7 GitHub WETH10 adopts such measures even: WETH10/WETH10.sol at e952d1ec4c149e85d93ed2ce4040ac571ed6bc19 \u00b7 WETH10/WETH10 \u00b7 GitHub As for networks that exceed the safe limit, I have only seen one, and it was an ephemeral test network. ",
                    "links": [
                        "https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/Domain.sol",
                        "https://github.com/WETH10/WETH10/blob/e952d1ec4c149e85d93ed2ce4040ac571ed6bc19/contracts/WETH10.sol#L282"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "9",
                    "likes": "3",
                    "time": "15/11/2022-20:42:08",
                    "content": "I understand that some tooling limits CHAIND, but I don\u2019t see this as a reason to shut down all ChainIDs over 53 bits in length.  I see a future where there are large amounts of ephemiral L2 and L3 chains and they will need a mechanical way to set a rational and deterministic means, and a 256 bit hash is that means.  Much like how CREATE2 enabled Uniswap and it\u2019s derivatives.  I don\u2019t want to kneecap this future because math in JavaScript has non-obvious rules. Perhaps we need to limit chainIDs expressable by transaction types.  For Type 0/legacy (Frontier) transactions the metamask limit is enforced, since integer math needs to be performed on the chain ID. For Type 1 (Berlin) and Type 2 (London) transactions a 256 bit limit is enforced. There is no math done for these transactions: it is a binary blob moved around without encoding.  The limit here comes from EVM limits of 256 bits returned from the CHAINID operation.  The impact being if you want to use a hashed ChainID you must use a modern transaction container. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.382275132275133
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "10",
                    "likes": "1",
                    "time": "18/11/2022-06:56:46",
                    "content": "I find the \u201cdeterministically generated globally unique chain ID\u201d argument to be quite compelling and I think that puts me into the camp of asserting that ChainID is 256 bits. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "11",
                    "likes": "0",
                    "time": "20/11/2022-18:59:05",
                    "content": "@MicahZoltu good point. I start to find @shemnon 's argument quite compelling too.  I see a future where there are large amounts of ephemiral L2 and L3 chains and they will need a mechanical way to set a rational and deterministic means  One possible use case: in the future @shemnon described one-day that uint256 bit of ChainId could be used to used on a chain to point to another chain\u2026 or bridges between them ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.011904761904762
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sbacha",
                    "index": "12",
                    "likes": "1",
                    "time": "06/02/2023-11:45:59",
                    "content": "Yall are assuming no contention between competing Chains. In reality chain id is insufficient to be able to guarantee such global characteristics This is what is needed for those constraints tmp \u00b7 sambacha/permit-everywhere@279f475 \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sbacha",
                    "index": "13",
                    "likes": "1",
                    "time": "06/02/2023-11:47:49",
                    "content": "As you have stated yes certainly a compelling use case. How to resolve contention though with competing chainIds? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "14",
                    "likes": "1",
                    "time": "06/02/2023-14:40:53",
                    "content": "I think that is a separate problem.  Even if we only support Ethereum and Ethereum L2s and we come up with some Ethereum specific mechanism for avoiding collisions (e.g., something like an on-chain registry for chain IDs), there is still value in 2^256 for \u201cdeterministically generated globally unique IDs for short-lived chains\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/etan-status",
                    "index": "15",
                    "likes": "0",
                    "time": "09/02/2023-13:00:48",
                    "content": "In that case, it would still be great to limit chain ID to floor(MAX_UINT256 / 2) - 36, to prevent accidents with type 0/legacy (Frontier) transactions being processed by existing implementations that happily perform integer math on the chain ID. For example, the deterministic hashing method could always set the top two bits to 0, effectively leading to a list of reserved chain IDs consisting of 0 and the range with one of the top two bits set: [0x4000..., 0xffff...]. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 7.041666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/etan-status",
                    "index": "16",
                    "likes": "0",
                    "time": "09/02/2023-13:06:49",
                    "content": "Small inconsistency: In Specification section, the allowed range is [0, MAX_CHAIN_ID], but in Rationale section, language suggests that minimum is 1 instead of 0.  For reference, a value of 0 or less is also disallowed.  As 0 is not currently used, would appreciate going with the Rationale approach of reserving it. This would allow using chain_id = 0 to indicate pre-EIP-155 LegacyTransaction. This would still be compatible with the uint256 hash based approaches. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.305555555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "17",
                    "likes": "0",
                    "time": "09/02/2023-21:22:23",
                    "content": "Cross-posting a conversation between etan and me from discord  (@etan-status ): Heya! I stumbled upon your old EIP-2294. Do you know why it wasn\u2019t adopted yet, given its origin in 2019? Also, you state \u201cFor reference, a value of 0 or less is also disallowed.\u201d Where is this specced out?   ( @xinbenlv ): On one ACD call I asked, the client teams said it was a de facto case right now that no known ChainIds have exceeded the bound indicated in EIP-2294. There has not been code enforcement inside of clients that I personally know off.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.273809523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "18",
                    "likes": "1",
                    "time": "09/02/2023-21:24:46",
                    "content": "@etan-status asked if ChainId=0 is being used. To my knowledge the smallest known id is ChainId=1, ETH Mainnet. I am not aware of any chain using ChainId=0 nor am I aware of ChainId=0 being a reserved for any future or current semantics. @MicahZoltu could you help correct me if I am wrong? ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 4.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/shemnon",
                    "index": "19",
                    "likes": "1",
                    "time": "08/03/2023-06:02:27",
                    "content": "I honestly don\u2019t think any limitation is necessary, since any value that makes a transaction un-handleable will be rejected by either the wallet, mempool, or chain.  A chain will only have chainIDs the clients support, and furthermore one per chain right now.  So to wind up on the chain there must be at least one client that can handle it, and then at least one wallet that supports it (or custom submission software).  The software will implicitly limit it without need to force it down the rest of the chain.  Metamask in effect enforces the 55 bit limit for legacy transactions. There already exists a consensus rule for chainID bounds: each chain accepts only one.  Mainnet and the testnets only accept single bytes at the moment. Placing a limit on the size of the chainID only places an unneeded limit in innovation.  Clients will ignore that the moment it becomes interesting, such as the size limit on ExtraData in the block header, something the python libs ever enforced. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.214896214896215
                }
            ]
        }
    ],
    "group_index": "139"
}