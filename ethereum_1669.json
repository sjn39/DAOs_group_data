{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-4758-deactivate-selfdestruct/8710",
            "title": "EIP-4758: Deactivate selfdestruct ",
            "index": 8710,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "evm",
                "shanghai-candidate"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/dankrad",
                    "index": "1",
                    "likes": "3",
                    "time": "25/03/2022-09:51:39",
                    "content": "  github.com/ethereum/EIPs         EIP-4758: Deactivate selfdestruct   ethereum:master \u2190 dankrad:deactivate-selfdestruct            opened 08:25PM - 03 Feb 22 UTC               dankrad             +49 -0       This EIP deactivates the `SELFDESTRUCT` opcode, and instead renames it to `SENDA\u2026LL`, with the only renaming functionality being to move all funds to the caller.       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/4758",
                        "https://github.com/dankrad",
                        "https://github.com/ethereum/EIPs/pull/4758/files",
                        "https://github.com/ethereum/EIPs/pull/4758",
                        "https://ethereum-magicians.org/t/cancun-eip-consideration/12060/2",
                        "https://ethereum-magicians.org/t/cancun-network-upgrade-meta-thread/12060"
                    ],
                    "GPT-summary": "The post is an explanation of a proposal to deactivate the `SELFDESTRUCT` opcode in Ethereum and rename it to `SENDA\u2026LL`. The proposal is authored by dankrad and is being reviewed by the community. One 3rd party has provided constructive criticism of the proposal, while others may be auditing and reviewing it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dankrad",
                    "index": "2",
                    "likes": "2",
                    "time": "25/03/2022-10:48:48",
                    "content": "Complete verkle trie construction for motivation: HackMD - Collaborative Markdown Knowledge Base Analysis on applications that would be affected by this change: Impact Analysis of Neutering SELFDESTRUCT - Dev Update #2 - HackMD ",
                    "links": [
                        "https://hackmd.io/@albus/rkAbjAsWF",
                        "https://ethereum-magicians.org/t/eip-4760-selfdestruct-bomb/8713"
                    ],
                    "GPT-discussion-categories": [
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 3.2499999999999996
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "3",
                    "likes": "1",
                    "time": "31/03/2022-13:24:49",
                    "content": "Abstract says:  The new functionality will be only to send all Ether in the account to the caller.  I believe you intended to say it sends to a beneficiary (instruction input address) and not the caller. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.340909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "4",
                    "likes": "0",
                    "time": "31/03/2022-13:26:00",
                    "content": "Also I\u2019ll paste @chfast\u2019s comment from draft PR here:  You forgot to mention that SENDALL still terminates execution.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gumb0",
                    "index": "5",
                    "likes": "0",
                    "time": "31/03/2022-14:10:32",
                    "content": "Should it be repriced, as it\u2019s now only updating balance? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "6",
                    "likes": "1",
                    "time": "06/04/2022-14:16:12",
                    "content": "The SELFDESTRUCT has one additional quirk not handled here: when the beneficiary is the selfdestructing address itself the balance is burned instead of being transferred. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jwasinger",
                    "index": "7",
                    "likes": "0",
                    "time": "07/04/2022-03:35:45",
                    "content": "Agreed that it should be mentioned explicitly in the EIP: EIP-4758: Deactivate selfdestruct by dankrad \u00b7 Pull Request #4758 \u00b7 ethereum/EIPs \u00b7 GitHub. But the new behavior can also be inferred from the EIP:  the account removal doesn\u2019t happen so a SENDALL with self as beneficiary is basically a no-op that just terminates execution of the current frame. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.340909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jwasinger",
                    "index": "8",
                    "likes": "0",
                    "time": "07/04/2022-03:42:18",
                    "content": "GitHub - jwasinger/eth-selfdestruct-analysis .  This is an updated impact analysis which looks at usage of SELFDESTRUCT after the London hard fork and identifies contracts with large holdings that could be affected by the changes in EIP-4758 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 4.8065476190476195
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "9",
                    "likes": "0",
                    "time": "12/04/2022-12:00:01",
                    "content": "As mentioned by @chfast SELFDESTRUCT can be used to burn ETH by \u2018selfdestructing\u2019 to the current address. There is another quirk however which is changed by this EIP: SELFDESTRUCT does not immediately destroy code and send the balance. This is done after all call frames are done and thus every opcode of the transaction has been executed. Only then are the following steps executed: 1. Send all ETH of the contract to the beneficiary 2. Destroy the contract (code = empty, balance = empty, nonce = 0, balance = 0) Due to this order it is thus possible to destroy ETH. Also, notice that it is possible to do \u201cmultiple\u201d selfdestructs by calling the selfdestruct from another contract multiple times. It is possible to first SELFDESTRUCT to address A and then SELFDESTRUCT to address B. In this case, the beneficiary is B, not A. If this changes, it should be specified on the EIP. It now seems that SENDALL sends all ETH of the current contract to the beneficiary and immediately exits the current call frame - which I guess is fine, but the EIP also states that it \u201crenames\u201d SELFDESTRUCT to SENDALL which is due to these quirks not really the case. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.87280701754386
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chfast",
                    "index": "10",
                    "likes": "0",
                    "time": "12/04/2022-12:17:35",
                    "content": "    jochem-brouwer:  Only then are the following steps executed:  Send all ETH of the contract to the beneficiary    I don\u2019t believe this is correct. The ETH is sent immediately. @gumb0 has double-checked this. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jochem-brouwer",
                    "index": "11",
                    "likes": "0",
                    "time": "12/04/2022-12:23:37",
                    "content": "Oops, you are right, have semi-deleted my post. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.428571428571428
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "12",
                    "likes": "5",
                    "time": "13/04/2022-20:24:00",
                    "content": "I am a consumer of the reincarnation upgrade pattern. I built an NFT contract ownership system (0x000000000000c57CF0A1f923d44527e703F1ad70 on every chain) to facilitate this pattern. It helps us upgrade our contract without needing to re-approve and migrate every token for every protocol. Our storage footprint on the protocol would be much larger without SELFDESTRUCT. The SLOAD+DELEGATECALL pattern, especially after Berlin, costs way too much for practical use in gas-denominated auctions, so we cannot use it. I am willing to pay millions in gas to facilitate code changes. I do not see why code must be immutable but not storage. Perhaps there is a fair way to price a code change, and we could introduce a replacement opcode like SETCODE. The main drawback of SELFDESTRUCT right now from an engineering perspective is that it doesn\u2019t take place until the end of the transaction, so I need two separate transactions to do the upgrade. This has prevented wider adoption, as you could not safely upgrade a token, for example, without risking being sandwiched. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.845238095238096
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/RobAnon",
                    "index": "13",
                    "likes": "10",
                    "time": "28/06/2022-14:59:36",
                    "content": "Our production system heavily utilizes the CREATE2 and SELFDESTRUCT loop. We have a few million dollars of TVL, with more expected to arrive in the near future. The system wasn\u2019t designed to be modified once deployed and this EIP would fully brick our value-storage system, rendering funds inaccessible for users. As a result, I\u2019m very opposed to this EIP. It breaks a system that allows us to deploy and undeploy smart contract proxies within the same block, which is good not only for gas costs and allowing lower storage utilization, but also for security. By never having code deployed on those contracts outside of very predetermined periods, we reduce our attack surface area significantly. It is frustrating to be punished for being at the forefront of security in smart contract development, and we strongly request that this EIP be reconsidered or modified in some way. Perhaps a change to CREATE2 could be considered in concert with this, such that it checks for existing byte-code and quietly fails rather than reverting. That would allow our system to continue to function unimpeded by the implementation of this proposal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.322751322751323
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/WONSUNGJUN",
                    "index": "14",
                    "likes": "0",
                    "time": "30/08/2022-06:43:01",
                    "content": "Is there any progress on this EIP-4758?? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "15",
                    "likes": "0",
                    "time": "06/09/2022-13:52:34",
                    "content": "What do you think on repricing CREATE and CREATE2 when constructor returns zero size? Nothing will be deployed, only constructor code will be executed from new address. Now this costs 32k ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.340909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/purplehat",
                    "index": "16",
                    "likes": "1",
                    "time": "11/10/2022-23:03:37",
                    "content": "I have no strong opinions on this EIP and whether or not it is the right path forward. Did want to flag for visibility though as part of this conversation, that this has impact on the BytecodeStorage.sol library that we introduced in our ERC721-conforming \u201cCoreContract\u201d at Art Blocks here: Contract bytecode for script storage by ryley-o \u00b7 Pull Request #299 \u00b7 ArtBlocks/artblocks-contracts \u00b7 GitHub. This would not be a breaking change perse, so if this EIP were approved+implemented it wouldn\u2019t be a dramatic concern point for our team by any means. That said, a meaningful part of our rationale for adding this functionality in the first place was the intention to be mindful custodians of our impact on state bloat (see Allow for cleanup of unused contract bytecode for script storage by jakerockland \u00b7 Pull Request #304 \u00b7 ArtBlocks/artblocks-contracts \u00b7 GitHub for context). It sounds like this rationale of ours may not hold water vs. the concerns around the state management complexity that comes with SELFDESTRUCT which is totally valid and again not a matter that we have a strong opinion on. tl;dr, we\u2019re making use of SELFDESTRUCT at Art Blocks, but it is in a way that is not dramatically impacted by this EIP in a way that we have strong concern about\u2013I am sharing all of this for additional context/visibility and not because we have a strong opinion on the matter. ",
                    "links": [
                        "https://www.artblocks.io/",
                        "https://github.com/ArtBlocks/artblocks-contracts/pull/299",
                        "https://github.com/ArtBlocks/artblocks-contracts/pull/304"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.936507936507937
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/purplehat",
                    "index": "17",
                    "likes": "0",
                    "time": "12/10/2022-00:57:00",
                    "content": "Not sure if this actually fully solves the problem that this EIP intends to capture, and again I definitely do not have a strong horse in this race, but has the approach of functionality limiting the amount of state change caused by a given usage of SELFDESTRUCT, by way of changing the op-code pricing for the opcode in order to more directly bound state change to the current gas limit, an approach that has been considered? Could definitely understand that this type of approach would be impractical with regards to the client complexity it would add to calculate gas costs in a way that fits the state-change-bounding constraints that are driving this PR, but figured I would ask!  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.489583333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wjmelements",
                    "index": "18",
                    "likes": "0",
                    "time": "14/10/2022-20:06:22",
                    "content": "Related discussion regarding Shanghai inclusion: Shanghai Core EIP Consideration - #35 by wjmelements ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "19",
                    "likes": "0",
                    "time": "18/10/2022-20:10:54",
                    "content": "    RobAnon:  Perhaps a change to CREATE2 could be considered in concert with this, such that it checks for existing byte-code and quietly fails rather than reverting.   That is an interesting idea. You could probably set it up so that CREATE2 will allow you to deploy the exact same bytecode to the same address, but fail for all other code. I\u2019d be concerned about the case where someone expects SELFDESTRUCT followed by a CREATE2 to clear storage, which wouldn\u2019t happen. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 4.847222222222222
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "20",
                    "likes": "0",
                    "time": "18/10/2022-20:16:53",
                    "content": "    RobAnon:  rendering funds inaccessible for users.   Could you elaborate? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/RobAnon",
                    "index": "21",
                    "likes": "1",
                    "time": "18/10/2022-20:33:22",
                    "content": "Basically, our system uses ERC-1155 to represent Financial NFTs, which are backed by tokens. Say an NFT is worth 10 tokens each, it has ID=10, and a supply of 15. 10 copies of ID=10 are owned by User1 and 5 copies of ID=10 are owned by User2 The code our system uses is as follows:                 address smartWallAdd = Clones.cloneDeterministic(TEMPLATE, keccak256(abi.encode(fnftId)));                 RevestSmartWallet wallet = RevestSmartWallet(smartWallAdd);                 amountToWithdraw = quantity * IERC20(asset).balanceOf(smartWallAdd) / supplyBefore;                 wallet.withdraw(amountToWithdraw, asset, user);  The OpenZeppelin method follows:     /**      * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.      *      * This function uses the create2 opcode and a `salt` to deterministically deploy      * the clone. Using the same `implementation` and `salt` multiple time will revert, since      * the clones cannot be deployed twice at the same address.      */     function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {         assembly {             let ptr := mload(0x40)             mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)             mstore(add(ptr, 0x14), shl(0x60, implementation))             mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)             instance := create2(0, ptr, 0x37, salt)         }         require(instance != address(0), \"ERC1167: create2 failed\");     }  So if User1 withdraws all of his FNFTs, then User2 will find that his are permanently inaccessible because the contract already exists, as the self_destruct that would have occurred at the end of withdraw was never triggered ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.71875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Philogy",
                    "index": "22",
                    "likes": "1",
                    "time": "19/10/2022-18:42:07",
                    "content": "This EIP seems to be missing some details that should be considered:  Doesn\u2019t specify whether SENDALL should halt execution like SELFDESTRUCT does Whether the gas cost should be adjusted Providing an alternative for replacing code at a given address Plans for backwards compatibility beyond \u201cget rekd\u201d  The last I find is specifically important. As a platform for building immutable, composeable dApps breaking some functionality which some projects seem to critically rely on sets a bad precedent. There is some small precedent for mutating contracts via social consensus (DAO hack) but the circumstances were very different there. Beyond harming users of such dApps it would encourage more immutability and upgradeability as devs may want to ensure that they can fix their protocol should the protocol choose to one day break it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.891666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "23",
                    "likes": "1",
                    "time": "20/10/2022-09:31:44",
                    "content": "    Philogy:  Doesn\u2019t specify whether SENDALL should halt execution like SELFDESTRUCT does   I agree the EIP could use a bit more clarity, but my interpretation is that the opcode continues doing what it did before except the changes listed.  This means it will still halt execution just as before.  The same thing for gas cost (doesn\u2019t change except for the removal of the refund). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Philogy",
                    "index": "24",
                    "likes": "2",
                    "time": "20/10/2022-16:07:05",
                    "content": "Having SENDALL halt execution like SELFDESTRUCT does make sense, otherwise it could lead to quirky vulnerabilities whereby code from another branch after the <0xff> can all of a sudden be reached from the branch that originally ended in SELFDESTRUCT. However if the <0xff> opcode is getting such a significant overhaul I\u2019d argue for a reduction of the static gas cost. At least down to the static cost of a CALL (100) or even lower considering SENDALL would not initiate a new call context and also terminates the current context. EDIT: In fact opcodes that end the current context (STOP, REVERT, RETURN) typically have a base cost of zero so arguably the static cost of SENDALL should also be 0. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.321380471380471
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "25",
                    "likes": "0",
                    "time": "28/10/2022-05:33:46",
                    "content": "    RobAnon:  allows us to deploy and undeploy smart contract proxies within the same block   If selfdestruct were changed to send-all with the exception of when a contract is created and destroyed in the same transaction, would that satisfy your needs?  Does your system only have a hard dependency on this pattern intra-transaction, or do you sometimes create in one transaction and destroy in another (such that you need to be able to re-use that address)? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.139136904761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Brayton",
                    "index": "26",
                    "likes": "0",
                    "time": "02/11/2022-07:20:26",
                    "content": "Does this affect the non-SELFDESTRUCT contract code or storage in any way? It seems the contract code is perpetually accessible and functional, which kills usage of SELFDESTRUCT as a form of \u201cdeactivate\u201d or \u201cdisable\u201d switch? (there are of course alternative methods to implement this feature) Since contract code is currently capped, could we allow SELFDESTRUCT to destroy (delete) code whilst storage persists? In the absence of code deletion, the contract could still be deactivated. However it could interact quite messily with the following [from the verkle tire HackMD doc at top]:  Instead, we add a new Verkle tree that starts out empty, and only new changes to state and copies of accessed state are stored in the tree. The Patricia tree continues to exist, but is frozen.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.288739669421487
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/RobAnon",
                    "index": "27",
                    "likes": "0",
                    "time": "24/11/2022-14:53:37",
                    "content": "Would 100% fix the potential issue. Hard dependency is intra-transaction, contracts will always be destroyed at the end of the same transaction they were created ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.513888888888889
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/moeadham",
                    "index": "28",
                    "likes": "3",
                    "time": "24/11/2022-15:40:10",
                    "content": "We also make use of CREATE2+SELFDESTRUCT in our production application which has processed over US$1B. Eliminating SELFDESTRUCT would break our product and require significant re-engineering. It also breaks a fundamental trust that needs to exist between a product and a platform. How can we continue to develop on the EVM if opcodes can arbitrarily be removed? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/brockelmore",
                    "index": "29",
                    "likes": "1",
                    "time": "24/11/2022-21:36:45",
                    "content": "This is a little terrifying tbh, unless we change the name of the opcode to reflect it\u2019s true purpose (i.e. instead of SENDALL, it\u2019s CONSTRUCTORDESTRUCTANDSENDALL or something). This overloading of the opcode (context dependence) is quite painful imo. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.078125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/timbeiko",
                    "index": "30",
                    "likes": "1",
                    "time": "25/11/2022-18:10:09",
                    "content": "Posting this from Twitter to document here: https://twitter.com/Mudit__Gupta/status/1596028389957447680  Screenshot 2022-11-25 at 10.09.57 AM1330\u00d71496 208 KB  ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/e/e0eedabba62628c072d0b8a669e5c1ed23c77e58.png"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "31",
                    "likes": "2",
                    "time": "25/11/2022-22:39:45",
                    "content": "Here\u2019s an alternative idea which would keep the revival/upgrade pattern working:    Almost self-destructing SELFDESTRUCT \u2192 DEACTIVATE       TLDR: The selfdestruct\u2194revive pattern stays working, but instead of deleting accounts, we use a special value in the nonce field to distinguish deactivated accounts.  From the motivation of EIP-4758:   The SELFDESTRUCT opcode requires large changes to the state of an account, in particular removing all code and storage. This will not be possible in the future with Verkle trees: Each account will be stored in many different account keys, which will not be obviously connected to the root account.  \u2026     ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-4758"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.773809523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "32",
                    "likes": "0",
                    "time": "25/11/2022-23:44:51",
                    "content": "I see this wasn\u2019t linked yet, but the previous attempt at removing it 2 years ago is here:    EIP for disabling SELFDESTRUCT opcode EIPs       Mandatory post for EIP discussion   @jpitts  Adding additional information here:  The content of the proposal: https://github.com/ethereum/EIPs/pull/2751/files  Pull request w/ some initial comments: https://github.com/ethereum/EIPs/pull/2751  Twitter thread: https://twitter.com/realLedgerwatch/status/1276239221037072390   ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/2751/files",
                        "https://github.com/ethereum/EIPs/pull/2751",
                        "https://twitter.com/realLedgerwatch/status/1276239221037072390"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/RobAnon",
                    "index": "33",
                    "likes": "0",
                    "time": "27/11/2022-19:41:46",
                    "content": "Yeah, this wouldn\u2019t cause issues for my particular pattern ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "34",
                    "likes": "3",
                    "time": "27/11/2022-22:39:54",
                    "content": "While we are still evaluating how to kill SELFDESTRUCT I think we can officially deprecate the existing SELFDESTRUCT. Here is an EIP for that Deprecate SELFDESTRUCT If you only read the Yellow Paper then you probably don\u2019t know you shouldn\u2019t be using SELFDESTRUCT. That EIP fixes that. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/purplehat",
                    "index": "35",
                    "likes": "0",
                    "time": "29/11/2022-21:49:04",
                    "content": "Bumping for curiosity sake, is this approach just not tractable / doesn\u2019t solve the problem seeking to be addressed by client teams? Wanted to bump after seeing EIP-4758: Deactivate selfdestruct - #30 by timbeiko from @maxsam4 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "36",
                    "likes": "0",
                    "time": "01/12/2022-11:02:42",
                    "content": "Unfortunately it doesn\u2019t solve the problem of having a strong guarantee that if a piece of code exists at a particular address then that same code will always exist at that address. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/WBT",
                    "index": "37",
                    "likes": "0",
                    "time": "06/12/2022-15:15:07",
                    "content": "You don\u2019t necessarily have that guarantee even without SELFDESTRUCT. One can write a smart contract function which has behavior that its author/controller can change at a later date, to be arbitrarily different.  Analysis of the code can reveal this possibility, allowing potential callers to apply the appropriate size proverbial grain of salt or hedges around calls.  Analysis of the code can also reveal the use of SELFDESTRUCT. In conclusion, I don\u2019t see this EIP addressing this concern, and seriously doubt that the concern can be addressed within Ethereum without serious reductions including elimination of valuable functionality people are relying on for important use cases. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.248677248677249
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maurelian",
                    "index": "38",
                    "likes": "3",
                    "time": "13/02/2023-21:21:14",
                    "content": "This behaviour is import to us at Optimism to preserve, as we use it to burn ETH when it is withdrawn from L2 to L1.   github.com   ethereum-optimism/optimism/blob/eb68d8395971bc4a125cd0fd07567547f5bc0c49/packages/contracts-bedrock/contracts/libraries/Burn.sol#L33-L42                   * @title Burner           * @notice Burner self-destructs on creation and sends all ETH to itself, removing all ETH given to           *         the contract from the circulating supply. Self-destructing is the only way to remove ETH           *         from the circulating supply.           */           contract Burner {              constructor() payable {                  selfdestruct(payable(address(this)));              }           }                  This is valuable to us as there is (AFAIK) no other way to remove ETH from the state. ",
                    "links": [
                        "https://github.com/ethereum-optimism/optimism/blob/eb68d8395971bc4a125cd0fd07567547f5bc0c49/packages/contracts-bedrock/contracts/libraries/Burn.sol#L33-L42"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.15625
                }
            ]
        }
    ],
    "group_index": "1669"
}