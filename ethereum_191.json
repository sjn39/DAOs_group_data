{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5850-store-real-and-imaginary-parts-of-complex-numbers-in-the-least-significant-and-most-significant-16-bytes-respectively-of-a-bytes32-type/11532",
            "title": "EIP-5850 Store real and imaginary parts of complex numbers in the least significant and most significant 16 bytes (respectively) of a bytes32 type ",
            "index": 11532,
            "category": [
                "EIPs"
            ],
            "tags": [
                "data-types"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/genkifs",
                    "index": "1",
                    "likes": "0",
                    "time": "31/10/2022-12:15:59",
                    "content": "This EIP proposes a natural way for complex numbers to be stored in and retrieved from the bytes32 data-type.  It splits the storage space exactly in half and, most importantly, assigns real numbers to the least significant 16 bytes and imaginary numbers to the most significant 16 bytes.  To create a complex number one would use function cnNew(int128 _Real, int128 _Imag) public pure returns (bytes32){     bytes32 Imag32 = bytes16(uint128(_Imag));     bytes32 Real32 = bytes16(uint128(_Real));     return (Real32>> 128) | Imag32;  }  and to convert back function RealIm(bytes32 _cn)  public pure returns (int128 Real, int128 Imag){ \tbytes16[2] memory tmp = [bytes16(0), 0]; \tassembly { \t    mstore(tmp, _cn) \t    mstore(add(tmp, 16), _cn) \t} \tImag=int128(uint128(tmp[0])); \tReal=int128(uint128(tmp[1])); }  See Add EIP-5850: Complex Numbers stored in Bytes32 types by genkifs \u00b7 Pull Request #5850 \u00b7 ethereum/EIPs \u00b7 GitHub for discussion The EIP doesn\u2019t discuss the manipulation of complex numbers when they are in Byte32 form because this is undoubtedly a much larger topic. ",
                    "links": [],
                    "GPT-summary": "The post explains the proposal of EIP-5850, which suggests a way to store complex numbers in the bytes32 data type. The proposal splits the storage space in half and assigns real numbers to the least significant 16 bytes and imaginary numbers to the most significant 16 bytes. The post also includes code snippets to create and convert complex numbers. The post invites readers to discuss the proposal further in the provided link.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.4396258503401365
                }
            ]
        }
    ],
    "group_index": "191"
}