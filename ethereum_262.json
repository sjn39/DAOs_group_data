{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/sri-style-integrity-digests-for-tokens/12122",
            "title": "SRI-style Integrity Digests for Tokens ",
            "index": 12122,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "nft",
                "security",
                "gas",
                "integrity",
                "hashing"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/tim-cotten",
                    "index": "1",
                    "likes": "0",
                    "time": "13/12/2022-01:26:07",
                    "content": "In the games industry I have a lot of discussions with traditional Web 2.0 devs about Web3 & NFTs. When we debate utility of tokens often we call back to the \u201cdegraded blockchain\u201d problem that Lars Doucet talks about coupled with Moxie Marlinspike\u2019s take on ERC-721 & ERC-1155 lacking any form of integrity digest for the JSON metadata that NFTs might point to. (Moxie Marlinspike >> Blog >> My first impressions of web3) Has there been any work on this? I implemented a simple scheme as an example in this contract: https://etherscan.io/address/0x0e20655885c38b1b5cedfff5b15289b76f3cdefc#code The minting function requires at the time of minting that the contract owner attest a SHA-256 hash representing the contents of the JSON metadata that the tokenId points to. (There\u2019s some additional logic in there to allow minting and burning singular instances of the token, and when burned the contract owner can re-mint with new metadata/new digest. Only if the current owner voluntarily burns their token though: it\u2019s sort of a mutual-consent upgrade path). It\u2019s implemented using a getIntegrity(tokenId) method that returns a string of form {algo}-{digest} where {algo} is baked into the method itself (to save space, rather than store a uint256 pair for algo/digest) and relies on another mapping called _integrities. This causes each mint to take an additional ~20k gas, but allows off-chain validation of the pointed to metadata in the same way SRI does it for Web 2.0. The relevant lines in the single file compilation are 2223 - 2321. Reinventing the wheel? Is this already a standard somewhere and I just missed it? ",
                    "links": [
                        "https://etherscan.io/address/0x0e20655885c38b1b5cedfff5b15289b76f3cdefc#code",
                        "https://ethereum-magicians.org/t/integrating-cryptographic-proof-of-nft-metadata-veracity-on-chain/12553"
                    ],
                    "GPT-summary": "The author of the post is proposing a solution to the problem of degraded blockchain and lack of integrity digest for JSON metadata in NFTs. The author has implemented a simple scheme in a contract and is asking if there has been any work done on this already. The post also includes relevant lines of code and additional details about the implementation. A 3rd party is asking questions about the proposal and giving constructive criticism, while also extending to the proposal. The author is explaining the proposal.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.324970484061393
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tim-cotten",
                    "index": "2",
                    "likes": "0",
                    "time": "13/12/2022-01:31:35",
                    "content": "BTW, the W3C\u2019s spec is here: Subresource Integrity An example implementation in HTML5 looks like: <script   src=\"https://example.com/example-framework.js\"   integrity=\"sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC\"   crossorigin=\"anonymous\"></script>  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "262"
}