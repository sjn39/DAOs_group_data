{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/browser-extension-self-identification-standards/1027",
            "title": "Browser extension self identification standards? ",
            "index": 1027,
            "category": [
                "Wallets"
            ],
            "tags": [
                "browserextension"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/yarrumretep",
                    "index": "1",
                    "likes": "2",
                    "time": "11/08/2018-21:17:58",
                    "content": "Greetings Wallet Folk, Both Trust Wallet and MetaMask inject providers that self identify with \u201cisMetaMask\u201d and \u201cisTrust\u201d fields - perhaps other do as well.  I\u2019ve noticed some d\u2019apps are developing if/then logic based on these fields to prompt the user to connect to the detected injected wallet (or trezor, ledger, etc). Would it be appropriate for these injected providers to expose a generic interrogation api to determine \u2018wallet name\u2019 and \u2018wallet icon url\u2019 so as more wallets come online these d\u2019apps need not maintain separate logic for each? Maybe something like: function getWalletName(); function getWalletIconUrl();  Best, pete ",
                    "links": [],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "2",
                    "likes": "0",
                    "time": "12/08/2018-04:26:08",
                    "content": "It is really terrible when dapps switch on isMetamask and similar.  That is like switching on isChrome or isFirefox when building a web page. If users are doing this, we should figure out why and fix that, rather than make it easier for them to do it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 2.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/yarrumretep",
                    "index": "3",
                    "likes": "1",
                    "time": "12/08/2018-11:31:11",
                    "content": "Agreed, @MicahZoltu  - that is the intention of adding generalized identifiers.  From what I\u2019m seeing the  d\u2019apps are just switching on the is field in order to display a friendly menu of wallet connection options that includes the injected web3.  If the injected provider can self-identify in a general sense, then the d\u2019app will not need to switch to provide this. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/yarrumretep",
                    "index": "4",
                    "likes": "0",
                    "time": "12/08/2018-11:42:18",
                    "content": "One other additional interface that would be good to add is an api for the d\u2019app to identify itself to the wallet - so the wallet can indicate the d\u2019app with which it is working. Something like: setDappInfo(name: string, iconurl: string): void;  Wallets can then provide additional context for transaction signing or connection indication. Is there a formal definition of the injected provider interface?  From what I can see today it comprises only: send(payload: JsonRPCRequest): JSONRPCResponse;   // optional?? - some implementations just throw sendAsync(request: JsonRPCRequest, cb: (e: Error, response: JsonRPCResponse) => void): void;  Perhaps we should formalize this interface somewhere (EIP? or just written up somewhere)? -pete ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.78125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "5",
                    "likes": "0",
                    "time": "13/08/2018-12:10:07",
                    "content": "I think this could make sense - kind of like a user agent string. But I agree with @MicahZoltu here that it should not really be used for switching. Perhaps it is better to not even expose it in the first place - otherwise people will switch on this information. But then things like isTrust, isMetamask are emerging - which is even worse. What would IMHO really make sense is that wallets expose the features they support.  So dApps don\u2019t switch on a particular wallet - but on a feature-set. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.8690476190476195
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/yarrumretep",
                    "index": "6",
                    "likes": "1",
                    "time": "14/08/2018-00:20:22",
                    "content": "The reason for these methods specifically is to discourage switching for the simple identification use-case - and yet to allow d\u2019apps to provide users a sense of assurance that the d\u2019app has connected with their wallet.  Without this, in order to provide an initial connection menu, the d\u2019app would have to say \u201cWould you like to connect with the injected wallet, Trezor or Ledger?\u201d.  In that use case it\u2019s useful to be able to say \u201cWould you like to connect with MetaMask, Trezor or Ledger?\u201d  Right now d\u2019apps are switching on isMetaMask just to provide that indication (e.g. totle.com).  We could certainly discourage switching on the name in the documentation / standard - but right now there is no other way to identify the wallet software that is injected. I think the converse is also likely true - that the wallet might like to display a friendly name for the d\u2019app that is sending a transaction or currently active/connected.   Hence the functions allowing the d\u2019app to self-identify to the provider would be good. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.097576530612246
                }
            ]
        }
    ],
    "group_index": "29"
}