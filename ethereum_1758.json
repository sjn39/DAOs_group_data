{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5114-soulbound-badges/9417",
            "title": "EIP-5114: Soulbound Badges ",
            "index": 9417,
            "category": [
                "Tokens"
            ],
            "tags": [
                "ntt",
                "badges"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "1",
                    "likes": "6",
                    "time": "30/05/2022-06:01:30",
                    "content": "Discussion for soulbound (ERC-721) tokens. ",
                    "links": [],
                    "GPT-summary": "The post is about a proposal for soulbound (ERC-721) tokens and the author is explaining the proposal. A 3rd party is also asking questions about the proposal.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "2",
                    "likes": "1",
                    "time": "30/05/2022-12:20:08",
                    "content": "thanks for your submission, I\u2019m happy you\u2019ve taken this step and I think there\u2019s now more fascinating questions we can ask. E.g. in the document you remark that:  Soulbound tokens are meant to be permanent badges/indicators attached to a persona. This means that not only can the user not transfer ownership, but the minter also cannot withdraw/transfer/change ownership as well.  But this makes me wonder that since you\u2019re removing any \u201ctoken-like\u201d functionality, if it is still useful calling the standard \u201csoulbound tokens\u201d, when indeed its functionality is more akin to, as you remark yourself, badges/indicators/items etc. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "3",
                    "likes": "1",
                    "time": "30/05/2022-12:59:51",
                    "content": "    TimDaub:  But this makes me wonder that since you\u2019re removing any \u201ctoken-like\u201d functionality, if it is still useful calling the standard \u201csoulbound tokens\u201d, when indeed its functionality is more akin to, as you remark yourself, badges/indicators/items etc.   This is a good point.  Perhaps Soulbound Badges would be a better name?  I\u2019m not opposed to changing the name. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/aditya0212jain",
                    "index": "4",
                    "likes": "0",
                    "time": "31/05/2022-04:43:26",
                    "content": "Thanks for this PR! Had a couple of thoughts:  What are your thoughts on having a \u2018Burn\u2019 event. Since there is no approval required for minting a Soulbound token for any NFT, many people may get unwanted tokens that they would like to get rid of. Or it may happen that the minter would like to revoke the soulbound token given to an NFT due to some malicious activity in the future. Moving the tokenUri and collectionUri to another interface that can act as a metadata extension (along with \u2018name\u2019 and \u2018symbol\u2019 functions) as done for ERC721.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.78125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "5",
                    "likes": "0",
                    "time": "31/05/2022-05:31:45",
                    "content": "    aditya0212jain:  What are your thoughts on having a \u2018Burn\u2019 event.   This would break the immutability of soulbound badges/tokens.  One of the benefits of immutability here is that once assigned, applications can aggressively cache results because they have high confidence that a token cannot be removed, reassigned, moved, mutated, changed, etc.     aditya0212jain:  Moving the tokenUri and collectionUri to another interface that can act as a metadata extension   If they are not part of this standard, then they should be moved to a different EIP.  I did consider this, but I felt that it was important to emphasize the immutability constraints within this EIP so it was clear that these badges were immutable through and through.  It is worth noting that the content of the URI is delegated to future EIPs, but I\u2019m hesitant to move even more. Re: name/symbol: I feel like this information should live at the URI.  It is descriptive metadata about the token, and these tokens are likely useless without the metadata (e.g., without image/description/details).  If readers are going to have to lookup some metadata externally anyway, it feels like all of the token metadata including name/symbol should live there rather than being split on and off chain. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.474125874125874
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "6",
                    "likes": "2",
                    "time": "31/05/2022-07:29:33",
                    "content": "This standard represents a non-fungible, non-transferable, non-separable asset. Naming thoughts:  Non-Fungible Badge (NFB)  Pairs well with NFT.   Soulbound Badge (SBB)  Follows the soulbound naming convention, but makes it clear this doesn\u2019t have token-like properties.   Soulbound Token (SBT)  Leans on the Soulbound Token meme that is currently going around.  This isn\u2019t an ideal name, but it would be nice if this is what people thought of when they talk about Soulbound Tokens, rather than some other standard that decides to do a name grab.   Badge  Do fungible badges make sense?  If so then NFB adds clarity over just Badge.  If fungible badges don\u2019t make sense, then perhaps the NF is redundant.    ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.796875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "7",
                    "likes": "0",
                    "time": "31/05/2022-13:31:10",
                    "content": "First, YES. I like the generic-ness of this standard better than 5107\u2019s (the superset discussion). Second, about the immutability in the tokenuri: I think there\u2019s value in immutable soulbound tokens but there is also value in mutable ones - and I\u2019m not sure they need to be separate standards. If the goal is non-separateness of tokens, nothing mandates that the tokens themselves shouldn\u2019t contain mutable references that can be updated and evolve over time. It seems like a different goal (which would be a great standard to have regardless). I understand the goal is minimising the ability of the owner/minter to \u201ceffectively\u201d burn the token by changing it, but the documentation of past settings is still on the chain in case of a dispute. Example use-case: a soulbound token representing a government ID. The token itself represents the personhood of the holder with their government ID, and is bound. The Metadata though can contain mutable information: legal name, photo ID, etc. It\u2019s useful, and since it\u2019s useful people will end up doing it and in practice what we\u2019ll see is 5114 tokens with IPFS links that point to HTTP links. We can, and should, encourage implementations using immutable pointers and have mutable be used only if there\u2019s a strong use-case for it - but not outright mandate it. Third, regarding naming: With names I tend to think familiarity and clarity are the most important bits. The soulbound concept is already known and popular, as well as the idea of a token (the token-badge distinction doesn\u2019t seem meaningful to me). People who are already familiar with the soulbound token concept generally think of something similar to what is being implemented here. We can come up with something else, but that would require the unnecessary socialisation of a new name. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.9259785353535355
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/somcha.eth",
                    "index": "8",
                    "likes": "1",
                    "time": "31/05/2022-15:00:04",
                    "content": "Consider me a noob here. Just sharing an idea on Soulbound Badge/NFT to eradicate the unwanted tokens getting associated with the user as @aditya0212jain mentioned Consider a process that can be broken down in two parts 1. issuance 2. claim On issuance the issuer of the soulbound nfts simply triggers _mint on address(0) and set _tokenApprovals[<token_id>] = <claimer_address>. This step can be done by overriding _mint and removing the require checks of to != address(0) claim will be trigger by the claimer which in turn will map the msg.sender as owner and resetting the approver to address(0). claim will have a requirement of msg.sender as approver. This will block any further calls of claim There are of-course few more changes required. Again might sound stupid. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.590277777777779
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "9",
                    "likes": "1",
                    "time": "31/05/2022-15:57:03",
                    "content": "@somcha.eth: I think this can be solved per-token and doesn\u2019t need to be standardized.  What matters is just that the mint event isn\u2019t fired until both parties agree in this case.  I would certainly support what you described, I just think it is a Best Practice, not a Standard. @tomcohen.eth While I agree that some people will want what you have described in terms of mutable badges, I personally think that it isn\u2019t following the spirit of soulbound immutability that I think is valuable.  For example, if you change your name that should result in a new name token being issued.  You would still be Alice, but you just now are also Bob.  You can never become not-Alice, else the badges no longer hold their immutable guarantee.     tomcohen.eth:  we\u2019ll see is 5114 tokens with IPFS links that point to HTTP links.   If they do that, they aren\u2019t an EIP-5114 token.   Certainly, we can\u2019t stop people from developing whatever they want, but if you don\u2019t follow the spec then it isn\u2019t an EIP-5114 token. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.117810760667903
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/toledoroy",
                    "index": "10",
                    "likes": "1",
                    "time": "31/05/2022-23:45:10",
                    "content": " what do you think about soulbound badges that are owned (attached to) the soulbound tokens\u2026 I.e. tokens that are owned / attached to the owner of another token. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "11",
                    "likes": "2",
                    "time": "01/06/2022-04:53:54",
                    "content": "This is mentioned in the Security Considerations section:  It is possible for a soulbound token to be bound to another soulbound token. In theory, if all tokens in the chain are created at the same time they could form a loop. Software that tries to walk such a chain should take care to have an exit strategy if a loop is detected.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "12",
                    "likes": "0",
                    "time": "01/06/2022-05:50:57",
                    "content": "Migrating discussion with @TimDaub from the PR to here regarding the terminology and requirements around immutability. IIUC, there are two separate concerns being discussed:  Should we constrain the system such that it badges cannot mutate/change under reasonable operating assumptions? How should we express this concept to the user.  For (1) I feel pretty strongly that for something to be compliant with this standard, it MUST be indefinitely cacheable, which means there needs to be a reasonable assumption that the data will not change.  For data that isn\u2019t content addressable, we cannot ensure this guarantee and if the remote data does change we may run into a problem where users don\u2019t have a way to validate truth. For (2) I\u2019m much more open to alternative wordings.  At the moment I disagree with @TimDaub that immutable is the wrong word.  While technically true that immutable data can be mutated, for many systems (like IPFS, Immutable datastructure libraries, immutable databases, blockchains, etc.) this is only true under bizarre scenarios like a user who is intentionally breaking their own ability to validate data or where there are critical bugs/attack vectors in the software being used. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.936274509803922
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tomcohen.eth",
                    "index": "13",
                    "likes": "0",
                    "time": "01/06/2022-07:40:00",
                    "content": "    MicahZoltu:  For example, if you change your name that should result in a new name token being issued. You would still be Alice, but you just now are also Bob   And these tokens won\u2019t have the same ID. Meaning that for all purposes the issuer issued two identities to the same person. So now we\u2019re forcing out-of-band revocation processes to prevent sybil attacks and inform consumers of the token which is the \u201ccorrect\u201d token.     MicahZoltu:  You can never become not-Alice, else the badges no longer hold their immutable guarantee.   The discussion is about if ERC5114 should contain an immutability guarantee - so the lack of immutability can\u2019t be a counterargument.     MicahZoltu:  If they do that, they aren\u2019t an EIP-5114 token.  Certainly, we can\u2019t stop people from developing whatever they want, but if you don\u2019t follow the spec then it isn\u2019t an EIP-5114 token.   You follow the spec to the letter: the tokenURI is an IPFS file. It\u2019s just that this file then redirects, references, or points to an HTTP resource.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.438311688311687
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "14",
                    "likes": "0",
                    "time": "01/06/2022-07:59:52",
                    "content": "    tomcohen.eth:  Meaning that for all purposes the issuer issued two identities to the same person.   These tokens (and really any similar token) should not be assumed to be limited to 1 person, 1 identity.  It is functionally impossible to solve the 1 person, 1 identity problem and I think that should be made abundantly clear to all users/developers (perhaps I should add something to security considerations). It also may be valuable to add a mention that these tokens are intentionally irrevocable, just to help drive home the point that these are not meant to be used as a permission/security system.     tomcohen.eth:  You follow the spec to the letter: the tokenURI is an IPFS file. It\u2019s just that this file then redirects, references, or points to an HTTP resource.    I believe this is handled with this requirement:  // any external links referenced by the content at tokenUri also MUST follow all of the above rules  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.726190476190476
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "15",
                    "likes": "0",
                    "time": "01/06/2022-09:11:07",
                    "content": "Instead of all this arguing about how a tokenUri should be structured: How about renaming tokenUri to e.g. getMultiHash to make it abundantly obvious and required that the Soulbound Badge must be a hash resolvable through IPFS?  Multihash  Edit: IMO it\u2019d be hella interesting if we had an EIP that gave recommendations for what are good URIs and what aren\u2019t when used in e.g. smart contracts. Right now, and in the NFT space, there\u2019s so much confusion and continuous discussion around this field and there\u2019s no high quality document that outlines the pros and cons for various URI forms on blockchains. IMO URI guarantee discussion is out of scope of Soulbound tokens. We should have a separate \u201cwhat are good and bad URIs EIP document\u201d and then reference it in the Soulbound Badges scope. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.91
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "16",
                    "likes": "1",
                    "time": "03/06/2022-20:26:52",
                    "content": "+1 for Soulbound Badges  If you aren\u2019t standardizing the content of tokenUri and collectionUri, I would argue that those functions shouldn\u2019t be part of your interface at all. If multiple incompatible standards arise for EIP-5114 metadata, and they all use the same tokenUri function, a contract would not be able to implement more than one of them.  Further, I think these tokens should implement EIP-165, which would let dapps detect these tokens, and which metadata extensions they support.  I think the requirement that URI\u2019s be censorship resistant and durable is going beyond what can be enforced by a standard. It\u2019s simply too easy for a token viewing dapp to ignore that requirement and support HTTP(S). That said, if you were to force a particular data storage standard (for example drop the ipfs:// prefix, and require that all URI\u2019s be IPFS implicitly) then it wouldn\u2019t be possible to bypass the requirement. Another option would be to allow any URI, but also require a content hash function. That would at least provide immutability and allow any honest archivist to prove they have the correct data for a given block. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.73076923076923
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "17",
                    "likes": "1",
                    "time": "04/06/2022-05:49:55",
                    "content": "    TimDaub:  How about renaming tokenUri to e.g. getMultiHash to make it abundantly obvious and required that the Soulbound Badge must be a hash resolvable through IPFS?   I don\u2019t want to constrain to only IPFS, only to content that doesn\u2019t change.     TimDaub:  interesting if we had an EIP that gave recommendations for what are good URIs and what aren\u2019t when used in e.g. smart contracts   EIPs are for standards, not best practices.  I agree that such a document should exist, just not as an EIP.  I recommend a blog/article or static website that people can link to.     SamWilsn:  I think the requirement that URI\u2019s be censorship resistant and durable is going beyond what can be enforced by a standard. It\u2019s simply too easy for a token viewing dapp to ignore that requirement and support HTTP(S).       TimDaub:  IMO URI guarantee discussion is out of scope of Soulbound tokens.   I argue that guarantees around what can be cached, how aggressively, and what security guarantees there are for the data SHOULD be part of a standard, as it is part of the interface between different actors communicating via this standard.  In this case, the standard is asserting that the data can be cached indefinitely, and that the caller can verify the integrity of the data client side.  The specifics of how that is achieved are up to individual implementations.     SamWilsn:  If you aren\u2019t standardizing the content of tokenUri and collectionUri, I would argue that those functions shouldn\u2019t be part of your interface at all. If multiple incompatible standards arise for EIP-5114 metadata, and they all use the same tokenUri function, a contract would not be able to implement more than one of them.   I can appreciate the argument here but I\u2019m hesitant to lock in a data format standard in this EIP as one can imagine several competing standards on that front that build off of this EIP, yet I find it useful to give strong guarantees about the immutability of these tokens and make it clear what they are meant to represent. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.707875457875458
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "18",
                    "likes": "1",
                    "time": "04/06/2022-08:29:09",
                    "content": "    SamWilsn:  Further, I think these tokens should implement EIP-165, which would let dapps detect these tokens, and which metadata extensions they support.   You aren\u2019t the only one.  My tentative plan is to add EIP-165 support after this is merged as a draft.  I need to spend some time figuring out how to do that, and I don\u2019t want it to hold up merging as a draft. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "19",
                    "likes": "0",
                    "time": "04/06/2022-09:33:18",
                    "content": "My biggest concern with this EIP is that it practically has no one asking for it. With EIP-4973, I drafted a standard to institutionalize non-transferrable tokens such that e.g., we stop the malpractice of \u201csoul binding\u201d NFTs to accounts with reverting on transfer and transferFrom. I did so because of a practical technical problem I had faced in the https://partialcommonownership.com/ working group where we were discussing if Harberger property should be friendly transferrable or not. So originally, EIP-4973 was simply a means to contribute to that discussion. Way before Vitalik et. al\u2019s paper we foresaw this problem at ETHDenver and I wrote about it: Non-Skeuomorphic Harberger Properties may not be implementable as ERC721 NFTs That\u2019s how EIP-4973 came about. Then, after some time, people that wanted to mint badges found EIP-4973 interesting too. In fact, for more than a month, I\u2019ve been now directly iterating as a freelancer with two startup companies in the space. We\u2019ve met up in Amsterdam and Berlin to further discuss EIP-4973. It is my conviction that we\u2019re doing something that\u2019ll eventually help their products. EIP-4973 is a product of the problems of people building in the space. So having done all of this work, and we\u2019ve also documented lots of it in the EIP-4973 discussion thread, I have to say that I don\u2019t \u201cget\u201d EIP-5114. To me, it is a nice and elegant theoretical solution to what was laid out in Vitalik et al.'s paper. I can see lots of great new things happening when tokens can be bound to other tokens. It\u2019s seriously interesting. But at least until now, I don\u2019t know anyone that needs this. I\u2019m not aware of one project that has done what is described here. And contrary to that, there are now countless NTTs on Ethereum all using revert to achieve what is properly laid out in EIP-4973. So I was wondering, to the authors: Do you think EIP-5114 and EIP-4973 do fundamentally serve different use cases, and should they go towards standardization in parallel? Or rather, as @MicahZoltu you\u2019ve framed it in the EIP-4973 discussion thread, should EIP-4973 fail (and EIP-5114 take over?) ",
                    "links": [
                        "https://timdaub.github.io/2022/02/19/non-skeuomorphic-harberger-properties-erc721-nfts/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.695075757575758
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "20",
                    "likes": "2",
                    "time": "04/06/2022-16:45:22",
                    "content": "I\u2019m not sure if the question is directed at me (the only author) or someone else, but I\u2019ll answer none the less.   As I have mentioned elsewhere, I think that permanently binding assets to Ethereum addresses is a really bad idea.  I created this so when people go looking for standards around permanently binding assets, they\u2019ll hopefully stumble on this and ultimately choose to not bind assets to addresses. Just because people want/do a thing doesn\u2019t mean it is a good idea for the ecosystem, society, or users.  While I believe people should be free to do what they want, I will still encourage people to do what I believe is best for society/end-users.  Binding assets to addresses may be good/simple for developers, but it is not good for users long term and thus I advocate pretty strongly against it, even if it is what people think/say they want. People also want custodial coins, censorship, government backdoors into software, no financial privacy, etc. and these are all things that I similarly advocate and develop against. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.282552083333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "21",
                    "likes": "0",
                    "time": "06/06/2022-11:13:18",
                    "content": "In EIP-4973 we do not advocate for perma-binding assets to addresses. We put revocation mechanisms into the hands of e.g. the contract implementers. ERC20 and ERC721 do that too, they don\u2019t enforce implementation, just interface definition. E.g. I think we should standardize that ABT receivers can disassociate themselves on-chain. But how to do it? Your help would be useful. Rather than going on your own, I\u2019d be happy if we could integrate solutions to your concerns in EIP-4973 somehow. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 7.833333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "22",
                    "likes": "1",
                    "time": "06/06/2022-12:19:24",
                    "content": "    TimDaub:  I think we should norm that ABT receivers can disassociate themselves on-chain.   If a token can be unbound to account A and then bound to account B, then it isn\u2019t really soulbound (it isn\u2019t non-seperable, non-mergeable).  It is just an NFT with complicated transfer mechanics. If the token can only be unbound, then it doesn\u2019t solve the problem of encouraging key rotation/wallet upgrades (the problem that I think needs solved). If the process of transferring a token is sufficiently complicated, users are less likely to rotate their keys.  It is already bad enough that a user wanting to rotate keys or upgrade their wallet has to manually transfer all of their assets.  If they also have to petition a governance board when they want to roll their keys or change wallets, they will be strongly discouraged from actually doing it. If a person or group of people has the ability to unbind a token, then that person/group of people can effectively engage in censorship.  e.g., if some individual has soulbound badge X, one can imagine a governance group or operator deciding to revoke that individual\u2019s soulbound badge, potentially against that person\u2019s desires (the system isn\u2019t censorship resistant). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.773809523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "23",
                    "likes": "0",
                    "time": "06/06/2022-12:59:18",
                    "content": "I agree with everything you said above. But you\u2019re pessimistically looking at the worst-case scenarios where people implement the standard, e.g., engage in censorship or discouraging key rotation. And I\u2019d like to remind you that practical account binding on Ethereum happens almost everywhere. Anytime a contract isn\u2019t issuing a transferrable symbolic token defining the interaction rights with a contract, it\u2019s account binding. When contract implementers store a type address and then require it to call functions, in many cases it is account binding! IMO it\u2019s important to, e.g., explicitly outline what\u2019s good account binding vs. bad account binding. And to be explicit here: E.g., anything to do with airdrops that account-binds to past interactions is, e.g., bad as it discourages key rotation and makes people lose out on potential additional funds (e.g., I have one address that I cannot access the Optimism Airdrop). But, IMO, if we dwell on the problem long enough, I think there are legit account-binding applications. I find it unrealistic to assume that users will never account-bind functionality. It has already happened so many times. For E.g. MolochDAO binds voting rights to accounts but allows a MolochDAO member to ragequit. Given your pessimistic outlook on account-binding, would you say MolochDAO actively discourages key rotation? Because alternatively, one could say that an individual that wants to key rotate within a MolochDAO can \u201cragequit\u201d and get re-accepted by the group (is that censorship if the group rejects re-entrance)? On the other hand, e.g., your proposal in EIP-5114 wouldn\u2019t solve this as, e.g., MolochDAO assumes voting rights to remain bound to an account. IMO we can only gain by standardizing account-binding and by identifying what are good practices and what are bad practices. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.993055555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "24",
                    "likes": "2",
                    "time": "06/06/2022-13:34:13",
                    "content": "As I have mentioned previously, just because people do a thing doesn\u2019t mean it is a good thing or something that should be encouraged/supported (such as by standardizing the behavior).  If you want to argue the point that account binding is good (and worthy of supporting via standardization efforts), I think you should focus on coming up with concrete use cases for account binding that are achievable and don\u2019t have negative consequences. Just about every use case I have seen for account binding is either unachievable --what people want is human-binding, but that isn\u2019t actually possible and they treat an account as a proxy for that-- or it comes with significant consequences like censorability, permissioned systems, discouragement of key/wallet rotation, and increased tracking/surveillance of humans.     TimDaub:  we can only gain by standardizing account-binding and by identifying what are good practices and what are bad practices.   TL;DR: I don\u2019t think there are any good practices for account binding, it is a rotten concept to the core and we should be doing everything we can to discourage it.  Standardized bad-thing is still a bad-thing, it is just now easier to build tools for bad-thing. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.809722222222222
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "25",
                    "likes": "1",
                    "time": "06/06/2022-14:16:23",
                    "content": "You are being unclear what equates account-binding and you\u2019re arbitrarily pick examples where account-binding outlines unfavorable outcomes that make you \u201cwin\u201d arguments here. You haven\u2019t answered my specific example with MolochDAO. E.g. EIP-173 is binding ownership of contracts to accounts. According to your logic, you should do anything possible to avoid getting this proposal to status \u201cfinal\u201d or offer an alternative. Where does account-binding start according to your definition? Yes, EIP-173 has a transferOwnership method, does that mean the contract\u2019s ownership isn\u2019t account-bound? Is account-bound anything that doesn\u2019t implement a standardized transfer function? If a key gets compromised, how does it help having a transferOwnership method assuming a thief can frontrun that call to steal ownership? Additionally, many contracts explicitly implement Ownable to e.g. control or \u201ccensor\u201d functionality.  what people want is human-binding  100% disagree. Everybody is maximally against this. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.072916666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/yootou",
                    "index": "26",
                    "likes": "0",
                    "time": "06/06/2022-14:55:32",
                    "content": "Some suggestions and opinions:  Does soulbound token binding bind humans to address, or address to address? Or is tokenId and address bound? This is a topic worth exploring. How to unbind soulbound token after binding? Unreleasable binding may cause some problems, but this kind of release is definitely not arbitrary release, what is it? Does soulbound token need to be compatible with widely used standards such as erc721 and erc20? I think it is necessary, otherwise it will bring a lot of ecological compatibility problems to create a token standard. Who initiated the binding of the soulbound token? How to ensure that no one can generate a soulbound token for an address without consent, it is a serious topic, if someone can generate a soulbound token for you without consent, it will be a very serious disaster. What are the specific scenarios of soulbound token? It needs to be supplemented by some specific scenarios in different fields to define the exact characteristics that SBTs should have.  btw. We are also exploring some scenarios about soulbound token, which can be used as a reference, but our scenario is a further Paired bounding scenario, which creates a new identity for the address and stores the relationship between the paired address at the same time. It is an extend of the standard erc721, and its characteristics are mainly:  implement from erc721, most NFT usage scenarios are seamlessly compatible non-transferable and non-sellable, one person can only have one valid Token at the same time. mint paired soulbound token through multi-signature flow, Mint will issue 2 Soulbound Tokens at one time. can be destroyed through multi-signature flow, and new Soulbound Token can be minted with other addresses after burn.  Behind the token, we store the relationship between two tokens, and the bounding relationship can be queried through the contract interface. But we haven\u2019t considered making it a standard yet, because his scene is still very limited, and it\u2019s more of a social network attempt. we write a contract at: GitHub - marryinweb3/ERC721-520: NFT-like Soulbound Token implement and implement a dapp at: https://marry3.love we can talk about soulbound tokens more at here ",
                    "links": [
                        "https://marry3.love/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.352936042452172
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/GrandGarcon",
                    "index": "27",
                    "likes": "0",
                    "time": "06/06/2022-15:15:02",
                    "content": "thanks Micah , apart from the discussion thread that explains very interesting points , i want to ask an higher level question, how can the concept be modularised similar to Lens protocol to include other aspects of the identity that can be upgradeable ? thanks ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.979166666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "28",
                    "likes": "1",
                    "time": "06/06/2022-15:23:34",
                    "content": "    TimDaub:  You are being unclear what equates account-binding and you\u2019re arbitrarily pick examples where account-binding outlines unfavorable outcomes that make you \u201cwin\u201d arguments here. You haven\u2019t answered my specific example with MolochDAO.   Yes, I think Molach DAO\u2019s design is bad and should not be copied.     TimDaub:  EIP-173 is binding ownership of contracts to accounts.   EIP-173 supports transferring ownership, so it isn\u2019t a permanent binding.     TimDaub:  Where does account-binding start according to your definition? Yes, EIP-173 has a transferOwnership method, does that mean the contract\u2019s ownership isn\u2019t account-bound? Is account-bound anything that doesn\u2019t implement a standardized transfer function?   Assets (of any kind) should be freely transferable by the user with as few hoops as possible.  A transfer function executable by the owner is probably as close as we can get to ease of transfer.  While some centralized/governance based transfer process is marginally better than no transfer ability at all, I argue that that margin is so tiny that the benefits it provides are far insignificant compared to the harm done by supporting/encouraging the pattern. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.130681818181818
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "29",
                    "likes": "0",
                    "time": "06/06/2022-15:29:39",
                    "content": "    yootou:  Who initiated the binding of the soulbound token? How to ensure that no one can generate a soulbound token for an address without consent, it is a serious topic, if someone can generate a soulbound token for you without consent, it will be a very serious disaster.   You can already do this today, and people have done this already (created NFTs that can be given to a user but the user cannot get rid of them).  A soulbound standard can\u2019t prevent this.     yootou:  Does soulbound token need to be compatible with widely used standards such as erc721 and erc20? I think it is necessary, otherwise it will bring a lot of ecological compatibility problems to create a token standard.   No.  Soulbound tokens serve a different purpose, and in order to serve that purpose well they may (and in this case do) have a different interface.     yootou:  What are the specific scenarios of soulbound token? It needs to be supplemented by some specific scenarios in different fields to define the exact characteristics that SBTs should have.   Badges/credentials assigned to a persona.  You can think of this as a component of a reputation system.  A persona builds up reputation over time (good or bad) and this provides a mechanism for ensuring that persona cannot be merged with another persona and cannot be split into multiple personas.     yootou:  Does soulbound token binding bind humans to address, or address to address? Or is tokenId and address bound? This is a topic worth exploring.   In this EIP, soulbound tokens are bound to an NFT of some kind.  That NFT can then be bound too an address, which may or may not be solely controlled by a human.  It is not possible (and some would argue not recommended) to bind to a human. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.15530303030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "30",
                    "likes": "0",
                    "time": "06/06/2022-15:31:36",
                    "content": "    GrandGarcon:  how can the concept be modularised   I am of the opinion that standards should be as simple as possible, and I think this EIP is about there.  One can (and some do) argue that the URI stuff should be removed to make it even simpler, but the point here is that I am pretty firmly against making it more complicated. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.041666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "31",
                    "likes": "0",
                    "time": "06/06/2022-15:40:24",
                    "content": "    MicahZoltu:  EIP-173 supports transferring ownership, so it isn\u2019t a permanent binding.       MicahZoltu:  Assets (of any kind) should be freely transferable by the user with as few hoops as possible. A transfer function executable by the owner is probably as close as we can get to ease of transfer.   Within EIP-4973, we\u2019re now requiring implementers to always allow ABT receivers to call function burn(uint256 _tokenId). So the token is technically still account-bound, but not permanently. E.g. a user can always \u201ctransfer\u201d the token to address(0). Here\u2019s what our document says:  An ABT receiver must be able to always call function burn(address _tokenId) to disassociate themselves from an ABT publicly.  and  We expose function burn(address _tokenId) and require it to be callable at any time by an ABT\u2019s owner as it ensures an owner\u2019s right to publicly disassociate themselves from what has been issued towards their account.  Additionally, we\u2019ve adjusted the \u201cException Handling\u201d section:  Given the non-transferable between accounts property of ABTs, if a user\u2019s keys to an account or a contract get compromised or rotated, a user may lose the ability to associate themselves with the token. In some cases, this can be the desired effect. Therefore, EIP-4973 implementers should build re-issuance and revocation processes to enable recourse. We recommend implementing strictly decentralized, permissionless and censorship-resistant re-issuance processes.  Have we come your way with these changes to address some of your concerns? Do you feel different now about EIP-4973? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.792857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lancelance",
                    "index": "32",
                    "likes": "0",
                    "time": "08/06/2022-03:13:44",
                    "content": "\u201cSoul Binding\u201d concept seems fresh at crypto space but it already existed at online game industry for decade. Like your personal equipment only you can own it. Therefore, own it or destroy it. I believe you all know and not difficult to understand right. For what I have learn above that EIP-5114 serves several purposes:  Tightly \u201cbind\u201d the crypto citizenship, emphasizing decentralized crypto identity; Improving the confirmation of asset ownership; Should I say \u201cAnti-cheating\u201d?  What I have learnt currently, the EIP-5114 seems has limited usage scene like NFT. Therefore what I write above, like the game asset, EIP-5114 combines the unique ownership, like an identity, can\u2019t trade. Merit is shine, very unique and exclusive, but the shortage is also obvious, priceless at some point, valueless. However, could we think about its original data upgrading? Although EIP-5114 serves its purpose to untransferable(binds the soul), the soul or the attribute could improve by time or by experience. So I believe embed traditional NFT standard like EIP-165, and need to consider about upgradable metadata like EIP-4906. For what I found the current ERC721/1155 are great, and transferable, tradable, EIP-5114 serves another purpose: emphasizing crypto personality, identity. In sum, EIP-5114 is a great exploration, tokenUri and collectionUri not a matter, but still need to consider the upgradable metadata embed issue. All in all, is an NFT. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.88907967032967
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "33",
                    "likes": "1",
                    "time": "08/06/2022-07:52:10",
                    "content": "    TimDaub:  Within EIP-4973, we\u2019re now requiring implementers to always allow ABT receivers to call function burn(uint256 _tokenId). So the token is technically still account-bound, but not permanently. E.g. a user can always \u201ctransfer\u201d the token to address(0). Here\u2019s what our document says:   I don\u2019t think this is a bad feature, but it does prevent aggressive caching, which is unfortunate.     TimDaub:  Therefore, EIP-4973 implementers should build re-issuance and revocation processes to enable recourse. We recommend implementing strictly decentralized, permissionless and censorship-resistant re-issuance processes.   I contend that it is not possible to build a censorship resistant process for re-issuance, which is why I\u2019m against this pattern. Also, even if you could solve that problem, if it is difficult to go through the re-issuance process then people are less likely to engage in healthy security practices like key rotation.  For a real world example, one of the Ethereum Core Devs leaked a private key holding a bunch of testnet ETH on GitHub.  They knew they made this mistake when it happened, but even though all of the assets were trivially transferable it was still \u201ctoo much effort\u201d to rotate the keys (they would have to update a bunch of scripts with the new keys).  Something like 9 months later someone stole all of their testnet ETH.  I bring this up because it shows that even people who understand the security risks will still be stopped from following good security practices if it is too difficult, and we should make it as trivially easy to do the right thing as possible, which means as few barriers to address rotation as possible. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.975814041031432
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "34",
                    "likes": "1",
                    "time": "08/06/2022-07:54:49",
                    "content": "    lancelance:  upgradable metadata embed issue.   I\u2019m pretty strongly against upgradability, because it introduces an avenue for censorship by the issuer.  One can imagine an issuer issuing an \u201cupgradable\u201d token and then if the current holder of that token does something they don\u2019t like, the issuer can \u201cupgrade\u201d the token have no metadata, or have offensive metadata, or otherwise alter the value of the token out from under the owner. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.138888888888889
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lancelance",
                    "index": "35",
                    "likes": "0",
                    "time": "08/06/2022-08:24:00",
                    "content": "Thanks Micah, I am totally agree with you. The point I mention above is, metadata could be upgraded through the contract or the rule itself, not through human behavior. Definitely this may require a huge foresight designing in a project, but I believe once it solved the current market would forward to next dev stage. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "36",
                    "likes": "0",
                    "time": "08/06/2022-08:44:19",
                    "content": "    MicahZoltu:  I don\u2019t think this is a bad feature, but it does prevent aggressive caching, which is unfortunate.   Not sure what you mean exactly, please consider elaborating this point in the EIP-4973 discussion thread and we can try to find solutions.     MicahZoltu:  I contend that it is not possible to build a censorship resistant process for re-issuance, which is why I\u2019m against this pattern. Also, even if you could solve that problem, if it is difficult to go through the re-issuance process then people are less likely to engage in healthy security practices like key rotation.   Please let me make yet another argument for ABTs being censorship-resistant that I haven\u2019t seen anyone make. But first, I want to highlight the following:  Different people are coming to the ABT EIP-4973 proposal with different contexts, and many, given Vitalik et al.'s recent paper, are taking the identity or \u201cSoulbound tokens\u201d angle. Yes, we\u2019ve argued whether ABTs are a fit for, e.g., issuing credentials. But I want to say that I\u2019m not sure it is a fit for any time of credential!  For example, as I\u2019ve pointed out multiple times, many smart contracts today do account bind certain functionality. E.g. within a Gnosis Safe, we bind the partial ownership over calling functions and executing mutually agreed-upon transactions to accounts. And it isn\u2019t done in any structured way where e.g. an indexer coming across a Gnosis Safe contract and another account-binding contract can effectively extract and transform this data. I wanna say that there are now interface standards and that\u2019s bad! Similarly, as I\u2019ve outlined, with Harberger taxes and the newly resulting property class that I call \u201cHarberger property\u201d, we want to bind a property to a smart contract and it cannot have a transfer function. Same problem: No consensus on interfaces. Within MolochDAO, voting rights are account bound and rage quitting and re-proposing entry would help to switch accounts. Finally, I want to say that these use cases are very different from what is e.g. laid out in Vitalik et al.'s DeSoc paper and it is also very different from the Verified Credentials specification. The above mechanisms have been used within Ethereum for years now and they work. I don\u2019t know anyone that refuses to use the Gnosis Safe on the basis that it makes key rotation difficult. The exact opposite is true: Using a Gnosis Safe in a high-trust group makes key rotation of an individual a piece of cake. And what you\u2019re describing above with the Testnet dev would not have happened if those funds were held in a multi-signature wallet! But, I\u2019ve said at the beginning of this post that I want to make an argument for censorship resistance, and here is it:  First: We need to distinguish between censorship and moderation. If e.g. a group wants to ban a person for misconduct and hence they decide to not re-issue an ABT, that\u2019s their choice. It\u2019s not \u201ccensorship\u201d because they don\u2019t carry mal-intend. Secondly: If there\u2019d be structural, mal-intended censorship of a group over others (read: discrimination): That\u2019d be bad and we should do anything possible to avoid it!  But in that later case, I want to say: Let them do it! The blockchain keeps all data stored permanently. So if a group deems it a good idea to structurally censor or discriminate against others: all of their misbehavior is forever etched into the blockchain and I trust that eventually, the broader public will come to understand that what this group has done to others is bad! So for me, regarding censorship resistance, I think in practice is solved as blockchain\u2019s transparency holds everyone accountable. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.205361974335188
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "37",
                    "likes": "2",
                    "time": "08/06/2022-09:13:08",
                    "content": "There may be a bit of a miscommunication here.  I don\u2019t think attaching assets to an address is bad.  A Gnosis Safe having an owner is not a problem.  The problem is permanently binding assets to an address, or making it more difficult than absolutely necessary to transfer an asset between addresses is what is bad.  Also, there are plenty of places where immutable address makes sense.  For example, if you are building something that integrates with DAI, it makes total sense to set the DAI address as immutable.  The problem arises when you are making ownership immutable. Anytime we are attaching asset ownership to an address, there must be a way for the owner address to change, and that process should be as easy/simple/censorship resistant as possible.  Censorship and curation are both on the same spectrum, and the line between them is extremely fuzzy and extremely opinionated.  If you can curate, then you can censor.  Whether any given action is \u201ccensorship\u201d or \u201ccuration\u201d is entirely in the eye of the beholder.  To some, Twitter and YouTube actively engage in \u201ccuration\u201d, while to others they actively engage in \u201ccensorship\u201d. While I do think there is value in curated systems, in most cases you don\u2019t need a blockchain to build them.  There are some designs for curated systems that do require the censorship resistance feature that blockchains provide (e.g., choose-your-own-censor), but they are definitely the outliers IMO. For the purpose of this discussion, I think this is out of scope because I\u2019m advocating for a censorship resistant soulbound token, which functionally means it is also resistant to curation as the two things come as a packaged deal. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.759803921568627
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "38",
                    "likes": "1",
                    "time": "08/06/2022-11:09:39",
                    "content": "OK awesome, this clears it up for me. Thanks for the discussion  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.833333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/GrandGarcon",
                    "index": "39",
                    "likes": "0",
                    "time": "08/06/2022-11:45:25",
                    "content": "    MicahZoltu:  I am of the opinion that standards should be as simple as possible, and I think this EIP is about there. One can (and some do) argue that the URI stuff should be removed to make it even simpler, but the point here is that I am pretty firmly against making it more complicated.   thanks for response , totally agree on this and given that EIP has to be an simple and immutable representation of the interface / programming pattern ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.138888888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "40",
                    "likes": "0",
                    "time": "09/06/2022-04:35:21",
                    "content": "It\u2019s probably getting much too late here, but I\u2019m not figuring out which is better for undercollateralized loans use case; EIP-4973 or EIP-5114? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "41",
                    "likes": "1",
                    "time": "09/06/2022-06:36:03",
                    "content": "It\u2019s still very early but you have to ask more specific questions as e.g. I\u2019m not familiar with the problem of undercollateralized loans. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.553125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adompeldorius",
                    "index": "42",
                    "likes": "2",
                    "time": "09/06/2022-08:51:06",
                    "content": "This might be out of scope for this EIP, but I think it would be useful to highlight exactly which use-cases this EIP serves that cannot be done off-chain by e.g. signed claims. One use-case I can think of is when you need time-stamping, i.e. being able to prove that you owned a badge at a specific time point in the past. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.8
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "43",
                    "likes": "1",
                    "time": "09/06/2022-10:37:13",
                    "content": "here\u2019s a table but it\u2019s far from conclusive or complete. But just to get the conversation started.      Claim indefinitely available claim\u2019s existence plausibly deniable by signer claim issuer\u2019s signature valid claim deletable after publishing claim at URL updatable with new signature & content claim timestamped/anchored: Can claim content\u2019s integrity over time be validated? claim for everyone publicly accessible (no privacy?)     on-chain yes* no because Ethereum consensus is witness yes tx only passes Ethereum PoW consensus with valid sig no or depends on implementation no or depends on implementation of smart contract yes if all metadata is hashed yes unless encryption**   off-chain depends on claim\u2019s host server yes, can be deleted from server no, but can efficiently be verified locally yes yes maybe e.g. using open-timestamps/oracles choice of issuer    * consider EIP-4444 ** encryption can get broken over time  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.712824675324675
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adompeldorius",
                    "index": "44",
                    "likes": "1",
                    "time": "09/06/2022-11:15:29",
                    "content": "Thanks for the table. Here are some comments: 1) Claim indefinitely available I would argue that this is independent of on-chain / off-chain. As long as one honest entity serves a copy of the claim, the claim is available. The same is true for on-chain, after EIP-4444. 2) claim\u2019s existence plausibly deniable by signer I believe this is the same as the first point. As long as anyone can get the claim from at least one honest entity, the signer cannot withdraw the claim. 3) claim issuer\u2019s signature valid On-chain / off-chain doesn\u2019t matter. Anyone can verify the signature before presenting the claim as valid. 4) claim deletable after publishing Same as 1) above. 5) claim at URL updatable with new signature & content This is not possible even off-chain if the claim is content-addressed. 6) claim timestamped/anchored: Can claim content\u2019s integrity over time be validated? This is is most securely done on-chain. 7) claim for everyone publicly accessible (no privacy?) Since the on-chain claim can be encrypted, there seems to be little difference between on-chain / off-chain on this point. If the owner wants to reveal only a part of the claim, they could make a ZK-proof, either using an encrypted claim on-chain, or a private claim off-chain. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.864772727272727
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "45",
                    "likes": "1",
                    "time": "09/06/2022-11:51:39",
                    "content": "Ok this is helpful. But about this \u201cone honest entity\u201d making data available - while in theory it\u2019s easy to manifest: Please name one real data provider that has reliably made data available as Ethereum did considering you wrote something on-chain in 2016 and paid the costs and can still access it. Bittorrent, the Pirate Bay and the fact that Pulp Fiction is the goddamn best movie on the planet? OK. But much other data isn\u2019t available anymore because nobody cared. The problem isn\u2019t honesty, it\u2019s incentives. Edit: I have to admit that sadly EIP-4444 changes the outlook quite a lot  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.7310606060606055
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adompeldorius",
                    "index": "46",
                    "likes": "0",
                    "time": "09/06/2022-12:22:28",
                    "content": " Please name one real data provider that has reliably made data available as Ethereum did considering you wrote something on-chain in 2016 and paid the costs and can still access it.  I have emails in my Gmail account dating back to 2012. If I wanted to, I could easily make multiple backups of all my emails since then, which is under 2 GB. I would imagine anyone that cared about their badges would also take backups, if they don\u2019t want to rely on third-parties to host their badges. Anyway, with EIP-4444 in place, the problem of incentivizing data storage is independent of whether the badge is on-chain or off-chain. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.861111111111112
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "47",
                    "likes": "1",
                    "time": "09/06/2022-12:28:06",
                    "content": "Invalid example according to my criteria:  Gmail has country-biased ToS; they can remove ur data on the basis of contract breach Gmail may be dependent on your credit card and the funds you own. Tomorrow Gmail could ask you to pay to access your email You may accidentially delete all of your data and ask Google to GDPR delete too I\u2019ve been to China, Google is blocked there. Gmail doesn\u2019t periodically publish a merkle root that lets you efficiently verify your data\u2019s integrity Gmail data is only accessible to you. How can you prove to someone else that e.g. you saw a specifc email?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 6.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adompeldorius",
                    "index": "48",
                    "likes": "1",
                    "time": "09/06/2022-12:40:43",
                    "content": "As I said, anyone that cared about their badges and didn\u2019t want to rely on third-parties could make backups themselves and store them wherever they want. And again, this problem is orthogonal to whether the badge is on-chain or off-chain. Just to namedrop some projects working on this: Filecoin The graph The portal network (Under construction) ",
                    "links": [
                        "https://thegraph.com/en/",
                        "https://www.ethportal.net/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "49",
                    "likes": "0",
                    "time": "09/06/2022-12:43:25",
                    "content": "Fair. For you does \u201coff-chain\u201d mean that the data isn\u2019t available on Ethereum, e.g. storing on Filecoin is off-chain too from the Ethereum user perspective? Does \u201con-chain\u201d mean: data is on Ethereum, but e.g. not Filecoin? Because generally, I\u2019ve been using \u201coff- and on- chain\u201d to say: data is stored in a network with similar data availability guarantees as BTC, ETH, Filecoin (not thegraph though). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "50",
                    "likes": "0",
                    "time": "09/06/2022-13:02:27",
                    "content": "I also want to add that there are more nuances in the details depending on e.g. what type of claims people host. E.g. nobody may want to host dissident claims or Wikileaks data, and everybody is fine with hosting politically neutral images of cats. But e.g. society might still want to host politically-sensitive data in the interest of the public. And individuals can decide by their ethics and not foreign-country laws. In their famous post on web3, Moxie seemed to avoid this angle when criticizing: Moxie Marlinspike >> Blog >> My first impressions of web3 It\u2019s what Vitalik describes as \u201cControl as Liability/Responsibility\u201d: Control as Liability I wrote about it in a similar vain saying that running a blockchain node helps collectively coordinate around e.g. alegality: Ethereum Is The Newsfeed We Deserve ",
                    "links": [
                        "https://vitalik.ca/general/2019/05/09/control_as_liability.html",
                        "https://timdaub.github.io/2022/03/11/ethereum-is-the-newsfeed-we-deserve/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.190476190476191
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/lancelance",
                    "index": "51",
                    "likes": "0",
                    "time": "10/06/2022-02:50:23",
                    "content": "    TimDaub:  Does \u201con-chain\u201d mean: data is on Ethereum, but e.g. not Filecoin?   For I have known the \u201con-chain\u201d, is metadata on-chain, and people know it very well too. But this in case, just the metadata. If in a broad view of \u201con-chain\u201d should be fully on-chain, not only the metadata, but the all the metadata indicated should be fully on the Ethereum blockchain as well. Anyway, also anticipating the fully on-chain solution. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dk4tz",
                    "index": "52",
                    "likes": "0",
                    "time": "15/06/2022-01:34:52",
                    "content": "I vote for a \u201cBurn\u201d mechanism. You have the right to cut ties with an authority. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.428571428571428
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "53",
                    "likes": "0",
                    "time": "15/06/2022-05:19:33",
                    "content": "I don\u2019t think the benefits provided by a burn (given that history is viewable so you can never completely remove knowledge that you had the badge at some point) are worth the loss of immutability (which results in an inability to cache indefinitely).  Plans now that this is merged as draft: Add Motivation.  Add EIP-165 support.  Add rationale for on-chain vs off-chain claims (timestamping, standardized/public lookup location). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "55",
                    "likes": "1",
                    "time": "17/06/2022-18:59:45",
                    "content": "I\u2019m beginning to think that the use case for this proposal can be expanded beyond personas. What if I have an NFT that represents a project or DAO? Consider this use case\u2026 There is some 3rd party or collective that have reputation as experts in risk analysis. They mint badges e.g. A (low risk), C (medium risk), AA (very low risk) in this chronological order to the NFT. I can use events emitted to find out history of these credit ratings over time. Maybe project/DAO received a C when crypto market was really down and other times the market was up. Just saying, soulbound badge don\u2019t have to be for a persona but anything an NFT can represent. But then the name for EIP probably needs to change to indicate this. Name could also indicate that receiving these badges is immutable. Plus, not sure how you would enforce the NFT to represent personas only? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.668402777777778
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "56",
                    "likes": "0",
                    "time": "27/07/2022-06:31:35",
                    "content": "I have been thinking about adding EIP-165 as a requirement and I\u2019m a bit hesitant.  While I\u2019m a big fan of EIP-165 and think most contracts should implement it, I don\u2019t think it should be a requirement of this EIP because that would lock us into always having to use EIP-165 even if a future better mechanism for interface discovery becomes available.  Luckily, EIP-165 supports introspection of EIP-165 support so someone can first check to see if 165 is supported by a token prior to checking to see if this is supported using 165 (or whatever future introspection mechanism they use). For now, I think I\u2019ll add a recommendation to include some mechanism for introspection and reference EIP-165 as an example of such a mechanism. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.991666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "57",
                    "likes": "0",
                    "time": "27/07/2022-07:50:18",
                    "content": "I have updated the EIP with a few minor changes as seen Update eip-5114.md by MicahZoltu \u00b7 Pull Request #5346 \u00b7 ethereum/EIPs \u00b7 GitHub  The collection URI is now pure. Added metadataFormat pure method for discovery of the metadata file format and version. Added a note in specification that implementers SHOULD also implement something like EIP-165. Cleaned up some wording.  I went back and forth on whether content addressability should be required by this EIP.  On the one hand, it feels overly prescriptive/restrictive to tell people how the data must be served.  On the other hand, using non-content-addressable metadata links makes it so a token author can functionally censor a user, just as they could if the metadata was mutable.  I ended up sticking with requiring both immutability and content addressability. I also changed the name to Soulbound Badge in a follow-up PR (Update eip-5114.md by MicahZoltu \u00b7 Pull Request #5348 \u00b7 ethereum/EIPs \u00b7 GitHub).  I feel like Soulbound Badge offers the best pithy description of what this is, as \u201ctoken\u201d comes with some connotations around it regarding transferability and fungibility. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5348"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.720982142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/toastyboy",
                    "index": "58",
                    "likes": "0",
                    "time": "27/07/2022-20:42:04",
                    "content": "I like the general idea behind this! The main question I have is \u2013 what\u2019s the advantage of forcing immutability rather than having it be optional? Optionality could be implemented as  function immutable() external view returns (bool _immutable);   Or even  function immutable(uint256 tokenId) external view returns (bool _immutable);   The same pattern could be used to make burning optional (which would also require mutability). Providing the return values of these functions are required to be immutable, this would allow immutable implementations to retain all the benefits of the original proposal, but also enable implementations that require mutability and/or burnability. Is there a downside to this? And on the reasoning behind making EIP-165 optional.     MicahZoltu:  I don\u2019t think it should be a requirement of this EIP because that would lock us into always having to use EIP-165 even if a future better mechanism for interface discovery becomes available.   I\u2019m not sure I understand. A few points:  This is going to be the case for a huge number of interfaces so I\u2019d imagine addressing this would be a part of any future proposal. There\u2019s no reason to think EIP-165 and any future mechanism would be mutually exclusive. EIP-165 itself would likely be able to indicate support for a replacement mechanism. A future interface detection mechanism may require an amendment to this spec to enforce it anyway  I\u2019m trying to figure out what sequence of events would lead to an EIP-165 requirement causing problems later down the line, so let me know if I\u2019m missing something here! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.144570707070707
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "59",
                    "likes": "0",
                    "time": "28/07/2022-08:37:09",
                    "content": "    toastyboy:  what\u2019s the advantage of forcing immutability rather than having it be optional?   Immutability allows aggressive caching, and content-addressing gives a strong guarantee of non-censorability to the user.  One can certainly imagine a different standard that didn\u2019t come with these guarantees and it would serve a different set of use cases that may be valuable to some people.  This standard specifically aims to solve the set of use cases where censorship resistance and cacheability are desirable.     toastyboy:  Providing the return values of these functions are required to be immutable, this would allow immutable implementations to retain all the benefits of the original proposal, but also enable implementations that require mutability and/or burnability. Is there a downside to this?   I think what you have described (censorable/mutable badges) could be useful for many people, but I think that should be a separate standard.  I generally favor small concise standards that solve one specific problem rather than large standards that try to solve multiple problems simultaneously.     toastyboy:  There\u2019s no reason to think EIP-165 and any future mechanism would be mutually exclusive.   On the EVM, everything comes with a cost so if there exists a better way to do interface detection in the future one would reasonably want to drop EIP-165 support for new stuff at some point.     toastyboy:  A future interface detection mechanism may require an amendment to this spec to enforce it anyway   Can you give an example of this?  I\u2019m struggling to think of a hypothetical introspection that would require changes to this specification. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.630288272333726
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/toastyboy",
                    "index": "60",
                    "likes": "0",
                    "time": "28/07/2022-10:26:49",
                    "content": "I think there\u2019s a sliding scale here between extremely narrowly defined standards and extremely broad standards. I agree that there are issues with creating standards that are too broad. But there are also issues with creating standards that are too narrow. Standards are, by definition, created to allow for compatibility and interoperability between a variety of implementations. The \u201csingle purpose\u201d you refer to is a matter of framing. Your framing is:  A standard for immutable badges that attach to NFTs  Whereas my proposed framing is:  A standard for badges that attach to NFTs  Both of these framings could be described as \u201csingle purpose\u201d from their respective viewpoint. My sense is that allowing implementers to choose between mutability or immutability does not overly complicate this interface, and that forcing immutability pushes this into the \u201ctoo narrowly defined\u201d category.     MicahZoltu:  Can you give an example of this? I\u2019m struggling to think of a hypothetical introspection that would require changes to this specification.   My point was that it would require amendments to this spec if it were to be required, in the same way that if you want to require EIP-165 it must be defined in the specification. If the point of a standard is interoperability, and interoperability is dependent on interface detection, then what\u2019s the point of a standard that doesn\u2019t offer this? If an implementer doesn\u2019t want to offer interoperability, then they can choose to diverge from the standard. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.802083333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "61",
                    "likes": "0",
                    "time": "28/07/2022-10:58:49",
                    "content": "    toastyboy:  My sense is that allowing implementers to choose between mutability or immutability does not overly complicate this interface, and that forcing immutability pushes this into the \u201ctoo narrowly defined\u201d category.   While what you propose does allow implementers to do more (it reduces constraints), it narrows what users can do (increases constraints).  Caching is a prime example here: If you allow implementers to mutate badges, then people writing code that interacts with those badges cannot aggressively cache the results and they MUST constantly re-check to see what the latest state is.  This is removing options from users in favor of giving more options to badge authors.  I can see an argument to be made for making this trade, but it is not a free trade as you have implied.     toastyboy:  interoperability is dependent on interface detection   I don\u2019t believe interoperability is dependent on standardization of the interface detection mechanism.  Take token lists for example, this is an off-chain mechanism for figuring out what is an ERC-20 token and it works fine without ERC-20 tokens implementing any specific standard. A given wallet may only support badges that are ERC-5114 + ERC-165 and that would be perfectly reasonable.  However, there is no reason that a wallet couldn\u2019t support ERC-5114 badges that are not ERC-165 compliant, and there is still value in being able to assert that this is an ERC-5114 badge.  Separate from technical reasons, I do think there is value in being clear to users what they are getting.  We have seen a lot of people build \u201cDeFi\u201d apps over the past couple years that are absolutely not decentralized at all.  By having this standard assert that ERC-5114 badges are censorship resistant/immutable, we give future users something very clearly defined to rally around and this may help reduce user confusion.  You will be able to say, \u201cthat is not an ERC-5114 token\u201d rather than saying \u201cyes, that is an ERC-20 token, but it has an owner that can freely mint however much they want and rug pull you at any point\u201d.  If a token is ERC-5114 compliant (as defined currently), then just verifying compliance is enough to give strong guarantees to the user what they are getting and it makes it much harder for people to steal the term and make it mean something it wasn\u2019t intended to mean. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.51875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/toastyboy",
                    "index": "62",
                    "likes": "0",
                    "time": "28/07/2022-18:50:13",
                    "content": "I just want to clarify what I was proposing because I get the sense we\u2019re talking about different things. When I say \u201coptional\u201d, what I mean is that an implementer must mark their implementation as either immutable or mutable. If they mark it as immutable, then their implementation would be compliant with your original proposal, and therefore provide all of the guarantees and benefits of immutability that you have mentioned. Other implementers could chose to mark their implementation as mutable, allowing them to use this standard for use-cases that rely on mutability. Or, put differently, my proposed changes wouldn\u2019t compromise immutability in any way that I\u2019m aware of.     MicahZoltu:  Take token lists for example, this is an off-chain mechanism for figuring out what is an ERC-20 token and it works fine without ERC-20 tokens implementing any specific standard.   I\u2019m not aware of an off-chain mechanism that currently exists for smart contract interface detection but, if it does, it wouldn\u2019t be mutually exclusive with ERC-165, and it also wouldn\u2019t solve the problem of on-chain interface detection.     MicahZoltu:  If a token is ERC-5114 compliant (as defined currently), then just verifying compliance is enough to give strong guarantees to the user what they are getting and it makes it much harder for people to steal the term and make it mean something it wasn\u2019t intended to mean.   I\u2019m not sure how this relates to the question of requiring ERC-165 or optional immutability? The only way to truly verify compliance would be to perform an audit of the implementation, and this standard can\u2019t solve that. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.034496753246753
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "63",
                    "likes": "0",
                    "time": "29/07/2022-06:26:50",
                    "content": "    toastyboy:  When I say \u201coptional\u201d, what I mean is that an implementer must mark their implementation as either immutable or mutable. If they mark it as immutable, then their implementation would be compliant with your original proposal, and therefore provide all of the guarantees and benefits of immutability that you have mentioned. Other implementers could chose to mark their implementation as mutable, allowing them to use this standard for use-cases that rely on mutability.   Ah, I see what you are saying now.  I think you should just have two standards in this case.  I don\u2019t see any advantage in having a single standard with two mutually exclusive modes vs two separate standards.  Once EIP-5114 is final, someone could make a copy of it, remove the immutability/addressability comments, and push that quickly through to final.  This makes it more clear when a user says \u201cI have an EIP-5114 badge\u201d what exactly that means, rather than requiring they say \u201cI have an [im]mutable EIP-5114 badge\u201d.     toastyboy:  I\u2019m not sure how this relates to the question of requiring ERC-165 or optional immutability? The only way to truly verify compliance would be to perform an audit of the implementation, and this standard can\u2019t solve that.   It doesn\u2019t, it was related to the immutability discussion.       toastyboy:  I\u2019m not aware of an off-chain mechanism that currently exists for smart contract interface detection but, if it does, it wouldn\u2019t be mutually exclusive with ERC-165   https://tokenlists.org/ You are correct it isn\u2019t mutually exclusive, but if you are using something that then 165 is unnecessary.     toastyboy:  wouldn\u2019t solve the problem of on-chain interface detection.   You are correct, tokenlists don\u2019t solve the problem of on-chain detection.  While it won\u2019t likely change my position on this, I\u2019m curious what is the use case for interface detection on-chain?  I think the key to my argument regarding EIP-165 is that standards are composable, so one can create a token that is EIP-165 & EIP-5114.  Similarly, one can build an application that only works with tokens that are both EIP-165 & EIP-5114 and this is fine.  Standards should be as small as possible to define something useful, and in the case of 5114 that means leaving out a requirement on 165.  I would be totally fine with apps being built that only support 165 + 5114 tokens and refusing to support 5114 tokens that don\u2019t implement 165, but this doesn\u2019t mean we need to have an explicit standard for that composition. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.145382395382395
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/toastyboy",
                    "index": "64",
                    "likes": "0",
                    "time": "29/07/2022-07:54:16",
                    "content": "I think we could go back and forth on these points indefinitely, so I\u2019m going to respectfully disagree and duck out of this discussion here! I\u2019d be interested to hear some viewpoints from other people. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.9375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "65",
                    "likes": "0",
                    "time": "29/07/2022-08:08:41",
                    "content": "For anyone interested in arguing that 165 should be required in this EIP, the argument I would like to see is one that expresses what the difference is between these two apps:  \u201cWorks with badges that implement EIP-5114\u201d \u2013 where EIP-5114 has a hard dependency on EIP-165 \u201cWorks with badges that implement EIP-5114 & EIP-165\u201d \u2013 where EIP-5114 doesn\u2019t depend on EIP-165  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.895833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "66",
                    "likes": "1",
                    "time": "29/07/2022-08:10:34",
                    "content": "Similarly, for anyone interested in arguing that this EIP should support both immutable and mutable badges, I would like to see the argument in how these two apps differ:  \u201cWorks with badges that implement EIP-5114 & EIP-X\u201d \u2013 where EIP-X is a mutable version of EIP-5114 \u201cWorks with badges that implement EIP-5114\u201d \u2013 where EIP-5114 has a flag for mutability  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jasonhoi",
                    "index": "67",
                    "likes": "0",
                    "time": "05/09/2022-15:20:33",
                    "content": "Dear MicahZoltu, I am a contract developer at Sharkz Entertainment, we recently launched a public \u201cSoulbound\u201d expirement for the concept, your EIP inspired us to create the whole expirement and really created the backbone of our project, our team created an implementation contract for EIP5114. I believe we successfully retained your original concept of immutalbe \u201cbadge\u201d design, our ERC5114 contract is binding \u201cSoul Badge\u201d to a \u201cSoul\u201d (ERC4973), permanently at mint time! Please review our contracts when you got the time, and please have fun to play around with it, thanks!   github.com   soulbound/contracts/lib/5114 at main \u00b7 TeamSHARKZ/soulbound main/contracts/lib/5114 Contribute to TeamSHARKZ/soulbound development by creating an account on GitHub.      ",
                    "links": [
                        "https://github.com/TeamSHARKZ/soulbound/tree/main/contracts/lib/5114",
                        "https://github.com/TeamSHARKZ/soulbound/tree/main/contracts/lib/5114"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.297453703703704
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "68",
                    "likes": "1",
                    "time": "06/09/2022-05:23:59",
                    "content": "Glad to see someone implementing this.  I left an issue on the repository about the burn function, which makes it EIP-5114 incompatible.  At a glance it otherwise looks reasonable (definitely didn\u2019t do a thorough review/audit though). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jasonhoi",
                    "index": "69",
                    "likes": "0",
                    "time": "06/09/2022-15:22:04",
                    "content": "Thanks for start reviewing our contracts! We are now updating our implementation to remove all burning functions relating to EIP-5114, also, we are updating the contract following the last update to the EIP interface, adding \u201cmetadataFormat\u201d and we will just return the schema string from EIP-712 - ERC721 Metadata JSON Schema. However, I find it is quite inconvenient on \u201cfunction collectionUri() external pure\u2026\u201d, for a function to be marked as \u201cpure\u201d, the uri will be forced to \u201chardcode\u201d in the function, making it hard to design an easy-to-use abstract/library contract that other final contracts can extend from, I think immutable requirement can be implemented in many ways, it need not to be forcing the function to be \u201cpure\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.787878787878787
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "70",
                    "likes": "0",
                    "time": "06/09/2022-21:24:13",
                    "content": "If EIP-5114 mandates EIP-165, then a compliant viewer application can implement only autodetection of badges using supportsInterface and a log subscription. If EIP-5114 doesn\u2019t mandate EIP-165, then a compliant viewer application needs to have EIP-165 autodetection, plus some other method (maybe logs, and try calling a function unique to EIP-5114?) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "71",
                    "likes": "0",
                    "time": "07/09/2022-04:13:12",
                    "content": "    SamWilsn:  If EIP-5114 mandates EIP-165, then a compliant viewer application can implement only autodetection of badges using supportsInterface and a log subscription.   One can simply write a 5114 && 165 compliant viewer application.  There is no need to have one standard depend on another for an application to depend on both.  In fact, at the moment I would advocate strongly that all tokens implement both 5114 && 165 if they want maximum compatibility, and all viewers only support 5114 && 165 tokens and simply don\u2019t support 5114 tokens that aren\u2019t 165 compliant if they need the ability to introspect (many tools don\u2019t need introspection). What I want to avoid is having this standard no longer be applicable in the future when some new introspection mechanism becomes available that people switch to.  I would rather applications just become 5114 && (12345 || 165)  or 5114 && 12345 compliant than have to create a whole new standard that is 90% a copy of 5114.  To frame this differently, if someone created a new standard EIP-6789 which was just EIP-5114 + EIP-165, and then everyone created EIP-6789 tokens I think that would be functionally the same as if I add a dependency on 165 directly to EIP-5114.  If we accept that assertion, then on the principal of smallest possible standard that can exist on its own, I think 5114 without a hard dependency on 165 is the correct path, and then create a separate standard for the combination. Taking it a step further, this hypothetical 6789 standard feels like a Good Idea, but not actually necessary as a Standard since anyone can simply choose to implement 5114 + 165 together because that is a Good Idea for maximizing interoperability, but it doesn\u2019t actually need to be formalized because 5114 and 165 both already exist. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.586055871212121
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "72",
                    "likes": "0",
                    "time": "09/09/2022-13:40:52",
                    "content": "I honestly find it unrealistic that EIP-165 is going to be replaced. A majority of existing EIP-20 and EIP-721 tokens implement it and have no pattern to upgrade, so what besides technical vision makes you speculate that EIP-165 may not be useful anymore in the future? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.4
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "73",
                    "likes": "1",
                    "time": "09/09/2022-14:03:01",
                    "content": "    TimDaub:  what besides technical vision makes you speculate that EIP-165 may not be useful anymore in the future?   A long life full of things that seemed like they would last forever not actually lasting forever.       TimDaub:  A majority of existing EIP-20 and EIP-721 tokens implement it and have no pattern to upgrade   This is fine.  If most tools require 5114&&165 that is a perfectly acceptable future to me. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.143939393939394
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "74",
                    "likes": "0",
                    "time": "05/02/2023-05:43:36",
                    "content": "As part of our process to encourage peer review, we assign a volunteer peer reviewer to read through your proposal and post any feedback here. Your peer reviewer is @rianhughes! Please note that this review is NOT required to move your EIP through the process. When you\u2014the authors\u2014feel ready, just open a pull request. If any of this EIP\u2019s authors would like to participate in the volunteer peer review process, shoot me a message!  @rianhughes please take a look through EIP-5114 and comment here with any feedback or questions. Thanks! ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-5114"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "75",
                    "likes": "1",
                    "time": "21/02/2023-02:26:32",
                    "content": "I think that an interface should never request to extend ERC165. Despite the philosophical reasons (on which I agree with you), in most cases, an interface XXX is ERC165 {} breaks the linearization of the smart contract that implements XXX. However, I find it helpful to explicitly express the interfaceId in case someone wants to check it using supportsInterface(bytes4). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.142857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "76",
                    "likes": "0",
                    "time": "21/02/2023-05:20:42",
                    "content": "Just a heads up, I put up a pull request to hopefully make the terminology more consistent (badge vs. token.)   the metadata returned by this is merged with the metadata return by badgeUri(uint256)   data from tokenUri takes precedence over data returned by this method   data from this takes precedence over data returned by collectionUri  These three taken together seem to imply that to retrieve the metadata for any badge, an interested application would have to call collectionUri then tokenUri and then perform some unspecified merge operation to calculate the final result. Is that correct? If so, it might be worth adding something about the merge algorithm being determined by the result of metadataFormat to the rationale. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.3
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "77",
                    "likes": "0",
                    "time": "21/02/2023-08:49:17",
                    "content": "My intent was that merging was part of the \u201cto be determined by future spec\u201d per the comment in the rationale:  The format of the data pointed to by collectionUri() and tokenUri(uint256) is intentionally left out of this standard in favor of separate standards that can be iterated on in the future. The immutability constraints are the only thing defined by this to ensure that the spirit of this token is maintained, regardless of the specifics of the data format. The metadataFormat function can be used to inform a caller what type/format/version of data they should expect at the URIs, so the caller can parse the data directly without first having to deduce its format via inspection.  Does this clear things up sufficiently for you?  Update eip-5114.md by MicahZoltu \u00b7 Pull Request #6535 \u00b7 ethereum/EIPs \u00b7 GitHub ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.28125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "78",
                    "likes": "1",
                    "time": "21/02/2023-08:52:16",
                    "content": "    sullof:  However, I find it helpful to explicitly express the interfaceId in case someone wants to check it using supportsInterface(bytes4).    This feels like metadata about the EIP, but not part of the standard itself.  In particular, I\u2019m imagining a future where there are competing standards with EIP-165 that have different formats and the EIP would only include the bytes4 for EIP-165 even if no one uses it anymore.  I wonder if there is some way we could generalize this for ERCs?  IIUC, the bytes4 can be calculated from the contract\u2019s interface.  Perhaps someone can just create a simple JS tool hosted on IPFS that lets you paste in a Solidity interface and will spit out it\u2019s bytes4? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.261904761904762
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "79",
                    "likes": "0",
                    "time": "21/02/2023-14:20:46",
                    "content": "That\u2019s exactly what I was hoping for. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "80",
                    "likes": "0",
                    "time": "21/02/2023-18:02:30",
                    "content": "One goal of an interface like this should be avoiding that exchanges start useless transactions trying to approve or transfer an asset. The easy way for an exchange is to verify the interfaceId. In that case they would probably just check the bytes4 instead of type(Interface).interfaceId. But I am fine with not indicating it. On the other end, surprisingly, considering your opinion about it, in the EIP doc it specifies that this ERC requires the implementation of ERC165, which is confusing. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.520833333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "81",
                    "likes": "0",
                    "time": "22/02/2023-07:48:32",
                    "content": "    sullof:  the EIP doc it specifies that this ERC requires the implementation of ERC165, which is confusing.   Hmm, where?  I don\u2019t see 165 anywhere on ERC-5114: Soulbound Badge The only hint at 165 is here:  Implementers of this standard SHOULD also depend on a standard for interface detection so callers can easily find out if a given contract implements this interface.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.133333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "82",
                    "likes": "1",
                    "time": "22/02/2023-23:41:53",
                    "content": "Sorry, I confused two documents. My fault. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 2.75
                }
            ]
        }
    ],
    "group_index": "1758"
}