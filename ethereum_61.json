{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/discussion-for-eip2535-diamonds/10459",
            "title": "Discussion for EIP2535 Diamonds ",
            "index": 10459,
            "category": [
                "EIPs"
            ],
            "tags": [
                "proxy-contract"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "1",
                    "likes": "0",
                    "time": "20/08/2022-13:51:45",
                    "content": "The original discussion of EIP2535 Diamonds is here: EIP-2535: Diamonds \u00b7 Issue #2535 \u00b7 ethereum/EIPs \u00b7 GitHub and it is still active. A discussion thread was created here because EIPs now require EIP discussions to occur on Fellowship of Ethereum Magicians and EIP pull requests no longer work without a discussion link that points here. Discuss EIP2535 Diamonds here or in the original thread. The standard is here: EIP-2535: Diamonds, Multi-Facet Proxy References and resources for diamonds are here:   GitHub    GitHub - mudgen/awesome-diamonds: A curated list of awesome EIP2535 Diamonds... A curated list of awesome EIP2535 Diamonds resources, libraries, tools, articles and more  - GitHub - mudgen/awesome-diamonds: A curated list of awesome EIP2535 Diamonds resources, libraries, tools...      The main diamond reference implementation is here:   GitHub    GitHub - mudgen/diamond-1-hardhat: EIP-2535 Diamond reference implementation... EIP-2535 Diamond reference implementation using Hardhat and Solidity 0.8.* - GitHub - mudgen/diamond-1-hardhat: EIP-2535 Diamond reference implementation using Hardhat and Solidity 0.8.*      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-2535",
                        "https://github.com/mudgen/awesome-diamonds",
                        "https://github.com/mudgen/awesome-diamonds",
                        "https://github.com/mudgen/diamond-1-hardhat",
                        "https://github.com/mudgen/diamond-1-hardhat"
                    ],
                    "GPT-summary": "The post provides links to the original discussion and resources for EIP2535 Diamonds, a proposal for Ethereum. It also explains that discussions for EIPs now need to occur on the Fellowship of Ethereum Magicians. The post invites readers to discuss the proposal and provides links to resources and the main diamond reference implementation.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Community and engagement",
                        "Not a proposal"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 7.379629629629631
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "2",
                    "likes": "0",
                    "time": "13/09/2022-21:30:10",
                    "content": "Why have three separate FacetCutActions? Seems like you could get by with just Replace:   Remove is equivalent to Replace with a facetAddress of zero.  Add is equivalent to Replace.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "3",
                    "likes": "0",
                    "time": "13/09/2022-21:41:04",
                    "content": "Are the loupe function required or optional? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "4",
                    "likes": "0",
                    "time": "13/09/2022-21:49:09",
                    "content": "Great question. The reason is to prevent mistakes and errors in upgrades. For example if someone means to add a new function and so they try to add it not realizing there is already a function with that selector/function signature in the diamond so they end up replacing a function they didn\u2019t intend to replace. Or someone means to replace a function and they send the wrong function selector for it and so the old function doesn\u2019t get removed and the new function gets added. By being explicit about adding/replacing/removing functions the diamondCut function can check that the intended action can be done and revert with a reason if it can\u2019t. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.6439393939393945
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "5",
                    "likes": "0",
                    "time": "13/09/2022-21:53:39",
                    "content": "Hm, I see. I think doing a check-and-set would be even safer: function diamondCut(bytes4[] functionSelectors, address[] oldValues, address[] newValues)  For example, Add would be: diamondCut([0x00abcdef], [address(0)], [0x0000...0000]);  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "6",
                    "likes": "1",
                    "time": "13/09/2022-21:54:39",
                    "content": "The loupe functions are required.  They are required for interoperability, tooling and reliability.  There are a couple articles written on the subject:  Why On-Chain Loupe Functions are Good - by Nick Mudge \ud83d\udc8e Diamond Loupe Functions - DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb  ",
                    "links": [
                        "https://dev.to/mudgen/why-loupe-functions-for-diamonds-1kc3"
                    ],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "7",
                    "likes": "0",
                    "time": "13/09/2022-21:58:43",
                    "content": "I don\u2019t fully understand exactly how the loupe functions are implemented. Are they an interface on the diamond itself, or implemented in a facet? If the loupe functions are provided by a facet:  Can they be removed by diamondCut? How do they get information from diamondCut? Reading the storage during a delegatecall?  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "8",
                    "likes": "0",
                    "time": "13/09/2022-22:01:52",
                    "content": "Sorry for the unorganized barrage of questions  Why does this restriction exist:  If the _init value is not address(0) then _calldata must contain more than 0 bytes or the transaction reverts.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "9",
                    "likes": "0",
                    "time": "13/09/2022-22:26:50",
                    "content": "I don\u2019t solidity much, but the loupe interface seems like it\u2019ll require a second separate mapping of function selectors by facet address? What if you went with something like: interface IDiamondLoupe {     // Returns the address of the facet implementing the given function selector.     function facetOf(bytes4 selector) external returns (address);      // Number of slots in the sparse functions array.     function functionsLength() external returns (uint256);      // Get the function selector and facet at the given index.     // An address of zero indicates an empty slot.     // Slots may be reused or left blank as functions change.     function functionByIndex(uint256 index) external returns (bytes4, address); }  I think that\u2019s fairly efficiently implementable with a mapping(bytes4 => address) (which you already need), and an array of function selectors. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.444444444444444
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "10",
                    "likes": "0",
                    "time": "13/09/2022-23:52:12",
                    "content": "The loupe functions could be implemented directly in a diamond proxy contract.  But I think it is better to implement the loupe functions in a facet and add the functions to a diamond. This is how the reference implementations do it. Implementing the loupe functions in a facet makes it so that the loupe functions are deployed to a blockchain only one time and can then be added to any diamond that is compatible with their implementation.  Can they be removed by diamondCut?  Yes, but only if a diamond has the diamondCut function. Immutable diamonds don\u2019t have a diamondCut function or any other upgrade function. The diamondCut function is optional in a diamond so that diamonds can be immutable or start off as upgradeable and later become immutable when the time is write.  There were some tweets about that today: https://twitter.com/mudgen/status/1569736257940652034  How do they get information from diamondCut? Reading the storage during a delegatecall?  Yes. diamondCut stores function selectors and facet addresses in a diamond proxy contract\u2019s contract storage. The loupe functions get that data and return it. ",
                    "links": [
                        "https://twitter.com/mudgen/status/1569736257940652034"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.395833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "11",
                    "likes": "0",
                    "time": "14/09/2022-00:04:26",
                    "content": " Sorry for the unorganized barrage of questions   That\u2019s okay, questions are good. Great to ask questions here. Questions can also be asked in the Diamond Discord. Also a lot of questions are answered in articles on this website: https://eip2535diamonds.substack.com/  Why does this restriction exist:  If the _init value is not address(0) then _calldata must contain more than 0 bytes or the transaction reverts.   It is slightly arbitrary but the _calldata value can serve two purposes, hold function call data, or custom data. If _init is address(0) then _calldata contains custom data (if any data at all) that is being sent to a diamondCut implementation. If _init is not address(0) then _calldata contains function call data. It does not make sense if _init is not address(0) but _calldata has no data,  because a function call can\u2019t be done on the address(0) address, so it reverts.  _init variable holds the address that the _calldata function call is executed on. ",
                    "links": [
                        "https://eip2535diamonds.substack.com/"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "12",
                    "likes": "0",
                    "time": "14/09/2022-00:21:58",
                    "content": "I like the interface you suggest. The current IDiamondLoupe is currently implemented with one mapping and one array of selectors. Some details of loupe function implementations are in this article: Diamond Loupe Functions - DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb  The reference implementations can also be looked at. One thing to note is that the technical details (the Specification section specifically) of EIP2535 is essentially final and not subject to change at this point and has been that way for awhile. It is because the standard has been fleshed out over a year and a half period  and it is established with how it is now, and there are a number of projects and tools in production with it, and a bunch of smart contract security audits. The reason it is not final in the EIP is because of formatting issues. ",
                    "links": [
                        "https://github.com/mudgen/awesome-diamonds#projects-using-diamonds",
                        "https://github.com/mudgen/awesome-diamonds#audits"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.072751322751323
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "13",
                    "likes": "0",
                    "time": "14/09/2022-02:17:49",
                    "content": "    mudgen:  The loupe functions could be implemented directly in a diamond proxy contract. But I think it is better to implement the loupe functions in a facet and add the functions to a diamond. This is how the reference implementations do it. Implementing the loupe functions in a facet makes it so that the loupe functions are deployed to a blockchain only one time and can then be added to any diamond that is compatible with their implementation.   That makes sense.     mudgen:   Can they be removed by diamondCut?  Yes   That sounds like the loupe functions are actually somewhat optional then? I guess if an owner removes the loupe functions, the diamond is no longer a diamond until the owner re-adds them?     mudgen:  That\u2019s okay, questions are good. Great to ask questions here. Questions can also be asked in the Diamond Discord.   I\u2019d rather keep the discussion here, if that\u2019s alright. This is where we do most EIP discussion.     mudgen:  It does not make sense if _init is not address(0) but _calldata has no data   I believe you can call a contract with no calldata, and it executes the fallback function? Seems odd to prohibit that without a good reason.     mudgen:  The current IDiamondLoupe is currently implemented with one mapping and one array of selectors.   Ah, okay. I guess iterating through the selector array isn\u2019t too bad, because there aren\u2019t that many functions.     mudgen:  One thing to note is that the technical details (the Specification section specifically) of EIP2535 is essentially final and not subject to change at this point and has been that way for awhile.   I\u2019m just here doing my best to give feedback before the last call deadline  EIPs should propose the best version of themselves, and not be beholden to existing implementations. That said, I do completely understand that EIP-2535 has been stable for some time and that most of my suggestions are terrible! ",
                    "links": [
                        "https://discord.gg/kQewPw2"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.170138888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "14",
                    "likes": "0",
                    "time": "14/09/2022-02:40:42",
                    "content": " An immutable function is a function that is defined directly in a diamond and so cannot be replaced or removed.   All immutable functions must be emitted in the DiamondCut event as new functions added.  Do these together mean what I think they mean? In a diamond\u2019s constructor, it must emit DiamondCut events for every function it implements directly? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.711363636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "15",
                    "likes": "0",
                    "time": "14/09/2022-02:59:21",
                    "content": " An immutable function is a function that is defined directly in a diamond and so cannot be replaced or removed.  All immutable functions must be emitted in the DiamondCut event as new functions added.   Do these together mean what I think they mean? In a diamond\u2019s constructor, it must emit DiamondCut events for every function it implements directly?   Yes, but one DiamondCut event can be emitted for all immutable functions in the diamond constructor. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.711363636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "16",
                    "likes": "0",
                    "time": "14/09/2022-03:11:50",
                    "content": " That sounds like the loupe functions are actually somewhat optional then? I guess if an owner removes the loupe functions, the diamond is no longer a diamond until the owner re-adds them?  Yes, it is technically no longer a diamond without the loupe functions.  I\u2019d rather keep the discussion here, if that\u2019s alright. This is where we do most EIP discussion.  Sounds good and makes sense.  I believe you can call a contract with no calldata, and it executes the fallback function? Seems odd to prohibit that without a good reason.  Yes, you have a good point. I think you are right and the rule that prohibits that should be removed. I think this can be removed without disruption. It is arbitrary and I don\u2019t think it would break anything to remove it. Thanks for pointing this out.  I\u2019m just here doing my best to give feedback before the last call deadline  EIPs should propose the best version of themselves, and not be beholden to existing implementations. That said, I do completely understand that EIP-2535 has been stable for some time and that most of my suggestions are terrible!  Make sense and I agree with you.  I don\u2019t think your suggestions are terrible. I like your suggestion for the loupe functions, but I don\u2019t think the loupe functions should change at this point. I much appreciate your review and feedback concerning the standard and related parts. It was this kind of attention and feedback that really helped develop the standard in the first place, as can be seen from past discussions of it.  And more attention and thought about things is beneficial. I am really happy and appreciate that you are digging into this standard and I want to help you understand it and related things as much as I can. And I understand that part of that can also be figuring out how things should and should not be for yourself. I am a big proponent of people looking, figuring out, understanding and discovering things for themselves rather than just accepting what someone else says. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.954685099846389
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "17",
                    "likes": "0",
                    "time": "20/10/2022-02:29:43",
                    "content": "EIP-2535 Diamonds reached \u201cFinal\u201d status today: EIP-2535: Diamonds, Multi-Facet Proxy ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/a2m",
                    "index": "18",
                    "likes": "0",
                    "time": "31/10/2022-20:05:16",
                    "content": "Hi Nick, I\u2019m new to diamonds, is there a simple guideline with examples on how to use diamonds? from my understanding so far is I deploy the diamond contract (as found on your github), deploy other contracts that will be part of the diamond (facets), create facecuts for these contracts, then call the diamondcut with these facecuts\u2026 correct? my other question is what\u2019s the difference between diamond and solidstatediamond? Thanks Nick ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.15530303030303
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "19",
                    "likes": "0",
                    "time": "06/12/2022-14:09:02",
                    "content": "Hi @a2m, There are a number of guides and tutorials on diamonds. Here is one:   The Diamond Standard (EIP-2535) Explained: Part 1 The Diamond Standard (EIP-2535) Explained: Part 2   More resources can be found from Awesome Diamonds. ",
                    "links": [
                        "https://www.quicknode.com/guides/smart-contract-development/the-diamond-standard-eip-2535-explained-part-2",
                        "https://github.com/mudgen/awesome-diamonds"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.875
                }
            ]
        }
    ],
    "group_index": "61"
}