{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5615-eip-1155-supply-extension/10732",
            "title": "EIP-5615: EIP-1155 Supply Extension ",
            "index": 10732,
            "category": [
                "EIPs"
            ],
            "tags": [
                "nft"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "1",
                    "likes": "0",
                    "time": "07/09/2022-16:08:00",
                    "content": "  github.com/ethereum/EIPs         Add EIP-5615: EIP-1155 Supply Extension   ethereum:master \u2190 ethereum:Pandapip1-patch-2            opened 04:02PM - 07 Sep 22 UTC               Pandapip1             +50 -0       Apparently this isn't actually standardized yet?!?       Since, apparently, this isn\u2019t an EIP yet?! ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/5615",
                        "https://github.com/Pandapip1",
                        "https://github.com/ethereum/EIPs/pull/5615/files"
                    ],
                    "GPT-summary": "The post is an explanation of a proposal for an EIP-1155 Supply Extension. The author is requesting feedback on the proposal, as it has not yet been standardized. A third party is giving constructive criticism on the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.1875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "2",
                    "likes": "0",
                    "time": "24/10/2022-18:24:37",
                    "content": "Would you mind adding a bit to the Rationale section about why exists needs to *ahem* exist at all? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "3",
                    "likes": "0",
                    "time": "24/10/2022-20:53:41",
                    "content": "Sure. The answer is simple: backward compatibility. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/CHANCE",
                    "index": "4",
                    "likes": "1",
                    "time": "01/11/2022-02:05:27",
                    "content": "Does this support \u201cbackward compatibility,\u201d though? I presume this to mean consistency in existing ecosystem standards? For example, Etherscan total supply would still be broken provided this implementation: Please (PLEAS) Token Tracker | PolygonScan and an individual token page does not even show supply (because it has not been standardized, obviously) Please (PLEAS) Token Tracker | PolygonScan. Is the definition of this EIP accepting that the \u201cenabled\u201d functionality will have little result on the state of 1155s and that existing support for \u201cSupply\u201d extensions will still be non-functional at the collection level? ",
                    "links": [
                        "https://polygonscan.com/token/0xd047e4b2c6f7d5072bbea49ee560525ca7e05efc?a=1"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "5",
                    "likes": "0",
                    "time": "06/11/2022-14:53:55",
                    "content": "The backwards compatibility section should reference ERC-20 and ERC-721. Clearly this function is modeled off the expectations set by those two specifications and ecosystem. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "6",
                    "likes": "0",
                    "time": "06/11/2022-19:07:07",
                    "content": " The backwards compatibility section should reference ERC-20 and ERC-721.  This is not backward compatible with EIP-20 or EIP-721. It is implicitly compatible with EIP-1155, as it is an extension.  Clearly this function is modeled off the expectations set by those two specifications and ecosystem.  This is true, and I will add a variation of this in the rationale. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "7",
                    "likes": "0",
                    "time": "06/11/2022-19:08:54",
                    "content": "    CHANCE:  Does this support \u201cbackward compatibility,\u201d though?   It\u2019s backward compatible with the most commonly used/widely supported supply extension; the OpenZeppelin one. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "8",
                    "likes": "0",
                    "time": "06/11/2022-20:11:59",
                    "content": "Relevant links:   github.com/OpenZeppelin/openzeppelin-contracts     \t      ERC1155Supply, an extension that keep track of totalSupply for ERC1155 tokens            opened 12:01PM - 24 Feb 21 UTC             closed 11:37PM - 13 Jul 21 UTC               Amxx                        contracts                     idea              **\ud83e\uddd0 Motivation** ERC1155 supports a middle-ground between ERC20 (fungible) and \u2026ERC721 (unfungible) in which token are fungible within the same tokenId. Depending on the sum of all balances for a tokenId, the corresponding token can be seen as fungible or nonfungible. However, there is no on-onchain mechnism to keep track of this.  **\ud83d\udcdd Details** A `totalSupply(uint256 tokenId)`, similar to ERC20's `totalSupply`, but with a \"per tokenid\" result be provided. This would be usefull to distinguish between fongible and nonfongible assets. It also adds a `exists(uint256 tokenId)` function that returns weither the totalSupply is not null. This would be equivalent to checking weither the corresponding token exists.         github.com/OpenZeppelin/openzeppelin-contracts         Introduce an ERC-1155 _exists() function   OpenZeppelin:master \u2190 KaiRo-at:erc1155-exists              opened 01:16PM - 14 Apr 20 UTC                 KaiRo-at               +36 -0       This PR is based on a discussion started at https://github.com/OpenZeppelin/open\u2026zeppelin-contracts/issues/2003#issuecomment-612109928 and should give the ERC-1155 implementation more compatibility to OpenZeppelin's ERC-721 implementation and also better compatibility to services like OpenSea as pointed to by https://twitter.com/xanderatallah/status/1232124941425881089  The main thing introduced here is an `_exists()` function that is checked in a few places where we'd otherwise return a null-ish default value (`0` or `''`), and to know if a token ID is valid, it has to be registered internally first - either via minting a first token on that ID, or by calling an explicit function.  Tests will fail on this PR for the moment as it bases on both #2130 and #2029 - also, I have not written any tests for this PR itself yet as it's mostly a suggestion on how we could do this in a good way.       ",
                    "links": [
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536",
                        "https://github.com/Amxx",
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2185",
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2185",
                        "https://github.com/KaiRo-at",
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2185/files",
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2185"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.948717948717949
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "9",
                    "likes": "0",
                    "time": "06/11/2022-20:20:04",
                    "content": "Copying this from another thread: OpenSea supports both of these functions. This is undocumented but is clear from their example repository. It\u2019s also noted in the first thread I just linked to. I don\u2019t know whether to mention this or not. I\u2019m leaning slightly towards no (it\u2019s undocumented!) but my mind can be easily changed on this. OpenZeppelin, of course, has an implementation of this, as noted in the EIP itself. I don\u2019t see an easy way to track support for this for deployed contracts. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.008333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/SamWilsn",
                    "index": "10",
                    "likes": "0",
                    "time": "25/11/2022-21:30:48",
                    "content": "We\u2019re trying a new process where we get a volunteer peer reviewer to read through your proposal and post any feedback here. Your peer reviewer is @dadybayo!  @dadybayo please take a look through EIP-5615 and comment here with any feedback or questions. Thanks! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.051136363636363
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/estarriolvetch",
                    "index": "11",
                    "likes": "0",
                    "time": "05/12/2022-21:13:52",
                    "content": "One challenge I can think of with this EIP is: In order to have exists() work in some implementations, it may require adding additional counters in the implementation, leading to a higher gas usage. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "12",
                    "likes": "0",
                    "time": "05/12/2022-22:09:27",
                    "content": "I guess this could be fixed by making that function optional. It doesn\u2019t seem fully necessary (even if it\u2019s very useful). ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.816666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jseam",
                    "index": "13",
                    "likes": "0",
                    "time": "15/12/2022-06:04:26",
                    "content": "In this EIP spec, it states that in totalSupply() that This MUST revert if exists(id) returns false. It might be not ideal to revert, as it is possible that a function would want to check if totalSupply(some id) = 0. Instead of requiring a revert in totalSupply() if exists() equals false, it should just return 0 and let the respective functions that rely on totalSupply() handle the logic instead. This is the behavior in the existing OpenZeppelin contract. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 3.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "14",
                    "likes": "0",
                    "time": "20/12/2022-14:20:54",
                    "content": "    jseam:  It might be not ideal to revert, as it is possible that a function would want to check if totalSupply(some id) = 0. Instead of requiring a revert in totalSupply() if exists() equals false, it should just return 0 and let the respective functions that rely on totalSupply() handle the logic instead. This is the behavior in the existing OpenZeppelin contract.   This seems reasonable for backward compatibility. I\u2019ll make that change. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.35
                }
            ]
        }
    ],
    "group_index": "100"
}