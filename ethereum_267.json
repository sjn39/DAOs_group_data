{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-6120-universal-token-router/12142",
            "title": "EIP-6120: Universal Token Router ",
            "index": 12142,
            "category": [],
            "tags": [
                "erc-721",
                "erc-20",
                "erc1155"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/zergity",
                    "index": "1",
                    "likes": "1",
                    "time": "14/12/2022-02:54:49",
                    "content": "ETH is designed with transfer-and-call as the default behavior in a transaction. Unfortunately, ERC-20 is not designed with that pattern in mind and newer standards cannot apply to the token contracts that have already been deployed. Application and router contracts have to use the approve-then-call pattern which costs additional n*m*l approve (or permit) transactions, for n contracts, m tokens, and l user addresses. These allowance transactions not only cost a lot of user gas, worsen user experience, waste network storage and throughput, but they also put users at serious security risks as they often have to approve unaudited, unverified and upgradable proxy contracts. The Universal Token Router (UTR) separates the token allowance from the application logic, allowing any token to be spent in a contract call the same way with ETH, without approving any other application contracts. Tokens approved to the Universal Token Router can only be spent in transactions directly signed by their owner, and they have clearly visible token transfer behavior, including token types (ETH, ERC-20, ERC-721 or ERC-1155), amountInMax, amountOutMin, and recipient. The Universal Token Router contract is counter-factually deployed using EIP-1014 at 0x6120245B546F2F0ce439186cAae8181007366120 across all EVM-compatible networks, so new token contracts can pre-configure it as a trusted spender and no approval transaction is necessary.   Ethereum Improvement Proposals   ERC-6120: Universal Token Router A single router contract enables tokens to be sent to application contracts in the transfer-and-call manner instead of approve-then-call.      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-6120"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.696278258778259
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/zergity",
                    "index": "2",
                    "likes": "0",
                    "time": "03/02/2023-07:25:17",
                    "content": "New update has been merged with the following changes:  Using mode for input tokens and flags for action for better visibility add IN_TX_PAYMENT input token mode for payment-in-callback style contracts (e.g. Uniswap/v3) add ALLOWANCE_BRIDGE as a compatibility input token mode for contracts that directly called transferFrom for pull payment add more Sample Usages for Uniswap/v3 swap and liquidity functionalities.  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.113636363636363
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/chompomonim",
                    "index": "3",
                    "likes": "1",
                    "time": "09/02/2023-08:13:47",
                    "content": "How this relates to uniswap\u2019s permit2 and universal router?    Uniswap Protocol \u2013 17 Nov 22    Introducing Permit2 & Universal Router Uniswap Labs releases Permit2 to improve ERC20 token approvals across all applications and Universal Router to unify ERC20 and NFT swaps into a single router.      ",
                    "links": [
                        "https://uniswap.org/blog/permit2-and-universal-router"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.910714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/zergity",
                    "index": "4",
                    "likes": "1",
                    "time": "14/02/2023-03:14:05",
                    "content": "chompomonim In short, not related at all, I simply use Uniswap for examples, but it\u2019s designed for every kind of application contract. Uniswap\u2019s Universal Router is only \u201cuniversal\u201d for Uniswap, not for other applications. Other applications cannot use it for their logic. Permit2 has two modes, the closest thing to EIP-6120 is the SignatureTransfer mode, but the UX is different, and SignatureTransfer cannot prevent phishing attacks like EIP-6120. Permit2 requires application contracts to be redesigned entirely, no backward compatibility. EIP-6120 is designed for both new and existing contracts to use. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.202651515151516
                }
            ]
        }
    ],
    "group_index": "267"
}