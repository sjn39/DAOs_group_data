{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/compound-d3m-compound-protocol-cdai-erc20-token-ces-domain-team-assessment/14993",
            "title": "[Compound D3M] Compound Protocol & cDAI ERC20 Token CES Domain Team Assessment ",
            "index": 14993,
            "category": [
                "Collateral Onboarding",
                "Domain Work"
            ],
            "tags": [
                "compound",
                "sc-domain-work",
                "cdai",
                "ces-001"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/dbkcan",
                    "index": "#1",
                    "likes": "14",
                    "time": "05/05/2022-21:18:07",
                    "content": "Author(s): David Krett (@dbkcan) Contributors: Nazar Duchak (@naz_dou) Reference: MIP6 Collateral Onboarding Application https://forum.makerdao.com/t/cdai-mip6-collateral-onboarding-application/3764   Risk Summary/Key Takeaways  NB: A combined assessment of cDAI and the Compound Protocol has been completed - as most of the core logic of the Compound Protocol is included in the cDAI token smart contract.  The overall risk of onboarding cDAI collateral is assessed as MEDIUM based on the following:  Pros:  cDAI adheres to ERC20 Standards Compound Protocol has an excellent track record operating since 2018 without major issues with their cDai token contract Smart contract risks are minimized through:  rigid approach to testing including extensive auditing of major code changes; formal verification testing of key contract functions; market risk verification of the protocol through external simulation testing by Gauntlet.     Cons:  Token logic is fairly complex due to extension of the contract with custom functionality specific to the Compound Protocol There are edge case Governance risks due to the upgradeability of token contracts and interest rate models through governance voting   Specific Recommendations: To mitigate potential governance risk due to the upgradeability of the underlying cDai and associated InterestRate Model contracts we recommend the implementation of real time monitoring for Compound governance votes (that include proposals to update the cDai delegate and interest rate model contract). This would potentially allow us to assess prior to a proposed Compound contract upgrade whether there could be potential adverse effects on MakerDao and take necessary actions (before an approved but potentially adverse upgrade occurs). For detailed information on this assessment refer to the detailed assesment below.   General Information   Symbol: cDAI   Addresses:   cDAI Token Contract CToken.sol:  0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643   cDai Delegate:  0xa035b9e130F2B1AedC733eEFb1C67Ba4c503491F If a governance vote currently in progress passes the above delegate contract will be replaced by an upgraded contract - which is deployed here and discussed further below: 0x3363BAe2Fc44dA742Df13CD3ee94b6bB868ea376   cDai InterestRateModelContract (JumpRateModelV2/sol):   0xFB564da37B41b2F6B6EDcc3e56FbF523bD9F2012     Deployment Date:  cDAI Token Contract: Nov-23-2019 01:03:33 AM +UTC cDAI Delegate Contract: Jun-17-2021 08:36:03 PM +UTC cDai InterestRateModelContract (JumpRateModelV2/sol): Aug-07-2020 12:46:14 AM +UTC    Max total supply: 73,980,483,156.15893945 (Decimal Places  8)   Developers allotment: None   Collateral Onboarding Application:  [cDAI] MIP6 Collateral Onboarding Application   Project website: https://compound.finance/   Github repository: https://github.com/compound-finance/compound-protocol   Can use an existing MCD collateral type adapter? The GemJoin 8 adapter is compatible with this token contract    Technical Information   Compiler Version: Solidity: 0.5.12  Decimals: 8  Overflow checks: Overflows on most of the contracts are checked using a custom library CarefulMath.sol which is derived from OpenZeppelin\u2019s SafeMath library. The InterestRateModel contract currently being utilized uses OpenZeppelins SafeMath Library.  Mitigation against allowance race-condition: No  Upgradeable contract patterns:  The token contract is upgradeable using a delegator pattern, and in fact the current storage contract was updated in June 2021.  Access control:   is implemented through an inherited Comptroller smart contract which checks for any mint, redemption, borrowing or transfer of tokens whether the action is allowed based on the governance lending parameters (liquidity ratios etc) established for that market or whether a system pause is in effect via the Pause Guardian (see Governance section below).   Formal Verification Considerations: https://compound.finance/docs/security#security   Does transfer have simple semantics? Yes, Lots of wrapped calls to accommodate Compound requirements - however straightforward logic/semantics for ERC20 functions  Does transferFrom have simple semantics? Yes, Lots of wrapped calls to accommodate Compound requirements - however straightforward logic/semantics for ERC20 functions   Can balances be arbitrarily modified by some actor? No -  also verified by CI/CD Certora testing    Are there any external calls? Yes, the cToken contract contains custom logic for repaying borrowings and calculating interest - as a result there are numerous external calls made to other Compound related contracts to ensure correct balances are calculated etc. and that prior to any redemption or transfers interest accruals have been calculated properly. A Certora report on formal verification of the compound protocol is available here https://compound.finance/documents/Certora.pdf    Economic Security Compound has retained Gauntlet to complete simulation based market stress testing of the protocol. This analysis of market risk concludes that the Compound Protocol can scale to a larger size and handle high volatility scenarios for a variety of collateral types. The report for this stress testing is available here:  https://gauntlet.network/reports/compound.  Testnet Information  Compound is available on all of the Ethereum Testnets with information available here https://compound.finance/docs#networks  Contract addresses for all the currently deployed Comp implementations is available here https://github.com/compound-finance/compound-config/actions    Contract Logic/Protocol Summary  cToken Smart Contract (cDai) The cToken contract extends the standard ERC20 implementations with several functions that are specific to the Compound protocol specifically ensuring the repayment of any borrowings and accrued interest costs and ensuring that new borrowings can only occur if the users account has sufficient liquidity or Dai collateral value. Whilst borrowings are outstanding against an underlying asset (ie. Dai) - any cTokens (ie. cDai) under the contract cannot be redeemed or transferred unless the borrowings are repaid first. Actual state changes are executed utilizing a delegate pattern - with the cToken contract proxying its function calls to the delegator contract. This allows for the contract to be easily upgraded by pointing the user interface contract to upgraded implementations. In the case of cDAI the delegator contract CErc20Delegate.sol currently uses an interest rate model contract JumpRateModelV2.sol. This interest rate model has been modelled to ensure that the borrowing rate will always be greater than the rate of borrowing directly at Maker, when Compounds\u2019 DAI utilization rate is above a Compound preset limit (kink). However, depending on market conditions the kink factor can be adjusted via a governance vote to change the Dai Interest Rate model parameters. As the underlying contracts are upgradeable both the delegator contract and interest rate model contracts can be changed and modified after a governance vote. Readers should note that as of the date of this assessment there is a governance poll (which has a high probability of passing) to upgrade the delegate contract for cDai. Primary changes from the existing contract includes:  Upgrading the solidity version from 0.5.16 to 0.8.10; Removal of Safemath/Carefulmath libraries with reliance on the new solidity version to provide overflow and underflow protection; Removal of Compound custom errors module in favor of reverts and custom errors.  The new delegate contract has been audited by Chainsecurity and is available here https://chainsecurity.com/security-audit/compound-ctoken/. Whilst the initial audit did highlight a critical issue this and several other high severity issues have been addressed - with other identified issues acknowledged by compound. Whilst the underlying contract logic for ERC20 functions is standard, the actual token contracts have been extended to contain the logic for tracking borrowings and the accrual of interest for the deposit of the underlying asset making the token contracts significantly more complex than standard ERC20 contracts.  Upgradeability Utilizing the delegator pattern - the core logic of the token contract as well as other Compound protocol contracts are upgradeable.  Interest Rate Model Interest accrues to all suppliers and borrowers in a market when any Ethereum address interacts with the market\u2019s cToken contract, calling one of these functions: mint, redeem, borrow, or repay. Successful execution of one of these functions triggers the accrueInterest method, which causes interest to be added to the underlying balance of every supplier and borrower in the market. Interest accrues for the current block, as well as each prior block in which the accrueInterest method was not triggered (no user interacted with the cToken contract). Interest compounds only during blocks in which the cToken contract has one of the aforementioned methods invoked.  Comptroller The Comptroller is the risk management layer of the Compound protocol; it determines how much collateral a user is required to maintain, and whether (and by how much) a user can be liquidated. Each time a user interacts with a cToken, the Comptroller is asked to approve or deny the transaction. The Comptroller maps user balances to prices (via the Price Oracle) to risk weights (called Collateral Factors) to make its determinations.  Governance The Compound protocol is governed and upgraded by COMP token-holders, using three distinct components; the COMP token, governance module (Governor Bravo), and Timelock. Together, these contracts allow the community to propose, vote and implement changes through the administrative functions of a cToken or the Comptroller. Proposals can modify system parameters, support new markets, or add entirely new functionality to the protocol. When a governance proposal is created, it enters a 2 day review period, after which voting weights are recorded and voting begins. Voting lasts for 3 days; if a majority, and at least 400,000 votes are cast for the proposal, it is queued in the Timelock, and can be implemented 2 days later. In total, any change to the protocol takes at least one week. This means that Compound has the same timelock interval as Maker. In addition to the Timelock the Compound Comptroller contract designates a Pause Guardian address which is capable of disabling some of the protocols functionality. In the event of an unforseen vulnerability the Pause Guardian has the ability to disable Mint, Borrow, Transfer and Liquidate functionality within the protocol. However, the Pause Guardian is unable to unpause a governance action or prevent users from call Redeem or Repay Borrow to close positions and exit the protocol. The Comp token-holders designate, the Pause Guardian address, which is held by the Community Multi-Sig. In terms of mitigation of Governance Attack risk, the Compound protocol has the following protections in place:  The governance Timelock mechanism; A governance Pause Guardian; Ongoing security monitoring of the protocol by Openzepplin (appointed by a governance vote).   Administrative Addresses Compound maintains a list of currently deployed contracts and their addresses in a github repository which can be accessed here https://github.com/compound-finance/compound-config/actions . Given the upgradeability of contracts aside from monitoring contract changes on Etherscan, from an ongoing risk management perspective, it would be important to track Compound Governance changes and/or require under the provision of the D3M that Compound be required to notify us of any contract upgrades that would modify the cToken and relevant delegate contracts (ie InterestRate model contracts that might have an impact on cDai).  Smart Contract Audits Compound has completed several audits of their protocol - which are available here https://compound.finance/docs/security#audits It should be noted that during most of 2020 Compound was utilizing a custom delegator contract for cDAI as well as a custom interest rate model contract that actually integrated with Makers vat and pot contracts - audit available here https://blog.openzeppelin.com/compound-finance-mcd-dsr-integration/ however these contracts were replaced in December 2021 (after a governance vote - https://www.comp.xyz/t/migrate-cdai-implementation-from-cdaidelegate-to-cerc20delegate/807/7) with the standard CErc20Delegate contract as the custom contract was incurring excessive gas costs due to direct integration with Maker (calling the pot.drip() function. The most relevant audits in relation to the cToken contracts are audits completed by:  Trail of Bits (August 2019) - https://github.com/trailofbits/publications/blob/master/reviews/compound-3.pdf  Openzeppelin (August 2019) - https://blog.openzeppelin.com/compound-audit/  Chainsecurity (March 2022) - https://chainsecurity.com/security-audit/compound-ctoken/   Governance audits  https://blog.openzeppelin.com/compound-comp-distribution-system-audit/ https://blog.openzeppelin.com/compound-finance-patch-audit/ https://blog.openzeppelin.com/compound-comp-distribution-system-audit/  Whilst these audits did identify several issues High and Medium severity related to the contracts none of these are considered critical.  Risk Assessment   The Compound protocol - has operated since September 2018, without any major incidents relating to the cToken contract. However, in November 2020, the protocol did face an incident related to their Coinbase Pro Oracle, where this oracle reported a DAI/USD price of 1.30 (when other oracles were indicating a DAI Price of 1.03) which combined with a ETH price decline of 8% led to the liquidation of $82.5 million Dai. To address this issue Compound modified their Oracle system to use Chainlink oracles in June 2021 and since then have not faced any major issues related to the Oracles.   Since inception Compound has proactively addressed identified protocol deficiencies including moving away from being a centralized protocol to gradually decentralizing with governance determined currently by the COMP token holders (Community Governance went live in April 2020).   The cToken contract that controls the issuance and redemption of cDai against DAI assets implements standard ER20 functionality in accordance with EIP20. However due to the upgradeability of contracts and the fact that the standard ERC20 functionality has been significantly extended to include functionality related to repayment and initiation of borrowings, accrual of interest, and redemptions of tokens there is some perceived increased risk of modifications to the protocol or the underlying contracts creating unintended side effects. This increased risk has been offset to a large extent through the following factors:  Ongoing audits completed by Trail of Bits and Open Zeppelin; Formal Verification testing of the smart contracts utilizing Certora, including incorporation of Certora in their CI/CD Pipeline Market Risk Stress testing completed by Gauntlet    Governance - Interest rate calculation depends on some values which are controlled by governance and can be changed after a governance vote. The variables that can be adjusted by a governance vote are detailed below: /** * @notice The multiplier of utilization rate that gives the slope of the interest rate */ uint public multiplierPerBlock;  /**  * @notice The base interest rate which is the y-intercept when utilization rate is 0  */ uint public baseRatePerBlock;  /**  * @notice The multiplierPerBlock after hitting a specified utilization point  */ uint public jumpMultiplierPerBlock;  /**  * @notice The utilization point at which the jump multiplier is applied  */ uint public kink;     Given the above factors combined with the historical performance of the protocol since 2018 we believe that from a technology perspective the assessed risk for Compound is MEDIUM. This assessment is based on the following factors: Pros:  Track record of no issues for Dai/cDai since launch Numerous audits, formal verification of the contracts  Cons:  Token logic is fairly complex due to extension of the contract with custom functionality      Supporting Materials - Surya Report  Detailed cDAI Token Contract Description Table Files Description Table     File Name SHA-1 Hash     /Users/dbk/Development/compound-protocol/contracts/CToken.sol b4b1ed59ad8bb1982c464a2bd3f888f1071fce45   /Users/dbk/Development/compound-protocol/contracts/ComptrollerInterface.sol f28b2568be489bf1e7eabfa4a2248e0f156d3a43   /Users/dbk/Development/compound-protocol/contracts/CTokenInterfaces.sol 207a0bb21fed5fac1f3b03c77ef497fb7bce4c1a   /Users/dbk/Development/compound-protocol/contracts/InterestRateModel.sol b5755fc7f09c70a0047d54a3ddb2dad36f7f7e7d   /Users/dbk/Development/compound-protocol/contracts/EIP20NonStandardInterface.sol 8ed791235ad9c37d79a3211abad9c1bfb56afdb7   /Users/dbk/Development/compound-protocol/contracts/ErrorReporter.sol 05aa661f823c8a116e242ba907a581cc672481df   /Users/dbk/Development/compound-protocol/contracts/Exponential.sol 3dc4aa5312d273cbf408d6536e2761e7461e8591   /Users/dbk/Development/compound-protocol/contracts/CarefulMath.sol cc4993a96380da9cd6391fc7b00702bba0eb065d   /Users/dbk/Development/compound-protocol/contracts/ExponentialNoError.sol 72b12974348bbf7055925d8d2816f8a5f3a9520b   /Users/dbk/Development/compound-protocol/contracts/EIP20Interface.sol 1557865715c88a7cb11f921a3a2dbc7b5c9dba71        Contract Type Bases       \u2514 Function Name Visibility Mutability Modifiers          CToken Implementation CTokenInterface, Exponential, TokenErrorReporter     \u2514 initialize Public    NO\u2757\ufe0f   \u2514 transferTokens Internal       \u2514 transfer External    nonReentrant   \u2514 transferFrom External    nonReentrant   \u2514 approve External    NO\u2757\ufe0f   \u2514 allowance External    NO\u2757\ufe0f   \u2514 balanceOf External    NO\u2757\ufe0f   \u2514 balanceOfUnderlying External    NO\u2757\ufe0f   \u2514 getAccountSnapshot External    NO\u2757\ufe0f   \u2514 getBlockNumber Internal       \u2514 borrowRatePerBlock External    NO\u2757\ufe0f   \u2514 supplyRatePerBlock External    NO\u2757\ufe0f   \u2514 totalBorrowsCurrent External    nonReentrant   \u2514 borrowBalanceCurrent External    nonReentrant   \u2514 borrowBalanceStored Public    NO\u2757\ufe0f   \u2514 borrowBalanceStoredInternal Internal       \u2514 exchangeRateCurrent Public    nonReentrant   \u2514 exchangeRateStored Public    NO\u2757\ufe0f   \u2514 exchangeRateStoredInternal Internal       \u2514 getCash External    NO\u2757\ufe0f   \u2514 accrueInterest Public    NO\u2757\ufe0f   \u2514 mintInternal Internal    nonReentrant   \u2514 mintFresh Internal       \u2514 redeemInternal Internal    nonReentrant   \u2514 redeemUnderlyingInternal Internal    nonReentrant   \u2514 redeemFresh Internal       \u2514 borrowInternal Internal    nonReentrant   \u2514 borrowFresh Internal       \u2514 repayBorrowInternal Internal    nonReentrant   \u2514 repayBorrowBehalfInternal Internal    nonReentrant   \u2514 repayBorrowFresh Internal       \u2514 liquidateBorrowInternal Internal    nonReentrant   \u2514 liquidateBorrowFresh Internal       \u2514 seize External    nonReentrant   \u2514 seizeInternal Internal       \u2514 _setPendingAdmin External    NO\u2757\ufe0f   \u2514 _acceptAdmin External    NO\u2757\ufe0f   \u2514 _setComptroller Public    NO\u2757\ufe0f   \u2514 _setReserveFactor External    nonReentrant   \u2514 _setReserveFactorFresh Internal       \u2514 _addReservesInternal Internal    nonReentrant   \u2514 _addReservesFresh Internal       \u2514 _reduceReserves External    nonReentrant   \u2514 _reduceReservesFresh Internal       \u2514 _setInterestRateModel Public    NO\u2757\ufe0f   \u2514 _setInterestRateModelFresh Internal       \u2514 getCashPrior Internal       \u2514 doTransferIn Internal       \u2514 doTransferOut Internal              ComptrollerInterface Implementation      \u2514 enterMarkets External    NO\u2757\ufe0f   \u2514 exitMarket External    NO\u2757\ufe0f   \u2514 mintAllowed External    NO\u2757\ufe0f   \u2514 mintVerify External    NO\u2757\ufe0f   \u2514 redeemAllowed External    NO\u2757\ufe0f   \u2514 redeemVerify External    NO\u2757\ufe0f   \u2514 borrowAllowed External    NO\u2757\ufe0f   \u2514 borrowVerify External    NO\u2757\ufe0f   \u2514 repayBorrowAllowed External    NO\u2757\ufe0f   \u2514 repayBorrowVerify External    NO\u2757\ufe0f   \u2514 liquidateBorrowAllowed External    NO\u2757\ufe0f   \u2514 liquidateBorrowVerify External    NO\u2757\ufe0f   \u2514 seizeAllowed External    NO\u2757\ufe0f   \u2514 seizeVerify External    NO\u2757\ufe0f   \u2514 transferAllowed External    NO\u2757\ufe0f   \u2514 transferVerify External    NO\u2757\ufe0f   \u2514 liquidateCalculateSeizeTokens External    NO\u2757\ufe0f          CTokenStorage Implementation             CTokenInterface Implementation CTokenStorage     \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom External    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f   \u2514 allowance External    NO\u2757\ufe0f   \u2514 balanceOf External    NO\u2757\ufe0f   \u2514 balanceOfUnderlying External    NO\u2757\ufe0f   \u2514 getAccountSnapshot External    NO\u2757\ufe0f   \u2514 borrowRatePerBlock External    NO\u2757\ufe0f   \u2514 supplyRatePerBlock External    NO\u2757\ufe0f   \u2514 totalBorrowsCurrent External    NO\u2757\ufe0f   \u2514 borrowBalanceCurrent External    NO\u2757\ufe0f   \u2514 borrowBalanceStored Public    NO\u2757\ufe0f   \u2514 exchangeRateCurrent Public    NO\u2757\ufe0f   \u2514 exchangeRateStored Public    NO\u2757\ufe0f   \u2514 getCash External    NO\u2757\ufe0f   \u2514 accrueInterest Public    NO\u2757\ufe0f   \u2514 seize External    NO\u2757\ufe0f   \u2514 _setPendingAdmin External    NO\u2757\ufe0f   \u2514 _acceptAdmin External    NO\u2757\ufe0f   \u2514 _setComptroller Public    NO\u2757\ufe0f   \u2514 _setReserveFactor External    NO\u2757\ufe0f   \u2514 _reduceReserves External    NO\u2757\ufe0f   \u2514 _setInterestRateModel Public    NO\u2757\ufe0f          CErc20Storage Implementation             CErc20Interface Implementation CErc20Storage     \u2514 mint External    NO\u2757\ufe0f   \u2514 redeem External    NO\u2757\ufe0f   \u2514 redeemUnderlying External    NO\u2757\ufe0f   \u2514 borrow External    NO\u2757\ufe0f   \u2514 repayBorrow External    NO\u2757\ufe0f   \u2514 repayBorrowBehalf External    NO\u2757\ufe0f   \u2514 liquidateBorrow External    NO\u2757\ufe0f   \u2514 sweepToken External    NO\u2757\ufe0f   \u2514 _addReserves External    NO\u2757\ufe0f          CDelegationStorage Implementation             CDelegatorInterface Implementation CDelegationStorage     \u2514 _setImplementation Public    NO\u2757\ufe0f          CDelegateInterface Implementation CDelegationStorage     \u2514 _becomeImplementation Public    NO\u2757\ufe0f   \u2514 _resignImplementation Public    NO\u2757\ufe0f          InterestRateModel Implementation      \u2514 getBorrowRate External    NO\u2757\ufe0f   \u2514 getSupplyRate External    NO\u2757\ufe0f          EIP20NonStandardInterface Interface      \u2514 totalSupply External    NO\u2757\ufe0f   \u2514 balanceOf External    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom External    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f   \u2514 allowance External    NO\u2757\ufe0f          ComptrollerErrorReporter Implementation      \u2514 fail Internal       \u2514 failOpaque Internal              TokenErrorReporter Implementation      \u2514 fail Internal       \u2514 failOpaque Internal              Exponential Implementation CarefulMath, ExponentialNoError     \u2514 getExp Internal       \u2514 addExp Internal       \u2514 subExp Internal       \u2514 mulScalar Internal       \u2514 mulScalarTruncate Internal       \u2514 mulScalarTruncateAddUInt Internal       \u2514 divScalar Internal       \u2514 divScalarByExp Internal       \u2514 divScalarByExpTruncate Internal       \u2514 mulExp Internal       \u2514 mulExp Internal       \u2514 mulExp3 Internal       \u2514 divExp Internal              CarefulMath Implementation      \u2514 mulUInt Internal       \u2514 divUInt Internal       \u2514 subUInt Internal       \u2514 addUInt Internal       \u2514 addThenSubUInt Internal              ExponentialNoError Implementation      \u2514 truncate Internal       \u2514 mul_ScalarTruncate Internal       \u2514 mul_ScalarTruncateAddUInt Internal       \u2514 lessThanExp Internal       \u2514 lessThanOrEqualExp Internal       \u2514 greaterThanExp Internal       \u2514 isZeroExp Internal       \u2514 safe224 Internal       \u2514 safe32 Internal       \u2514 add_ Internal       \u2514 add_ Internal       \u2514 add_ Internal       \u2514 add_ Internal       \u2514 sub_ Internal       \u2514 sub_ Internal       \u2514 sub_ Internal       \u2514 sub_ Internal       \u2514 mul_ Internal       \u2514 mul_ Internal       \u2514 mul_ Internal       \u2514 mul_ Internal       \u2514 mul_ Internal       \u2514 mul_ Internal       \u2514 mul_ Internal       \u2514 mul_ Internal       \u2514 div_ Internal       \u2514 div_ Internal       \u2514 div_ Internal       \u2514 div_ Internal       \u2514 div_ Internal       \u2514 div_ Internal       \u2514 div_ Internal       \u2514 div_ Internal       \u2514 fraction Internal              EIP20Interface Interface      \u2514 name External    NO\u2757\ufe0f   \u2514 symbol External    NO\u2757\ufe0f   \u2514 decimals External    NO\u2757\ufe0f   \u2514 totalSupply External    NO\u2757\ufe0f   \u2514 balanceOf External    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom External    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f   \u2514 allowance External    NO\u2757\ufe0f     image1712\u00d73756 1.27 MB   image3525\u00d71211 307 KB  ",
                    "links": [
                        "https://etherscan.io/address/0xa035b9e130f2b1aedc733eefb1c67ba4c503491f",
                        "https://etherscan.io/address/0x3363bae2fc44da742df13cd3ee94b6bb868ea376#code",
                        "https://etherscan.io/address/0xFB564da37B41b2F6B6EDcc3e56FbF523bD9F2012",
                        "https://forum.makerdao.com/t/cdai-mip6-collateral-onboarding-application/3764",
                        "https://compound.finance/",
                        "https://github.com/compound-finance/compound-protocol",
                        "https://compound.finance/docs/security#security",
                        "https://compound.finance/documents/Certora.pdf",
                        "https://gauntlet.network/reports/compound",
                        "https://compound.finance/docs#networks",
                        "https://github.com/compound-finance/compound-config/actions",
                        "https://chainsecurity.com/security-audit/compound-ctoken/",
                        "https://compound.finance/docs/comptroller#collateral-factor",
                        "https://etherscan.io/token/0xc00e94cb662c3520282e6f5717214004a7f26888",
                        "https://etherscan.io/address/0xc0da02939e1441f497fd74f78ce7decb17b66529",
                        "https://etherscan.io/address/0x6d903f6003cca6255d85cca4d3b5e5146dc33925#code",
                        "https://github.com/compound-finance/compound-config/actions",
                        "https://compound.finance/docs/security#audits",
                        "https://blog.openzeppelin.com/compound-finance-mcd-dsr-integration/",
                        "https://www.comp.xyz/t/migrate-cdai-implementation-from-cdaidelegate-to-cerc20delegate/807/7",
                        "https://github.com/trailofbits/publications/blob/master/reviews/compound-3.pdf",
                        "https://blog.openzeppelin.com/compound-audit/",
                        "https://chainsecurity.com/security-audit/compound-ctoken/",
                        "https://blog.openzeppelin.com/compound-comp-distribution-system-audit/",
                        "https://blog.openzeppelin.com/compound-finance-patch-audit/",
                        "https://blog.openzeppelin.com/compound-comp-distribution-system-audit/",
                        "https://forum.makerdao.com/t/direct-compoundv2-dai-direct-deposit-module-technical-assessment/17307",
                        "https://forum.makerdao.com/t/ces-april-2022-update/14999",
                        "https://forum.makerdao.com/t/weekly-relay-recaps-of-current-events-at-makerdao/16382/28"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.189043251506159
                },
                {
                    "author_link": "https://forum.makerdao.com/u/twblack88",
                    "index": "#2",
                    "likes": "2",
                    "time": "05/05/2022-22:01:24",
                    "content": "    dbkcan:  implementation of real time monitoring for Compound governance votes   Probably a few different sources to integrate from. Is there an ideal platform you\u2019d like to see Maker prioritize? (reading directly from compound bravo into block analytica comes to mind, or also messari governor) Also, hell of a first post @dbkcan  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.041666666666666
                },
                {
                    "author_link": "https://forum.makerdao.com/u/flipflopflapdelegate",
                    "index": "#3",
                    "likes": "3",
                    "time": "06/05/2022-02:56:15",
                    "content": "    dbkcan:  ETH price decline of 8% led to the liquidation of $82.5 million Dai. To address this issue Compound modified their Oracle system to use Chainlink oracles in June 2021 and since then have not faced any major issues related to the Oracles.   In the near future. Would it be possible to include a D3M circuit breaker/kill switch in case there\u2019s a fault in CL Oracle feeds? Recently, there was a post based on how the CL multisig could switch aggregators at any time to any Oracle. Assuming the view is true \u2014 I\u2019m TOL if any 3rd party integration for the D3M can include a circuit breaker to limit the damage. Besides the target available debt/max DC. Thanks in advance, and TY for the assessment. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.55625
                },
                {
                    "author_link": "https://forum.makerdao.com/u/M_C",
                    "index": "#4",
                    "likes": "0",
                    "time": "06/05/2022-07:52:33",
                    "content": "I was also thinking checking calldata on governor bravo directly would give us several days in advance to react. @techops-core-unit Do you have already any type of monitoring like this in place that can be reused? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://forum.makerdao.com/u/dumitru",
                    "index": "#6",
                    "likes": "1",
                    "time": "06/05/2022-13:18:37",
                    "content": "    M_C:  @techops-core-unit Do you have already any type of monitoring like this in place that can be reused?   Yes, we do have a lot of monitoring. And have a list of things that we update/change/do whenever new collateral is added or removed. I think we already agreed to discuss the process next week. Let us know if anything else is needed. TY! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.340909090909091
                },
                {
                    "author_link": "https://forum.makerdao.com/u/dbkcan",
                    "index": "#7",
                    "likes": "2",
                    "time": "07/05/2022-16:11:59",
                    "content": "@flipflopflapdelegate - @Protocol-Engineering  is working on the mechanics of the actual integration of the D3M adapter and is currently refactoring the existing adapter. We will be meeting with them next week to get a walk through on this refactor and will definitely be assessing/discussing with them - to the extent such a \u201ckill switch\u201d has not been incorporated in D3M modules refactor - as to whether such an emergency kill switch/instance access module is required so that we have mitigation against contract upgrades and other adverse events that might occur in the Compound Protocol. Clearly, the Compound\u2019s Oracles\u2019 (A good explanation of Compound current oracle architecture is available here Compound | Docs - Open Price Feed) expose users with some level of risk, but it appears Compound does validate/sanity check the oracles reported prices using uniswap v2 prices as well, providing some protection against variant price reporting from oracles. I believe under a D3M arrangement the direct oracle risk exposure to Maker would be minimal as the oracles are used solely for triggering and managing liquidations of borrowings against DAI. From that perspective MD\u2019s direct oracle  risk through a D3M (MakerDao lending Dai as opposed to borrowing) is minimized.  Agreed however we need to fully understand and assess whether additional protections are needed should there be an adverse event that indirectly triggers premature liquidations for borrowers within the Compound Protocol. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.391666666666667
                },
                {
                    "author_link": "https://forum.makerdao.com/u/flipflopflapdelegate",
                    "index": "#8",
                    "likes": "0",
                    "time": "07/05/2022-16:32:47",
                    "content": "    dbkcan:  Clearly, the Compound\u2019s Oracles\u2019 (A good explanation of Compound current oracle architecture is available here Compound | Docs - Open Price Feed ) expose users with some level of risk   Got it\u2013thank you for the thorough explanation. With regards to Comp\u2019s Oracle architecture, does the function getUnderlyingPrice verify cDAI, or DAI from Uniswap v2? More than likely cDAI\u2013is there a price arbitrage between cDAI & DAI when markets are under pressure? Also, is this   now being priced at $1 USD, or still priced in ETH? ( I see they still use SAI  )  image1726\u00d7104 30.4 KB  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.214285714285714
                },
                {
                    "author_link": "https://forum.makerdao.com/u/hexonaut",
                    "index": "#9",
                    "likes": "6",
                    "time": "07/05/2022-18:56:06",
                    "content": "All D3Ms have a kill switch that governance can use to bypass the gov delay and shut things down in an emergency. It requires an executive vote. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.222222222222222
                },
                {
                    "author_link": "https://forum.makerdao.com/u/dbkcan",
                    "index": "#10",
                    "likes": "1",
                    "time": "11/05/2022-02:37:58",
                    "content": "getUnderlyingPrice(address cToken) in the case of cDai would return the price of the underlying asset for cDAI which is the price of DAI. The difference between the value of DAI vs its underlying token cDAI is solely the interest that has accrued on your tokens since lending the underlying asset into the Protocol (i.e. DAI) so there really shouldn\u2019t be any Arbitrage opportunity. Simplistically you can think of the cDAI tokens as \u201creceipts\u201d that DAI lenders receive for locking DAI into the protocol - with the cDAI earning interest based on the number of blocks you have lent the DAI - when you withdraw DAI you have lent you redeem the cDAI tokens for more DAI than you originally lent the difference being interest income. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.791666666666667
                },
                {
                    "author_link": "https://forum.makerdao.com/u/system",
                    "index": "#11",
                    "likes": "0",
                    "time": "09/08/2022-02:38:35",
                    "content": "This topic was automatically closed 90 days after the last reply. New replies are no longer allowed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0606060606060606
                }
            ]
        }
    ]
}