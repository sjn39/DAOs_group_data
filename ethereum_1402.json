{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-3722-poster-a-ridiculously-simple-general-purpose-social-media-smart-contract/6751",
            "title": "ERC-3722 -- Poster: A ridiculously simple general purpose social media smart contract ",
            "index": 6751,
            "category": [
                "EIPs"
            ],
            "tags": [
                "social-media"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "1",
                    "likes": "7",
                    "time": "31/07/2021-05:28:26",
                    "content": "    Author Auryn Macmillan     EIP Link Github   Discussions Various twitter threads   Status Draft   Type Standards Track   Category ERC   Created 2021-07-31     Poster   Simple Summary A ridiculously simple general purpose social media smart contract. It takes a string as a parameter and emits that string, along with msg.sender, as an event. That\u2019s it.  Motivation Poster is intended to be used as a base layer for decentralized social media. It can be deployed to the same address (via the singleton factory) on just about any EVM compatible network. Any Ethereum account can make posts to the deployement of Poster on its local network.  Specification  Contract contract Poster {     event NewPost(address indexed account, string content);      function post(string calldata content) public {         emit NewPost(msg.send, content);     } }   ABI [     {       \"anonymous\": false,       \"inputs\": [         {           \"indexed\": true,           \"internalType\": \"address\",           \"name\": \"user\",           \"type\": \"address\"         },         {           \"indexed\": false,           \"internalType\": \"string\",           \"name\": \"content\",           \"type\": \"string\"         }       ],       \"name\": \"NewPost\",       \"type\": \"event\"     },     {       \"inputs\": [         {           \"internalType\": \"string\",           \"name\": \"content\",           \"type\": \"string\"         }       ],       \"name\": \"post\",       \"outputs\": [],       \"stateMutability\": \"nonpayable\",       \"type\": \"function\"     } ]   Standard json format for Twitter-like posts {   \"content\": [     {       \"type\": \"microblog\",       \"text\": \"this is the first post in a thread\"     },     {       \"type\": \"microblog\",       \"text\": \"this is the second post in a thread\",       \"replyTo\": \"this[0]\"     },     {       \"type\": \"microblog\",       \"text\": \"this is a reply to some other post\",       \"replyTo\": \"some_post_id\"     },     {       \"type\": \"microblog\",       \"text\": \"this is a post with an image\",       \"image\": \"ipfs://ipfs_hash\"     },     {       \"type\": \"microblog\",       \"text\": \"this post replaces a previously posted post\",       \"edit\": \"some_post_id\"     },     {       \"type\": \"delete\",       \"target\": \"some_post_id\"     },     {       \"type\": \"like\",       \"target\": \"some_post_id\"     },     {       \"type\": \"repost\",       \"target\": \"some_post_id\"     },     {       \"type\": \"follow\",       \"target\": \"some_account\"     },     {       \"type\": \"unfollow\",       \"target\": \"some_account\"     },     {       \"type\": \"block\",       \"target\": \"some_account\"     },     {       \"type\": \"report\",       \"target\": \"some_account or some_post_id\"     },    {       \"type\": \"permissions\",       \"account\": \"<account_to_set_permissions>\",       \"permissions\": {         \"post\": true,         \"delete\": true,         \"like\": true,         \"follow\": true,         \"block\": true,         \"report\": true,         \"permissions\": true       }     },     {       \"type\": \"microblog\",       \"text\": \"This is a post from an account with permissions to post on behalf of another account.\",       \"from\": \"<from_address>\"     }   ] }    Implementation Poster has been deployed at 0x0000000000A84Fe7f5d858c8A22121c975Ff0b42 on multiple networks using the Singleton Factory. If it is not yet deployed on your chosen network, you can use the Singleton Factory to deploy an instance of Poster at the same address on just about any EVM compatible network using these parameters:  initCode: 0x608060405234801561001057600080fd5b50610189806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638ee93cf314610030575b600080fd5b61004361003e366004610099565b610045565b005b3373ffffffffffffffffffffffffffffffffffffffff167f6babe127d1599cad37c523a2dd29c5d02acd7132a883e378a2d9b42ec75a1fa9838360405161008d929190610106565b60405180910390a25050565b600080602083850312156100ab578182fd5b823567ffffffffffffffff808211156100c2578384fd5b818501915085601f8301126100d5578384fd5b8135818111156100e3578485fd5b8660208285010111156100f4578485fd5b60209290920196919550909350505050565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010191905056fea264697066735822122091369fb6f397ae303a741fb470a163a0384d9152cd15b5887f5f0b68e5a3c8e964736f6c63430008000033 salt: 0x51a9566bdb2664f8cb31cd79d50e2c10ea34f765e27bc8e3ff3c60175ad4cb6c  The source code is available in the Poster contract repo. When verifying on the source code on a block explorer, make sure to set the optimizer to yes and the runs to 10000000. ",
                    "links": [
                        "https://twitter.com/auryn_macmillan/status/1420769162239041548",
                        "https://github.com/ETHPoster/contract",
                        "https://eips.ethereum.org/EIPS/eip-2470",
                        "https://github.com/ETHPoster/contract/blob/master/contracts/Poster.sol"
                    ],
                    "GPT-summary": "The post explains the ERC-3722 proposal for a simple social media smart contract that can be deployed on any EVM compatible network. The proposal is intended to be used as a base layer for decentralized social media. The post provides the contract specification, implementation details, and a standard JSON format for Twitter-like posts. The post also includes links to the EIP, Github, and discussions on Twitter. The post does not contain entirely positive or negative feedback, but it does provide constructive criticism and advertising for the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Community and engagement",
                        "Not a proposal",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 4.863705738705739
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "2",
                    "likes": "2",
                    "time": "31/07/2021-05:39:22",
                    "content": "Given that this is intended for use as the base layer for decentralized social media, minimizing gas costs is crucial. However, this could come at the cost of increasing infrastructure requirements for services / clients indexing posts. There have been several suggestions on the best balance of gas cost and utility for this contract. They seem to boil down to these options, in order of gas cost from highest to lowest; easiest to hardest to index. Emit both msg.sender and content contract Poster {     event NewPost(address account, string content);      function post(string memory content) public {         emit NewPost(msg.send, content);     } }  Emit content only contract Poster {     event NewPost(string content);      function post(string memory content) public {         emit NewPost(content);     } }  Emit msg.sender only contract Poster {     event NewPost(address account);      function post(string memory content) public {         emit NewPost(msg.send);     } }  Emit an empty event contract Poster {     event NewPost();      function post(string memory content) public {         emit NewPost();     } }  Emit no event contract Poster {     function post(string memory content) public {} }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.992063492063492
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dekanbro",
                    "index": "3",
                    "likes": "2",
                    "time": "31/07/2021-13:40:05",
                    "content": "Awesome. I think you could use calldata instead of memory for \u2018content\u2019. might save a couple wei   github.com/auryn-macmillan/poster         change memory to calldata   auryn-macmillan:master \u2190 dekanbro:patch-1            opened 01:34PM - 31 Jul 21 UTC               dekanbro             +1 -1           Also what do you think about adding another field for referencing another index? could be used for \u2018retweet/like\u2019 ",
                    "links": [
                        "https://github.com/auryn-macmillan/poster/pull/13",
                        "https://github.com/dekanbro",
                        "https://github.com/auryn-macmillan/poster/pull/13/files"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 10.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "4",
                    "likes": "1",
                    "time": "31/07/2021-13:54:15",
                    "content": "    dekanbro:  Also what do you think about adding another field for referencing another index? could be used for \u2018retweet/like\u2019   I think that could be achieved just as well by encoding into the content string, see the example json format above.     dekanbro:  I think you could use calldata instead of memory for \u2018content\u2019. might save a couple wei   Are there any trade-offs to using calldata rather than memory? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dekanbro",
                    "index": "5",
                    "likes": "2",
                    "time": "31/07/2021-14:21:00",
                    "content": "encoding into the string might save a tiny bit but also could get some misformated entries. putting it into another field would also allow you to index it. calldata should be fine because we are not changing the value in any logic. Will have to do some profiling though to see if it matters. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.041666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dekanbro",
                    "index": "6",
                    "likes": "2",
                    "time": "31/07/2021-14:23:45",
                    "content": "I guess another option would be to just store a content hash and put it on ipfs or something, but that might defeat the purpose. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "7",
                    "likes": "0",
                    "time": "31/07/2021-15:36:27",
                    "content": "    dekanbro:  but also could get some misformated entries   I don\u2019t think adding another field meaningfully reduced the likelihood of malformed information. Someone could just as easily put malformed information into that field.     dekanbro:  I guess another option would be to just store a content hash   Yeah, this is how @bonustrack is thinking about using it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.333333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bonustrack",
                    "index": "8",
                    "likes": "1",
                    "time": "31/07/2021-16:37:38",
                    "content": "Yes i prefer with a hash, it makes a light and constant gas cost and remove the content size limit, without a content size limit we can imagine anything like posting large content, use signed messages or batch actions. On Twitter even if the size limit is \u201cjust\u201d 280 chars it doesn\u2019t include things like long URLs and metadata. I\u2019d rather use the chain as a trust layer rather than for storage. The tradeoff is just that if you store the data on IPFS it\u2019s not immutable, maybe the question is what threat(s) you want to avoid. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.705357142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bonustrack",
                    "index": "9",
                    "likes": "1",
                    "time": "31/07/2021-16:48:53",
                    "content": "The current design assume the author of the action is the same that broadcasting the tx. If this live in a L2 or another EVM L1 chain it would force users to have fund in their wallet for that chain. It would be more convenient if the design support meta-transaction. This could be done with the idea from Dennison, by broadcasting the content and signature and verify it with a contract function within a subgraph. The issue is just that this would not work for contract signatures (unless the contract is on the same chain than the protocol). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.613636363636364
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "10",
                    "likes": "0",
                    "time": "31/07/2021-17:09:09",
                    "content": "    bonustrack:  It would be more convenient if the design support meta-transaction   I\u2019ve thought more about this. For Snapshot, the real issue is trustless time-stamping and data availability, right? There\u2019s no reason that votes couldn\u2019t be signed messages just like they are now, the IPFS hash can be posted on-chain by any account. The subgraph would return the timestamp of the block where the IPFS hash was first posted. That way Snapshot can post messages on behalf of users, but users can opt to post their votes themselves and don\u2019t have to rely on Snapshot. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 6.735714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bonustrack",
                    "index": "11",
                    "likes": "1",
                    "time": "31/07/2021-18:16:12",
                    "content": "Yes, but the subgraph wont help so much cuz we wont be able to valid a message there, we would still need to replay/stream the data offchain to check what is valid and build our own API. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 7.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "12",
                    "likes": "0",
                    "time": "31/07/2021-19:18:31",
                    "content": "Assuming that the data is pinned/available, there is no reason that a subgraph couldn\u2019t validate the data. From what I understand, subgraphs that incorporated IPFS data are simply not eligible for indexer rewards. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bonustrack",
                    "index": "13",
                    "likes": "0",
                    "time": "31/07/2021-19:46:14",
                    "content": "I mean within the subgraph we can not validate signatures from smart contract, so the only way i see would be to store all messages on the subgraph even if the signature is wrong, and do validation offchain. I can not really store a list of valid messages from the subgraph directly, i could do that only if there is only EOAs signatures. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.626116071428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "14",
                    "likes": "1",
                    "time": "31/07/2021-20:23:46",
                    "content": "Oh, you mean EIP-1271 signatures? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bonustrack",
                    "index": "15",
                    "likes": "2",
                    "time": "31/07/2021-20:40:52",
                    "content": "Yes exactly, the problem is only with these signature, but I can\u2019t imagine not having them. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "16",
                    "likes": "0",
                    "time": "01/08/2021-12:08:12",
                    "content": "A response from the graph\u2019s discord server.  Yes, you can make eth calls. (Note: these are quite \u201cexpensive\u201d in terms of indexing performance. Subgraphs with an excessive amount of calls can take a long time to sync) An example call to an ERC-20 contract let contract = ERC20Contract.bind(event.address) let erc20Symbol = contract.symbol()  So it seems you could call  isValidSignature() from within the subgraph. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bonustrack",
                    "index": "17",
                    "likes": "1",
                    "time": "01/08/2021-12:23:47",
                    "content": "Yes but it\u2019s only useful if the contract who signed the message is on the same chain where you index data. Which is most of the time not the case. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "18",
                    "likes": "0",
                    "time": "01/08/2021-17:19:05",
                    "content": "Happy to be proven setting, but I\u2019d guess most of the time you\u2019d be indexing mainnet and most of the contacts that would want to sign messages would be deployed to mainnet. No? So this may not work for every scenario, but it probably covers the majority. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 8.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bonustrack",
                    "index": "19",
                    "likes": "1",
                    "time": "01/08/2021-22:01:07",
                    "content": "If we publish the data on mainnet the cost to cover the fee would be way too high. Imagine posting 5K messages per day onchain on mainnet. That\u2019s why i assume it must be on another chain, with low gas fee. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.4
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "20",
                    "likes": "2",
                    "time": "02/08/2021-11:30:22",
                    "content": "Perhaps you could periodically post an IPFS hash to a json document for a batch of votes? Users can either submit their vote via your service, in which case it might take a few hours before there are enough votes to justify it going on chain, or they can vote directly by submitting a transaction themselves. Your service would just need to guarantee that votes would be submitted on-chain before the poll closes. Maybe if there is less than x amount of time to go, users must submit their own TX. Just so you can\u2019t get blossomed for a user\u2019s cute but being counted if it is submitted late on-chain. With this setup, you\u2019d have a fixed gas cost for submitting any number of votes each day and still be able to index mainnet. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.62962962962963
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "21",
                    "likes": "0",
                    "time": "02/08/2021-15:45:38",
                    "content": "@LefterisJP, @Arachnid, and @tjayrush , I\u2019m keen to hear your feedback on the best of these options. I\u2019d like to come to a concrete decision on which of these options we should use so we can deploy a final version and start coordinating around one specific instance of it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "22",
                    "likes": "1",
                    "time": "02/08/2021-21:26:29",
                    "content": "You should log the complete contents - option 1. Anything else requires an archive node for an indexer, because it will have to trace every transaction. You should also consider using something more compact than JSON. CBOR is a good alternative that can be translated to/from JSON, and also has extensions that support eliminating duplicate strings and pre-seeding known identifiers (like dictionary keys). Finally, you should probably use ENS reverse resolution in any UI to assign usernames to users! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/LefterisJP",
                    "index": "23",
                    "likes": "1",
                    "time": "02/08/2021-22:40:43",
                    "content": "Same as Nick said. Use log events, otherwise indexing is going to be a lot harder. The idea of doing it in a side-chain or another chain may also not be bad. I did not have the time to read the entire proposal but if it\u2019s a lot of data you would need to choose a much more compact format than json and even if you do, mainnet may end up being too expensive for you to commit often. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.333333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/bonustrack",
                    "index": "24",
                    "likes": "0",
                    "time": "03/08/2021-13:38:29",
                    "content": "This is pretty much what Ceramic is doing. The most important thing we want when posting onchain is to get a timestamp for votes, if we publish votes after a proposal ended we wont have proof about timestamp for the votes. With this approach we would need to post batch of votes when or just before a proposal ended. Which is going to be too many of them and end-up expensive. I also think having free votes for certain users then paid vote for late users would give a poor experience and add lot of complexity. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.632142857142856
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/crazyrabbitLTC",
                    "index": "25",
                    "likes": "0",
                    "time": "03/08/2021-15:46:50",
                    "content": "Maybe we should clarify if we\u2019re building a social media smart contract, or a voting application. As both would probably be better served with a solution a little bit more custom tailored to the use case. Also, I think we need to expand on the JSON format if we\u2019re going to go with that. Cost wise- if we know the format of the message, we might be better off just accepting the arguments of the message as arguments to the function.  We could still leave a generalized \u2018poster\u2019 function to allow for other kinds of messages, but if posting will happen often, we will gain a lot of performance tuning the interface for the use case. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.334449404761905
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "26",
                    "likes": "0",
                    "time": "03/08/2021-16:34:40",
                    "content": "    Arachnid:  You should also consider using something more compact than JSON. CBOR is a good alternative that can be translated to/from JSON       LefterisJP:  if it\u2019s a lot of data you would need to choose a much more compact format than json and even if you do, mainnet may end up being too expensive for you to commit often.   Yes, @crazyrabbitLTC has been talking about using something more compact than JSON. CBOR seems like it could be a good fit. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "27",
                    "likes": "0",
                    "time": "03/08/2021-16:40:06",
                    "content": "    Arachnid:  Finally, you should probably use ENS reverse resolution in any UI to assign usernames to users!   Absolutely agree with this. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "28",
                    "likes": "0",
                    "time": "03/08/2021-16:45:56",
                    "content": "    crazyrabbitLTC:  Maybe we should clarify if we\u2019re building a social media smart contract, or a voting application. As both would probably be better served with a solution a little bit more custom tailored to the use case.   The whole point here is that the contract should be general purpose enough that it can serve both. The only difference would be the kind of data that is emitted in post() calls. Data formatted one way might be interpreted as a tweet, while data formatted another way might be interpreted as a vote, and others may use it for entirely different use-cases (like the token you built).     crazyrabbitLTC:  we will gain a lot of performance tuning the interface for the use case.   I\u2019d be interested to see a comparison of the gas costs between the options of separate fields, CBOR encoding, and JSON encoding. I\u2019d guess there would be very little cost savings between separate fields and CBOR. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.737065018315018
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "29",
                    "likes": "0",
                    "time": "03/08/2021-16:50:58",
                    "content": "    bonustrack:  Which is going to be too many of them and end-up expensive   Assuming you\u2019re posting an IPFS hash, then there is a fixed cost to post any number of votes.     bonustrack:  I also think having free votes for certain users then paid vote for late users would give a poor experience and add lot of complexity.   Yeah, I agree that this is a sub-optimal UX. That said, it should really only affect users posting their votes in the last few minutes. Do you have any insight into what percentage of users post within say the last 10 minutes of a proposal? I\u2019d guess it is a fraction of a percent. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.915584415584416
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "30",
                    "likes": "1",
                    "time": "03/08/2021-21:01:44",
                    "content": "Ok, since the prevailing opinion seems to be event NewPost(address account, string content), I\u2019ve gone ahead and deployed a new version that implements that. It also does a bunch of optimizer runs and I\u2019ve found a salt that gives it 10 leading zeros. Have updated the OP with details. I\u2019d like to freeze the contract at this point so we can all coordinate around using that address. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.590909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "31",
                    "likes": "0",
                    "time": "03/08/2021-23:43:07",
                    "content": "    auryn:  CBOR seems like it could be a good fit.   Just to expand on this - no reason not to compress the CBOR, too, for further gains. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.833333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "32",
                    "likes": "1",
                    "time": "03/08/2021-23:44:39",
                    "content": "    auryn:  Ok, since the prevailing opinion seems to be event NewPost(address account, string content), I\u2019ve gone ahead and deployed a new version that implements that. It also does a bunch of optimizer runs and I\u2019ve found a salt that gives it 10 leading zeros.   This should be bytes not string if you\u2019re using (possibly-compressed) CBOR. You should probably be really clear about what the exact encoding will be before you publish anything, or there\u2019s nearly no chance that all messages will be intelligible by all consumers! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.923863636363636
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "33",
                    "likes": "0",
                    "time": "04/08/2021-02:20:50",
                    "content": "    Arachnid:  Just to expand on this - no reason not to compress the CBOR, too, for further gains.   My only concern with CBOR is that it makes posts less human readable. One nice benefit of JSON is that humans can read and create posts on existing interfaces that let you interact with the contract\u2019s ABI, like Etherscan. I wonder if the gas efficiency is worth the decrease in human readability? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.523809523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/imkharn",
                    "index": "34",
                    "likes": "0",
                    "time": "05/08/2021-00:26:59",
                    "content": "You could just be posting hashes of content to EVM, and then storing content trustlessly on decentralized cloud storage which is able to tie into the EVM.  With a bit of coding effort, Ethereum and Storj could be connected, allowing affordable trustless data storage. I picked Storj over Filecoin because its twice as efficient with data usage, and picked it over IPFS because IPFS doesnt have guaranteed uptime. Here is what the developers at Storj say it takes to connect it to ethereum smart contracts:    Storj Community Forum (official) \u2013 4 May 20    What is needed to implement Storj for smart contracts Hello!  Smart contract storage remains a long term goal for us, but we aren\u2019t quite there yet. Here\u2019s what you\u2019d need to set up to make this work:    The contract would need a Tardigrade project on a specific Satellite. It would need to be set up for...      ",
                    "links": [
                        "https://forum.storj.io/t/what-is-needed-to-implement-storj-for-smart-contracts/6421/2"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.955357142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "35",
                    "likes": "1",
                    "time": "06/08/2021-14:45:02",
                    "content": "You could just let the post function take both bytes content and string content (and any other relevant types, if there are any), any/all of which can be blank. Let the subgraphs figure out whether they prefer JSON, CBOR, etc.? What about these for initial use cases:  Simple twitter clone (subgraph that looks for posts, follow, unfollows) Simple forum  I\u2019d be down to work on some subgraphs for those. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party is advertising proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0853174603174605
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "36",
                    "likes": "1",
                    "time": "06/08/2021-16:40:28",
                    "content": "    ezra_w:  You could just let the post function take both bytes content and string content   That\u2019s an interesting idea. Having both a bytes field and a string field would allow users to choose. That said, it does feel less elegant than picking one or the other. I think my preference is still to stick with string, just so that users have the option to post in a human readable format. The downside is that it effectively doubles the cost of posting in CBOR, which probably negates its cost savings. That said, I\u2019d predict this being used primarily on L2, so I think this is probably an acceptable trade-off.     ezra_w:  I\u2019d be down to work on some subgraphs for those.   There is already a group working on a twitter-like app, so if you want to have a crack at a forum, that would be awesome! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.4182098765432105
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "37",
                    "likes": "0",
                    "time": "06/08/2021-19:25:55",
                    "content": "Is there a place where I can see work in progress, especially what content structures they\u2019re using? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "38",
                    "likes": "1",
                    "time": "06/08/2021-23:34:12",
                    "content": "Check out the github repo    GitHub    Poster Poster has 3 repositories available. Follow their code on GitHub.      ",
                    "links": [
                        "https://github.com/ethposter"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "39",
                    "likes": "0",
                    "time": "08/08/2021-22:08:09",
                    "content": "Alright, started laying some stuff out for the forum. It looks like The Graph has a JSON / AS API: Assemblyscript API | Graph Docs But it parses from Bytes, not from a string. So maybe we need to rethink whether the contract should be taking a string for content again, unless someone wants to write a new library for parsing JSON from strings in assembly script? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.840909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jjperezaguinaga",
                    "index": "40",
                    "likes": "1",
                    "time": "09/08/2021-16:22:01",
                    "content": "Hi there! Jose here, currently working in the first app/ui for Poster, which can be seen here (the source code was already shared by @auryn). I personally believe that the beauty of Poster is its simplicity, so I\u2019m happy we are leaving it as it currently stands in v6. Anyone can build on top of it via a Subgraph relying on their indexers as a sort of \u201cL2\u201d that processes the content logic in the best way possible, based on the use case. For instance, for our \u201cTwitter\u201d-like demo, I\u2019m parsing the events and limiting the content by 300, but this L2 is defined in the subgraph, not in Poster itself.  image1206\u00d7876 103 KB  Anyone can build on top of the content on top of Poster, using the smart contract as an append-only datastore (L1) that can then be parsed as needed via a given subgraph (L2). Any other event that does not fit the need of their particular use case can be skipped My suggestion is to document these ideas as PIPs (Poster Improvement Proposals) that define the sort of schema that people would like to organize around. For instance, the \u201cTwitter\u201d-like app was already defined by Auryin very early, so that\u2019s the one I\u2019m starting with, but anyone could do pretty much everything with IPFS, Storj, CBOR, etc, I just don\u2019t think that has to be done in the L1, but on the L2 of the application. Heck, you could design a chess game by sending all the moves via state channels to each user and only commit the match to Poster after it\u2019s completed. I\u2019ll continue on the current Twitter implementation and do all actions on-chain (although I wouldn\u2019t mind using something like Ceramic Network for the metadata -likes, retweets, et al- interaction), and perhaps toy later with OpenGSN to see if I can upfront people\u2019s submissions cost at the beginning via another token or something. Having to pay every time you do anything on a social network ain\u2019t that much fun. ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/5/5e4455233603255cbb9ccf4568b86a5a3e6cbd9c.jpeg",
                        "https://ethereum-magicians.org/t/eip-poster-a-ridiculously-simple-general-purpose-social-media-smart-contract/6751"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.858184523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "41",
                    "likes": "0",
                    "time": "09/08/2021-18:15:08",
                    "content": "Hey, Jose, nice to meet you! Awesome work with the app! Maybe I can ask you about this. Right now, the subgraph is just storing the \u201ccontent\u201d value as a single \u201crawContent\u201d string, right? That means the subgraph isn\u2019t actually storing the state of the app at all, right? As in, in order to make an app like Twitter work, including user actions like following, blocking, etc. you would need to implement something outside the subgraph that queries all the Posts in the subgraph, parses all the \u201crawContent\u201d strings, and then constructs the entire state of the app. This can be done upon loading a react app, but it seems like it will get out of hand really fast, even with just the Twitter use case, once things like follows get implemented. It could also be done by a separately hosted service that watches the graph, but wouldn\u2019t it be better to construct the app state in the subgraph, by parsing and processing the content in the events\u2019 content field there? With the graph\u2019s JSON API, it looks like that should be possible (except that it parses bytes instead of strings). That\u2019s what I was assuming we would be doing based on this discussion, your diagram, etc., but it doesn\u2019t look like that\u2019s what\u2019s happening atm. Am I missing something? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.084183673469388
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "42",
                    "likes": "0",
                    "time": "09/08/2021-20:36:50",
                    "content": "    ezra_w:  wouldn\u2019t it be better to construct the app state in the subgraph   Yes, this is how I had envisioned the subgraph working as well. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jjperezaguinaga",
                    "index": "43",
                    "likes": "3",
                    "time": "10/08/2021-02:24:21",
                    "content": "Indeed, right now the latest subgraph does not consider any of the specifications provided in the original post. This is (now) being tracked in the following issues:  (UI) Ensure actions are sent to the network with the proper specification (Subgraph) The global state is parsed as defined by the spec  After sleeping through it and giving it some thought (on top of the questions given by @ezra_w), I now see that the most viable solution is indeed building the entire state in the subgraph based on on-chain data as originally suggested. Here\u2019s why:  image1450\u00d7856 152 KB  All actions sent via Poster (A) can be parsed in a single run by a Subgraph (B), generating a global state. New actions will only need to update the delta of the global state, always showing the latest state. In short, by keeping everything on-chain, we can always build the global state via the subgraph and allowing minimal operations on the client, with minimal overhead. Furthermore, we can display chunks of the global state in a granular way, without having to rebuild the state for a particular view (e.g. my likes). And last but not least, composability; the subgraph in charge of the entire social network can be composed on top, allowing anyone to create sub-networks or other products on top of the whole thing. It\u2019s like if Twitter entire content would be open source and ready to compose on. So now we are on the same ship, and will move on with the UI modifications  @ezra_w since you showed some interest in the subgraph part, are you up for modifying the existing one to allow building the needed state? I\u2019ll tackle that next after I\u2019m done with the UI, but would be good to get some help there. P.S. I actually reached the Ceramic team and got interesting insights, in particular:  The cost of every single operation (ie every write needing some gas), and The lack of a double-spend or global consensus need in a content publishing platform.  The first one I could argue L2 layers can tackle that, not to mention that we could put some mechanisms in place to diminish or offset the cost of publishing (e.g. via OpenGSN relayers). An example is how Mirror requires $WRITE tokens to publish, but we can open that pandora box later. The second aspect is indeed true, assuming content has no value, which I could argue it has, so agreeing on who wrote what when first does require a global consensus. Furthermore, streams (their append-only data model) would require composing the global state somewhere, forcing clients to do that overhead every time and/or via some trustable gateway, killing decentralization. In short, I love the Ceramic project but I do not think it fits our current use case at the moment. I\u2019ll still explore it for IDX to allow enriching the profile data, but will do it in a separate fashion to Poster. Back to building! ",
                    "links": [
                        "https://github.com/ETHPoster/subgraph/issues/2",
                        "https://ethereum-magicians.org/uploads/default/original/2X/e/ed2cf6ea562f557cea4ba571f5beb8c390945139.jpeg"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.594526615359948
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "44",
                    "likes": "3",
                    "time": "10/08/2021-04:06:41",
                    "content": "Nice! I already started some work in this direction for the forum here: GitHub - EzraWeller/postum: Decentralized protocol for forums implemented on the Poster contract It is not well documented (to say the least) nor finished at the moment, so it may be difficult to look through, but the subgraph folder has an example of what we\u2019re talking about: it parses the incoming content, assuming it\u2019s stringified JSON (awkwardly converting the string to Bytes first b/c that\u2019s what The Graph\u2019s JSON API wants), then constructs state based on that. I created some JSON schema for the forum actions you can find in the json-schema folder. I think I\u2019m most excited about the forum use-case at the moment, since it seems like there\u2019s an immediate audience for a decentralized version of Discourse in the crypto community, but I\u2019d be happy to help with the Twitter subgraph / other infra as well. Edit: Got some of the basics working (creating forums, editing forum titles). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.675
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "45",
                    "likes": "3",
                    "time": "13/08/2021-04:10:58",
                    "content": "Just made a PR into the EIP repo  github.com/ethereum/EIPs         EIP-draft_Poster   ethereum:master \u2190 auryn-macmillan:master            opened 04:07AM - 13 Aug 21 UTC               auryn-macmillan             +143 -0           ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/3722",
                        "https://github.com/auryn-macmillan",
                        "https://github.com/ethereum/EIPs/pull/3722/files"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jjperezaguinaga",
                    "index": "46",
                    "likes": "1",
                    "time": "14/08/2021-18:58:35",
                    "content": "Hey @ezra_w just wanted to thank you for the tip on try_fromBytes for parsing the JSON content sent via the smart contract. You were indeed correct on the fact that currently it\u2019s the only feasible way to parse JSON atm, and our subgraph now has implemented your concept. As I can see from Postum\u2019s README, you also are trying to support emoji. Have you identified why this breaks the JSON parser? I\u2019ve been running a few tests and I\u2019m not 100% sure why sometimes it just fails to parse the JSON file altogether. Here are some examples:  image554\u00d7536 62.6 KB  For some reason, @auryn\u2019s post (0xd714dd) broke the parser, but when I tried to replicate the same content multiple times I didn\u2019t manage. It could be that I used ' instead of \u2019 but if we have to edge case the all utf-8 encoding points this is going to not so much fun. I\u2019ll poke some of the TheGraph team members and try to figure out what\u2019s going on there. ",
                    "links": [
                        "https://github.com/EzraWeller/postum/blob/main/README.md",
                        "https://ethereum-magicians.org/uploads/default/original/2X/4/439bb7ac8245fad3ebbd69848c3d0c2660662705.png"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.174603174603175
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "47",
                    "likes": "1",
                    "time": "16/08/2021-02:55:59",
                    "content": "Nice! I actually noticed that Dennison\u2019s subgraph avoided the awkward stringToBytes function I wrote with this let tryData = json.try_fromBytes(ByteArray.fromUTF8(call.inputs.content) as Bytes), but no variation of that has worked for me. Would rather use his version if we can, obviously! Wrt the emojis, I haven\u2019t really looked into it yet. Let me know if you figure it out. Here is the latest Postum repo, now living in the EthPoster org: GitHub - ETHPoster/postum Most of the code for a working backend is done. It needs better test coverage (and a frontend to try it out), but I think a lot of the approach can be directly applied to the twitter app (or pretty much any other use case, for that matter). Once I feel confident in the Postum stuff, I\u2019m happy to work on similar structures for the twitter app, if that\u2019s helpful. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party is advertising proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.191666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "48",
                    "likes": "2",
                    "time": "17/08/2021-05:10:25",
                    "content": "    ezra_w:  ByteArray.fromUTF8(call.inputs.content) as Bytes   Got this working and it also seems to have fixed emoji support  Just needed to futz with the JSON parsing some more. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/abcoathup",
                    "index": "49",
                    "likes": "3",
                    "time": "17/08/2021-08:22:45",
                    "content": "I am skeptical that it is feasible from a cost perspective to save single posts onchain, even at layer 2. This was tried with Leeroy and Peepeth and costs of transactions (which were a lot lower than today) were a barrier to posting. Peepeth went down the batching route, where each post is signed by the author and batched by the platform, with only an IPFS hash of the batch being saved onchain.  This is required to have a trustless timestamp for batched posts.    Medium \u2013 6 Feb 19   Evolution of decentralised social media Beyond direct user payment of blockchain transaction fees  Reading time: 4 min read       Services could batch posts to Layer 2 and storing on decentralized storage every minute and the costs would be greatly reduced, potentially enough that a subscription service could be used. ",
                    "links": [
                        "https://medium.com/coinmonks/evolution-of-decentralised-social-media-dfe567d23e54"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.128968253968253
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jjperezaguinaga",
                    "index": "50",
                    "likes": "3",
                    "time": "17/08/2021-11:04:07",
                    "content": "Noticed that on your latest commit in Postum! I\u2019ll migrate mine after the ETHGlobal judging takes place. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/jjperezaguinaga",
                    "index": "51",
                    "likes": "3",
                    "time": "17/08/2021-11:13:55",
                    "content": "Had been orbiting around a few social media projects lately and I see that most agree that on a cost/ux 1 tx = 1 post is not feasible on the current schema of things. My current take goes as follows:   Costs can be mitigated by a super cheap network. The cost and gas calculation statements were true back in 2018, but now with projects that make a transaction cost a fraction of a penny, even paying for all non-sybil users doesn\u2019t seem crazy. Even on the latest ones on top of mainnet (e.g. Arbitrum or Optimism) these costs are minimal.  Rollups and bundles can batch transactions. As you mention, batch transactions seem like an optimal option, some sort of hop-on-bus that people can append their transaction to. There\u2019s a lot of work that has been done since 2018 on that area, and I\u2019m super keen in exploring that.  Signing/IPFS and off-chain permanence. I understand Peepeth\u2019s approach, but the only thing I struggle with is the data permanence. If you are only signing a hash, and that hash is removed from the network, that will not be really immutable. I think there\u2019s a difference between a truly immutable social network and one that is not. Ceramic seems to have a good \u201cin the middle\u201d solution which allows pinning on the blockchain, but I also need to explore that.  There are other projects exploring other alternatives which I\u2019m also curious to see how they evolve and solve these problems. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.507246376811594
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "52",
                    "likes": "3",
                    "time": "17/08/2021-12:08:43",
                    "content": "    abcoathup:  I am skeptical that it is feasible from a cost perspective to save single posts onchain, even at layer 2.   There is no reason a pattern like Peepeth\u2019s couldn\u2019t be built on top of Poster. You could emit an IPFS hash and then it\u2019s really just up to clients to interpret the hash. But, as @jjperezaguinaga points out, there is a potential persistence issue if the data is not pinned by someone. Also, even if you are putting the content on chain, it is not necessarily limited to just one post. I don\u2019t think the subgraph properly handles it yet, but the json specification in the OP is designed to allow multiple posts in a single transaction. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.051587301587301
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "53",
                    "likes": "2",
                    "time": "17/08/2021-17:18:50",
                    "content": "I don\u2019t think there would be a long-term persistence issue here as long as we can read IPFS from the subgraph: the poster contract emits an event with an IPFS hash, which needs to be available long enough for the subgraph to retrieve the data from IPFS, which it then processes as a bunch of events \u2013 subgraph then becomes the long term state storage and we don\u2019t really need the IPFS hash anymore. I think the main issue here is the centralization of packaging a bunch of signed messages and putting them on IPFS \u2013 without some decentralized protocol for that, you have to trust the packager not to censor anyone\u2019s messages. This is similar to Snapshot or Gnosis Safe today, so it\u2019s not an issue that would be unique for us. For now, I\u2019m hopeful we could deploy this on some layer 2s that are essentially free \u2013 we need way less security for these media use cases than for DeFi, I think, which hopefully means we can go straight to the cheapest censorship-resistant L2s. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.740384615384615
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "54",
                    "likes": "2",
                    "time": "17/08/2021-18:40:32",
                    "content": "I\u2019ve been thinking about this some more and I think it\u2019s worthwhile adding a new operation (permissions) and a new field (from) to the json standard. A post to grant all permissions to an account. {   \"content\": [     {       \"type\": \"permissions\",       \"account\": \"<account_to_set_permissions>\",       \"permissions\": {         \"post\": true,         \"delete\": true,         \"like\": true,         \"follow\": true,         \"block\": true,         \"report\": true,         \"permissions\": true       }     }   ] }   A post from an account with permissions to post on behalf of another account. If the \u2018from\u2019 account has given permission to this account, clients should treat this message as if it came from the \u2018from\u2019 address. {   \"content\": [     {       \"type\": \"microblog\",       \"text\": \"This is a post from an account with permissions to post on behalf of another account.\",       \"from\": \"<from_address>\"     }   ] }   Perhaps some version of this should be PIP-0002? (assuming PIP-0001 is a template similar to EIP-1) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.4602272727272725
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/abcoathup",
                    "index": "55",
                    "likes": "2",
                    "time": "19/08/2021-09:03:23",
                    "content": "Editing (i.e. update) of posts should be included in the standard for posting. An update is a new post with a reference to a previous post stating that it is an update to replace it.  Multiple updates should be allowed. Clients can show only the latest update to a post (and optionally show previous posts). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.216450216450217
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "56",
                    "likes": "1",
                    "time": "19/08/2021-16:17:56",
                    "content": "Great suggestion! I\u2019ll add this to the standard. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "57",
                    "likes": "1",
                    "time": "20/08/2021-12:38:28",
                    "content": "Have you all checked out my set of JSON schema for Postum? I\u2019m using this pattern: {   \"action\": \"CREATE_FORUM\",   \"args\": {...} }  With a different schema for each database mutation, e.g. create/edit/delete forum/thread/post. This seems like the right general framework for Poster apps to me. edit: I guess maybe I\u2019m suggesting a PIP here? Not really keyed into that system at this point, but it would be something like this: content should use the above format or similar (action, args) and the poster community should maintain an action namespace (i.e. only one \u201cCREATE_FORUM\u201d schema), to help make poster apps more interoperable. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 4.821428571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "58",
                    "likes": "0",
                    "time": "22/08/2021-02:52:26",
                    "content": "    ezra_w:  With a different schema for each database mutation, e.g. create/edit/delete forum/thread/post. This seems like the right general framework for Poster apps to me.   This seems reasonable to me. Do you see this as conflicting with the proposed json schema for twitter-like posts?     ezra_w:  I guess maybe I\u2019m suggesting a PIP here?   Maybe? I guess we should set up an EIP-like repo for PIPs. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.669642857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/norswap",
                    "index": "59",
                    "likes": "1",
                    "time": "25/08/2021-13:33:23",
                    "content": "Some thoughts:   Is it really okay to \u201cstore\u201d the message in blocks but not in the state? As the chain lives longer and longer, there might be less and less people storing the whole block history. I\u2019m confident there will still be people and companies doing it, but when the storage reaches tens of terabytes, it might be highly skewed towards companies offering paid API access (arguably this can be unbundled, decentralized too though). It might be okay, but it\u2019s worth thinking about explicitly. Otoh, storing in the state makes the costs prohibitive.   Has someone looked at how Arweave incentivizes storage? They seem to have done some thinking of that front. Maybe something similar can be reproduced / incentivized by a contract?   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.014814814814815
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maxareo",
                    "index": "60",
                    "likes": "1",
                    "time": "30/08/2021-06:45:25",
                    "content": "A different type of general purpose contract can be made via unicodes. Emojis, logographic symbols can be send via this contract as well. contract Poster {     event NewPost(address indexed account, uint256[] unicodes);      function post(uint256[] calldata unicodes) public {         emit NewPost(msg.send, unicodes);     } }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.083333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "61",
                    "likes": "1",
                    "time": "30/08/2021-14:49:35",
                    "content": "    norswap:  arguably this can be unbundled, decentralized too though)   Right, I think the implicit assumption here is that protocols like The Graph will be able to make this data available in a decentralized way.     norswap:  Maybe something similar can be reproduced / incentivized by a contract?   This is certainly possible, although I\u2019d argue that it should be added as an additional layer to this contract, so as to keep Poster as opinionated as possible. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.988095238095238
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "62",
                    "likes": "1",
                    "time": "30/08/2021-14:54:06",
                    "content": "    maxareo:  Emojis, logographic symbols can be send via this contract as well.   Is there a reason you couldn\u2019t send these with the current Poster contract? Strings are assumed to be UTF-8 (unicode) encoded anyway. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maxareo",
                    "index": "63",
                    "likes": "1",
                    "time": "31/08/2021-13:54:56",
                    "content": "Hey @auryn, what you have here is somewhat similar to what I proposed here, although this Poster contract is indeed surprisingly simple. The major difference is your idea uses little storage on-chain, and the messages are not considered to be assets and hence not transferrable. The idea I proposed would treat every single word or logograph in some languages as an asset. The root cause is in the nature of languages. That\u2019s why I was wondering if this Poster idea could do the same. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.836309523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "64",
                    "likes": "1",
                    "time": "01/09/2021-02:23:35",
                    "content": "    maxareo:  The major difference is your idea uses little storage on-chain   Poster doesn\u2019t use any on-chain storage.     maxareo:  and the messages are not considered to be assets and hence not transferrable   Correct. Messages are not intended to be assets in Poster.     maxareo:  The idea I proposed would treat every single word or logograph in some languages as an asset. The root cause is in the nature of languages.   Honestly, I have no idea what this means.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.504464285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ezra_w",
                    "index": "65",
                    "likes": "1",
                    "time": "23/09/2021-02:45:42",
                    "content": "Postum update: https://postum.on.fleek.co/ https://github.com/ETHPoster/postum/tree/rinkeby First try deploying, probably won\u2019t stay up too long. Rinkeby only, definitely has some broken stuff. But you should be able to create forums, threads, and posts! I think this decently proves the concept outlined in this thread. The UX isn\u2019t ideal, but it\u2019s at least part of the way there: you have to wait for the chain to confirm the transaction, but at that point the UI optimistically displays your action without waiting for the subgraph. Feedback welcome! I\u2019m not sure how much time I\u2019ll have to put into this coming up, but I do think there\u2019s a lot of potential in the forum use-case. ",
                    "links": [
                        "https://github.com/ETHPoster/postum/tree/rinkeby"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.8482142857142865
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "66",
                    "likes": "2",
                    "time": "27/09/2021-19:58:43",
                    "content": "This is such a great start @ezra_w! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "67",
                    "likes": "2",
                    "time": "28/09/2021-20:37:52",
                    "content": "Just a heads up, EIP-3722 was merged, so it\u2019s now ERC-3722  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "68",
                    "likes": "2",
                    "time": "30/09/2021-07:45:16",
                    "content": "Would it make sense to add another indexed field to the event that can be set by the poster? For example event NewPost(   address indexed user, // always msg.sender   bytes32 indexed tag,    string content );  The idea would be that this could be used for easier querying of events if you don\u2019t want to rely on a subgraph. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "69",
                    "likes": "1",
                    "time": "30/09/2021-18:52:16",
                    "content": "It could, potentially, but this feels like a slippery slope towards it becoming more opinionated. I believe @crazyrabbitLTC also suggested a variety of other parameters that we might include to allow for better filtering for some usecases. We ultimately decided against it in the interest of keeping it as simple, elegant, and opinionated as possible. Are there specific use-cases you\u2019re thinking about? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.9125000000000005
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "70",
                    "likes": "2",
                    "time": "01/10/2021-07:26:18",
                    "content": "I personally with thinking about allowing more direct communication (e.g. similar to a group around a topic). While using a sub-graph obviously would still allow this when this is part of the content, I feel like it would be nicer to allow more efficient querying of on-chain data via traditional/ direct means would be very helpful and beneficial. Knowing that many nodes impose limits when querying events it would make sense to provide some method of filtering, therefore an additional field would be helpful. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.055555555555556
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "71",
                    "likes": "1",
                    "time": "12/10/2021-01:43:52",
                    "content": "@rmeissner what are your thoughts on using string rather than bytes32 for the tag, just to maintain human readability? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rmeissner",
                    "index": "72",
                    "likes": "2",
                    "time": "13/10/2021-13:51:44",
                    "content": "I was choosing a bytes32 because values that are indexed are forced to be 32 bytes (to fit in the topic field). So if you use a string it will be hashed and the hash will be store in the event topic (see Contracts \u2014 Solidity 0.8.9 documentation). So to be more flexible in what this actually is I was directly proposing to use bytes32, but on a low level using string would be a similar result, so I would be fine either way. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.697916666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "73",
                    "likes": "1",
                    "time": "01/11/2021-16:49:18",
                    "content": "Cool, I\u2019m convinced then. I\u2019d like to stick with string to keep it human readable. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "74",
                    "likes": "1",
                    "time": "04/11/2021-15:55:08",
                    "content": "PR to add string tag parameter.  github.com/ETHPoster/contract         add tag   ETHPoster:master \u2190 ETHPoster:feat/tag            opened 12:58AM - 04 Nov 21 UTC               auryn-macmillan             +929 -376       This PR adds a `string tag` parameter, as [discussed on the ETH Magicians forum]\u2026(https://ethereum-magicians.org/t/erc-3722-poster-a-ridiculously-simple-general-purpose-social-media-smart-contract/6751/68?u=auryn).  Ideally, this will be the last change to Poster and we can change the status of the EIP.       ",
                    "links": [
                        "https://github.com/ETHPoster/contract/pull/22",
                        "https://github.com/auryn-macmillan",
                        "https://github.com/ETHPoster/contract/pull/22/files",
                        "https://github.com/ETHPoster/contract/pull/22"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 7.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "75",
                    "likes": "3",
                    "time": "29/11/2021-14:55:43",
                    "content": "Follow the recording of PEEPanEIP#53: EIP-3722: Poster with Auryn Macmillan for an overview of the proposal, interesting use cases, proof of concept for a Twitter like feed, decentralized discussion forum on testnet.     ",
                    "links": [
                        "https://www.youtube.com/watch?v=ZokZdg6OriM"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tippi-fifestarr",
                    "index": "76",
                    "likes": "0",
                    "time": "15/01/2022-16:23:05",
                    "content": "Thanks for posting this, was an interesting listen. Wondering what the news is these days? From my recent work doing hackathons, here are some \u201cBoilerplates\u201d from workshops that I found pretty cool:   GitHub    GitHub - ethereum-boilerplate/web3-social-network-boilerplate Contribute to ethereum-boilerplate/web3-social-network-boilerplate development by creating an account on GitHub.       and this one from Mr Yusef\u2019s awesome IPFS workshop at Chainlink Fall Hackathon     @auryn thanks for your hard work building public goods! I\u2019ve been working for a few months on the \u201chackathon team building problem\u201d (random strangers needing to trust and work together in a short time to build something) and really like the title Hackathon Registry, where each user/player, by building and through the reviews of their teammates, gets to grow their reputation.  Will have another prototype out by the end of the January  ",
                    "links": [
                        "https://github.com/ethereum-boilerplate/web3-social-network-boilerplate",
                        "https://www.youtube.com/watch?v=mL20IZpVPuQ"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.657051282051282
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "77",
                    "likes": "1",
                    "time": "09/09/2022-22:21:12",
                    "content": " Screenshot_2022-09-10-00-20-23-98_3aea4af51f236e4932235fdada7d16431080\u00d72400 214 KB  the initcode breaks the page scaling on mobile ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "78",
                    "likes": "1",
                    "time": "11/09/2022-23:44:31",
                    "content": "I went ahead and reported this over on meta.discourse.org. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "79",
                    "likes": "0",
                    "time": "12/09/2022-06:41:03",
                    "content": "haha sorry I should have mentioned where this happens, namely at EIP-3722: Poster ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/TimDaub",
                    "index": "80",
                    "likes": "0",
                    "time": "15/09/2022-15:02:39",
                    "content": "I find the code section under \u201cStandard json format for Twitter-like posts\u201d confusing. Is this supposed to be normative? E.g. does any of the list\u2019s elements need filling out? Or is this more supposed to mimick JSON schema\u2019s oneOf semantic? Are these just examples? For the emission event itself can event NewPost(address indexed user, string content, string indexed tag); string content also just be a regular link (\u201chttps://\u201d or \u201cipfs://\u201d)? Or is it intended to contain e.g. text content? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/auryn",
                    "index": "81",
                    "likes": "0",
                    "time": "07/02/2023-10:17:15",
                    "content": "It\u2019s just examples of the data structure you might use to build a twitter-like app. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1402"
}