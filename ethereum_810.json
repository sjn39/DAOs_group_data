{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1967-standard-proxy-storage-slots/3185",
            "title": "EIP-1967: Standard Proxy Storage Slots ",
            "index": 3185,
            "category": [
                "EIPs"
            ],
            "tags": [
                "eip",
                "proxy-contract"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/spalladino",
                    "index": "1",
                    "likes": "13",
                    "time": "24/04/2019-15:21:43",
                    "content": "We are proposing an EIP to standardise how proxies store the address of the logic contract they delegate to. Given that the delegating proxy contract pattern has become widespread, we believe there is value, especially for off-chain tooling and explorers, in having a standard storage layout for proxy-specific information. In particular, a storage layout based on the unstructured storage pattern. We are pushing for a standard storage layout and not a standard interface since proxies are designed to act transparently for a user, and introducing proxy-specific functions can lead to attacks. This EIP is designed to be a generalization for other delegating proxy standards that use the unstructured storage pattern, such as EIP-1822.  Delegating proxy contracts are widely used for both upgradeability and gas savings. These proxies rely on a logic contract (also known as implementation contract or master copy) that is called using delegatecall. This allows proxies to keep a persistent state (storage and balance) while the code is delegated to the logic contract. To avoid clashes in storage usage between the proxy and logic contract, the address of the logic contract is typically saved in a specific storage slot guaranteed to be never allocated by a compiler. This EIP proposes a set of standard slots to store proxy information. This allows clients like block explorers to properly extract and show this information to end users, and logic contracts to optionally act upon it.    github.com/ethereum/EIPs       EIP-1967: Standard Proxy Storage Slots     by spalladino   on 03:26PM - 24 Apr 19 UTC   7 commits   changed 1 files   with 195 additions   and 0 deletions.       ",
                    "links": [
                        "https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357",
                        "https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1822.md",
                        "https://blog.zeppelinos.org/upgradeability-using-unstructured-storage/",
                        "https://github.com/ethereum/EIPs/pull/1967",
                        "https://github.com/spalladino",
                        "https://github.com/ethereum/EIPs/pull/1967",
                        "https://github.com/spalladino",
                        "https://github.com/ethereum/EIPs/pull/1967",
                        "https://ethereum-magicians.org/t/eip-1822-universal-upgradeable-proxy-standard-uups/2842/21"
                    ],
                    "GPT-summary": "The author proposes an EIP to standardize how proxies store the address of the logic contract they delegate to. The proposal aims to provide a standard storage layout for proxy-specific information, which can be used by off-chain tooling and explorers. The proposal is designed to be a generalization for other delegating proxy standards that use the unstructured storage pattern. The proposal suggests a set of standard slots to store proxy information.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Privacy, Security and risk management",
                        "Not a proposal",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.919642857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "2",
                    "likes": "0",
                    "time": "02/11/2020-08:03:47",
                    "content": "Do you have any evidence that subtracting by 1 to make an unknown prehash is needed? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/spalladino",
                    "index": "3",
                    "likes": "1",
                    "time": "02/11/2020-12:42:56",
                    "content": "It\u2019s not strictly needed as far as I know, but I understand it makes it harder to mount a collision-based attack. The idea was suggested by @wjmelements in this comment. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "4",
                    "likes": "2",
                    "time": "02/11/2020-13:11:58",
                    "content": "If you have keccak256('eip1967.proxy.implementation') the preimage is known, it is 'eip1967.proxy.implementation'. If you subtract one you get a random number with unknown preimage because keccak256 is a cryptographic hash. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 3.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "5",
                    "likes": "0",
                    "time": "02/11/2020-15:57:31",
                    "content": "I see, makes sense.  I\u2019ll ask further questions about it in that topic thread. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mudgen",
                    "index": "6",
                    "likes": "0",
                    "time": "02/11/2020-15:58:16",
                    "content": "I see, thanks for that explanation. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/0ju",
                    "index": "7",
                    "likes": "0",
                    "time": "12/02/2021-09:24:43",
                    "content": "I am sorry but i do not understand this -1. You say \u201ckeccak256(\u2018eip1967.proxy.implementation\u2019) the preimage is known\u201d. If you substract -1, the preimage is also known ? isn\u2019t it ? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 2.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "8",
                    "likes": "1",
                    "time": "12/02/2021-14:19:52",
                    "content": "By \u201cpreimage\u201d I mean a hash preimage. Since keccak256('eip1967.proxy.implementation') - 1 isn\u2019t the result of a hash, its preimage is unknown. Whether this has any real consequences for security is up for debate. It was a precaution that someone suggested. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.645833333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/0ju",
                    "index": "9",
                    "likes": "0",
                    "time": "12/02/2021-19:03:57",
                    "content": "Sorry but i do not understand. Everything is known there; We are not talking about a password or a secret. Both preimage and hash are public in source code and is known by everybody. Here is What i have understood. Can you tell me if i made a mistake somewere ?  Logic contract\u2019s storage variables are stored in proxy contract\u2019s memory. Proxy contract contains his own storage variables We can have a big problem if a logic contract variable has the same address than a proxy contract variable address. For this reason, proxy contract variables are stored at 3 specific addresses (we have only 3 storage variables in proxy contract) The goal of this EIP is to specify 3 addresses and to say to all compilers and EVM they should NEVER store a variable at this addresses.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.8125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "10",
                    "likes": "1",
                    "time": "23/02/2021-14:42:11",
                    "content": "I think you understood correctly. I don\u2019t think your last point is explicitly stated in the EIP but I would also say it\u2019s true. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Morlega",
                    "index": "11",
                    "likes": "0",
                    "time": "02/09/2021-22:36:11",
                    "content": "Today I stumbled upon an interesting issue with this standard: While testing some contracts, I ended up with this intended call chain: MainContract -delegate-> ProxyObject     ProxyObject -staticcall-> beacon.implementation()   [reverts here]     ProxyObject -delegatecall-> implementation  beacon is simply a beacon with implementation() (and other things) while ProxyObject accepts a beacon in the constructor, stores it in the beacon storage slot, and declares a fallback function that reads that storage slot, calls implementation() then delegate-calls to it. This would always revert due to function call to a non-contract account when doing beacon.implementation(), even though manually doing that method or even manually calling ProxyObject worked fine. Somehow ProxyObject being delegate-called by MainContract produced this weird error. After a while, I figured out that since ProxyObject is delegate-called and not called regularly (or using STATICCALL), it is using the storage of MainContract which doesn\u2019t contain the (right) beacon storage slot. I \u201csolved\u201d this by storing the beacon address in an immutable field and defaulting to that if the storage slot is empty. Obviously not the best solution, but I can\u2019t think of any other solution besides either:  Storing the ProxyObject's address in an immutable field during construction, and making it query itself for the beacon implementation. This would mean that ProxyObject requires a regular (non-fallback) function for this. Perhaps it could use some magic parameter and check msg.sender to detect when it\u2019s a \u201crequest from itself\u201d versus a regular proxy call it should delegate, but quite complex and counter-intuitive. Quite a fundamental (and complex) change though. Simply not use EIP-1967 as it seems that it never anticipated the ProxyObject (the proxy contract with the beacon storage slot) to be delegate-called.  Is my reasoning in all this wrong, or did the EIP actually overlook this issue? I don\u2019t see anything about this restriction (\u201cproxy scripts that use beacon storage slots can\u2019t be delegate-called\u201d) in the EIP. I If that\u2019s the case, perhaps adding a warning about this might not be a bad idea? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.916278467908903
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "12",
                    "likes": "0",
                    "time": "02/09/2021-23:06:18",
                    "content": "It is possible to use EIP-1967 in the scenario you describe. The storage variable just needs to be set in the \u201ctop level\u201d contract, in your case MainContract. This is the case whenever there is more than 1 proxy layer, i.e. multiple delegatecalls in series. The way the EIP should be interpreted is that the storage slots it specifies are only relevant in a call context where those slots are active. In a delegatecall context, the storage of the intermediate proxy is always ignored, so the EIP is not \u201cin effect\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.638888888888889
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Morlega",
                    "index": "13",
                    "likes": "0",
                    "time": "02/09/2021-23:21:06",
                    "content": "Still, a warning wouldn\u2019t be a bad idea though. After all, I was of the impression that whether a contract is a \u201creal\u201d contract or a proxy pointing to another contract shouldn\u2019t matter. Calling the proxy and non-proxy the same way should have the same results (assuming same state/address/etc), and the same for delegate calls. It\u2019s quite counter-intuitive that delegate-calling a proxy suddenly makes the proxy act as a \u201cdifferent\u201d proxy (e.g. affected by your own beacon storage slot). This issue should also happen for proxies that work by storing a logical implementation address instead of a beacon. Also interesting, although not strictly about this EIP: delegate-calling a diamond (EIP-2535) would also suffer from this (it\u2019d look for selectors in the caller\u2019s DiamondStorage instead of the diamond\u2019s). The reason why I\u2019m mentioning this is because although it\u2019s a bit too cumbersome for the \u201csimple\u201d proxies in this EIP (1967), it\u2019s not unthinkable to deploy proxies (with or without beacons) pointing at a diamond, where upgrading the diamond would also \u201cupgrade\u201d all proxies pointing at it. EDIT: Mentioned the diamond issue on the discussion for EIP-2535. I imagine that any progress/remarks both here and there affect both EIPs. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/2535#issuecomment-912129571"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None"
                    ],
                    "Sentiment": 5.3375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/fulldecent",
                    "index": "14",
                    "likes": "0",
                    "time": "16/12/2021-04:38:10",
                    "content": "Currently the reference implementation uses and undefined StorageSlot. Please include this definition in the implementation. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/frangio",
                    "index": "15",
                    "likes": "0",
                    "time": "16/12/2021-19:09:15",
                    "content": "Is it acceptable to remove the inline reference implementation and just leave a link to the repository? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/poojaranjan",
                    "index": "16",
                    "likes": "4",
                    "time": "26/01/2022-18:07:37",
                    "content": "An overview of EIP-1967 by @Amxx and @frangio.      ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/firnprotocol",
                    "index": "17",
                    "likes": "0",
                    "time": "10/11/2022-18:32:49",
                    "content": "hi @spalladino and others, thanks for this incredible work. i have a few questions. is the standard flow that the (initial) implementation contract needs to be deployed first, and then the proxy deployed? isn\u2019t it the case that someone could (if they wanted) invoke the implementation contract directly\u2014and that if they did this, then there would be a \u201cghost\u201d parallel state kept by the implementation contract, alongside that kept by the proxy contract? thanks again. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.84375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/spalladino",
                    "index": "18",
                    "likes": "0",
                    "time": "10/11/2022-19:15:46",
                    "content": "    firnprotocol:  is the standard flow that the (initial) implementation contract needs to be deployed first, and then the proxy deployed?   Yep!     firnprotocol:  isn\u2019t it the case that someone could (if they wanted) invoke the implementation contract directly\u2014and that if they did this, then there would be a \u201cghost\u201d parallel state kept by the implementation contract, alongside that kept by the proxy contract?   Yep, but the point is which contract is the \u201clegitimate\u201d one. Using that argument, you could deploy a copy of a popular contract and start invoking it, but no one will pay attention to it. There is one caveat to this: if the implementation contract has an instruction that can alter its code, then interacting with the implementation can lead to issues. The only opcode that can do this is SELFDESTRUCT, or doing a delegatecall to another contract with a SELFDESTRUCT operation. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.760416666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/firnprotocol",
                    "index": "19",
                    "likes": "0",
                    "time": "10/11/2022-19:22:23",
                    "content": "great! many thanks for your responses. i hope you\u2019ll humor me on another very basic question (which is more about Solidity overall than EIP-1967). if i am understanding things correctly, in this pattern, it becomes difficult to use the usual visibility control of functions on the implementation contract. for example, it seems that an internal, but state-changing, function, on the implementation contract, could be invoked via this mechanism: after all, the \u201ctechnical\u201d entrypoint of the EOA call is the proxy\u2019s fallback() external payable (which is of course external). but by the time we reach this function, an attacker (say) could submit calldata corresponding to an internal function of the implementation contract. he won\u2019t be blocked, since he has already \u201cgained entry\u201d to the proxy contract, via the fallback, and delegatecall treats the (internal) functions of the implementation contract as internal functions on the proxy contract. is this actually accurate, or am i mistaken? if so, are there any easy ways to deal with this? thanks again. edit: looks like this was a misunderstanding on my part, apologies. by definition of delegatecall, it will take the calldata supplied to the proxy, look for an external function on the implementation matching the selector, and then invoke that external function using the supplied calldata. internal functions don\u2019t even get selectors in the compiled implementation contract (rather, they\u2019re \u201cinlined\u201d), so it doesn\u2019t actually make sense to call one through delegatecall. so for all intents and purposes, the visibility works \u201cas expected\u201d. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.591269841269842
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/spalladino",
                    "index": "20",
                    "likes": "0",
                    "time": "10/11/2022-22:01:02",
                    "content": "    firnprotocol:  rather, they\u2019re \u201cinlined\u201d   The edit is correct, except for this bit. Internal functions are not necessarily inlined, but it\u2019s true they are not callable from the outside, which is what matters here. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/firnprotocol",
                    "index": "21",
                    "likes": "0",
                    "time": "11/11/2022-03:01:03",
                    "content": "right, my mistake; really what i meant is they don\u2019t get selectors (or at least aren\u2019t matched against when doing an external call). another tricky case is external view functions. it seems that these do have selectors, and are routed through the same delegatecall mechanism that mutating external calls are routed through. this is the only way that read-only functions could be directed to the proxy and work (even though the code isn\u2019t there). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.116071428571428
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/firnprotocol",
                    "index": "22",
                    "likes": "0",
                    "time": "11/11/2022-14:48:27",
                    "content": "a final question\u2014huge thanks for your patience. can you clarify the meaning of:  This function does not return to its internal call site, it will return directly to the external caller.  (see EIP-1967 for all refs.) by \u201cinternal call site\u201d, do you mean essentially back to the body of _fallback() (the only place where _delegate() is called)? if so, then i don\u2019t see the significance of this, since _delegate() is the final operation called within _fallback(), and _fallback() is moreover itself the final operation in both fallback() and receive(), the only places where it\u2019s called. so it seems to me to amount to the same thing (at least functionally speaking) whether _delegate() returns to its internal call site or not. i guess mechanically, the reason it doesn\u2019t return to its internal call site stems from the semantics of the return Yul instruction. i was aware that revert returns to the next-outermore caller, but i guess it\u2019s not surprising that return also does this. so i guess ultimately this is a point about solidity memory management. i take it it\u2019s safe to overwrite the memory location 0 as long as you\u2019re not returning to the internal call site (?). if so, why is this roughly? what is the downside\u2014besides possibly very slightly higher gas\u2014of implementing _delegate() this way (differences marked)?     function _delegate(address implementation) internal virtual {         assembly {             let location := mload(0x40) // <--- notice this             calldatacopy(location, 0, calldatasize()) // <--- and this             let result := delegatecall(gas(), implementation, location, calldatasize(), location, 0) // <--- etc             returndatacopy(location, 0, returndatasize())             switch result             case 0 {                 revert(location, returndatasize())             }             default {                 return(location, returndatasize())             }         }     }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.0575
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/firnprotocol",
                    "index": "23",
                    "likes": "0",
                    "time": "11/11/2022-16:08:26",
                    "content": "in fact, it seems that the following also works:     function _delegate(address implementation) internal virtual {         (bool success, bytes memory data) = implementation.delegatecall(msg.data);         assembly {             let size := mload(data)             switch success             case 0 {                 revert(add(data, 0x20), size)             }             default {                 return(add(data, 0x20), size)             }         }     }  perhaps it\u2019s a matter of taste, but it seems arguably more aesthetically appealing. it may be possible to get rid of the inline assembly altogether; i\u2019m not sure. edit: i can confirm that \u201cmy\u201d way leads to slightly larger (~234 bytes) bytecode. not sure exactly about the gas. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.613636363636364
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/spalladino",
                    "index": "24",
                    "likes": "1",
                    "time": "16/11/2022-15:21:40",
                    "content": "    firnprotocol:  so i guess ultimately this is a point about solidity memory management. i take it it\u2019s safe to overwrite the memory location 0 as long as you\u2019re not returning to the internal call site (?). if so, why is this roughly?   Rationale is that memory is cleared across EVM CALLs, so if _delegate is always returning from the current CALL frame, then memory will be cleared anyway, so it\u2019s safe to overwrite.     firnprotocol:  perhaps it\u2019s a matter of taste, but it seems arguably more aesthetically appealing. it may be possible to get rid of the inline assembly altogether; i\u2019m not sure.   Yup, my guess is that this implementation would also work. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.7272727272727275
                }
            ]
        }
    ],
    "group_index": "810"
}