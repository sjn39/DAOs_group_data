{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2489-deprecate-the-gas-opcode/3958",
            "title": "EIP-2489: Deprecate the GAS opcode ",
            "index": 3958,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "opcodes",
                "eip-2489"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "1",
                    "likes": "2",
                    "time": "24/01/2020-14:29:55",
                    "content": "Discussion topic for https://github.com/ethereum/EIPs/pull/2489 ",
                    "links": [],
                    "GPT-summary": "The post is a discussion topic for EIP-2489, which proposes to deprecate the GAS opcode in Ethereum. The author of the proposal is explaining the proposal, while third parties are giving constructive criticism, asking questions, and auditing/reviewing the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Amxx",
                    "index": "2",
                    "likes": "2",
                    "time": "24/01/2020-17:23:46",
                    "content": " This is a breaking change and has a potential to break contracts. The author expects no contracts of any value should be affected.  I\u2019m feeling unconfortable with that kind of claims \u2026 particularly while we are activelly discussing meta-transansaction repayment (which implies gas usage monitoring). Do you have stats/analysis to back this claim? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.958333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "3",
                    "likes": "0",
                    "time": "24/01/2020-18:44:22",
                    "content": "The EIP is not even merged as a draft (which would signal it is somewhat complete), so I would defer from arguing before it is merged. Only created this thread because it is a requirement for the EIP. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "4",
                    "likes": "0",
                    "time": "27/01/2020-17:43:23",
                    "content": "I don\u2019t understand the motivation of deprecating the GAS opcode. Can you explain it better? Seems like its related to UNGAS discussion. Perhaps this EIP should deal with all aspects of UNGAS, not just with the GAS opcode? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "5",
                    "likes": "0",
                    "time": "27/01/2020-21:57:19",
                    "content": "Regarding EIP 1077 this affect it\u2019s design, and if there is plans on getting this approved on mainnet I can simply change the architecture to don\u2019t use this opcode, however this will imply extra processing in the gas relayer side. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sohkai",
                    "index": "6",
                    "likes": "1",
                    "time": "29/01/2020-16:47:21",
                    "content": "aragonOS has a few places where we use the gas opcode to save gas to ensure we can return revert errors, including every user-controlled organization contracts (all proxies):  DelegateProxy CallsScript  While this particular change would not really negatively affect them, outside of potentially confusing error messages that make debugging more difficult, I am also interested in the rationale and what patterns we should expect to be reliable where we\u2019d like to ensure at least some measure of gas to handle error cases. ",
                    "links": [
                        "https://github.com/aragon/aragonOS/blob/next/contracts/evmscript/executors/CallsScript.sol#L60"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.87037037037037
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "7",
                    "likes": "1",
                    "time": "31/01/2020-06:06:15",
                    "content": "If that change is made alone, this will break some contract for sure. We for example use the gas opcode to ensure a meta-tx receive the proper amount of gas. If the gas opcode always return 2**156-1 then our contract will always assume the meta-tx received enough amount of gas while it might not be the case. Relayer could thus maliciously make the meta-tx fails while getting the reward, if any. I have been pushing for an EIP for quite some time that would remove the need for the gas opcode for taht particular use case (metatx) So if we could get this first  : ERC-1930 Allows specification of a strict amount of gas for calls Then maybe we could deprecate the GAS opcode But the problem still remain that existing contracts will be affected ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.347222222222222
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/wighawag",
                    "index": "8",
                    "likes": "0",
                    "time": "31/01/2020-06:08:57",
                    "content": "    3esmit:  Perhaps this EIP should deal with all aspects of UNGAS, not just with the GAS opcode?   Same thoughts here. For those not aware of the UNGAS proposal see the following video: https://youtu.be/0-Vld7GTRhQ?t=490 From what I gathered, the idea is that contract would not have access to gas anymore AND that an \u201cout of gas\u201d call will make the whole transaction revert, even if that call is at a lower depth. If so, I think if we started ethereum from scratch, it would be an interesting approach to gas, as this would remove the ambiguity we currently get when contracts call other contract and the call fails. But we would also need to support meta-transaction natively somehow because if an exception occurs down a chain of call as a result of a meta-tx and this revert the all tx in every case, the relayer would be paying for the failure. This would be a downgrade for what most meta-tx implementation do today : namely, ensure the relayer get paid even if the metatx inner call fails due to a lack ofgas In any case as pointed out by @karalabe in the video this will surely have impact on existing contract even if contract are versioned via EIP-1702 as a new contract could be calling old contract and vice versa. I am not sure how this would work. Like if a contract U (ungas enabled) call a contract O (old contract), what happen when O or whatever old contract it is calling down the line runs out of gas? And reversely, what if a contract O call a contract U and U run out of gas? Similarly what if O need to read gas value ? ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-1702"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.973542240587695
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "9",
                    "likes": "0",
                    "time": "03/02/2020-13:50:24",
                    "content": "It seems we also need replace THROW with REVERT to avoid gas-eating subcalls. Else this would leads to millions of eaten gas: https://github.com/Synthetixio/synthetix/issues/243 ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/pinkiebell",
                    "index": "10",
                    "likes": "0",
                    "time": "06/02/2020-03:44:13",
                    "content": "    wighawag:  So if we could get this first : ERC-1930 Allows specification of a strict amount of gas for calls Then maybe we could deprecate the GAS opcode But the problem still remain that existing contracts will be affected   ^ This can fix most of the general issues about removing GAS opcode . However, another problem I have in mind: If I have a system that wants to partly reimburse transaction costs of the current transaction in favour for the caller, how I\u2019m going to do that after UNGAS? For everyone wondering, that is a useful property in verification games / fraud proving systems. I could validate transaction receipts, but that creates a lot of problems and complexity. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.083333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/3esmit",
                    "index": "11",
                    "likes": "0",
                    "time": "07/02/2020-19:15:39",
                    "content": "For GnosisSafe, it will be less impactful if the default value is 0x0000000000000000000000000000000000000000000000000000000000000001, because it multiplies a calldata parameter _gasPrice against the return value of gasleft() (GAS opcode). So if the value returned is one, they can threat the _gasPrice as _totalFee without changing the contracts, and users with old software wont be authorizing the transfer of an unknown value. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.722222222222222
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sorpaas",
                    "index": "12",
                    "likes": "0",
                    "time": "15/02/2020-11:29:16",
                    "content": "Maybe relevant to this, also posted on Gitter:  Look for some reviews on this https://corepaper.org/ethereum/compatibility/leaky/ TLDR \u2013 gas metering is a leaky abstraction, and given current account models, it\u2019s impossible to make gas cost completely unobservable. As a consequence, even account versioning cannot completely fix future issues for gas cost changes. Instead, we should pursuit what I call \u201creasonable backward and forward backward compatibility\u201d, which can cover majority of cases. I do think this has noticeable amounts of implications (at least for me) for how we should view smart contract backward compatibility. This leads to 57-UNERR, which is a subset of 39-UNGAS and my opinion is that it\u2019s more perferrable, because removing GAS opcode is unnecessary. Also just in case if anyone wants to discuss this in detail, I\u2019ve just got an #ethereum Discord channel for Core Paper! https://discord.gg/BdRSvJD  TLDR \u2013 completely hiding GAS opcode\u2019s effect is not possible, unless we change the current account model. ",
                    "links": [
                        "https://specs.corepaper.org/57-UNERR",
                        "https://discord.gg/BdRSvJD"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.106292517006803
                }
            ]
        }
    ],
    "group_index": "993"
}