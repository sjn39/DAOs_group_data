{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/rwa0xx-mip81-coinbase-usdc-institutional-awards-interim-ces-domain-team-assessment/19171",
            "title": "[RWA0XX] MIP81 Coinbase USDC Institutional Awards \\xe2\\x80\\x93 Interim CES Domain Team Assessment ",
            "index": 19171,
            "category": [
                "Collateral Onboarding"
            ],
            "tags": [
                "rwa",
                "ces-001",
                "ces-domain-work",
                "mip81"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/CES_CU",
                    "index": "#1",
                    "likes": "10",
                    "time": "15/12/2022-01:06:14",
                    "content": "Author(s): David Krett (@dbkcan) Contributors: @amusingxl MIP Reference: https://forum.makerdao.com/t/mip81-coinbase-usdc-institutional-rewards/17703  This assessment deviates from the standard smart contract technical assessment format because of the idiosyncratic nature of the RWA collateral type.  Risk Summary/Key Takeaways   This interim assessment assesses 2 alternative technical implementations for MIP81 - these are:  MIP65 Implementation - traditional custodial arrangement with a Real World Arranger responsible for managing the amounts custodied through resolutions approved by Maker Governance; and Safebox Implementation - utilizing a POC smart contract that needs further development (to meet @cb_institutional legal and regulatory requirements)    Each approach uses similar MIP21 components and the technical risk of implementation using these in production components is considered low.   The safebox implementation, due to requiring a new smart contract, increases the level of technical risk, however, this is deemed as acceptable as it will be mitigated by a comprehensive audit and review by @CES_CU and @Protocol-Engineering.   The Safebox implementation has the additional advantage of generating enhanced on-chain transparency of the arrangement and allowing all transfers to and from the Safebox smart contract to be completed on chain without involvement of a real world counterparty. Under this implementation, the Real World Counterparty is solely required to agree the custody and institutional rewards arrangement with Coinbase - and does not need to be involved in the transfer of funds from and to Coinbase Custody. Further, in the medium term the smart contract could be automated with an IAM module.   Regardless of implementation - each implementation will require off-chain validation of the institutional rewards paid.   Counterparty and operational risks of implementing the real world arrangements required for either implementation are out of scope for this assessment and will need to be assessed by @strat-fin-core-unit.   This assessment will need to be updated once Real World arrangements are finalized and/or the Safebox smart contract is finalized.    General Information   Symbol: RWA0XX \u2013 Interim Technical Assessment  Token Name::  RWA-0XX  Ilk Registry Name: RWA0XX-A: Coinbase Rewards  Relevant MIP Information:  MIP81: Coinbase Institutional Rewards](MIP81: Coinbase USDC Institutional Rewards)    Total Supply: 1 WAD (1 * 10^{18))  Coinbase website: https://coinbase.com/  **Github Repository: **  MIP21 Toolkit Safebox Contract    Collateral Type Adapter:  The collateral will use the MIP21 authed join and exit functions.   Technical Information   Implements ERC20 Token Standard: Yes  Compiler Version: solidity:0.6.12  Decimals: 18  Overflow checks: Yes  Mitigation against overflow race-condition: No  Upgradeable contract patterns: No  Access control or restriction lists: No.  Non-standard features or behaviors: No.  Key addresses:  The auth governance address for RwaLiquidationOracle, RwaUrn and RwaConduit contracts. The operator address that is permitted to operate on the RwaUrn and RwaConduit contracts. This can be multiple addresses, however, each address must be approved by governance.     Technical Implementation Options  Notes/Context:    This is an interim technical assessment \u2013 which details 2 possible technical implementation approaches for MIP81 \u2013 these are:  MIP65 like implementation \u2013 a real world custodial arrangement (\u201cMIP65\u201d implementation) MIP65 like with governance authorized smart contract Safebox.sol acting as custodial wallet for any USDC subject to institutional rewards (\u201cSafebox\u201d implementation)    The selected approach will be determined by @strat-fin-core based on their selection of an appropriate real world entity to represent MakerDao with respect to agreements to be entered into with Coinbase and continued discussions on using a smart contract to custody the USDC instead of a traditional custodial arrangement   The original MIP81 did not contemplate the the Smart Contract solution as part of the specific implementation. Instead, the proposal required Coinbase to hold directly in a traditional custodial arrangement any USDC balances eligible for institutional rewards. However, under the assumption that the Safebox contract can be audited and implemented within a 2-4 week period. It is likely that the Smart contract implementation will not be the bottleneck to implementation, rather, the bottleneck, will be the finalization of real world arrangements.   Should final implementation include the smart contract custodial approach \u2013 this technical assessment will need to be updated to reflect the final agreed implementation of the Safebox contract \u2013 as the final versions of any contract will require agreement between Coinbase and MakerDao as well as a complete audit and security review of any contract to be implemented.   Whichever implementation is chosen this technical assessment should be reviewed to ensure that the chosen MIP21 smart contract implementations are appropriate for the finalized real world arrangement.   Whilst the technical implementation only differs by using the Safebox.sol smart contract as the target address for USDC swapped from DAI minted in the RwaUrn - the key differences in approach relate to transparency of all transactions \u2013 as all actions related to the funding and or management of the \u201ccustodial\u201d account occur on-chain \u2013 without the need for a real world entity to assume direct control of the USD funds.   Summarized below are the Transaction Outline and Smart Contract Assessments for each of the implementations:  MIP65 Implementation - Transaction Outline  Key Vault and Transaction Parameters     Parameter Value     Debt Ceiling (line); 1,600,000,000 (1.6 Billion)   Stability Fee (duty): 0   Onchain Liquidation Ratio (mat): 100%   Oracle price (pip/ds-value): 1,600,000,000 (1.6 Billion)   Debt write-off timelock (tau): 0   Hash of CBs final agreements with MakerDao (doc): N/A \u2013 to be provided once real world docs are executed   Recipient ETH address (kiss) to be provided by Real World Arranger and verified by CES   Liquidation Process MIP21c3   Office Hours on     Operational Security Considerations   Dai generated through RWA Vault\u2019s will technically be un-backed until it is invested in assets or the monies\u2019/tokens are held in accounts owned by MakerDao\u2019s real world trust.   As a result, Dai token holders are exposed to security, hacking, bugs, legal and/or malicious actions whilst funds are in transit. Therefore, it is important that the Real World arrangements ensure funds are held by a professional custody provider and that all transactions are validated by an independent third party.   Given the foregoing, we would recommend that transited funds be limited to or below our surplus buffer balance, this can be achieved by limiting draw-downs up to the debt ceiling in gradual amount\u2014either by using a lerp mechanism and/or limiting the available debt ceiling in executive spells.   We would also recommend that prior to execution of large draw-downs, an end-to-end test be completed using a small amount of $DAI (up to $DAI 1 million) be conducted to ensure that our transaction monitoring systems can confirm completion of all provided for payment flows for the transfer of USDC to Coinbase Custody   The review of Real World operational and legal arrangements as well as the security of Coinbase\u2019s custodial infrastructure is out of scope for this assessment, and is expected to be completed by @strat-fin-core.    Modifications to Standard MIP21  Manual Repayments to Surplus Buffer When deployed the RWA vault will have its on-chain stability fee set to 0, this is to reflect the variable payments expected with the Coinbase Institutional rewards \u2013 due to rate changes and fluctuations of the balances of USDC to be held in custody. Instead, the proposed implementation use a RwaJar contract and the RwaSwapInputConduit2 The RwaJar contract contains a function void() that allows the real world trust/any actor on a monthly basis to repay fee/interest remittances (DAI sent to this contract) directly to the surplus buffer. This module uses similar logic that MakerDAO is using currently to repay core unit smart contract DAI to the Surplus Buffer.  USDC Swap Conduits In order to support the swapping of DAI for USDC and vice-versa and to avoid unnecessary counterparty risks, we propose utilization of the following swap conduits  RwaSwapInputConduit2 \u2013 This is a permissionless conduit which allows the swapping of USDC to DAI for onward routing to the RwaJar contract  RwaSwapOutputConduit - This conduit facilitates the swapping of DAI minted in the RwaUrn prior to onward routing to the whitelisted Coinbase provided ETH account address   TransactionSetup \u2013 Deployment of MIP21 Components and Initial Custody Transfers  RWA0XX-mip65-implementation-setup-1885\u00d7801 183 KB  Please note, these steps assume similar real world agreements as per the MIP65 deployment and may need to be updated and/or re-architected depending on the required transaction flows agreed within the real world agreements/arrangements:   Real world arranger and real world agreements are completed by the relevant parties to facilitate legal and regulatory requirements of the proposed transaction.   Initial MIP21 Components are deployed including the following  RwaToken RwaUrn  RwaSwapOutputConduit - for swapping minted DAI with USDC prior to routing to Coinbase Prime account  RwaSwapInputConduit2 for RwaUrn (allowing USDC to be swapped prior to repayment to the RwaUrn)  RwaSwapInputConduit2 for RwaJar (allowing USDC to be swapped prior to repayment to the RwaJar)  RwaJar for payments of institutional rewards in DAI to the SB    Deploy executive spell that  Sets all vault parameters as detailed in \u201cKey Vault and Transaction Parameters\u201d above. Sets the Real World Arranger as the operator of the RwaUrn and all conduit contracts Sets DSPauseProxy as auth role for RwaUrn and all conduit contracts. Sets the Coinbase custody ETH address as the whitelisted destination address for USDC (kiss address) Sets the RwaUrn as the quitTo address in the RwaSwapInputConduit for the RwaUrn. Sets the RwaJar as the to address in the RwaSwapInputConduit for the RwaJar. Locks the RWA0XX token into the RwaUrn at the Oracle price of US$1.6 billion Sets an AutoLine for the RWA0XX-A ilk with a debt ceiling and cooldown period.    Draw initial USDC amount   Step 1.1: The real world arranger calls draw(x) on the RwaUrn which generates DAI and triggers a call to exit(x) routing the minted DAI to the RwaSwapOutputConduit.  Step 2: The real world arranger calls pick(address) on the RwaSwapOutputConduit with the address of the whitelisted Coinbase custody account  Step 3.1: The real world arranger calls push() on the RwaSwapOutputConduit which swaps DAI to USDC and sends it to the Coinbase custody account address in one atomic transaction (steps 3.1 to 3.3)    The real world arranger confirms to the Maker Community that the USDC has been placed with Coinbase custody if there is no confirmation to the Maker community Maker Governance can set the debt ceiling to 0. If the Vault is still undergoing initial drawdown the vault ceiling is increased after the specified cooldown period as specified in the instant access module (AutoLine)   For ongoing draw-downs after initial setup \u2013 needed to manage the amount under custody by Coinbase the real world arranger could be required to obtain governance approval for future mints \u2013 however, these provisions will need to be determined once the real world arrangements have been negotiated and finalized.    Repayment of USDC to PSM/Withdrawal From Coinbase Custody  RWA0XX-mip65-implementation-usdc-repayment885\u00d7804 188 KB  For repaying the institutional rewards - ie. returning USDC to the PSM it is likely that a Governance Spell will be required authorizing a resolution for the real world arranger to initiate repayment of the USDC with the PSM in accordance with the USDC balances authorized to be held by Maker governance within Coinbase Custody. Whilst, the nature of the real world arrangements will dictate the Maker governance requirements for repaying the balance (ie. resolutions), ideally when governance authorizes these actions they, likely should have the ability to fluctuate the vault debt ceiling accordingly. The transaction steps for repaying the USDC institutional rewards balances are:   The real world arranger requests that Coinbase custody send USDC in the amount of X to the RwaSwapInputConduit (Urn Conduit).   The real world arranger (or any actor) can call push(x) to have the USDC swapped and the resulting DAI used to repay vault debt.   Any actor can then call wipe() on the RwaUrn to have vault debt repaid.    Payment of Institutional Rewards to the Surplus Buffer  RWA0XX-mip65-implementation-rewards-payment885\u00d7803 204 KB  Presumably, the real world arrangements, could include a provision for the institutional fees to be accumulated with the balances held in custody. However, should the Maker community require monthly payments of these rewards to the surplus buffer, the RwaSwapInputConduit (Jar) and the RwaJar are provided for this purpose. Real world agreements could provide that Coinbase only make these payments to the Maker governance approved address of the RwaSwapInputConduit that points to the RwaJar deployed to burn the DAI in the surplus buffer. Generally, the steps to initiate the payment of rewards to the RwaJar would be:   The real world arranger instructs Coinbase custody (either by standing or otherwise negotiated instructions) to transfer the monthly rewards amount to the address of the RwaSwapInputConduit (Jar)   The real world arranger (or any other actor) can then call the permissionless push() function in the RwaSwapInputConduit to swap the USDC for DAI and send it to the RwaJar   Any actor can call void() on the RwaJar to pay the DAI balance to the Surplus Buffer    Emergency Shutdown   In case of Emergency Shutdown, the real world arranger will need to be authorized to send the USDC balances held in Coinbase custody to a new RwaCageSettlement contract that is currently under development and under review with PE.   Dai holders will be able to redeem Dai for RWA0XX tokens through the End module.   Subsequently,RWA0XX token holders can swap RWA0XX tokens for a proportionate amount of USDC in the RwaCageSettlement contract.   The RwaCageSettlement is still in development, but very close to being completed. When this contract is finished, it can also be reused for other RWA vaults.   The fact that this contract is not live in production yet is not a blocker to initiate the vault, as existing RWA also lacks this easy onchain redeem functionality in case of ES. The plan is to deploy this contract for MIP65 and MIP81 as soon as it is ready.    Safebox Implementation - Transaction Outline  Note:  The final form of the safebox contract has not yet been agreed with @cb_institutional  Some time was spent reviewing an initial implementation of the Safebox contract through this PR here . This was initially reviewed with Coinbase custody and PE. Unfortunately, we were informed by Coinbase around Nov 11, 2022 that for legal and regulatory reasons, even for a smart contract implementation they need the ability to deny a smart contract request to withdraw the USDC balances from the Safebox smart contract. Proposed functions to address this requirement were provided by @cb_institutional in this PR located here. Given that the requested denial of withdrawal functionality, does add complexity to the smart contract implementation, it was decided to present an interim technical assessment to the Maker community, as there remains the possibility of implementing the MIP81 from a technical perspective as a \u201cMIP65 Implementation\u201d. Should the community wish to pursue the Coinbase proposed smart contract implementation - this will be subject to further contract development work by @ces_cu and @Protocol-Engineering , and will require a smart contract audit given the large amount of USDC to be stored in this contract. This implementation for safebox is the initial proposed implentation - shown here and will need to be updated should the @cb_institutional proposed changes be accepted and a final smart contract implementation agreed - any final deployment will be subject to a smart contract audit**   Key Vault and Other Transaction Parameters     Parameter Value Chainlog Variable     Debt Ceiling (line); 1,600,000,000 (1.6 Billion)    Stability Fee (duty): 0    Onchain Liquidation Ratio (mat): 100%    Oracle price (pip/ds-value): 1,600,000,000 (1.6 Billion)    Debt write-off timelock (tau): 0    Hash of CBs final agreements with MakerDao (doc): N/A - to be provided once real world docs are executed    Recipient (Safebox Contract see below): to be provided once RwaSwapInputConduit urn deployed RWA010_A_INPUT_CONDUIT   Owner (Safebox Contract see below): to be obtained from chainlog MCD_PAUSE_PROXY   Custodian (Safebox Contract see below): to be provided by CB    SafeboxContract Address to be provided by CB once they deploy the Safebox.sol contract with the above parameters      Transaction Setup \u2013 Deployment of MIP21 Components, Safebox contract and Initial USDC Deposit NOTE: The below steps reflect the initial safebox implementation - shown here and will need to be updated should the @cb_institutional proposed changes be accepted and a final smart contract implementation agreed - any final deployment will be subject to a smart contract audit  RWA0XX-safebox-implementation-setup1038\u00d7790 218 KB    Real World MakerDao Trust entity signs CB (coinbase) prime agreement(s) with CB (Step 1) to include following provisions:   CB will act as custodian for a smart contract Safebox.sol  (Safebox) developed by MakerDao;  CB will deploy the Safebox contract Custodial duties will include CB verification and approval of any address changes requested by MakerDao as an executive action; As owner and custodian are immutable the owner and custodian will cooperate in agreeing an upgraded contract should it be required; USDC can be deposited and withdrawn at any time by owner  using the deposit and withdrawal functions provided for in the Safebox contract ; institutional rewards provisions detailing that monthly CB shall pay the agreed rates for these rewards in USDC to an a contract address (RWA010_A_INPUT_CONDUIT_JAR) to be specified by MakerDao governance.    Once all Real World documentation is in place CB will deploy the Safebox contract  (Step 2) with the following parameters:   owner: MakerDao governance proxy address (MCD_PAUSE_PROXY)- which will have full control of sending assets to be held in the Safebox contract;  custodian: approves any address change to be made to the recipient address by the owner;  recipient: receives assets from the safebox - in this case - a pre-deployed RwaSwap InputConduit contract whose chainlog variable name shall be (RWA010_A_INPUT_CONDUIT);    Upon execution of the executive spell the following will occur:  All MIP21 components will be deployed - addresses of RwaSwapInputConduit - for the RwaUrn (RWA010_A_INPUT_CONDUIT) will be the initial defined recipient of the Safebox contract and the owner of the Safebox contract will be MakerDao governance (MCD_PAUSE_PROXY), the RwaLiquitdationOracle will be deployed to set the urn to manual liquidation and a RwaJar with an RwaSwapInputConduit  address (RWA010_A_INPUT_CONDUIT_JAR) for receiving instutional rewards from Coinbase; MakerDao governance is hope\u2019d  on the RwaUrn contract and calls draw(x) to mint Dai (Step 3.1) - MakerDao Governance will in the executive spell swap the minted Dai for USDC which will be deposited in the Safebox contract using the contracts deposit(address token, uint256 amount) function.     Repayment of USDC to PSM/Withdrawal From Safebox NOTE: The below steps reflect the initial safebox implementation - shown here and will need to be updated should the @cb_institutional proposed changes be accepted and a final smart contract implementation agreed - any final deployment will be subject to a smart contract audit  RWA0XX-safebox-implementation-withdrawls1019\u00d7752 206 KB  To withdraw funds from the Safebox contract and return theUSDC to the PSM the following function calls will need to occur:   MakerDao governance - the owner of the Safebox contract calls withdraw(tokenContractAddress, amount) (Step 1.0) this sends the designated amount of USDC to the contract recipient (Step 1.1) which has been deployed with the address of the RwaSwapInputConduit contract (RWA010_A_INPUT_CONDUIT);   As we are using a permissionless function to convert the USDC to DAI from the RwaSwapInputConduit any actor or MakerDao governance can call push() (Step 2.0) which will swap the USDC held in the conduit for DAI (Step 2.1) and will transfer the DAI back to the urn (Step 2.2). Even though this contract is permissionless even if the swap to DAI were to fail MakerDao Governance has full access to any tokens in this contract through the yank(address token, address usr, uint256 amt) function;   Any actor can then call the wipe(x) function in the RWA urn to repay the vault debt and burn the returned DAI.    Payment of Monthly Rewards to The MD Surplus Buffer  RWA0XX-safebox-implementation-reward-payments1006\u00d7764 219 KB  NOTE: The below steps reflect the initial safebox implementation - shown here and will need to be updated should the @cb_institutional proposed changes be accepted and a final smart contract implementation agreed - any final deployment will be subject to a smart contract audit To receive monthly payments of institutional rewards from CB to the Surplus Buffer, the following steps will need to occur:   Coinbase will calculate the institutional rewards due to MakerDao by applying their rewards calculation to the USDC balances held within the Safebox smart contract and send the rewards to the address of the RwaSwapInputConduit for the RwaJar contract (RWA010_A_INPUT_CONDUIT_JAR) (Step 1);   Any Actor (possibly a keeper bot) can call the push() function (step 2.1). This will initiate the Swap of USDC to DAI (step 2.2) and transfer of the resulting DAI to the RwaJar (step 2.3)   Any Actor can then call void() on the RwaJar (step 3.0) which will lead to the burning of DAI and the accounting of the rewards within MakerDao\u2019s surplus buffer (step 3.1)   With respect to the collection of rewards, it should be noted we are reliant on off-chain processes with respect to collateral monitoring and determining the correct reward balances have been paid. Off-chain process for monitoring of the rewards\u2019 payment will be completed by @strat-fin-core-unit and are not in scope for review under this technical assessment.  Liquidation & Losses  As MakerDao governance has full control of the USDC funds held in the smart contract there is no risk of liquidation, however regulatory risk with respect to the USDC remains the same \u2013 whether we held USDC in the PSM or Safebox contract.   Emergency Shutdown   In case of Emergency Shutdown, the real world arranger will need to be authorized to send the USDC balances held in Coinbase custody to a yet to a new RwaCageSettlement contract that is currently under development and discussion with PE.   Dai holders will be able to redeem Dai for RWA0XX tokens through the End module.   Subsequently,RWA0XX token holders can swap RWA0XX tokens for a proportionate amount of USDC in the RwaCageSettlement contract.   The RwaCageSettlement is still in development, but very close to being completed. When this contract is finished, it can also be reused for other RWA vaults.   The fact that this contract is not live in production yet is not a blocker to initiate the vault, as existing RWA also lacks this easy onchain redeem functionality in case of ES. The plan is to deploy this contract for MIP65 and MIP81 as soon as it is ready.    Architecture  MIP21 & Safebox Contracts To provide an abstract representation of the MIP81 Coinbase Institutional Rewards the MIP21 standard contracts will be used subject to any modifications noted below. MIP21 will limit the amount of DAI that can be minted and converted to USDC by ensuring that DAI minting is limited to the Debt Ceiling (line) parameter and will turn off automated liquidation for the RWA vault established for this transaction. Notwithstanding liquidation is manual - MakerDao governance can effect a \u201cliquidation\u201d of this arrangement at any time, without restriction, by withdrawing all funds deposited to the Safebox.sol contract. For the MIP65 Implementation the same contracts will be utilized, without the Safebox.sol contract and with the assumption that the real world agreements/arrangements will determine the appropriate settings for the additional RwaSwapOutputConduit used in the transaction. For the proposed implementation, the following MIP21 contracts will be utilized which we summarize in detail below.  RwaToken RwaUrn RwaLiquidationOracle RwaJar RwaSwapOutputConduit  RwaSwapInputConduit - Jar/RwaSwapInputConduit - Urn  Safebox   RwaToken Source Code A standard implementation of the ERC20 token standard, with the balanceOf(address) of the deployer of the contract being set to 1 WAD at deployment. There are 18 decimals of precision. There are three state changing functions, that are all available to the token holder, and are specific to the ERC20 token standard:  transfer(address dst, uint wad) external returns (bool) transferFrom(address src, address dst, uint wad) public returns (bool) approve(address usr, uint wad) external returns (bool)   RwaUrn Source Code The RwaUrn is unique to each MIP21 collateral type. Aside from the core DSS wards, can, rely(address), deny(address), hope(address), and nope(address) functions, there are five functions:  file(bytes32, address) lock(uint256) free(uint256) draw(uint256) wipe(uint256) exit(uint256)  The file function can only be called by governance (via the auth modifier) The rest of the functions can only be called by those who have been given the operator permission (hope\u2019d or nope\u2019d) on the RwaUrn contract. And any Dai drawn by the RwaUrn can only be sent to the RwaOutputConduit address defined by governance when deploying the contract. In this case the RwaOutputConduit address will be MCD_PAUSE_PROXY, so that minted DAI can then be swapped for USDC and deposited to the Safebox smart contract by MakerDao governance.  RwaLiquidationOracle Source Code The RwaLiquidationOracle contract consists of six state-changing functions (besides the usual DSS rely(address), deny(address)), all protected by the auth modifier and can only be called by governance:   file can be called by governance to change the vow address (used in cull).  init is the initialization function. It takes 4 parameters:   ilk: name of the vault, in this case, RWA010.  val: estimated value of the collateral token.  doc: link to legal documents representing the underlying legal scheme.  tau: minimum delay between the soft-liquidation and the hard-liquidation/write-off.    bump can be called by governance to increase or decrease the estimated value of the collateral.  tell can be called by governance to start a soft-liquidation.  cure can be called by governance after a soft-liquidation has been triggered to stop it.  cull can be called by governance to start a hard-liquidation/write-off. This will mark all the remaining debt of the vault as bad debt and impact the Surplus Buffer (vow).  There is one externally accessible view function called good(bytes32) that anyone can use to check the liquidation status of the position. This function does not change contract state. This is not a typical Maker Oracle. It will only report on the liquidation status of RwaUrn, and can only be acted upon by governance. This oracle is not vulnerable to flash loan attacks or any manipulation aside from a governance attack.  RwaJar Source Code The RWAJar contract is a permissionless contract - containing the following functions:  A function void() which will transfer any DAI balance contained in the contract to the designated vow address immutably set on contract deployment. A function toss(uint256 wad) which will pull the specified amount of DAI from the sender\u2019s wallet to the vow. This function requires that the RWAJar contract has been previously approved by the msg.sender to transfer the specified amount of DAI. The relevant DaiJoin and Vow addresses that this contract references are established within the deployment spell - so there is no risk that the RWAJar will send DAI to a fraudulent account address.   RwaSwapConduits Source Code - RwaSwapOutputConduit Source Code - RwaSwapInputConduit  The RwaSwapOutputConduit is a permissioned contract that allows the swapping of DAI to USDC and routing of the generated USDC to a pre-whitelisted ethereum account address. RwaSwapOutputConduit has two key functions these are pick(address) and push()   pick(address) can be called by actors who have been granted the operator role, which usually would be the real world arranger for the transaction - if the solution requires the transfer of USDC to a real world custodian. Only addresses whitelisted by Maker Governance through kiss can be picked, ensuring that MakerDao has absolute control over the routing of funds. the push() function is permissioned and can only be called by a user who has been given push right over the contract (mate). When the function is called it will initiate a swap of the DAI held in the contract to USDC with the PSM and will route the resulting USDC to the picked address a quit() function has been added to allow the return of deposited DAI back to the RwaUrn in the event the PSM is not operational or if the vault operator decides to cancel an outgoing transaction. a yank() function is provided to allow a contract ward (ie. governance) to transfer any tokens to a designated address.  The RwaSwapInputConduit allows the swapping of held USDC balances to DAI for onward payment to either the RwaUrn and or RwaJar. Note distinct versions of this conduit need to be deployed for each Rwa component (ie. urn or jar ) - that this functionality is required for. Many of the functions are similar to the RwaSwapOutputConduit described above - however the push() function is permissionless and will automatically initiate a swap of USDC tokens held in the contract via the PSM into DAI and onward routing to the Constructor designated to address - normally the deployed address of an RwaJar and or RwaUrn. This contract contains similar quit() and yank() functions.  Safebox Source Code     Parameter Value     _vat MCD_VAT   _token 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 (Mainnet: USDC)   _owner MCD_PAUSE_PROXY   _custodian To be provided by Coinbase   _recipient RWA010_A_INPUT_CONDUIT    The initial draft of the contract provided the following functionality   A constructor that hard codes on deployment the parameters detailed above.   addCustodian(address) and removeCustodian(address) functions permissioned to the custodian that allows for the management of custodian addresses.   a permissioned withdraw(x) function which allows the contract owner/ward to trigger a withdrawal of the designated amount of USDC held in the contract, in the event of emergency shutdown this function becomes permissionless.   a permissioned function file(bytes32 what, address data) allowing an _owner to request the update of the _recipient address   a permissioned function approveChangeRecipient(address _recipent) allowing a _custodian to approve the change of the recipient address   With the intent that the approval of the _recipient address change be a custodial task to provide a rationale for the custodial arrangement. On Nov 11, 2022 we were informed that @cb_institutional for legal and regulatory compliance reasons would only approve the contract if they had the right to deny withdrawal of smart contract funds, however, if that right of denial is not executed by the custodian within a designated time period (WITHDRAW_DELAY) the withdrawal can proceed. On Nov 22, 2022 @cb_insitutional provide some proposed code for this functionality - which can be reviewed  here. The code provided by @cb_institutional has not yet been reviewed by @CES_CU  and @Protocol-Engineering in detail, as given the increased complexity of the smart contract @CES_CU believes that it is prudent to procure community feedback based on this interim technical assessment and @strat-fin-core-cu guidance as to how they would like to proceed with this implementation with respect to the real world arrangements and whether there is a preferred implementation. Note - should the community wish to proceed with the Safebox Implementation - time will be required to finalize and review of the code for the Safebox contract by PE, CES and Coinbase as well as several weeks to complete an audit  Contract Risk Summary The reader should note that his assessment is solely with respect to the smart contract transactions and interfaces required to effect the on-chain state changes required under the proposed architecture and excludes any technical functionality related to the technical infrastructure required for monitoring and uploading data to MakerDAO offchain storage and ongoing monitoring. Furthermore, this assessment does not take into consideration the operational and technical security of the counterparties Monetalis or Coinbase.  Risk Analysis Conclusion: Low technical risk  MIP21 Components The RWA code implementation resides within a sandbox-like environment, and any operation not related to locking, freeing, drawing, or wiping in the RwaUrn and RWAJar contracts must be voted on by governance. The code itself is lightweight. This implementation uses simplified Oracle and Urn contracts to achieve the functionality required for this specific instance of RWA. Furthermore, MIP21 contracts have been live in production for over a year, and are thus deemed low risk to reuse for this implementation.  Safebox Smart Contract The original Safebox implementation would appear to have low technical risk. However, as the final smart contract functionality to meet @cb_insititutional requirements remains to be agreed and finalized a final assessment of the contracts technical risk will need to await finalization as well as an audit, if the smart contract implementation is preferred. Whilst the Safebox smart contract implementation potentially becomes more complex, in terms of how to handle edge cases\u2019 relating to denial of withdrawal requests through the smart contract, it would be expected that the offchain agreements would provide for appropriate handling of these cases. Notwithstanding, this the smart contract approach whilst not perfect, does provide some advantages with respect to on-chain transparency (all withdrawals and funding of the institutional rewards Safebox contract are completely transparent on chain) and potential future automation of the institutional rewards arrangement. However, this comes at the expense of the additional technical risks, engineering and audit costs that would be required to complete an implementation under this arrangement.  S\u016brya\u2019s Description Report  Files Description Table     File Name SHA-1 Hash     /Users/dbk/Development/ces-core/mip21-toolkit/src/oracles/RwaLiquidationOracle.sol 88c2b4fac899d39af0198c1fb4776171e4249c19   /Users/dbk/Development/ces-core/mip21-toolkit/src/conduits/RwaSwapOutputConduit.sol d830aafa13c9ec3fba9e2bb5d6502ba40aa003e8   /Users/dbk/Development/ces-core/mip21-toolkit/src/conduits/RwaSwapInputConduit2.sol b5e3e710fda29afea1fd0c51f1c799d42ff1c83f   /Users/dbk/Development/ces-core/mip21-toolkit/src/tokens/RwaToken.sol 8d75732d93e0ad82a7bf3e0faf34550082291775   /Users/dbk/Development/ces-core/mip21-toolkit/src/conduits/RwaSwapConduits.integration.t.sol 6479ac7163af0de7384a366931bf34938ede0115   /Users/dbk/Development/ces-core/mip21-toolkit/src/jars/RwaJar.sol 8fbc97752a4535ec067601e5bf1cbb1ceb505ad3   /Users/dbk/Development/ces-core/mip21-toolkit/src/urns/RwaUrn2.sol ce511f510a5d456cf686a9f64a5b46a064043c31     Contracts Description Table     Contract Type Bases       \u2514 Function Name Visibility Mutability Modifiers          RwaLiquidationOracle Implementation      \u2514 rely External    auth   \u2514 deny External    auth   \u2514 add Internal       \u2514 mul Internal       \u2514  Public    NO\u2757\ufe0f   \u2514 file External    auth   \u2514 init External    auth   \u2514 bump External    auth   \u2514 tell External    auth   \u2514 cure External    auth   \u2514 cull External    auth   \u2514 good External    NO\u2757\ufe0f          RwaSwapOutputConduit Implementation      \u2514  Public    NO\u2757\ufe0f   \u2514 rely External    auth   \u2514 deny External    auth   \u2514 hope External    auth   \u2514 nope External    auth   \u2514 mate External    auth   \u2514 hate External    auth   \u2514 kiss External    auth   \u2514 diss External    auth   \u2514 file External    auth   \u2514 pick External    NO\u2757\ufe0f   \u2514 push External    onlyMate   \u2514 push External    onlyMate   \u2514 quit External    onlyMate   \u2514 quit External    onlyMate   \u2514 yank External    auth   \u2514 expectedGemAmt Public    NO\u2757\ufe0f   \u2514 requiredDaiWad External    NO\u2757\ufe0f   \u2514 _doPush Internal       \u2514 _doQuit Internal       \u2514 _add Internal       \u2514 _sub Internal       \u2514 _mul Internal              RwaSwapInputConduit2 Implementation      \u2514  Public    NO\u2757\ufe0f   \u2514 rely External    auth   \u2514 deny External    auth   \u2514 mate External    auth   \u2514 hate External    auth   \u2514 file External    auth   \u2514 push External    NO\u2757\ufe0f   \u2514 push External    NO\u2757\ufe0f   \u2514 quit External    onlyMate   \u2514 quit External    onlyMate   \u2514 yank External    auth   \u2514 expectedDaiWad Public    NO\u2757\ufe0f   \u2514 requiredGemAmt External    NO\u2757\ufe0f   \u2514 _doPush Internal       \u2514 _doQuit Internal       \u2514 _sub Internal       \u2514 _mul Internal              RwaToken Implementation      \u2514 add Internal       \u2514 sub Internal       \u2514  Public    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom Public    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f          RwaJar Implementation      \u2514  Public    NO\u2757\ufe0f   \u2514 void External    NO\u2757\ufe0f   \u2514 toss External    NO\u2757\ufe0f          RwaUrn2 Implementation      \u2514  Public    NO\u2757\ufe0f   \u2514 rely External    auth   \u2514 deny External    auth   \u2514 hope External    auth   \u2514 nope External    auth   \u2514 file External    auth   \u2514 lock External    operator   \u2514 free External    operator   \u2514 draw External    operator   \u2514 wipe External    NO\u2757\ufe0f   \u2514 quit External    NO\u2757\ufe0f   \u2514 add Internal       \u2514 sub Internal       \u2514 mul Internal       \u2514 divup Internal       \u2514 rad Internal        Legend     Symbol Meaning      Function can modify state    Function is payable     Inheritance Graph There are no inherited contracts in the MIP21 contacts (excluding tests).  Call Graph  output-onlinepngtools(7)1228\u00d78000 2.09 MB  ",
                    "links": [
                        "https://coinbase.com/",
                        "https://github.com/makerdao/mip21-toolkit",
                        "https://github.com/clio-finance/dss-safebox",
                        "https://github.com/makerdao/dss-gem-joins/blob/c2ba746fd45593136475aa5e308a57db87e7eb7f/src/join-auth.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/jars/RwaJar.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapInputConduit2.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapOutputConduit.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/tokens/RwaToken.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/urns/RwaUrn2.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaOutputConduit2.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapInputConduit2.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapInputConduit2.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/jars/RwaJar.sol",
                        "https://github.com/ces-core/dss-safebox/pull/1",
                        "https://github.com/ces-core/dss-safebox/pull/2/files",
                        "https://github.com/ces-core/dss-safebox/pull/1",
                        "https://github.com/ces-core/dss-safebox/pull/1",
                        "https://github.com/ces-core/dss-safebox/pull/1",
                        "https://github.com/ces-core/dss-safebox/pull/1",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/tokens/RwaToken.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/urns/RwaUrn2.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/oracles/RwaLiquidationOracle.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/jars/RwaJar.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapOutputConduit.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapInputConduit2.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapInputConduit2.sol",
                        "https://github.com/clio-finance/dss-safebox/blob/feat/safebox-contracts/src/Safebox.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/urns/RwaUrn2.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/oracles/RwaLiquidationOracle.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/jars/RwaJar.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapOutputConduit.sol",
                        "https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaSwapInputConduit2.sol",
                        "https://github.com/clio-finance/dss-safebox/blob/feat/safebox-contracts/src/Safebox.sol",
                        "https://github.com/ces-core/dss-safebox/pull/2/files",
                        "https://forum.makerdao.com/t/weekly-forum-recap/16247/36",
                        "https://forum.makerdao.com/t/mip81-coinbase-usdc-institutional-rewards/17703/248",
                        "https://forum.makerdao.com/t/interim-facilitator-assessment-for-ces-001/19196",
                        "https://forum.makerdao.com/t/request-to-poll-mip81-arranger-approval-amount-to-allocate/19420",
                        "https://forum.makerdao.com/t/mip81-implementation-design-legal-review-per-mip81c2/19423/9"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.34721207887467
                }
            ]
        }
    ]
}