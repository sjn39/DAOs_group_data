{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-721-subordinate/12479",
            "title": "ERC-721 Subordinate ",
            "index": 12479,
            "category": [
                "Tokens"
            ],
            "tags": [
                "nft"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "1",
                    "likes": "1",
                    "time": "07/01/2023-23:39:43",
                    "content": "A subordinate ERC721 contract is a type of non-fungible token (NFT) that follows the ownership of a dominant NFT. The dominant NFT can be an ERC721 contract that does not have any additional features. ADD-ON, Jan, 15th  To avoid confusion with hierarchical structures, a subordinate token does not perform any minting, transfer, approval, etc. When it is deployed, if address 0xA owns the token ID #100 of the dominant token, address 0xA also owns token ID #100 of the subordinate. If dominant #100 is tranferred, it emits a Transfer event, but the subordinate will be also \u201ctransferred\u201d but no events will be emitted. This is a very specific case, and it is best to look at the implementation to fully understand what it means.  Why In 2021, when we started Everdragons2, we had in mind using the head of the dragons for a PFP token based on the Everdragons2 that you own. Here is an example of a full dragon   github.com   ndujaLabs/ERC721Subordinate/blob/main/assets/Soolhoth.png     This file is binary. show original      and here is just the head   github.com   ndujaLabs/ERC721Subordinate/blob/main/assets/Soolhoth_PFP.png     This file is binary. show original      The question was, \u201cShould we allow people to transfer the PFP separately from the primary NFT?\u201d It didn\u2019t make much sense. At the same time, how to avoid that? ERC721Subordinate introduces subordinate tokens that are owned by whoever owns the dominant token. As a result, the subordinate token cannot be approved or transferred separately from the dominant token. It is transferred when the dominant token is transferred.  Implementation    GitHub    GitHub - ndujaLabs/erc721subordinate: An NFT which is subordinate to a... An NFT which is subordinate to a primary NFT. Contribute to ndujaLabs/erc721subordinate development by creating an account on GitHub.       Some use cases  A token that represents a specific aspect of a dominant token (like the Everdragons2 PFP). A token that represents an asset of the dominant token (think of the dominant as a wallet). A token that adds missed features to the dominant token.  You can see an ERC721Subordinate like a soulbound token, where the soul is not a wallet, but an NFT. Starting from this very simple concept, there are plenty of services that become possible thanks to it. ",
                    "links": [
                        "https://github.com/ndujaLabs/ERC721Subordinate/blob/main/assets/Soolhoth.png",
                        "https://github.com/ndujaLabs/ERC721Subordinate/blob/main/assets/Soolhoth.png",
                        "https://github.com/ndujaLabs/ERC721Subordinate/blob/main/assets/Soolhoth_PFP.png",
                        "https://github.com/ndujaLabs/ERC721Subordinate/blob/main/assets/Soolhoth_PFP.png",
                        "https://github.com/ndujaLabs/ERC721Subordinate/blob/main/assets/Soolhoth_PFP.png",
                        "https://github.com/ndujaLabs/erc721subordinate",
                        "https://github.com/ndujaLabs/erc721subordinate",
                        "https://ethereum-magicians.org/t/minimalistic-transferable-interface/12517"
                    ],
                    "GPT-summary": "The post explains the concept of a subordinate ERC721 contract, which is a type of non-fungible token that follows the ownership of a dominant NFT. The author provides an example of a dragon PFP token and explains how subordinate tokens can be used to represent specific aspects of a dominant token or add missed features to it. The post also mentions some potential use cases for subordinate tokens. The author is advertising the ERC721Subordinate contract and explaining its implementation, while also inviting feedback and questions from readers.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 6.3
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "2",
                    "likes": "3",
                    "time": "08/01/2023-00:58:34",
                    "content": "This seems very similar to EIP-6150: Hierarchical NFTs, an extension to ERC-721 or EIP-3652: Hierarchical NFT. ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-3652-hierarchical-nft/6963"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "3",
                    "likes": "0",
                    "time": "08/01/2023-02:03:02",
                    "content": "Thanks. I missed those extensions. Before starting working on it, I looked for existing proposal without results. If you don\u2019t get the naming it is quite hard to find info. This is the second time that I work on something for a while before discovering that it was mostly already there. An AI app would probably help. I will think about it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.408333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "4",
                    "likes": "1",
                    "time": "08/01/2023-02:28:19",
                    "content": "EIP-6150 aims to create a flexible, generic, and powerful structure, similar to how file systems work. On the other hand, ERC721Subordinate aims to solve a specific problem with the simplest possible solution, using existing assets that cannot be modified to add new features. For example, to prevent an infinite loop such as \u201cA is the father of B, which is the father of C, which is the father of A\u201d, it is necessary for all contracts in the tree to follow the same rules. However, this may not be possible with existing tokens. In contrast, ERC721Subordinate handles a simpler case where there is only a direct relationship between a parent and its children. More specifically, the child \u201cadopts\u201d its parent, without any change in the parent is required. It does not consider the possibility that children have their own children, as this would make the system difficult to manage without having control over all deployed smart contracts. In summary, while the two proposals may appear similar, they are actually quite different. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.306412337662337
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "5",
                    "likes": "0",
                    "time": "08/01/2023-18:25:28",
                    "content": "I would highly recommend to check out EIP-3652: Hierarchical NFT, since it more agile approach. Each existing NFT gets own address which could be managed by this NFT owner. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 7.199999999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "6",
                    "likes": "0",
                    "time": "08/01/2023-19:39:21",
                    "content": "That EIP is closed. I don\u2019t see any development there. Anyway I took a look at your implementation at   GitHub    GitHub - 1inch/ERC3652 Contribute to 1inch/ERC3652 development by creating an account on GitHub.      I think the concept is good but my understanding is that all the node in the hierarchy must follow the standard. That makes it very different from my proposal that aims to associate subordinate NFT to existing NFT that are immutable and cannot be modified. For example, let\u2019s say that BAYC wants to add features to their own Ape token, using a subordinate contract, fully linked to the Ape token, they can get that result. ",
                    "links": [
                        "https://github.com/1inch/ERC3652"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "7",
                    "likes": "0",
                    "time": "08/01/2023-19:55:49",
                    "content": "(I edited and simplified the post to make it more clear.) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "8",
                    "likes": "0",
                    "time": "15/01/2023-23:28:53",
                    "content": "I am considering implementing the EIP-5192 Minimal Soulbound NFTs standard, even though events can not be emitted by a subordinate contract, as the EIP-5192 makes the emission of events optional. I am not particularly fond of this approach, as I believe that such a simple interface should require the emission of events. In my opinion, it would be better to have two separate interfaces: interface IERC5192 {   function locked(uint tokenId) external view returns(bool); }  and interface IERC5192Extended is IERC5192 {   // events MUST be emitted   event Locked(uint tokenId);   event Unlocked(uint tokenId); }  This way, a subordinate contract could implement the first interface without being required to implement the second. However, I understand that a compromise solution is better than no solution at all, so I may proceed with implementing it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.533333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "9",
                    "likes": "0",
                    "time": "18/01/2023-22:01:02",
                    "content": "ERC3652 requires absolutely no support from NFT. It introduces new ownership layer for all existing and future NFTs. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0606060606060606
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "11",
                    "likes": "0",
                    "time": "20/01/2023-20:33:09",
                    "content": "    k06a:  ERC3652 requires absolutely no support from NFT. It introduces new ownership layer for all existing and future NFTs.   Looking at the closed PR and the actual proposal, I got what you mean. You are totally right, but you are also wrong suggesting to adopt it to solve the problem I am trying to solve, because that does not solve the issue. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.630986201298701
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "12",
                    "likes": "0",
                    "time": "21/01/2023-00:07:22",
                    "content": "I thought you are looking for a way transfer you NFT with sub-NFTs. This would work for this purpose. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "13",
                    "likes": "0",
                    "time": "21/01/2023-21:06:32",
                    "content": "That is not what we are trying to solve here. A subordinate NFT has not control whatsoever on the ownership. It is a satellite of the dominant token. It just adds features to an existing token, without requiring any change in the existing token. But maybe I am just not understanding it. Can I create a non-transferable token that gives a hat to any Bored Ape token, so that if I own BAYC #3 I have Bore Hat #3 and if I transfer BAYC #3 the new owner is also the owner of the Hat #3 without doing anything with the Hat NFT? If that is possible with ERC3652, we can support it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.295454545454545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "14",
                    "likes": "0",
                    "time": "22/01/2023-13:57:10",
                    "content": "Yes, exactly. With EIP-3652 every existing NFTs and not-yet-exising NFTs get address for OWNING any other asset including NFTs. And owner of NFT can spend and use assets owned by any NFT. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.3125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "15",
                    "likes": "0",
                    "time": "22/01/2023-20:22:18",
                    "content": "I am not convinced, yet, but that sounds good. I will try to better understand your proposal. Thanks ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.333333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "16",
                    "likes": "0",
                    "time": "22/01/2023-20:39:14",
                    "content": "    k06a:  Yes, exactly.   I studied your doc at  github.com/ethereum/EIPs         [WIP] EIP-3652: Introduce hierarchical NFT   ethereum:master \u2190 1inch:hierachical-nft              opened 11:36PM - 12 Jul 21 UTC                 k06a               +102 -0       WIP       and I studied your implementation and looking at the tests at  github.com   1inch/ERC3652/blob/master/test/ERC3652.js const { expect } = require('chai');  const ERC3652Mock = artifacts.require('ERC3652Mock'); const ERC3652Deployer = artifacts.require('ERC3652Deployer'); const ERC3652Proxy = artifacts.require('ERC3652Proxy');  describe('ERC3652', async function () {     let w1;      before(async function () {         [w1] = await web3.eth.getAccounts();     });      beforeEach(async function () {         this.deployer = await ERC3652Deployer.new();         this.nft = await ERC3652Mock.new('Token', 'TKN', this.deployer.address);     });      it('should be ok', async function () {         await this.nft.mint(w1, 123);       This file has been truncated. show original      While I find you proposal brilliant, I really don\u2019t get how that can solve the same issue that I am trying to solve here. What we are doing here is to deploy a new contract that, after the deploying, does not need and does not allow any interaction. Everything exists just because the dominant token exists. I don\u2019t see how that could be done with your proposal. If you take a look at my implementation at erc721subordinate/ERC721Subordinate.sol at main \u00b7 ndujaLabs/erc721subordinate \u00b7 GitHub I think that it should be clear. ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/3652/files#diff-b9a08dc3c2c8244137775be541ac3de41018b803f07e2ec17b31f71185efbc03",
                        "https://github.com/k06a",
                        "https://github.com/ethereum/EIPs/pull/3652/files",
                        "https://github.com/1inch/ERC3652/blob/master/test/ERC3652.js",
                        "https://github.com/1inch/ERC3652/blob/master/test/ERC3652.js",
                        "https://github.com/1inch/ERC3652/blob/master/test/ERC3652.js",
                        "https://github.com/ndujaLabs/erc721subordinate/blob/main/contracts/ERC721Subordinate.sol"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.3300189393939394
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "17",
                    "likes": "0",
                    "time": "22/01/2023-21:20:08",
                    "content": "Please check out this branch with this simple implementation: GitHub - 1inch/ERC3652 at feature/simplification ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "18",
                    "likes": "0",
                    "time": "23/01/2023-21:22:56",
                    "content": "That is useful, thanks. However, based on what I see in the test at ERC3652/ERC3652.js at feature/simplification \u00b7 1inch/ERC3652 \u00b7 GitHub, it appears that a new proxy contract must be deployed for each specific token ID of the NFTMock. I think that the ERC-3652 standard can be useful in many situations, but it may not be suitable for our particular situation. If we have 10,000 tokens, it would be much more efficient to deploy a single subordinate contract that can handle all of them, rather than calling the factory 10,000 times to deploy a new proxy contract for each token ID.  image1338\u00d7288 48.9 KB  Am I mistaken? ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/8/8ff758518476c5d39ee94de88a02ee640b655491.png"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.13248556998557
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/k06a",
                    "index": "19",
                    "likes": "1",
                    "time": "23/01/2023-21:31:05",
                    "content": "Yep, it requires deploying small proxy contracts for each NFT, but good thing is that they could be deployed on demand. You could use their addresses to receive assets/NFTs without deployments. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/sullof",
                    "index": "20",
                    "likes": "0",
                    "time": "24/01/2023-00:26:03",
                    "content": "Thanks for the clarification. For Everdragons2, we will stick to the current approach because it is much more efficient and reaches the goal \u2014 giving genesis tokens\u2019 owner a new token just by deploying its contract. However, I think that your proposal is brilliant, and I may use it for another project where it would make a lot of sense. Let me know if I can help in any way with that. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.736363636363636
                }
            ]
        }
    ],
    "group_index": "301"
}