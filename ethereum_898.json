{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2242-transaction-postdata/3557",
            "title": "EIP-2242 Transaction postdata ",
            "index": 3557,
            "category": [
                "EIPs",
                "Core EIPs"
            ],
            "tags": [
                "eth1x"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/adlerjohn",
                    "index": "1",
                    "likes": "0",
                    "time": "17/08/2019-00:25:45",
                    "content": "Link to EIP on GitHub. The discussion on transaction calldata gas cost reduction\u2014EIP-2028\u2014yields numerous data points that support extremely aggressive reduction in costs of posting data on-chain, in order to curb state growth. This EIP introduces a separate field in transactions for data that is used exclusively for this purpose (i.e., not readable in the EVM).     EIP-2028: Transaction data gas cost reduction EIPs       This is to discuss the EIP I am currently creating. Will fill this out later     ",
                    "links": [
                        "https://ethereum-magicians.org/t/eip-2028-transaction-data-gas-cost-reduction/3280"
                    ],
                    "GPT-summary": "The post is about a proposal, EIP-2242, which introduces a separate field in transactions for data that is used exclusively for reducing the cost of posting data on-chain. The author is asking for feedback on the proposal, and mentions that they will provide more information later. A 3rd party could give constructive criticism or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "Token economics",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 4.84375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "2",
                    "likes": "0",
                    "time": "19/08/2019-07:44:52",
                    "content": "Thanks @adlerjohn for building on top of 2028. To be honest, I don\u2019t see the point in having an extra field. As explained in the analysis, going through the EVM costs less than 0.3 gas per word. I don\u2019t see the point of adding an extra field as it would create a formatting and development overhead without strong benefits. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.119047619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adlerjohn",
                    "index": "3",
                    "likes": "0",
                    "time": "19/08/2019-13:57:49",
                    "content": "    guthlStarkware:  As explained in the analysis, going through the EVM costs less than 0.3 gas per word.   This analysis, I\u2019m presuming?    EIP-2028: Transaction data gas cost reduction   For a calldata input of size N bytes, if this verification operations were done in the EVM, the gas cost would be 30 gas for the first invocation of keccak and 6 gas for each additional word (32 bytes), totaling 30+6 * N / 32 gas. Asymptotically (neglecting the first 30 gas) this gives a gas price of roughly 6 for every 32 bytes, or 0.2 gas per byte.   You\u2019d have to account for the costs of Merkeizing the data (some schemes require this, rather than simple hashing), which would end up quite a bit higher. You\u2019d also have to account for the cost of calldata itself, which is going to be 16 gas per byte. So the costs of performing this operation on-chain are actually quite high.     guthlStarkware:  I don\u2019t see the point of adding an extra field   If you\u2019re using fraud proofs, you can\u2019t simply re-post a transaction and check the calldata, as the transaction\u2019s calldata and the contract call\u2019s calldata may be completely different:   twitter.com          Nick Johnson (\ud83d\udcdb arachnid.eth) (nicksdjohnson)     @jadler0 @peter_szilagyi The call to `foo` is part of the transaction and all full nodes (presently) sync it. But in this scenario, the input to `bar` is what you want, and ,`foo` could have done any arbitrary transformation to produce it.   6:35 PM - 28 Jul 2019       Additionally, the separate field is particularly useful for multi-threaded data availability, which is going to be the subject of a sister EIP. ",
                    "links": [
                        "https://twitter.com/nicksdjohnson/status/1155672897756774400",
                        "https://twitter.com/nicksdjohnson/status/1155672897756774400",
                        "https://twitter.com/nicksdjohnson/status/1155672897756774400",
                        "https://ethresear.ch/t/multi-threaded-data-availability-on-eth-1/5899"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.320833333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "4",
                    "likes": "0",
                    "time": "22/08/2019-07:24:43",
                    "content": "    adlerjohn:  If you\u2019re using fraud proofs, you can\u2019t simply re-post a transaction and check the calldata, as the transaction\u2019s calldata and the contract call\u2019s calldata may be completely different:   How would it be different? Also, is not collecting the transmission data easy to extract from the sync? If you want to push fraud proof, the first person to post the data needs to show the link between the statement and the data. Therefore, needs to be part of the EVM. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.683333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adlerjohn",
                    "index": "5",
                    "likes": "0",
                    "time": "22/08/2019-10:55:51",
                    "content": "    guthlStarkware:  How would it be different?   Did you read the linked Twitter thread? It actually answers this exact question.     guthlStarkware:  Also, is not collecting the transmission data easy to extract from the sync?   Not really, at least not without breaking backwards compatibility.   twitter.com          Nick Johnson (\ud83d\udcdb arachnid.eth) (nicksdjohnson)     @jadler0 @peter_szilagyi Re your suggestion: call data is just a byte blob, which contracts have full access to. You can't give the first bytes special meaning without breaking existing contracts. You'd have to add a new field indicating the data type of call data.   7:49 PM - 28 Jul 2019           guthlStarkware:  If you want to push fraud proof, the first person to post the data needs to show the link between the statement and the data.   Yes, you would need to save something in state, in this case some unique identifier for the transaction. Unfortunately, I just realized there is no opcode for such an identifier (though one was proposed). It would be fairly trivial to implement as a dependency to this EIP, or this EIP could be wrapped into the sister one I mentioned above. I personally prefer the former, what do you think?     guthlStarkware:  Therefore, needs to be part of the EVM.   The linked ethresearch post describes how this would be done in a backwards-compatible manner:  Clients can then go through transactions in a block (or even in their mempool!) and compute the reduction, inlining the result into the appropriate transaction\u2019s calldata.  ",
                    "links": [
                        "https://twitter.com/nicksdjohnson/status/1155685078774820865",
                        "https://twitter.com/nicksdjohnson/status/1155685078774820865",
                        "https://github.com/ethereum/EIPs/issues/222"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.903288840788841
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "6",
                    "likes": "0",
                    "time": "22/08/2019-12:05:23",
                    "content": "My bad! I did not see it was a twitter thread. Went right away on the multithread part. Getting back to you  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.017857142857143
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adlerjohn",
                    "index": "7",
                    "likes": "0",
                    "time": "22/08/2019-12:35:30",
                    "content": "Haha it\u2019s all good. I was actually confused as heck at first as well, when @Arachnid brought it up. The essence is here:   twitter.com          Nick Johnson (\ud83d\udcdb arachnid.eth) (nicksdjohnson)     @jadler0 @peter_szilagyi It's only saved if it's transaction input data. If it's call data from one contract to another, it's not available except to an archive node.  You *can* make your scheme only work for externally owned accounts, but that eliminates a lot of the composability ethereum enables.       John Adler @jadler0           My intuition is that making this special \"calldata\" only usable once, and only for two very specific operations, it essentially becomes a call to a pure reducing func. So the client can compute the result in parallel without having to wait for sequential transaction execution.           6:00 PM - 28 Jul 2019       with the note that \u201cdata only available to an archive node\u201d isn\u2019t easy to re-post on-chain in a provably attributable manner. ",
                    "links": [
                        "https://twitter.com/nicksdjohnson/status/1155669590032228352",
                        "https://twitter.com/jadler0/status/1155645728909340673",
                        "https://twitter.com/nicksdjohnson/status/1155669590032228352"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.542989417989418
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/guthlStarkware",
                    "index": "8",
                    "likes": "0",
                    "time": "22/08/2019-12:55:25",
                    "content": "So, I\u2019m going to reply superficially. I don\u2019t see relying on archive node to be a no go as any full node can recreate an archive node. Data Availability for layer 2 is a worst case scenario mechanism. Using a simple calldata with a merklelizer precompile is probably the easiest path. In any case, this is very superficial answer as I did not have the time to look at all the links you posted. Let me take some time to dive in and understand it better  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.05
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MrChico",
                    "index": "9",
                    "likes": "0",
                    "time": "19/09/2019-20:56:43",
                    "content": "    adlerjohn:  Did you read the linked Twitter thread? It actually answers this exact question.  guthlStarkware:   I\u2019m not sure I understand why this is a counterargument. It seems like it would be quite easy to include fraud proofs in tx data, just send a tx to a noop contract (for exmple with code 0x00). To get your fraud proof, simply get the tx.data. What am I not getting here? On another note, even if your tx would run out of gas, your postdata would still be available and serve its purpose. It doesn\u2019t seem quite right from a design perspective to retain the same utility regardless of how much gas would be used. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.732804232804233
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adlerjohn",
                    "index": "10",
                    "likes": "0",
                    "time": "19/09/2019-23:05:22",
                    "content": "    MrChico:  It seems like it would be quite easy to include fraud proofs in tx data, just send a tx to a noop contract (for exmple with code 0x00 ).   The linked explanation is for sending from a contract, not sending to a contract. There\u2019s no easy way to link calldata to a transaction\u2019s data field, as the calldata may come from a contract (modifying data).     MrChico:  On another note, even if your tx would run out of gas, your postdata would still be available and serve its purpose. It doesn\u2019t seem quite right from a design perspective to retain the same utility regardless of how much gas would be used.   I agree. As written, that seems to be what happens. The EIP should be re-written to use the same semantics as calldata (which I\u2019m assuming is: if the account doesn\u2019t have enough gas to pay for calldata, then the transaction is invalid, rather than valid but reverting). Good catch. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.001322751322751
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MrChico",
                    "index": "11",
                    "likes": "0",
                    "time": "20/09/2019-11:53:22",
                    "content": " The linked explanation is for sending  from  a contract, not sending  to  a contract. There\u2019s no easy way to link calldata to a transaction\u2019s  data  field, as the calldata may come from a contract (modifying  data ).  Exactly, this is why the linked explanation seems irrelevant to the topic at hand. Your proposal wouldn\u2019t allow contracts to submit tx postdata either (because only EOA can make transactions). There doesn\u2019t seem to provide any substantial benefit over just using the tx.data field for your purposes ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.416666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/adlerjohn",
                    "index": "12",
                    "likes": "0",
                    "time": "20/09/2019-13:17:05",
                    "content": "    MrChico:  There doesn\u2019t seem to provide any substantial benefit over just using the tx.data field for your purposes   I agree! I split up the whole proposal into what will become a series of EIPs. This first one on its own is in fact basically pointless. See twitter thread    twitter.com    John Adler (jadler0)  @nicksdjohnson @seven7hwave @realLedgerwatch The benefits over e.g. just using calldata isn't fully realized in this EIP, but should be in a future one. Namely, you can specify a precompile (or bytecode!) which can be used to process the postdata, and make only the results available to the EVM.  5:35 PM - 18 Sep 2019     1            ",
                    "links": [
                        "https://twitter.com/jadler0/status/1174859441377828865",
                        "https://twitter.com/jadler0/status/1174859441377828865"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.857142857142858
                }
            ]
        }
    ],
    "group_index": "898"
}