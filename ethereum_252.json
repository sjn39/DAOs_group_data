{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-6093-custom-errors-for-commonly-used-tokens/12043",
            "title": "EIP-6093: Custom errors for commonly-used tokens ",
            "index": 12043,
            "category": [
                "EIPs"
            ],
            "tags": [
                "errors",
                "token"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/ernestognw",
                    "index": "1",
                    "likes": "4",
                    "time": "06/12/2022-21:53:52",
                    "content": "Hello community, Since the introduction custom errors in Solidity in v0.8.4, there\u2019s now a more expressive and gas-efficient way of reverting changes during a transaction. Given this new addition, we\u2019re proposing a list of standard errors to be used for the standard tokens (ERC20, ERC721, and ERC1155), so the clients and implementers can expect an insightful and structured way from a transaction error.   Ethereum Improvement Proposals   ERC-6093: Custom errors for commonly-used tokens Lists custom errors for common token implementations      ",
                    "links": [
                        "https://eips.ethereum.org/EIPS/eip-6093",
                        "https://eips.ethereum.org/EIPS/eip-6093"
                    ],
                    "GPT-summary": "The author of the post is explaining a proposal for custom errors for commonly-used tokens in Solidity. The proposal suggests a list of standard errors to be used for ERC20, ERC721, and ERC1155 tokens. The post also invites feedback and constructive criticism from the community and proposes a way to structure transaction errors.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Token economics",
                        "Community and engagement"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.946969696969697
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dcota",
                    "index": "2",
                    "likes": "2",
                    "time": "26/12/2022-16:02:48",
                    "content": "This is a very good initiative. For the curious out here, it will be interesting to have a reference of the bytecode savings for switching from old revert strings (for example in ERC20) to error messages. In the Rationale section for domain; perhaps the contract name itself could be suggested to help with the compiler DeclarationError in situations where the ErrorPrefix and Subject are the same. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.036111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ernestognw",
                    "index": "3",
                    "likes": "1",
                    "time": "27/12/2022-20:05:32",
                    "content": " This is a very good initiative. For the curious out here, it will be interesting to have a reference of the bytecode savings for switching from old revert strings (for example in ERC20) to error messages.  Thanks for your comments! Actually, I just made a quick repo test for comparing the gas savings. You can find them here.  image1680\u00d71250 257 KB  Look at the differences between custom errors and short strings vs long strings, which are the majority of the cases TLDR is that EIP-6093\u2019s custom errors are better in gas usage than general revert strings unless for reverts with empty strings.  In the Rationale section for domain ; perhaps the contract name itself could be suggested to help with the compiler DeclarationError in situations where the ErrorPrefix and Subject are the same.  I see what you mean. Although it can solve the DeclarationError, it\u2019ll also change the error selector depending on the contract name, and that might affect standardization overall (eg. Metamask would need to know the contract name just to calculate the selector and show a proper error message in the UI). What do you think? ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/b/b3a347cd09dcd24f81107f4131a6a228d3bc1a94.jpeg",
                        "https://ethereum-magicians.org/t/eip-friends-anyone-going-to-ethdenver-2022/12409/3",
                        "https://ethereum-magicians.org/t/ethereum-magicians-session-in-denver-2023/12610/7"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.562990196078431
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dcota",
                    "index": "4",
                    "likes": "0",
                    "time": "03/02/2023-03:05:27",
                    "content": "Very nice report on the gas savings. In my opinion, the change to custom errors should become the norm on new deployments of these common token implementations. Assuming this makes its way to an OpenZeppelin implementation, would this change be implemented directly in the existing token contracts, for instance: ERC20, or would it be within the ./extensions folder? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.895454545454546
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ernestognw",
                    "index": "5",
                    "likes": "2",
                    "time": "03/02/2023-15:43:16",
                    "content": "We aim to implement these changes in OpenZeppelin Contracts for the next 5.0 version, so yes, it\u2019s expected to make into OZ\u2019s ERC20 implementation. Also, the same rationale is going to be used for other errors, see this discussion. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party giving information about implementation of proposal"
                    ],
                    "Sentiment": 4.71875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PaulRBerg",
                    "index": "6",
                    "likes": "0",
                    "time": "05/02/2023-10:36:10",
                    "content": "I am wholeheartedly in favor of this, this is an awesome proposal. After reading the entire EIP, this is my feedback:  Must or Must Not? I am a bit confused by this statement in the \u201cSpecification\u201d section:  This EIP defines standard errors that may be used by implementations in certain scenarios, but does not specify whether implementations should revert in those scenarios  But then you go on and say something like this underneath each error:  MUST be used when \u2026  I might be getting the wrong end of the stick when it comes to what \u201cMUST\u201d means in this context, but don\u2019t the statements above contradict one another?  Prefix Underscores Happy to see my proposal to use the name of the contract (in this case, the EIP number) as a custom error prefix. However, I like it better when the prefix is separated by an underscore, so that the contract name gets separated from the rest of the custom error name. Underscores in Solidity have become popular with the advent of Foundry (see the references to test naming here) Here\u2019s an example for what I mean: error ERC20_InsufficientBalance(address sender, uint256 balance, uint256 needed); error ERC20_InvalidSender(address sender); error ERC20_InvalidReceiver(address receiver); error ERC20_InsufficientAllowance(address spender, uint256 allowance, uint256 needed); error ERC20_InvalidApprover(address approver); error ERC20_InvalidSpender(address spender);   Zero Address I wonder if it isn\u2019t a bit too restrictive to demand that implementors MUST revert when the subject is the zero address (e.g. ERC721InvalidSender)? I personally never had a need for allowing transfers to and from the zero address, but I also can\u2019t think of any good reason why this should be prevented at the EIP level (besides maybe preventing fat-finger errors?).  Closing Besides the points above and a few minor wording suggestions I left in this PR, the EIP looks great to me. I can\u2019t wait for OpenZeppelin v5 to be out. ",
                    "links": [
                        "https://book.getfoundry.sh/tutorials/best-practices",
                        "https://github.com/ethereum/EIPs/pull/6444"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.785557644110275
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ernestognw",
                    "index": "7",
                    "likes": "1",
                    "time": "05/02/2023-21:21:07",
                    "content": "Thanks for your feedback @PaulRBerg, I\u2019m glad the proposal makes sense to you. Let me answer your comments:  but don\u2019t the statements above contradict one another?  In a sense, yes. We discussed this internally and realized there\u2019s no way of making every previous token implementation use these errors always (backwards compatibility), so we can\u2019t say MUST since it\u2019s not even possible. Still, we put MUST to highlight the absolute requirement of using one of the standard errors when its characteristics are those of an EIP-6093 error. What do you think would be the most accurate approach?  Underscores in Solidity have become popular with the advent of Foundry (see the references to test naming here)  I think the test reference is becoming popular when it comes to testing, I haven\u2019t seen many verified contracts adopting the mix between PascalCase and snake_case (I\u2019ve seen double __, tho). I searched for a reference, and the Solidity docs guide doesn\u2019t include such a case. https://docs.soliditylang.org/en/v0.8.17/style-guide.html#naming-styles It also adds reasons to turn off Solhint, which may be dangerous for newbies.  I wonder if it isn\u2019t a bit too restrictive to demand that implementors MUST revert when the subject is the zero address  This is also related to the ambiguity in the Must vs Must not category. The idea is that errors MAY be added, but when they\u2019re added, they MUST be used for the described cases. In any case, EIP-712 and EIP-1155 explicitly state zero address reverts, so the idea is to cover those cases in which the original EIP requires them to revert. We also thought about a ZeroAddress() standard error but we think it loses important context information. For example, does ZeroAddress means canceling an action?, is the ZeroAddress coming from a bad implemented ecrecover? etc. How do you see the zero address case addressed?  Besides the points above and a few minor wording suggestions I left in this PR  Thanks! I just approved  ",
                    "links": [
                        "https://docs.soliditylang.org/en/v0.8.17/style-guide.html#naming-styles",
                        "https://protofire.github.io/solhint/docs/rules/naming/func-name-mixedcase.html",
                        "https://github.com/ethereum/EIPs/pull/6444"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.481944444444444
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PaulRBerg",
                    "index": "8",
                    "likes": "0",
                    "time": "06/02/2023-17:20:52",
                    "content": "    ernestognw:  What do you think would be the most accurate approach?   Get rid of that statement? It\u2019s super ambiguous. I think that it is an implicit assumption that EIP-6093-compatible token implementations will NOT be backward compatible with older implementations. Rewrite the language to say something like this:     ernestognw:  It also adds reasons to turn off Solhint, which may be dangerous for newbies.   Fair enough!     ernestognw:  EIP-712 and EIP-1155 explicitly state zero address reverts   Oh, I didn\u2019t know this. Makes sense to also apply this rule to EIP-20, too, then.     ernestognw:  We also thought about a ZeroAddress() standard error but we think it loses important context information.   I agree.     ernestognw:  How do you see the zero address case addressed?   I was just thinking out load. Given your answers, I\u2019m happy to keep it as is.  Thanks for your answers and for merging the PR! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.104166666666667
                }
            ]
        }
    ],
    "group_index": "252"
}