{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-6357-single-contract-multi-delegatecall/12621",
            "title": "EIP-6357: Single-contract Multi-delegatecall ",
            "index": 12621,
            "category": [
                "EIPs"
            ],
            "tags": [
                "multisend",
                "erc"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "1",
                    "likes": "0",
                    "time": "18/01/2023-20:31:37",
                    "content": "  github.com/ethereum/EIPs         Add EIP-6357: Single-contract Multi-delegatecall   ethereum:master \u2190 ethereum:Pandapip1-eip-multicall              opened 08:29PM - 18 Jan 23 UTC                 Pandapip1               +79 -0       It's remarkable what you can find in OpenZeppelin that should really be standard\u2026ized.       ",
                    "links": [
                        "https://github.com/ethereum/EIPs/pull/6357",
                        "https://github.com/Pandapip1",
                        "https://github.com/ethereum/EIPs/pull/6357/files",
                        "https://github.com/ethereum/EIPs/pull/6357"
                    ],
                    "GPT-summary": "The post is an explanation of a proposal for EIP-6357, which is about adding a single-contract multi-delegatecall to Ethereum. The author expresses their surprise that this feature is not already standardized and invites feedback. A third party gives entirely positive feedback and extends to the proposal, while also advertising it.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author is advertising proposal",
                        "None"
                    ],
                    "Sentiment": 7.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/horsefacts",
                    "index": "2",
                    "likes": "0",
                    "time": "20/01/2023-02:27:20",
                    "content": "Should this interface also include EIP-165 interface detection? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/merkleplant",
                    "index": "3",
                    "likes": "0",
                    "time": "20/01/2023-08:38:46",
                    "content": "There are also improved versions of the original Multicall contract, most notably the backward-compatible Multicall3 contract from Matt Solomon which was also recently added to the forge-std library. Is there any reason for not using the optimized Multicall3 version in the EIP? ",
                    "links": [
                        "https://github.com/mds1",
                        "https://github.com/foundry-rs/forge-std/pull/271"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party is advertising proposal"
                    ],
                    "Sentiment": 6.71875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/horsefacts",
                    "index": "4",
                    "likes": "1",
                    "time": "20/01/2023-21:05:59",
                    "content": "Multicall3 and predecessors batch external calls to arbitrary addresses (i.e. many calls to many different contracts), while this multicall variant batches delegatecalls to address(this) (i.e. many calls only to one contract). The OZ contract is called Multicall, but I\u2019ve also seen this version called \u201cMulti delegatecall\u201d before, which might be a clearer name. ",
                    "links": [
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.1/contracts/utils/Multicall.sol#L20",
                        "https://docs.openzeppelin.com/contracts/4.x/api/utils#Multicall",
                        "https://solidity-by-example.org/app/multi-delegatecall/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party extending to proposal",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "5",
                    "likes": "2",
                    "time": "22/01/2023-19:20:12",
                    "content": "    horsefacts:  The OZ contract is called Multicall, but I\u2019ve also seen this version called \u201cMulti delegatecall\u201d before, which might be a clearer name.   I\u2019ll consider this. It does describe this better.     merkleplant:  There are also improved versions of the original Multicall contract, most notably the backward-compatible Multicall3  contract from Matt Solomon which was also recently added to the forge-std library.   These multicalls serve different purposes. See the above comment by @hosefacts (well-explained, thanks!):     horsefacts:  Multicall3 and predecessors batch external  calls to arbitrary addresses (i.e. many calls to many different contracts), while this multicall variant batches delegatecalls to address(this) (i.e. many calls only to one contract).   ",
                    "links": [
                        "https://solidity-by-example.org/app/multi-delegatecall/",
                        "https://github.com/mds1/multicall#multicall3-contract-addresses",
                        "https://github.com/mds1",
                        "https://github.com/foundry-rs/forge-std/pull/271",
                        "https://github.com/mds1/multicall/blob/eb34ad2954f9ceb475a24bb0155bff3bef0f5409/src/Multicall3.sol#L67",
                        "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.1/contracts/utils/Multicall.sol#L20"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.174999999999999
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "6",
                    "likes": "0",
                    "time": "23/01/2023-21:21:32",
                    "content": "A question I had: Should the function be payable, and an option be added to allow the splitting of msg.value?     Non-payable Payable Both, with the payable one being optional     0 voters     ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/markuswaas",
                    "index": "7",
                    "likes": "0",
                    "time": "24/01/2023-00:36:19",
                    "content": "Is there already an EIP for the multicall with .call ? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/horsefacts",
                    "index": "8",
                    "likes": "0",
                    "time": "24/01/2023-05:36:06",
                    "content": "I voted \u201cnon-payable.\u201d delegatecall doesn\u2019t accept a value, so unfortunately it\u2019s not possible to split up msg.value the way I think you\u2019re suggesting. (It would be nice if it were possible, though!) Instead, each delegatecall will inherit the same msg.value as the top level external call. As smarter people than I have discovered, that\u2019s seriously dangerous. It might be helpful to seek some feedback from the OZ team\u2014I suspect they\u2019ve thought about this in depth and might have suggestions. ",
                    "links": [
                        "https://github.com/Uniswap/v3-periphery/issues/52",
                        "https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong#the-discovery"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "9",
                    "likes": "0",
                    "time": "24/01/2023-14:06:36",
                    "content": "    horsefacts:  unfortunately it\u2019s not possible to split up msg.value the way I think you\u2019re suggesting.   I meant treating it as if msg.value were split up in that way (similar to how EIP-2771 treats msg.sender as not coming from the actual msg.sender) ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "10",
                    "likes": "0",
                    "time": "24/01/2023-14:06:59",
                    "content": "    markuswaas:  Is there already an EIP for the multicall with .call ?   I don\u2019t think so. Please prove me wrong! ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 1.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/xinbenlv",
                    "index": "11",
                    "likes": "0",
                    "time": "23/02/2023-19:39:23",
                    "content": "Cool Also just FYI this proposal could include multicall, ERC-5247: Smart Contract Executable Proposal Interface love to collaborate ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.773809523809524
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "12",
                    "likes": "0",
                    "time": "23/02/2023-20:32:40",
                    "content": "Sure thing! Do you have any suggestions to improve the pre-draft as-is? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 8.125
                }
            ]
        }
    ],
    "group_index": "317"
}