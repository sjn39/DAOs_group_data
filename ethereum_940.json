{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-2330-extsload-and-abi-for-lower-gas-cost-and-off-chain-apps/3733",
            "title": "EIP-2330: EXTSLOAD and ABI for lower gas cost and off-chain apps ",
            "index": 3733,
            "category": [
                "EIPs"
            ],
            "tags": [
                "opcodes",
                "core-eips"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "1",
                    "likes": "4",
                    "time": "29/10/2019-17:00:19",
                    "content": "Hi there topic is to discuss EIP-2330. EIP: EIP-2330: EXTSLOAD opcode Connected Solidity issue: Data Interfaces & EXTSLOAD \u00b7 Issue #7593 \u00b7 ethereum/solidity \u00b7 GitHub Aleth Implementation: [WIP] EIP-2330 EXTSLOAD by dominicletz \u00b7 Pull Request #5805 \u00b7 ethereum/aleth \u00b7 GitHub Ping @davesque & @simon-jentzsch with both of you I had a short chat in Osaka and I nearly forgot the details. But we discussed the idea for an EXTSLOAD instruction and corresponding Solidity ABI for the first time. Would be great if you guys could have a look at the first draft here provide and provide suggestions or comments for improvement. ",
                    "links": [
                        "https://github.com/ethereum/solidity/issues/7593",
                        "https://github.com/ethereum/aleth/pull/5805"
                    ],
                    "GPT-summary": "The author of the post is introducing EIP-2330 and asking for feedback on the proposal. They are specifically reaching out to two individuals to provide suggestions or comments for improvement.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author wants to collaborate on proposal",
                        "None"
                    ],
                    "Sentiment": 5.541666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carver",
                    "index": "2",
                    "likes": "1",
                    "time": "31/10/2019-04:47:14",
                    "content": "To align with related opcodes, maybe a rename to extsload? (Like extbalance) I don\u2019t think the same gas price as sload makes sense, because sload assumes you have already paid the cost of loading the account from the state trie (via a call). It probably ought to be something like the sum of the gas cost of extbalance (load the account from the trie) and sload (load the slot from the storage trie). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "3",
                    "likes": "0",
                    "time": "31/10/2019-10:44:36",
                    "content": "Yeah, both makes sense. I really like the the name EXTLOAD or EXTSLOAD for this as well. I\u2019m going to add this to the pull request. In fact I think EXTLOAD would be the cleanest. Any thought on keeping or dropping the S? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/axic",
                    "index": "4",
                    "likes": "2",
                    "time": "31/10/2019-23:55:32",
                    "content": "S refers to storage and this is about external (account\u2019s) storage load, so EXTSLOAD would be more fitting. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.666666666666666
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "5",
                    "likes": "0",
                    "time": "01/11/2019-13:47:14",
                    "content": "Thanks, I\u2019ve updated both now in the EIP, higher gas cost (1500) and renamed to EXTSLOAD.  Proposal A new EVM instruction EXTSLOAD (0x5c) that works like SLOAD (0x54) with the gas cost of EXTCODE(700) + SLOAD(800) = 1500 and an additional parameter representing the contract that is to be read from.  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.9772727272727275
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/carver",
                    "index": "6",
                    "likes": "1",
                    "time": "01/11/2019-14:34:02",
                    "content": "Maybe you mean EXTCODEHASH instead of EXTCODE? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "7",
                    "likes": "1",
                    "time": "01/11/2019-14:39:51",
                    "content": "I was referring to the Fee Schedule from the yellow paper:  image.png976\u00d7366 48.5 KB  There it is G_extcode_ = 700 and G_sload_ = 200 \u2013 just that EIP-1884 will update G_sload_ to 800 so I referenced that value. ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/4/4b54c1a7e561e29327e47e710f2f54a0a6b6cf63.png"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/spalladino",
                    "index": "8",
                    "likes": "2",
                    "time": "04/11/2019-16:57:25",
                    "content": "Love to see there is interest in this opcode! Please see this thread for an earlier discussion about it. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 6.5625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "9",
                    "likes": "4",
                    "time": "05/11/2019-09:32:42",
                    "content": "   'EXTSLOAD' opcode proposal   This implies that you can immediately read other accounts storage. This results in a gigantic attack vector where developers first assumed that you cannot read storage slot X from an external account and now you suddenly can (directly - e.g. without tricks). This is the reason I strongly oppose this addition.   This constant misunderstanding is probably the biggest reason for why we definitely should introduce this new opcode. Any developer who currently codes Solidity assuming non-exposed storage variables are in any way private is creating attack surfaces today. The \u201cprivate\u201d is an artificial attribute that does not actually exist in any meaningful way and just leads to confusion as some people in fact believe that the data would be protected in some way \u2013 while it is not. It\u2019s open today, readable by anyone who cares to. If there is an \u201cattack\u201d transaction that can only be created by knowing the internal storage state of a contract then it can be created today already. EXTSLOAD would wipe out this misunderstanding making it clear to every developer  that their contract storage data is always in the open. This would clarify documentation and language around this whole topic. meta @anett is there a way to merge this and this thread? ",
                    "links": [
                        "https://ethereum-magicians.org/t/extsload-opcode-proposal/2410"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.248674242424243
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "10",
                    "likes": "0",
                    "time": "05/11/2019-11:17:08",
                    "content": "Btw. I\u2019ve added an Aleth implementation for this opcode https://github.com/ethereum/aleth/pull/5805 ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/anett",
                    "index": "11",
                    "likes": "0",
                    "time": "05/11/2019-14:50:11",
                    "content": "@dominic not sure what you mean by \u201cmerge threads\u201d but I\u2019m worried that\u2019s not possible to merge thread on discourse  ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.0625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/luzius",
                    "index": "12",
                    "likes": "0",
                    "time": "17/12/2020-09:36:26",
                    "content": "From a software-engineering perspective, giving access to private members of another object is considered bad design, as it by-passes state encapsulation. This is not about data protection, this is about software design. For example, when using EXTSLOAD on an OpenZeppeling proxy contract, it might work for a while, but then suddenly brake once the proxy contract is upgraded because the calling contract might have made wrong assumption about the internal state of the proxy contract. When calling methods on other people\u2019s contracts, one should use the official API exposed through the according methods. If you want to save gas, you should propose lower costs for calls to other contracts in general. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/deluca-mike",
                    "index": "13",
                    "likes": "3",
                    "time": "09/11/2021-15:57:42",
                    "content": "External clients can already arbitrarily read contract storage slots. Further, there is a big difference between \u201cgiving access to private members of another object is considered bad design\u201d and \u201caccessing private members of another object is considered bad design\u201d. In other words, giving software developers more tools/functionality is not bad, just because some might shoot themselves in the foot. However, shooting yourself in the foot is almost always a bad idea. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.385416666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/zemse",
                    "index": "14",
                    "likes": "1",
                    "time": "19/12/2021-06:48:31",
                    "content": "In the proposal it is mentioned cost of the proposed opcode EXTSLOAD = cost of EXTCODE + cost of SLOAD. Since if self contract knows which slot id it wants to read from which target contract, the bytecode of the target contract does not provide any useful information and I think the target contract address and slot id is enough for the geth node (and others) to fetch the slot value from the SSD, so the cost could be simply a cost of a SLOAD. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/dominic",
                    "index": "15",
                    "likes": "0",
                    "time": "24/08/2022-14:03:16",
                    "content": "Thanks to @zemse this EIP just got updated with in the context of the upcoming EVM changes. Would love to discuss getting this EIP to the next stage at the Magicians meet-up in Berlin next month ETH Station upcoming event in Berlin [call for action] - #3 by 0xpApaSmURf so let me know if anyone is around then. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.8
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/PatrickAlphaC",
                    "index": "16",
                    "likes": "0",
                    "time": "01/10/2022-02:04:30",
                    "content": "Ah I can\u2019t go to that sadly, but this opcode seems intuitively like something that would be very good. I\u2019m having a fleeting thought (without much testing on it) that some current smart contracts might rely on the fact that others can\u2019t read their state right now? I wonder if we can come up with an example where adding this opcode gives smart contracts the ability to do damage of some kind that you couldn\u2019t already do off-chain with the sensitive data. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.124603174603175
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/zemse",
                    "index": "17",
                    "likes": "1",
                    "time": "14/11/2022-11:01:34",
                    "content": "I came across a contract that prevents other contracts from directly reading the state on it. I think the benefit comes from charging money for whitelisting an address, probably to fund gas. Allowing EXTSLOAD would harm the oracle business (which is definitely bad). However, looking at the oracle\u2019s business logic the read method loads the slot at location 0x03 which is not recorded in the same block (the read function uses cur feed and not the nxt feed), hence an external untrusted party can provide the oracle feed and proof to a smart contract, which can proceed to utilize the feed for its logic, without paying the oracle maintainer for being whitelisted. But oracles should get funding for gas otherwise it would be a problem. Not sure if it is difficult for open oracles to be economically sustainable through donations or if the whitelist is really worth it. As a side note, historically an EVM change did hurt businesses e.g. Gas tokens. However, those changes did come with benefits and interest from the community. ",
                    "links": [
                        "https://blog.openzeppelin.com/fundamentals-of-gas-tokens/"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.7247023809523805
                }
            ]
        }
    ],
    "group_index": "940"
}