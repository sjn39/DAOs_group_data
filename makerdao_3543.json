{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/rwa001-verification-process-third-party/7722",
            "title": "RWA001 - Verification Process - Third-party ",
            "index": 7722,
            "category": [
                "Governance"
            ],
            "tags": [
                "sixs",
                "rwa-001"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/mrabino1",
                    "index": "#1",
                    "likes": "8",
                    "time": "29/04/2021-10:44:19",
                    "content": "All, To assist the Trustee (WSFS) in its capacity as verification agent (e.g. the party that will independently verify the blockchain), a minimal* training guide has been assembled to bring them up-to-speed on how the DSS functions at a core level. Most specifically, how to determine the following for a certain vault:  Ilk Current Debt Outstanding Current Debt Ceiling Current Interest Rate Liquidation confirmed? Liquidation triggered?  As all sites that make references to current debt outstanding (daistats.com or makerburn.com) are all UI consolidation tools, none of them contemplates liquidations as viewed by a Trustee (as it is totally new!)  As such, it is my plan to forward a link to this Thread to the Trustee once we have some folks from the Smart Contract team confirm the below is an approved method for confirming each of the above.  Ilk Ilk <\u2014> ASCII (hex to ascii) Online conversion tools convert the vault name from ascii Text to Hex. The above is an example of RWA001-A. This ILK will never change for RWA001-A  Current Debt Outstanding and Debt Ceiling Using the ETH smart contract 0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b \u2014> Then click ilks \u2014> Then input the ilk 0x5257413030312d41000000000000000000000000000000000000000000000000 \u2014> Then take the art / rate / line as outlined below Current Debt Outstanding (DAI) = art * rate / 10^45 Current Debt Ceiling (DAI) = line / 10^45  Current Interest Rate Using the ETH smart contract  0x19c0976f590D67707E62397C87829d896Dc0f1F1 \u2014> Then click ilks \u2014> Then input the ilk 0x5257413030312d41000000000000000000000000000000000000000000000000 \u2014> Then (duty / 10^27)^(24*60*60*365)-1 to get the APR  Vault Liquidation Status {good()}: (GOOD or LIQUIDATED) Using the ETH smart contract 0x88f88bb9e66241b73b84f3a6e197fbba487b1e30 \u2014> Then click good \u2014> Then input the ilk 0x5257413030312d41000000000000000000000000000000000000000000000000 \u2014> If boolean is True (or 0000000000000000000000000000000000000000000000000000000000000001), then the Vault has NOT been liquidated. \u2014> If boolean is False (or 0000000000000000000000000000000000000000000000000000000000000000), then the Vault has been liquidated.  Vault Liquidation Triggered Using the ETH smart contract, 0x88f88bb9e66241b73b84f3a6e197fbba487b1e30 \u2014> Then click ilks \u2014> Then input the ilk 0x5257413030312d41000000000000000000000000000000000000000000000000 If toc is ZERO, a liquidation has NOT been triggered. If toc is NON-ZERO, a liquidation has been TRIGGERED and countdown to a Liquidation has started. When NON-ZERO, a cure() transaction must be submitted by MKR governance to return toc back to 0, else vault will be liquidated (Liquidated FALSE or 0000000000000000000000000000000000000000000000000000000000000000).   Verification portal A verification portal is in the process of being assembled for the Trustee that largely automates all of the above into page to allow for streamlined verification. That said, it is essential that Trustee knows how to verify at the most CORE level directly with a blockchain explorer.  Why does this matter We are building into the Trust Agreement similar control levers that Maker is already familiar with for crypto based vaults. For example, by the community reducing the debt ceiling for a given vault, we are building into the legal contracts a covenant and verification that each time a loan is issued (or repaid) that a verification must be completed to ensure that facility is allowed to continue to provide credit. Should that debt ceiling be lower than the debt outstanding, not only will no new loan be allowed, remaining proceeds should be returned. (Precisely the same as Maker operates today with a crypto vault to organically wind down debt exposure).  At this time, I am requesting a review from folks on the Smart Contract team to 100% confirm that I am referencing the correct smart contracts and that the math based on the output of the ILK is correct. @cmooney @brianmcmichael @equivrel @hexonaut @Kurt_Barry Very much appreciated. ",
                    "links": [
                        "http://makerburn.com",
                        "https://onlinehextools.com/convert-hex-to-ascii?input=0x5257413030312d41000000000000000000000000000000000000000000000000",
                        "https://etherscan.io/address/0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b#readContract",
                        "https://etherscan.io/address/0x19c0976f590D67707E62397C87829d896Dc0f1F1#readContract",
                        "https://etherscan.io/address/0x88f88bb9e66241b73b84f3a6e197fbba487b1e30#readContract",
                        "https://etherscan.io/address/0x88f88bb9e66241b73b84f3a6e197fbba487b1e30#readContract",
                        "https://forum.makerdao.com/t/rwa001-a-custody-agreement/7724/8",
                        "https://forum.makerdao.com/t/protocol-engineering-month-in-review-may-2021/8471",
                        "https://forum.makerdao.com/t/6s-rwa001-a-document-roadmap/7413"
                    ],
                    "GPT-summary": "The post explains the process of verifying the blockchain for a certain vault and provides a training guide for the Trustee to do so. The author requests confirmation from the Smart Contract team to ensure the correct smart contracts are being referenced and the math based on the output of the ILK is correct. The post also highlights the importance of building control levers into the legal contracts to ensure verification is completed each time a loan is issued or repaid.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None",
                        "None"
                    ],
                    "Sentiment": 5.754835442335442
                },
                {
                    "author_link": "https://forum.makerdao.com/u/cmooney",
                    "index": "#2",
                    "likes": "10",
                    "time": "29/04/2021-16:19:46",
                    "content": "    mrabino1:  Ilk Ilk <\u2014> ASCII (hex to ascii) Online conversion tools convert the vault name from ascii Text to Hex. The above is an example of RWA001-A. This ILK will never change for RWA001-A   This is correct.  Validated on the command-line with: seth --to-ascii \"0x5257413030312d41000000000000000000000000000000000000000000000000\" RWA001-A      mrabino1:  Current Debt Outstanding and Debt Ceiling Using the ETH smart contract 0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b  \u2014> Then click ilks \u2014> Then input the ilk 0x5257413030312d41000000000000000000000000000000000000000000000000 \u2014> Then take the art / rate / line as outlined below Current Debt Outstanding (DAI) = art * rate / 10^45 Current Debt Ceiling (DAI) = line / 10^45   This works, but isn\u2019t completely accurate.  The Art in this case is the entire normalized debt for this ilk.  Using this value works in this case because the RWA001-A collateral is specific and authorized.  That is, there is only one Vault under this collateral type, meaning you can get away with using the collateral\u2019s overall debt. seth call $MCD_VAT 'ilks(bytes32)(uint256,uint256,uint256,uint256,uint256)' $(seth --to-bytes32 \"$(seth --from-ascii 'RWA001-A')\")|awk 'NR==1 { print \"Art:  \" $1 }; NR==2 { print \"rate: \" $1 };  NR==3 { print \"spot: \" $1 };  NR==4 { print \"line: \" $1 };  NR==5 { print \"dust: \" $1 }; END {}' Art:  32498834649915 rate: 1003672031925019150805256888 spot: 1060000000000000000000000000000 line: 1000000000000000000000000000000000000000000000000 dust: 0  The more accurate art comes from the urns: $ seth call $MCD_VAT 'urns(bytes32,address)(uint256,uint256)' $(seth --to-bytes32 \"$(seth --from-ascii 'RWA001-A')\") $RWA001_A_URN|awk 'NR==1 { print \"ink:  \" $1 }; NR==2 { print \"art: \" $1 };' ink:  1000000000000000000 art: 32498834649915  You can see in our case that Art == art; however, for resilience against future constructions where an RWA collateral type may have many different Vaults, I think it would be better to use the art from the second command. Once one has all these values, the rest of the math does indeed look correct. rate=$(seth call $MCD_VAT 'ilks(bytes32)(,uint256,,,)' $(seth --to-bytes32 \"$(seth --from-ascii 'RWA001-A')\")) art=$(seth call $MCD_VAT 'urns(bytes32,address)(,uint256)' $(seth --to-bytes32 \"$(seth --from-ascii 'RWA001-A')\") $RWA001_A_URN) echo \"scale=45; ${art} * ${rate} / 10^45\" |bc .000000000000032498834649915000000000000000000  line=$(seth call $MCD_VAT 'ilks(bytes32)(,,,uint256,)' $(seth --to-bytes32 \"$(seth --from-ascii 'RWA001-A')\")) echo \"scale=45; ${line} / 10^45\" |bc .000000000000000000000000000000032498834649915      mrabino1:  Current Interest Rate Using the ETH smart contract 0x19c0976f590D67707E62397C87829d896Dc0f1F1 \u2014> Then click ilks \u2014> Then input the ilk 0x5257413030312d41000000000000000000000000000000000000000000000000 \u2014> Then (duty / 1000000000000000000000000000)^(246060*365)-1 to get the APR   Reversing the APY defeated my tooling using the formula you provided, as the exponent was too large; however, the duty is indeed the number we want.  I summon @Kurt_Barry or @sctannr to validate your formula. seth call $MCD_JUG 'ilks(bytes32)(uint256,uint256)' $(seth --to-bytes32 \"$(seth --from-ascii 'RWA001-A')\")|awk 'NR==1 { print \"duty: \" $1 }; NR==2 { print \"rho:  \" $1 }; END {}' duty: 1000000000937303470807876289 rho:  1619208919  I usually take the duty and use a programatic table we\u2019ve put up in IPFS to ensure the per-second rate is correct.  You can find the table here.  If you search for 1000000000937303470807876289 in that table, you can see it maps to a 3.0% APY, or 300 basis points.  If you don\u2019t trust the table, you can run the formula to compute the per-second rate from the command line: bc -l <<< 'scale=27; e( l(1.03)/(60 * 60 * 24 * 365) )'|sed 's/\\.//' 1000000000937303470807876289  And validate the two do indeed match to make a ~3% APY.     mrabino1:  Vault Liquidation Status {good()}: (GOOD or LIQUIDATED) Using the ETH smart contract 0x88f88bb9e66241b73b84f3a6e197fbba487b1e30  \u2014> Then click good \u2014> Then input the ilk 0x5257413030312d41000000000000000000000000000000000000000000000000 \u2014> If boolean is True (or 0000000000000000000000000000000000000000000000000000000000000001), then the Vault has NOT been liquidated. \u2014> If boolean is False (or 0000000000000000000000000000000000000000000000000000000000000000), then the Vault has been liquidated.   This is correct. seth call $MIP21_LIQUIDATION_ORACLE 'good(bytes32)(bool)' $(seth --to-bytes32 \"$(seth --from-ascii 'RWA001-A')\") true  Meaning the ilk is good.     mrabino1:  Vault Liquidation Triggered Using the ETH smart contract, 0x88f88bb9e66241b73b84f3a6e197fbba487b1e30  \u2014> Then click ilks \u2014> Then input the ilk 0x5257413030312d41000000000000000000000000000000000000000000000000 If toc is ZERO, a liquidation has NOT been triggered. If toc is NON-ZERO, a liquidation has been TRIGGERED and countdown to a Liquidation has started. When NON-ZERO, a cure() transaction must be submitted by MKR governance to return toc back to 0, else vault will be liquidated (Liquidated FALSE or 0000000000000000000000000000000000000000000000000000000000000000).   This is correct.  You can see the values of  toc below. seth call $MIP21_LIQUIDATION_ORACLE 'ilks(bytes32)(string,address,uint48,uint48)' $(seth --to-bytes32 \"$(seth --from-ascii 'RWA001-A')\")|awk 'NR==1 { print \"doc: \" $1 }; NR==2 { print \"pip: \" $1 };  NR==3 { print \"tau: \" $1 };  NR==4 { print \"toc: \" $1 }; END {}' doc: QmdmAUTU3sd9VkdfTZNQM6krc9jsKgF2pz7W1qvvfJo1xk pip: 0x76A9f30B45F4ebFD60Ce8a1c6e963b1605f7cB6d tau: 2592000 toc: 0  All addresses you\u2019ve used above are correct.  You can find a list of Maker\u2019s mainnet addresses in the changelog. ",
                    "links": [
                        "https://etherscan.io/address/0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b#readContract",
                        "https://etherscan.io/address/0x19c0976f590D67707E62397C87829d896Dc0f1F1#readContract",
                        "https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW",
                        "https://etherscan.io/address/0x88f88bb9e66241b73b84f3a6e197fbba487b1e30#readContract",
                        "https://etherscan.io/address/0x88f88bb9e66241b73b84f3a6e197fbba487b1e30#readContract",
                        "https://changelog.makerdao.com/releases/mainnet/active/contracts.json"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.843253968253968
                },
                {
                    "author_link": "https://forum.makerdao.com/u/Kurt_Barry",
                    "index": "#3",
                    "likes": "2",
                    "time": "30/04/2021-03:50:17",
                    "content": "Chris\u2019s analysis is correct, as far as I can tell. I\u2019ll add a few comments of my own. Re: Current Debt Outstanding There\u2019s a further wrinkle which is that if the collateral has not had fee collection triggered recently (via a call to Jug.drip(ilk), the outstanding debt will appear less than than it really is. Not sure how we\u2019re coordinating drips for RWAs. The rho value read from the Jug is the Unix epoch when the last fee collection occurred. Assuming we\u2019re dripping these regularly (e.g. at least daily), the error is small and can probably be disregarded. Might want to document it though. I\u2019m happy to help with developing instructions for doing the correction if needed (including if they\u2019re assessing space for a near-max draw, they should account for the time between the calculation and when the draw actually occurs\u2013eventually this can be built into the dashboard UI). Re: Current Interest Rate:   First, you\u2019ll notice a formatting problem with the equation: 24*60*60 is showing up as 246060. To avoid markdown hiding those asterisks, wrap the expression in backticks\u2013important if this forum post is to be the canonical reference.   The formula is correct, although I\u2019d use 10^27 instead of 1000000000000000000000000000 for clarity.   The computed value is more accurately called an APY than an APR, I believe (though maybe someone with experience in finance like @equivrel should check me on this).   The formula as expressed needs to be evaluated at high precision to avoid significant rounding error, so they should be careful what tool they use to do so. Just pasting (duty / 10^27) ^ (24*60*60*365) - 1 into the Google search bar and hitting enter seems to work sufficiently well, and will be universally available and platform-independent so is likely a good default recommendation. There are alternatives, of course\u2013e.g. the built-in calculator on my Ubuntu installation works, and an online arbitrary-precision calculator can be found at http://apfloat.appspot.com/ , but I\u2019d still just recommend pasting into Google for simplicity.   ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.744135802469136
                },
                {
                    "author_link": "https://forum.makerdao.com/u/mrabino1",
                    "index": "#4",
                    "likes": "2",
                    "time": "30/04/2021-07:38:35",
                    "content": "    Kurt_Barry:  First, you\u2019ll notice a formatting problem with the equation: 24*60*60 is showing up as 246060. To avoid markdown hiding those asterisks, wrap the expression in backticks\u2013important if this forum post is to be the canonical reference.   Updated     Kurt_Barry:  The formula is correct, although I\u2019d use 10^27 instead of 1000000000000000000000000000 for clarity.   Updated  Regarding the comment on the interest rate, they are no verifying that part (and there is no down stream decision making as a result). I do want to demonstrate how they can independently calculate it regardless.  Here is the alpha alpha output for a verification agent (that includes the above instruction integrated) along with computed outputs to compare against. This will of course morph into something that looks far better; however, the essential part for now is the core instruction on how.  2021-04-30_09-36-022298\u00d73162 697 KB   As shown on the governance call (and not finalized yet), please see the below decision tree based on these fundamental levers that MKR governance always controls.  2021-04-27_10-59-451304\u00d72264 362 KB  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.662698412698413
                },
                {
                    "author_link": "https://forum.makerdao.com/u/system",
                    "index": "#5",
                    "likes": "0",
                    "time": "30/07/2021-13:38:55",
                    "content": "This topic was automatically closed 91 days after the last reply. New replies are no longer allowed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0606060606060606
                }
            ]
        }
    ]
}