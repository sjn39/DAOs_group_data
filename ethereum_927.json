{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/on-chain-contract-metadata-registry/3647",
            "title": "On-chain contract metadata registry ",
            "index": 3647,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "1",
                    "likes": "0",
                    "time": "11/09/2019-12:27:14",
                    "content": "anyone knows about a on-chain contract metadata registry? I imagine a registry contract where deployment keys of other contracts can publish metadata. The registry should support swarm and ipfs hashes. With metadata I mean ABI, contract source, icons, contact options,  \u2026 I really do not want to start another project currently - so asking if perhaps already people working on such a thing. Could really use it now and think I am not the only one. Perhaps leveraging dType (cc @loredanacirstea) ",
                    "links": [],
                    "GPT-summary": "The author is asking if there is an on-chain contract metadata registry and if anyone is working on it. They describe what they imagine the registry to be and mention that they do not want to start another project. They also suggest leveraging dType and tag someone in the post.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party or author is advertising proposal",
                        "None"
                    ],
                    "Sentiment": 4.758928571428571
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rumkin",
                    "index": "2",
                    "likes": "1",
                    "time": "13/09/2019-11:15:19",
                    "content": "https://www.ethpm.com/ Don\u2019t know much about this project. Only know they are working on a solution. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "3",
                    "likes": "0",
                    "time": "15/09/2019-16:15:36",
                    "content": "Thanks for the hint! I knew about the ethpm manifest part - was not aware of the on-chain part. Looks like this is going in the right direction - just not sure about the \u201cmultiple registry\u201d part - with this (as far as I see) we would need a registry of registries \u2026 ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 5.260714285714285
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rumkin",
                    "index": "4",
                    "likes": "1",
                    "time": "16/09/2019-05:38:41",
                    "content": "Why IPFS and Swarm? It increases technical debt on management. Not sure if regular users are ready to support both networks. For me Swarm is not an option at all. It requires to have an Ethereum node to setup, what makes the whole process overcomplicated. In the same time IPFS requires no setup, just download and run. Am I missing something? I\u2019m planning to build a package system into a browser and decided to refuse Swarm and to use IPFS instead. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None",
                        "None",
                        "None"
                    ],
                    "Sentiment": 4.964285714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ligi",
                    "index": "5",
                    "likes": "0",
                    "time": "16/09/2019-16:13:29",
                    "content": "swarm would be nice for availability guarantees in the future. Currently e.g. I could not retrieve some IPFS links in some of the ethpm registries. If noone pins them then this is a problem. Also swarm would be great as e.g. some links in evm bytecode are swarm-hashes. Another reason is that one would not have to run 2 different p2p networks. A lot of reasons to (also) support swarm - but I agree practically IPFS seems to work a (bit) better currently\u2026 ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 6.583333333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rumkin",
                    "index": "6",
                    "likes": "0",
                    "time": "16/09/2019-16:52:06",
                    "content": "Guarantees? Could you elaborate? Does it mean that EVM code will be able to check hash existence, or write data directly to swarm? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.984375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gh1dra",
                    "index": "7",
                    "likes": "1",
                    "time": "21/11/2019-02:51:15",
                    "content": "@ligi After iterating on a few different approaches for an on-chain registry, I just wrapped up hacking together this: https://github.com/gh1dra/eth-metadata-registry. Should have the functionality you\u2019ve specified, would love any feedback/suggestions you may have! Also interested in how dType could leverage this as well. Next steps would probably be to create a dapp to present everything nicely ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party extending to proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.910714285714286
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/ctzurcanu",
                    "index": "8",
                    "likes": "0",
                    "time": "04/02/2020-14:56:11",
                    "content": "@ligi  dType has this covered since March - April 2019: EIP-1921: dType Functions Extension With this, we can call any registered function while inside the EVM (just by knowing the dType id of the function and providing the correct input). Many other features (including function search) will be demoed soon  . ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party answering question about proposal",
                        "3rd party extending to proposal",
                        "3rd party giving information about related proposal"
                    ],
                    "Sentiment": 5.9375
                }
            ]
        }
    ],
    "group_index": "927"
}