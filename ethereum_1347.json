{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/rfc-8905-the-payto-uri-scheme-for-payments/6383",
            "title": "RFC-8905: The 'payto' URI Scheme for Payments ",
            "index": 6383,
            "category": [
                "Interfaces"
            ],
            "tags": [
                "payments"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/jpitts",
                    "index": "1",
                    "likes": "0",
                    "time": "02/06/2021-15:25:22",
                    "content": "RFC-8905 https://datatracker.ietf.org/doc/html/rfc8905  A unified URI scheme for all payment target types allows applications to offer user interactions with URIs that represent payment targets, simplifying the introduction of new payment systems and applications.  This can easily be used for Ethereum and L2 \u201cpayments\u201d for integration with payment platforms. There are examples for Bitcoin and Interledger Protocol Address w/ ENS-style addressing. Related: ERC: Standard URI scheme with metadata, value and byte code   github.com/ethereum/EIPs     \t      ERC: Standard URI scheme with metadata, value and byte code             opened 01:12PM - 17 Feb 16 UTC             closed 12:46PM - 16 Feb 18 UTC               alexvandesande             editor-needs-to-review type: ERC     This proposal is inspired by [BIP 21](https://github.com/bitcoin/bips/blob/maste\u2026r/bip-0021.mediawiki) and could apply to [IBAN address format](https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol) but can be extended to other proposed addresses formats. Imagine these scenarios: - An exchange or a instant converter like shape shift wants to create a single ethereum address for payments that will be converted into credit in their internal system or output bitcoin to an address - A store wants to show a QR code to a client that will pop up a payment for exactly 12.34 ethers, which contains metadata on the product being bought - A betting site wants to provide a link that the user can click on his site and it will open a default ethereum wallet and and execute a specific contract with given parameters - A dapp in Mist wants so simply ask the user to sign a transaction with a specific abi in a single call  In all these scenarios, the provider wants to set up internally a transaction, with a recipient, an associated number of ethers (or none) and optional byte code, all without requiring any fuss from the end user that is expected simply to choose a sender and authorise the transaction.   Currently implementations for this are wonky: shape shift creates tons of temporary addresses and uses an internal system to check which one correspond to which metadata, there isn't any standard way for stores that want payment in ether to put specific metadata about price on the call and any app implementing contracts will have to use different solutions depending on the client they are targeting.  I propose adding, beyond address, also optional byte code and value to any proposed address standard. Of course this would make the link longer, but it should not be something visible to the user, instead it should be shown as a visual code (QR or otherwise), a link or some other way to pass the information.  If properly implemented in all wallets, this should make execution of contracts directly from wallets much simpler as the wallet client only needs to put the byte code by reading the qr code.  If we follow the bitcoin standard, the result would be:  ```  ethereum:<address>[?value=<value>][?gas=<suggestedGas>][?data=<bytecode>] ```  Other data could be added, but ideally the client should take them from elsewhere in the blockchain, so instead of having a `label` or a `message` to be displayed to the users, these should be read from an identity system or metadata on the transaction itself. #### Example:  Clicking this link would open a transaction that would try to send _5 unicorns_ to address _deadbeef_. The user would then simply to approve, based on each wallet UI.  ```  ethereum:0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7?gas=100000&data=0xa9059cbb00000000000000000000000000000000000000000000000000000000deadbeef0000000000000000000000000000000000000000000000000000000000000005 ``` ### Without byte code  Alternatively, the byte code could be generated by the client and the request would be in plain text:  ```  ethereum:<address>[?value=<value>][?gas=<suggestedGas>][?function=nameOfFunction(param)] ``` #### Example:  This is the same function as above, to send 5 unicorns from he sender to _deadbeef_, but now with a more readable function, which the client converts to byte code.  ```  ethereum:0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7?gas=100000&function=transfer(address 0xdeadbeef, uint 5) ```       EIP-681: URL Format for Transaction Requests   Ethereum Improvement Proposals   EIP-681: URL Format for Transaction Requests Details on Ethereum Improvement Proposal 681 (EIP-681): URL Format for Transaction Requests      ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/67",
                        "https://github.com/ethereum/EIPs/issues/67",
                        "https://github.com/alexvandesande",
                        "https://eips.ethereum.org/EIPS/eip-681",
                        "https://eips.ethereum.org/EIPS/eip-681"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.248647186147187
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/rastislav",
                    "index": "2",
                    "likes": "0",
                    "time": "01/03/2023-18:09:27",
                    "content": "Ethereum is already available here: https://payto.money/ But we have to wait for adoption. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 7.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "3",
                    "likes": "0",
                    "time": "02/03/2023-13:02:42",
                    "content": "This uses an GANA registry. It shouldn\u2019t be too hard to add another scheme. EDIT: I\u2019ve written one and submitted it to the registry. Hoping to hear back from them soon. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.270833333333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "4",
                    "likes": "0",
                    "time": "02/03/2023-14:46:12",
                    "content": "It\u2019s now officially recognized! https://git.gnunet.org/gana.git/tree/payto-payment-target-types/eth.txt?id=be418a2292d71148a1a8ca554811361573b27dec ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                }
            ]
        }
    ],
    "group_index": "1347"
}