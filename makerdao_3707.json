{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/rwa004-ht2drp-htc-drop-mip22-token-protocol-engineering-domain-team-assessment/8416",
            "title": "[RWA004/HT2DRP] HTC-DROP/MIP22 Token Protocol Engineering Domain Team Assessment ",
            "index": 8416,
            "category": [
                "Collateral Onboarding",
                "Domain Work"
            ],
            "tags": [
                "htc-drop",
                "collateral-onboard",
                "real-world-finance",
                "sc-domain-work",
                "mips",
                "centrifuge",
                "real-assets",
                "rwa-004"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/cmooney",
                    "index": "#1",
                    "likes": "1",
                    "time": "28/05/2021-16:38:32",
                    "content": " General Information This assessment, like any RWA collateral type, deviates from the standard smart contract technical assessment format because of the idiosyncratic nature of the RWA collateral types. For Centrifuge RWA collateral type, the DROP token of a Tinlake pool, HT2DRP in this case, is managed by MIP22 and interfaced with Maker Protocol through MIP21 and the creation of a placeholder token, by the deployment spell, RWA004 in this case. For this assessment, we will be focusing on the MIP21 token RWA004 (to be deployed) for Harbor Trade Credit Series 2 HT2DRP token, as well as the infrastructure for all centrifuge tokens.   Symbol: RWA004  Relevant MIP information:  [HTC-DROP] MIP6 Application: Harbor Trade Credit DROP: Short Term Trade Receivables Vault Liquidation Mechanism for Centrifuge Trade Finance Assets: A Pre-MIP Discussion MIP22: Centrifuge Direct Liquidation Module MIP21: Real World Assets - Off-Chain Asset Backed Lender    Total supply: 1 WAD (1 * 10 ^ 18)  Github repository:  GitHub - makerdao/MIP21-RWA-Example: MIP21 example    Can use existing MCD collateral type adapter?  This collateral use the MIP21 authed join and exit functions.  These functions are similar to other RWA onboarding that uses this framework.     Technical Information   Does the contract implement the ERC20 token standards? Yes.  Decimals: 18.  Overflow checks: No.  Mitigation against allowance race-condition: No.  Upgradeable contract patterns: No.  Access control or restriction lists: No.  Non-standard features or behaviors: No.  Key addresses:  The auth governance address for RwaInputConduit, RwaLiquidationOracle and RwaUrn contracts The operator address that is permitted to operate on the RwaInputConduit and RwaUrn contracts. This can be multiple addresses, however, each address must be approved by governance.    Additional notes:  The RWA code implementation resides within a sandbox-like environment, and any operation not related to locking, freeing, drawing, or wiping in the RwaUrn contract must be voted on by governance. The code itself is lightweight. This implementation uses simplified Oracle, and Urn contracts to achieve the functionality required for this specific instance of RWA. While there are no overflow checks, no use of a SafeMath library, and no mitigation against the allowance race-condition, the idiosyncratic nature of the contract does not make them a requirement.     Reviewing the Architecture The overall architecture is an integration between a Tinlake pool and Maker Protocol by using first MIP22 to manage the Tinlake DROP token (HT2DRP) then using MIP21 to handle a placeholder token (RWA004) and interact with Maker. While MIP22/HT2DRP is discussed for the sake of comprehension, only the MIP21/RWA004 is considered for the scope of this assessment.  MIP22/HT2DRP part The implementation of MIP22 cand be find in the tinlake-maker-lib Github repo. The main contract is  TinlakeManager. The state diagram below shows the different stage of the smart contract and the transitions between them. It is important to note that there is no way to go back to an active state when a liquidation is started.  1011\u00d71011 35.5 KB  MIP22 operator is the MKR adapter on Tinlake called the clerk. It will use the mat defined in the ilk and matBuffer (clerk parameter) to check how much DROP tokens should be send to MIP22 in order to mint DAI.  MIP21/RWA004 part MIP21 is the component that prevents the Tinlake pool from minting more than the Debt Ceiling (line) and provides the ability for Maker Governance to trigger a liquidation. MIP21 by itself does not ensure that enough collateral (in the form of HT2DRP) is present. The core RWA architecture consists of the following contracts:  RwaLiquidationOracle RwaUrn RwaToken RwaConduit   RwaLiquidationOracle contract Source code The RwaLiquidationOracle contract is shared across all MIP21 collateral types and consists of six state-changing functions (besides the usual DSS rely(address), deny(address)), all protected by the auth modifier and can only be called by governance:  file(bytes32,address) init(bytes32 ilk,bytes32 val,address doc,uint48 tau) bump(bytes32 ilk,uint256 val) tell(bytes32) cure(bytes32) cull(bytes32)  There is one externally accessible view function: good(bytes32) that anyone can use to check the liquidation status of the position. This function does not change state. This is not a typical Maker oracle. It will only report on the liquidation status of the RwaUrn, and can only be acted upon by governance. To state it plainly, this oracle is not vulnerable to flash loan attacks or any manipulation aside from a governance attack. file can be called by governance to change the vow address (used in cull). init is the initialization function. It takes 4 parameters:   ilk: name of the vault, RWA004.  val: estimated value of the collateral. It should be above the Debt Ceiling (line) and include a buffer for some accrued interest (e.g. 2 years of SF).  doc: link to legal documents representing the underlying legal scheme.  tau: minimum delay between the soft-liquidation and the hard-liquidation/write-off. If set to 0, this allows governance to trigger both in the same spell. For Centrifuge assets, this should be set to 0 (not impact outside of Maker anyway).  bump can be called by governance to increase (not decrease which can be done only by cull) the estimated value of the collateral. tell can be called by governance to start a soft-liquidation. line should be set to 0 Dai first. tell of MIP22 TinlakeManager should be called then (public function). cure can be called by governance after a soft-liquidation has been triggered to stop it. It should not be used if tell of MIP22 TinlakeManager was already called. cull can be called by governance to start an hard-liquidation/write-off. This will mark all the remaining debt of the vault as bad debt and impact the Surplus Buffer (vow). cull of MIP22 TinlakeManager should be called then (public function).  RwaUrn Source code The RwaUrn is unique to each MIP21 collateral type.  Aside from the core DSS wards, can, rely(address), deny(address), hope(address), and nope(address) functions, there are five functions:  file(bytes32,address) lock(uint256) free(uint256) draw(uint256) wipe(uint256)  The file function can only be called by governance (via the auth modifier). The rest of the functions can only be called by those who have been given permission (hoped or noped) on the RwaUrn contract. And any Dai drawn by the RwaUrn can only be sent to the outputConduit address defined by governance when deploying the contract.  RwaToken contract Source code A standard implementation of the ERC20 token standard, with the balanceOf(address) of the deployer of the contract being set to 1 WAD at deployment. There is 18 decimals of precision. There are three state changing functions, that are all available to the tokenholder, and are specific to the ERC20 token standard:  transfer(address dst, uint wad) external returns (bool); transferFrom(address src, address dst, uint wad) public returns (bool); approve(address usr, uint wad) external returns (bool);  To reiterate how simple this ERC20 token is, please reference the Surya Description Report section below and compare it against other ERC20 token assessments.  RwaConduit Source code A simple contract with one function: push() that can be called by anyone with a current MKR balance. This function holds transitory funds, that upon being called, are transferred to the to address set using the pick function by those who have been given permission (hoped or noped). An important note about the RwaConduit for centrifuge assets.  The contract above is not used, but rather the centrifuge manager contract acts as a compliant RwaConduit.  It is this manager that performs most of the functions of MIP22 (mostly for liquidations), making centrifuge assets a MIP21/MIP22 hybrid design.  That is, MIP21 leaves liquidations up to the structure of the RWA, and for centrifuge that structure is a slightly longer on-chain liquidation specific to the DROP token types.  Contract Risk Summary The MIP21 construction contains low technical risk and is bounded by the debt ceiling. The PE core unit has given a reasonably deep review to the manager contract that acts as the RwaConduit and resolved any issues there; however, only a surface review was given to the details of tinlake liquidations.  This is where technical risk may exist.  As of the time of this writing, this code has had a 120 people hour audit, and is currently undergoing more audits.  Our team suggests a more conservative treatment of the debt ceiling to limit exposure to this unknown technical risk until more audits can be performed.  This debt ceiling consideration should span across the aggregate of all collateral types using MIP22 until more audits are available. The ERC20 functions of the RwaToken are implemented to industry standard, but do not mitigate the allowance race-condition or use a SafeMath library. This is of minor consequence, as actual usage of the approve(address,uint) function should be constrained. Future, more advanced implementations of RWA that will trade on markets should not use this implementation. The core functions of the contracts are very limited in ability, and are restricted only to governance or the trusted addresses to lock, free, draw, or wipe Dai in the RwaUrn. Compared to a standard ERC20 token with administrative functions and multiple admin/controller addresses, this is a considerably lower risk contract.  Inheritance Diagram The ERC20 token contract does not inherit other contracts.  S\u016brya\u2019s Description Report  Files Description Table     File Name SHA-1 Hash     RwaToken.sol df9d2a7f8f594fced88b457aa003100c347ace31     Contracts Description Table     Contract Type Bases       \u2514 Function Name Visibility Mutability Modifiers          RwaToken Implementation      \u2514 add Internal       \u2514 sub Internal       \u2514  Public    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom Public    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f     Legend     Symbol Meaning      Function can modify state    Function is payable     ",
                    "links": [
                        "https://forum.makerdao.com/t/htc-drop-mip6-application-harbor-trade-credit-drop-short-term-trade-receivables/3502",
                        "https://forum.makerdao.com/t/vault-liquidation-mechanism-for-centrifuge-trade-finance-assets-a-pre-mip-discussion/3737",
                        "https://forum.makerdao.com/t/mip22-centrifuge-direct-liquidation-module/3930",
                        "https://forum.makerdao.com/t/mip21-real-world-assets-off-chain-asset-backed-lender/3917",
                        "https://github.com/makerdao/MIP21-RWA-Example/",
                        "https://github.com/makerdao/dss-gem-joins/blob/c2ba746fd45593136475aa5e308a57db87e7eb7f/src/join-auth.sol",
                        "https://docs.centrifuge.io/learn/understanding-tinlake/",
                        "https://github.com/centrifuge/tinlake-maker-lib/tree/3349563dece283f71de48d074a22022281171029",
                        "https://github.com/centrifuge/tinlake/blob/f5b0fd1135fbcd0b6a0825a9258cf3eef568d2bd/src/lender/adapters/mkr/clerk.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaLiquidationOracle.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaUrn.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaToken.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaConduit.sol",
                        "https://forum.makerdao.com/t/maker-relay-ep-72/11773",
                        "https://forum.makerdao.com/t/maker-relay-ep-48-en-espanol/8636",
                        "https://forum.makerdao.com/t/maker-relay-ep-48/8609",
                        "https://forum.makerdao.com/t/protocol-engineering-month-in-review-may-2021/8471",
                        "https://forum.makerdao.com/t/maker-relay-ep-72-en-espanol/11799"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.3493411927877945
                }
            ]
        },
        {
            "thread_link": "https://forum.makerdao.com/t/rwa003-cf4drp-cf-drop-mip22-token-protocol-engineering-domain-team-assessment/8382",
            "title": "[RWA003/CF4DRP] CF-DROP/MIP22 Token Protocol Engineering Domain Team Assessment ",
            "index": 8382,
            "category": [
                "Collateral Onboarding",
                "Domain Work"
            ],
            "tags": [
                "cf-drop",
                "collateral-onboard",
                "real-world-finance",
                "sc-domain-work",
                "mips",
                "centrifuge",
                "real-assets",
                "pe-domain-work"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/cmooney",
                    "index": "#1",
                    "likes": "6",
                    "time": "27/05/2021-15:31:53",
                    "content": " General Information This assessment, like any RWA collateral type, deviates from the standard smart contract technical assessment format because of the idiosyncratic nature of the RWA collateral types. For Centrifuge RWA collateral type, the DROP token of a Tinlake pool, CF4DRP in this case, is managed by MIP22 and interfaced with Maker Protocol through MIP21 and the creation of a placeholder token, by the deployment spell, RWA003 in this case. For this assessment, we will be focusing on the MIP21 token RWA003 (to be deployed) for ConsolFreight CF4DRP token, as well as the infrastructure for all centrifuge tokens.   Symbol: RWA003  Relevant MIP information:  [CF-DROP] MIP6 Application: ConsolFreight DROP: Tokenized Freight Shipping Invoices Vault Liquidation Mechanism for Centrifuge Trade Finance Assets: A Pre-MIP Discussion MIP22: Centrifuge Direct Liquidation Module MIP21: Real World Assets - Off-Chain Asset Backed Lender    Total supply: 1 WAD (1 * 10 ^ 18)  Github repository:  GitHub - makerdao/MIP21-RWA-Example: MIP21 example    Can use existing MCD collateral type adapter?  This collateral use the MIP21 authed join and exit functions.  These functions are similar to other RWA onboarding that uses this framework.     Technical Information   Does the contract implement the ERC20 token standards? Yes.  Decimals: 18.  Overflow checks: No.  Mitigation against allowance race-condition: No.  Upgradeable contract patterns: No.  Access control or restriction lists: No.  Non-standard features or behaviors: No.  Key addresses:  The auth governance address for RwaInputConduit, RwaLiquidationOracle and RwaUrn contracts The operator address that is permitted to operate on the RwaInputConduit and RwaUrn contracts. This can be multiple addresses, however, each address must be approved by governance.    Additional notes:  The RWA code implementation resides within a sandbox-like environment, and any operation not related to locking, freeing, drawing, or wiping in the RwaUrn contract must be voted on by governance. The code itself is lightweight. This implementation uses simplified Oracle, and Urn contracts to achieve the functionality required for this specific instance of RWA. While there are no overflow checks, no use of a SafeMath library, and no mitigation against the allowance race-condition, the idiosyncratic nature of the contract does not make them a requirement.     Reviewing the Architecture The overall architecture is an integration between a Tinlake pool and Maker Protocol by using first MIP22 to manage the Tinlake DROP token (CF4DRP) then using MIP21 to handle a placeholder token (RWA003) and interact with Maker. While MIP22/CF4DRP is discussed for the sake of comprehension, only the MIP21/RWA003 is considered for the scope of this assessment.  MIP22/CF4DRP part The implementation of MIP22 cand be find in the tinlake-maker-lib Github repo. The main contract is  TinlakeManager. The state diagram below shows the different stage of the smart contract and the transitions between them. It is important to note that there is no way to go back to an active state when a liquidation is started.  1011\u00d71011 35.5 KB  MIP22 operator is the MKR adapter on Tinlake called the clerk. It will use the mat defined in the ilk and matBuffer (clerk parameter) to check how much DROP tokens should be send to MIP22 in order to mint DAI.  MIP21/RWA003 part MIP21 is the component that prevents the Tinlake pool from minting more than the Debt Ceiling (line) and provides the ability for Maker Governance to trigger a liquidation. MIP21 by itself does not ensure that enough collateral (in the form of CF4DRP) is present. The core RWA architecture consists of the following contracts:  RwaLiquidationOracle RwaUrn RwaToken RwaConduit   RwaLiquidationOracle contract Source code The RwaLiquidationOracle contract is shared across all MIP21 collateral types and consists of six state-changing functions (besides the usual DSS rely(address), deny(address)), all protected by the auth modifier and can only be called by governance:  file(bytes32,address) init(bytes32 ilk,bytes32 val,address doc,uint48 tau) bump(bytes32 ilk,uint256 val) tell(bytes32) cure(bytes32) cull(bytes32)  There is one externally accessible view function: good(bytes32) that anyone can use to check the liquidation status of the position. This function does not change state. This is not a typical Maker oracle. It will only report on the liquidation status of the RwaUrn, and can only be acted upon by governance. To state it plainly, this oracle is not vulnerable to flash loan attacks or any manipulation aside from a governance attack. file can be called by governance to change the vow address (used in cull). init is the initialization function. It takes 4 parameters:   ilk: name of the vault, RWA003.  val: estimated value of the collateral. It should be above the Debt Ceiling (line) and include a buffer for some accrued interest (e.g. 2 years of SF).  doc: link to legal documents representing the underlying legal scheme.  tau: minimum delay between the soft-liquidation and the hard-liquidation/write-off. If set to 0, this allows governance to trigger both in the same spell. For Centrifuge assets, this should be set to 0 (not impact outside of Maker anyway).  bump can be called by governance to increase (not decrease which can be done only by cull) the estimated value of the collateral. tell can be called by governance to start a soft-liquidation. line should be set to 0 Dai first. tell of MIP22 TinlakeManager should be called then (public function). cure can be called by governance after a soft-liquidation has been triggered to stop it. It should not be used if tell of MIP22 TinlakeManager was already called. cull can be called by governance to start an hard-liquidation/write-off. This will mark all the remaining debt of the vault as bad debt and impact the Surplus Buffer (vow). cull of MIP22 TinlakeManager should be called then (public function).  RwaUrn Source code The RwaUrn is unique to each MIP21 collateral type.  Aside from the core DSS wards, can, rely(address), deny(address), hope(address), and nope(address) functions, there are five functions:  file(bytes32,address) lock(uint256) free(uint256) draw(uint256) wipe(uint256)  The file function can only be called by governance (via the auth modifier). The rest of the functions can only be called by those who have been given permission (hoped or noped) on the RwaUrn contract. And any Dai drawn by the RwaUrn can only be sent to the outputConduit address defined by governance when deploying the contract.  RwaToken contract Source code A standard implementation of the ERC20 token standard, with the balanceOf(address) of the deployer of the contract being set to 1 WAD at deployment. There is 18 decimals of precision. There are three state changing functions, that are all available to the tokenholder, and are specific to the ERC20 token standard:  transfer(address dst, uint wad) external returns (bool); transferFrom(address src, address dst, uint wad) public returns (bool); approve(address usr, uint wad) external returns (bool);  To reiterate how simple this ERC20 token is, please reference the Surya Description Report section below and compare it against other ERC20 token assessments.  RwaConduit Source code A simple contract with one function: push() that can be called by anyone with a current MKR balance. This function holds transitory funds, that upon being called, are transferred to the to address set using the pick function by those who have been given permission (hoped or noped). An important note about the RwaConduit for centrifuge assets.  The contract above is not used, but rather the centrifuge manager contract acts as a compliant RwaConduit.  It is this manager that performs most of the functions of MIP22 (mostly for liquidations), making centrifuge assets a MIP21/MIP22 hybrid design.  That is, MIP21 leaves liquidations up to the structure of the RWA, and for centrifuge that structure is a slightly longer on-chain liquidation specific to the DROP token types.  Contract Risk Summary The MIP21 construction contains low technical risk and is bounded by the debt ceiling. The PE core unit has given a reasonably deep review to the manager contract that acts as the RwaConduit and resolved any issues there; however, only a surface review was given to the details of tinlake liquidations.  This is where technical risk may exist.  As of the time of this writing, this code has had a 120 people hour audit, and is currently undergoing more audits.  Our team suggests a more conservative treatment of the debt ceiling to limit exposure to this unknown technical risk until more audits can be performed.  This debt ceiling consideration should span across the aggregate of all collateral types using MIP22 until more audits are available. The ERC20 functions of the RwaToken are implemented to industry standard, but do not mitigate the allowance race-condition or use a SafeMath library. This is of minor consequence, as actual usage of the approve(address,uint) function should be constrained. Future, more advanced implementations of RWA that will trade on markets should not use this implementation. The core functions of the contracts are very limited in ability, and are restricted only to governance or the trusted addresses to lock, free, draw, or wipe Dai in the RwaUrn. Compared to a standard ERC20 token with administrative functions and multiple admin/controller addresses, this is a considerably lower risk contract.  Inheritance Diagram The ERC20 token contract does not inherit other contracts.  S\u016brya\u2019s Description Report  Files Description Table     File Name SHA-1 Hash     RwaToken.sol df9d2a7f8f594fced88b457aa003100c347ace31     Contracts Description Table     Contract Type Bases       \u2514 Function Name Visibility Mutability Modifiers          RwaToken Implementation      \u2514 add Internal       \u2514 sub Internal       \u2514  Public    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom Public    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f     Legend     Symbol Meaning      Function can modify state    Function is payable     ",
                    "links": [
                        "https://forum.makerdao.com/t/cf-drop-mip6-application-consolfreight-drop-tokenized-freight-shipping-invoices/2214",
                        "https://forum.makerdao.com/t/vault-liquidation-mechanism-for-centrifuge-trade-finance-assets-a-pre-mip-discussion/3737",
                        "https://forum.makerdao.com/t/mip22-centrifuge-direct-liquidation-module/3930",
                        "https://forum.makerdao.com/t/mip21-real-world-assets-off-chain-asset-backed-lender/3917",
                        "https://github.com/makerdao/MIP21-RWA-Example/",
                        "https://github.com/makerdao/dss-gem-joins/blob/c2ba746fd45593136475aa5e308a57db87e7eb7f/src/join-auth.sol",
                        "https://docs.centrifuge.io/learn/understanding-tinlake/",
                        "https://github.com/centrifuge/tinlake-maker-lib/tree/3349563dece283f71de48d074a22022281171029",
                        "https://github.com/centrifuge/tinlake/blob/f5b0fd1135fbcd0b6a0825a9258cf3eef568d2bd/src/lender/adapters/mkr/clerk.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaLiquidationOracle.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaUrn.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaToken.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaConduit.sol",
                        "https://forum.makerdao.com/t/maker-relay-ep-48-en-espanol/8636",
                        "https://forum.makerdao.com/t/maker-relay-ep-48/8609",
                        "https://forum.makerdao.com/t/agenda-discussion-scientific-governance-and-risk-143-thursday-may-27-17-00-utc/8228/3",
                        "https://forum.makerdao.com/t/blocktower-credit-pecu-comment/18844"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.352766106442576
                },
                {
                    "author_link": "https://forum.makerdao.com/u/PaperImperium",
                    "index": "#2",
                    "likes": "0",
                    "time": "13/06/2021-17:05:00",
                    "content": "    cmooney:  MIP21 is the component that prevents the Tinlake pool from minting more than the Debt Ceiling (line) and provides the ability for Maker Governance to trigger a liquidation. MIP21 by itself does not ensure that enough collateral (in the form of CF4DRP) is present.   I wasn\u2019t here when this structure was first debated. Does that mean Maker\u2019s vault does not actually hold the DROP token as collateral, but an IOU for those tokens from Tinlake? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.364583333333334
                }
            ]
        },
        {
            "thread_link": "https://forum.makerdao.com/t/rwa005-ff1drp-fft1-drop-mip22-token-protocol-engineering-domain-team-assessment/8417",
            "title": "[RWA005/FF1DRP] FFT1-DROP/MIP22 Token Protocol Engineering Domain Team Assessment ",
            "index": 8417,
            "category": [
                "Collateral Onboarding",
                "Domain Work"
            ],
            "tags": [
                "collateral-onboard",
                "real-world-finance",
                "sc-domain-work",
                "mips",
                "centrifuge",
                "real-assets",
                "fft1-drop",
                "rwa-005"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/cmooney",
                    "index": "#1",
                    "likes": "5",
                    "time": "28/05/2021-16:41:30",
                    "content": " General Information This assessment, like any RWA collateral type, deviates from the standard smart contract technical assessment format because of the idiosyncratic nature of the RWA collateral types. For Centrifuge RWA collateral type, the DROP token of a Tinlake pool, FF1DRP in this case, is managed by MIP22 and interfaced with Maker Protocol through MIP21 and the creation of a placeholder token, by the deployment spell, RWA005 in this case. For this assessment, we will be focusing on the MIP21 token RWA005 (to be deployed) for Fortunafi Series 1 FF1DRP token, as well as the infrastructure for all centrifuge tokens.   Symbol: RWA005  Relevant MIP information:  [FFT1-DROP] MIP6 Application: Fortunafi DROP: Revenue Based Financing Assets Vault Liquidation Mechanism for Centrifuge Trade Finance Assets: A Pre-MIP Discussion MIP22: Centrifuge Direct Liquidation Module MIP21: Real World Assets - Off-Chain Asset Backed Lender    Total supply: 1 WAD (1 * 10 ^ 18)  Github repository:  GitHub - makerdao/MIP21-RWA-Example: MIP21 example    Can use existing MCD collateral type adapter?  This collateral use the MIP21 authed join and exit functions.  These functions are similar to other RWA onboarding that uses this framework.     Technical Information   Does the contract implement the ERC20 token standards? Yes.  Decimals: 18.  Overflow checks: No.  Mitigation against allowance race-condition: No.  Upgradeable contract patterns: No.  Access control or restriction lists: No.  Non-standard features or behaviors: No.  Key addresses:  The auth governance address for RwaInputConduit, RwaLiquidationOracle and RwaUrn contracts The operator address that is permitted to operate on the RwaInputConduit and RwaUrn contracts. This can be multiple addresses, however, each address must be approved by governance.    Additional notes:  The RWA code implementation resides within a sandbox-like environment, and any operation not related to locking, freeing, drawing, or wiping in the RwaUrn contract must be voted on by governance. The code itself is lightweight. This implementation uses simplified Oracle, and Urn contracts to achieve the functionality required for this specific instance of RWA. While there are no overflow checks, no use of a SafeMath library, and no mitigation against the allowance race-condition, the idiosyncratic nature of the contract does not make them a requirement.     Reviewing the Architecture The overall architecture is an integration between a Tinlake pool and Maker Protocol by using first MIP22 to manage the Tinlake DROP token (FF1DRP) then using MIP21 to handle a placeholder token (RWA005) and interact with Maker. While MIP22/FF1DRP is discussed for the sake of comprehension, only the MIP21/RWA005 is considered for the scope of this assessment.  MIP22/FF1DRP part The implementation of MIP22 cand be find in the tinlake-maker-lib Github repo. The main contract is  TinlakeManager. The state diagram below shows the different stage of the smart contract and the transitions between them. It is important to note that there is no way to go back to an active state when a liquidation is started.  1011\u00d71011 35.5 KB  MIP22 operator is the MKR adapter on Tinlake called the clerk. It will use the mat defined in the ilk and matBuffer (clerk parameter) to check how much DROP tokens should be send to MIP22 in order to mint DAI.  MIP21/RWA005 part MIP21 is the component that prevents the Tinlake pool from minting more than the Debt Ceiling (line) and provides the ability for Maker Governance to trigger a liquidation. MIP21 by itself does not ensure that enough collateral (in the form of FF1DRP) is present. The core RWA architecture consists of the following contracts:  RwaLiquidationOracle RwaUrn RwaToken RwaConduit   RwaLiquidationOracle contract Source code The RwaLiquidationOracle contract is shared across all MIP21 collateral types and consists of six state-changing functions (besides the usual DSS rely(address), deny(address)), all protected by the auth modifier and can only be called by governance:  file(bytes32,address) init(bytes32 ilk,bytes32 val,address doc,uint48 tau) bump(bytes32 ilk,uint256 val) tell(bytes32) cure(bytes32) cull(bytes32)  There is one externally accessible view function: good(bytes32) that anyone can use to check the liquidation status of the position. This function does not change state. This is not a typical Maker oracle. It will only report on the liquidation status of the RwaUrn, and can only be acted upon by governance. To state it plainly, this oracle is not vulnerable to flash loan attacks or any manipulation aside from a governance attack. file can be called by governance to change the vow address (used in cull). init is the initialization function. It takes 4 parameters:   ilk: name of the vault, RWA005.  val: estimated value of the collateral. It should be above the Debt Ceiling (line) and include a buffer for some accrued interest (e.g. 2 years of SF).  doc: link to legal documents representing the underlying legal scheme.  tau: minimum delay between the soft-liquidation and the hard-liquidation/write-off. If set to 0, this allows governance to trigger both in the same spell. For Centrifuge assets, this should be set to 0 (not impact outside of Maker anyway).  bump can be called by governance to increase (not decrease which can be done only by cull) the estimated value of the collateral. tell can be called by governance to start a soft-liquidation. line should be set to 0 Dai first. tell of MIP22 TinlakeManager should be called then (public function). cure can be called by governance after a soft-liquidation has been triggered to stop it. It should not be used if tell of MIP22 TinlakeManager was already called. cull can be called by governance to start an hard-liquidation/write-off. This will mark all the remaining debt of the vault as bad debt and impact the Surplus Buffer (vow). cull of MIP22 TinlakeManager should be called then (public function).  RwaUrn Source code The RwaUrn is unique to each MIP21 collateral type.  Aside from the core DSS wards, can, rely(address), deny(address), hope(address), and nope(address) functions, there are five functions:  file(bytes32,address) lock(uint256) free(uint256) draw(uint256) wipe(uint256)  The file function can only be called by governance (via the auth modifier). The rest of the functions can only be called by those who have been given permission (hoped or noped) on the RwaUrn contract. And any Dai drawn by the RwaUrn can only be sent to the outputConduit address defined by governance when deploying the contract.  RwaToken contract Source code A standard implementation of the ERC20 token standard, with the balanceOf(address) of the deployer of the contract being set to 1 WAD at deployment. There is 18 decimals of precision. There are three state changing functions, that are all available to the tokenholder, and are specific to the ERC20 token standard:  transfer(address dst, uint wad) external returns (bool); transferFrom(address src, address dst, uint wad) public returns (bool); approve(address usr, uint wad) external returns (bool);  To reiterate how simple this ERC20 token is, please reference the Surya Description Report section below and compare it against other ERC20 token assessments.  RwaConduit Source code A simple contract with one function: push() that can be called by anyone with a current MKR balance. This function holds transitory funds, that upon being called, are transferred to the to address set using the pick function by those who have been given permission (hoped or noped). An important note about the RwaConduit for centrifuge assets.  The contract above is not used, but rather the centrifuge manager contract acts as a compliant RwaConduit.  It is this manager that performs most of the functions of MIP22 (mostly for liquidations), making centrifuge assets a MIP21/MIP22 hybrid design.  That is, MIP21 leaves liquidations up to the structure of the RWA, and for centrifuge that structure is a slightly longer on-chain liquidation specific to the DROP token types.  Contract Risk Summary The MIP21 construction contains low technical risk and is bounded by the debt ceiling. The PE core unit has given a reasonably deep review to the manager contract that acts as the RwaConduit and resolved any issues there; however, only a surface review was given to the details of tinlake liquidations.  This is where technical risk may exist.  As of the time of this writing, this code has had a 120 people hour audit, and is currently undergoing more audits.  Our team suggests a more conservative treatment of the debt ceiling to limit exposure to this unknown technical risk until more audits can be performed.  This debt ceiling consideration should span across the aggregate of all collateral types using MIP22 until more audits are available. The ERC20 functions of the RwaToken are implemented to industry standard, but do not mitigate the allowance race-condition or use a SafeMath library. This is of minor consequence, as actual usage of the approve(address,uint) function should be constrained. Future, more advanced implementations of RWA that will trade on markets should not use this implementation. The core functions of the contracts are very limited in ability, and are restricted only to governance or the trusted addresses to lock, free, draw, or wipe Dai in the RwaUrn. Compared to a standard ERC20 token with administrative functions and multiple admin/controller addresses, this is a considerably lower risk contract.  Inheritance Diagram The ERC20 token contract does not inherit other contracts.  S\u016brya\u2019s Description Report  Files Description Table     File Name SHA-1 Hash     RwaToken.sol df9d2a7f8f594fced88b457aa003100c347ace31     Contracts Description Table     Contract Type Bases       \u2514 Function Name Visibility Mutability Modifiers          RwaToken Implementation      \u2514 add Internal       \u2514 sub Internal       \u2514  Public    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom Public    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f     Legend     Symbol Meaning      Function can modify state    Function is payable     ",
                    "links": [
                        "https://forum.makerdao.com/t/fft1-drop-mip6-application-fortunafi-drop-revenue-based-financing-assets/6015",
                        "https://forum.makerdao.com/t/vault-liquidation-mechanism-for-centrifuge-trade-finance-assets-a-pre-mip-discussion/3737",
                        "https://forum.makerdao.com/t/mip22-centrifuge-direct-liquidation-module/3930",
                        "https://forum.makerdao.com/t/mip21-real-world-assets-off-chain-asset-backed-lender/3917",
                        "https://github.com/makerdao/MIP21-RWA-Example/",
                        "https://github.com/makerdao/dss-gem-joins/blob/c2ba746fd45593136475aa5e308a57db87e7eb7f/src/join-auth.sol",
                        "https://docs.centrifuge.io/learn/understanding-tinlake/",
                        "https://github.com/centrifuge/tinlake-maker-lib/tree/3349563dece283f71de48d074a22022281171029",
                        "https://github.com/centrifuge/tinlake/blob/f5b0fd1135fbcd0b6a0825a9258cf3eef568d2bd/src/lender/adapters/mkr/clerk.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaLiquidationOracle.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaUrn.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaToken.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaConduit.sol",
                        "https://forum.makerdao.com/t/protocol-engineering-month-in-review-may-2021/8471",
                        "https://forum.makerdao.com/t/maker-relay-ep-48/8609",
                        "https://forum.makerdao.com/t/maker-relay-ep-48-en-espanol/8636"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.352766106442576
                }
            ]
        },
        {
            "thread_link": "https://forum.makerdao.com/t/rwa006-pp1drp-p1-drop-mip22-token-protocol-engineering-domain-team-assessment/8418",
            "title": "[RWA006/PP1DRP] P1-DROP/MIP22 Token Protocol Engineering Domain Team Assessment ",
            "index": 8418,
            "category": [
                "Collateral Onboarding",
                "Domain Work"
            ],
            "tags": [
                "collateral-onboard",
                "real-world-finance",
                "sc-domain-work",
                "mips",
                "centrifuge",
                "real-assets",
                "pe-domain-work"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/cmooney",
                    "index": "#1",
                    "likes": "0",
                    "time": "28/05/2021-16:44:29",
                    "content": " General Information This assessment, like any RWA collateral type, deviates from the standard smart contract technical assessment format because of the idiosyncratic nature of the RWA collateral types. For Centrifuge RWA collateral type, the DROP token of a Tinlake pool, PP1DRP in this case, is managed by MIP22 and interfaced with Maker Protocol through MIP21 and the creation of a placeholder token, by the deployment spell, RWA006 in this case. For this assessment, we will be focusing on the MIP21 token RWA006 (to be deployed) for Peoples Company Series 1 PP1DRP token (to be deployed), as well as the infrastructure for all centrifuge tokens.   Symbol: RWA006  Relevant MIP information:  [P1-DROP] MIP6 Application: Peoples Company DROP: US Agricultural Real Estate Vault Liquidation Mechanism for Centrifuge Trade Finance Assets: A Pre-MIP Discussion MIP22: Centrifuge Direct Liquidation Module MIP21: Real World Assets - Off-Chain Asset Backed Lender    Total supply: 1 WAD (1 * 10 ^ 18)  Github repository:  GitHub - makerdao/MIP21-RWA-Example: MIP21 example    Can use existing MCD collateral type adapter?  This collateral use the MIP21 authed join and exit functions.  These functions are similar to other RWA onboarding that uses this framework.     Technical Information   Does the contract implement the ERC20 token standards? Yes.  Decimals: 18.  Overflow checks: No.  Mitigation against allowance race-condition: No.  Upgradeable contract patterns: No.  Access control or restriction lists: No.  Non-standard features or behaviors: No.  Key addresses:  The auth governance address for RwaInputConduit, RwaLiquidationOracle and RwaUrn contracts The operator address that is permitted to operate on the RwaInputConduit and RwaUrn contracts. This can be multiple addresses, however, each address must be approved by governance.    Additional notes:  The RWA code implementation resides within a sandbox-like environment, and any operation not related to locking, freeing, drawing, or wiping in the RwaUrn contract must be voted on by governance. The code itself is lightweight. This implementation uses simplified Oracle, and Urn contracts to achieve the functionality required for this specific instance of RWA. While there are no overflow checks, no use of a SafeMath library, and no mitigation against the allowance race-condition, the idiosyncratic nature of the contract does not make them a requirement.     Reviewing the Architecture The overall architecture is an integration between a Tinlake pool and Maker Protocol by using first MIP22 to manage the Tinlake DROP token (PP1DRP) then using MIP21 to handle a placeholder token (RWA006) and interact with Maker. While MIP22/PP1DRP is discussed for the sake of comprehension, only the MIP21/RWA006 is considered for the scope of this assessment.  MIP22/PP1DRP part The implementation of MIP22 cand be find in the tinlake-maker-lib Github repo. The main contract is  TinlakeManager. The state diagram below shows the different stage of the smart contract and the transitions between them. It is important to note that there is no way to go back to an active state when a liquidation is started.  1011\u00d71011 35.5 KB  MIP22 operator is the MKR adapter on Tinlake called the clerk. It will use the mat defined in the ilk and matBuffer (clerk parameter) to check how much DROP tokens should be send to MIP22 in order to mint DAI.  MIP21/RWA006 part MIP21 is the component that prevents the Tinlake pool from minting more than the Debt Ceiling (line) and provides the ability for Maker Governance to trigger a liquidation. MIP21 by itself does not ensure that enough collateral (in the form of PP1DRP) is present. The core RWA architecture consists of the following contracts:  RwaLiquidationOracle RwaUrn RwaToken RwaConduit   RwaLiquidationOracle contract Source code The RwaLiquidationOracle contract is shared across all MIP21 collateral types and consists of six state-changing functions (besides the usual DSS rely(address), deny(address)), all protected by the auth modifier and can only be called by governance:  file(bytes32,address) init(bytes32 ilk,bytes32 val,address doc,uint48 tau) bump(bytes32 ilk,uint256 val) tell(bytes32) cure(bytes32) cull(bytes32)  There is one externally accessible view function: good(bytes32) that anyone can use to check the liquidation status of the position. This function does not change state. This is not a typical Maker oracle. It will only report on the liquidation status of the RwaUrn, and can only be acted upon by governance. To state it plainly, this oracle is not vulnerable to flash loan attacks or any manipulation aside from a governance attack. file can be called by governance to change the vow address (used in cull). init is the initialization function. It takes 4 parameters:   ilk: name of the vault, RWA006.  val: estimated value of the collateral. It should be above the Debt Ceiling (line) and include a buffer for some accrued interest (e.g. 2 years of SF).  doc: link to legal documents representing the underlying legal scheme.  tau: minimum delay between the soft-liquidation and the hard-liquidation/write-off. If set to 0, this allows governance to trigger both in the same spell. For Centrifuge assets, this should be set to 0 (not impact outside of Maker anyway).  bump can be called by governance to increase (not decrease which can be done only by cull) the estimated value of the collateral. tell can be called by governance to start a soft-liquidation. line should be set to 0 Dai first. tell of MIP22 TinlakeManager should be called then (public function). cure can be called by governance after a soft-liquidation has been triggered to stop it. It should not be used if tell of MIP22 TinlakeManager was already called. cull can be called by governance to start an hard-liquidation/write-off. This will mark all the remaining debt of the vault as bad debt and impact the Surplus Buffer (vow). cull of MIP22 TinlakeManager should be called then (public function).  RwaUrn Source code The RwaUrn is unique to each MIP21 collateral type.  Aside from the core DSS wards, can, rely(address), deny(address), hope(address), and nope(address) functions, there are five functions:  file(bytes32,address) lock(uint256) free(uint256) draw(uint256) wipe(uint256)  The file function can only be called by governance (via the auth modifier). The rest of the functions can only be called by those who have been given permission (hoped or noped) on the RwaUrn contract. And any Dai drawn by the RwaUrn can only be sent to the outputConduit address defined by governance when deploying the contract.  RwaToken contract Source code A standard implementation of the ERC20 token standard, with the balanceOf(address) of the deployer of the contract being set to 1 WAD at deployment. There is 18 decimals of precision. There are three state changing functions, that are all available to the tokenholder, and are specific to the ERC20 token standard:  transfer(address dst, uint wad) external returns (bool); transferFrom(address src, address dst, uint wad) public returns (bool); approve(address usr, uint wad) external returns (bool);  To reiterate how simple this ERC20 token is, please reference the Surya Description Report section below and compare it against other ERC20 token assessments.  RwaConduit Source code A simple contract with one function: push() that can be called by anyone with a current MKR balance. This function holds transitory funds, that upon being called, are transferred to the to address set using the pick function by those who have been given permission (hoped or noped). An important note about the RwaConduit for centrifuge assets.  The contract above is not used, but rather the centrifuge manager contract acts as a compliant RwaConduit.  It is this manager that performs most of the functions of MIP22 (mostly for liquidations), making centrifuge assets a MIP21/MIP22 hybrid design.  That is, MIP21 leaves liquidations up to the structure of the RWA, and for centrifuge that structure is a slightly longer on-chain liquidation specific to the DROP token types.  Contract Risk Summary The MIP21 construction contains low technical risk and is bounded by the debt ceiling. The PE core unit has given a reasonably deep review to the manager contract that acts as the RwaConduit and resolved any issues there; however, only a surface review was given to the details of tinlake liquidations.  This is where technical risk may exist.  As of the time of this writing, this code has had a 120 people hour audit, and is currently undergoing more audits.  Our team suggests a more conservative treatment of the debt ceiling to limit exposure to this unknown technical risk until more audits can be performed.  This debt ceiling consideration should span across the aggregate of all collateral types using MIP22 until more audits are available. The ERC20 functions of the RwaToken are implemented to industry standard, but do not mitigate the allowance race-condition or use a SafeMath library. This is of minor consequence, as actual usage of the approve(address,uint) function should be constrained. Future, more advanced implementations of RWA that will trade on markets should not use this implementation. The core functions of the contracts are very limited in ability, and are restricted only to governance or the trusted addresses to lock, free, draw, or wipe Dai in the RwaUrn. Compared to a standard ERC20 token with administrative functions and multiple admin/controller addresses, this is a considerably lower risk contract.  Inheritance Diagram The ERC20 token contract does not inherit other contracts.  S\u016brya\u2019s Description Report  Files Description Table     File Name SHA-1 Hash     RwaToken.sol df9d2a7f8f594fced88b457aa003100c347ace31     Contracts Description Table     Contract Type Bases       \u2514 Function Name Visibility Mutability Modifiers          RwaToken Implementation      \u2514 add Internal       \u2514 sub Internal       \u2514  Public    NO\u2757\ufe0f   \u2514 transfer External    NO\u2757\ufe0f   \u2514 transferFrom Public    NO\u2757\ufe0f   \u2514 approve External    NO\u2757\ufe0f     Legend     Symbol Meaning      Function can modify state    Function is payable     ",
                    "links": [
                        "https://forum.makerdao.com/t/vault-liquidation-mechanism-for-centrifuge-trade-finance-assets-a-pre-mip-discussion/3737",
                        "https://forum.makerdao.com/t/mip22-centrifuge-direct-liquidation-module/3930",
                        "https://forum.makerdao.com/t/mip21-real-world-assets-off-chain-asset-backed-lender/3917",
                        "https://github.com/makerdao/MIP21-RWA-Example/",
                        "https://github.com/makerdao/dss-gem-joins/blob/c2ba746fd45593136475aa5e308a57db87e7eb7f/src/join-auth.sol",
                        "https://docs.centrifuge.io/learn/understanding-tinlake/",
                        "https://github.com/centrifuge/tinlake-maker-lib/tree/3349563dece283f71de48d074a22022281171029",
                        "https://github.com/centrifuge/tinlake/blob/f5b0fd1135fbcd0b6a0825a9258cf3eef568d2bd/src/lender/adapters/mkr/clerk.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaLiquidationOracle.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaUrn.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaToken.sol",
                        "https://github.com/makerdao/MIP21-RWA-Example/blob/2355c22db5ddd68a980515d87cfde6e6e132769a/src/RwaConduit.sol",
                        "https://forum.makerdao.com/t/maker-relay-ep-48/8609",
                        "https://forum.makerdao.com/t/maker-relay-ep-48-en-espanol/8636"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.359049930651873
                },
                {
                    "author_link": "https://forum.makerdao.com/u/cmooney",
                    "index": "#2",
                    "likes": "0",
                    "time": "28/05/2021-16:46:18",
                    "content": "    cmooney:  PP1DRP   Note: that this token is not deployed yet, but this has no material impact on our assessment as the asset is remote to the core accounting.  We\u2019ll fill this in once the token is deployed. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.5
                }
            ]
        }
    ],
    "group_index": "3707"
}