{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-1051-arithmetic-overflow-detection-for-the-evm/261",
            "title": "EIP-1051: Arithmetic overflow detection for the EVM ",
            "index": 261,
            "category": [
                "EIPs"
            ],
            "tags": [
                "evm"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "1",
                    "likes": "3",
                    "time": "02/05/2018-17:59:49",
                    "content": "I\u2019ve written up an EIP for overflow detection in the EVM, here. Feedback appreciated! ",
                    "links": [],
                    "GPT-summary": "The author has written an EIP proposing overflow detection in the EVM and is asking for feedback on the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "None",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/phiferd",
                    "index": "2",
                    "likes": "1",
                    "time": "04/05/2018-01:06:42",
                    "content": "Thanks for putting this together, Nick.  One option would be to provide an opcode that enables overflow protection, causing a throw or revert if an overflow happens. However, this limits the manner in which overflows can be handled.  Are you thinking that the EVM can provide this low level detection, and then solidity or other languages can add default checks in the future? Ideally, newly created/compiled smart contracts should automatically throw on overflow. If developers really want to handle it differently, the language can provide a switch or annotation to prevent the compiler from generating the default checks. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.3910308441558445
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "3",
                    "likes": "1",
                    "time": "04/05/2018-16:34:38",
                    "content": "The EVM just provides a flag, and it\u2019s up to higher level languages to decide how to utilise it. For the most part in languages like Solidity, you could check the overflow flag once per basic block. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/nootropicat",
                    "index": "4",
                    "likes": "2",
                    "time": "06/05/2018-00:15:51",
                    "content": "Support the idea, but  Why the nonstandard naming? \u2018Overflow\u2019 for the carry flag and \u2018signed overflow\u2019 for the overflow flag. It\u2019s a bit confusing. Instead of two separate flag registers, one FLAGS register (like on a cpu) with bit flags allows easier extensibility and doesn\u2019t use new opcodes for every new flag. On x86 pushf to push the flags register and popf to set it are used. Given the flags register, perhaps zero and sign flag as well? They already exists on every cpu.  Using the flags register makes it easily possible to implement the \u2018trap on overflow/carry\u2019 functionality, by adding two new flags that determine throwing when they are set + flag conditional jumps which would reduce code size and gas use considerably, see:    Ethereum Research \u2013 18 Jan 18    EVM Idea: Add access to overflow, carry, sign and zero flags to reduce gas use Motivation:   lack of overflow flag means checking for overflow wastes gas and storage on pointless comparisons lack of carry flag makes >256 bit arithmetic slow because it has to be reimplemented via comparisons  If these two flags were to be added...       Instead of simply reverting, the address of an arbitrary error handler could be set in the flags register (second dword?), jumped to after the flag is set with the offending instruction\u2019s address on the stack. ",
                    "links": [
                        "https://ethresear.ch/t/evm-idea-add-access-to-overflow-carry-sign-and-zero-flags-to-reduce-gas-use/782"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.732954545454545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "5",
                    "likes": "1",
                    "time": "06/05/2018-09:51:45",
                    "content": "Thanks for the feedback!     nootropicat:  Why the nonstandard naming? \u2018Overflow\u2019 for the carry flag and \u2018signed overflow\u2019 for the overflow flag. It\u2019s a bit confusing.   We don\u2019t currently have any opcodes that can benefit from a \u2018carry\u2019 flag, and I thought using that terminology might imply we do. I\u2019m happy to change it back, though.     nootropicat:  Instead of two separate flag registers, one FLAGS register (like on a cpu) with bit flags allows easier extensibility and doesn\u2019t use new opcodes for every new flag. On x86 pushf to push the flags register and popf to set it are used.   I\u2019m on the fence about this. It would reduce opcodes, but it would also require more work to check the register each time.     nootropicat:  Given the flags register, perhaps zero and sign flag as well? They already exists on every cpu.   I don\u2019t think those would actually be any easier to check and branch on than at present, would they? Without it, you can branch on 0 with DUP1 NOT JUMPI, without it it\u2019d be FLAGS PUSH (mask) JUMPI.     nootropicat:  Using the flags register makes it easily possible to implement the \u2018trap on overflow/carry\u2019 functionality, by adding two new flags that determine throwing when they are set + flag conditional jumps which would reduce code size and gas use considerably, see:   I\u2019d be concerned about adding complexity to the VM with modal flags like this. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.676573426573427
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/nootropicat",
                    "index": "6",
                    "likes": "1",
                    "time": "07/05/2018-00:39:16",
                    "content": "    Arachnid:  We don\u2019t currently have any opcodes that can benefit from a \u2018carry\u2019 flag   If any way to detect the carry flag exist it can be used to cheaply, compared to comparisons, implement an arbitrary precision arithmetic, by adding/subtracting the carry flag. On x86 there are even specialized instructions that do this, adc (add with carry) and sbw (subtract with borrow).     Arachnid:  I\u2019m on the fence about this. It would reduce opcodes, but it would also require more work to check the register each time.   Fair enough. Pushf could have a byte number that means a bit to be pushed, with one special value of 0xFF that pushes the entire register. Ditto for popf (first argument the index, second the value). This combines the simplicity of one-case opcodes with extensibility.  I don\u2019t think those would actually be any easier to check and branch on than at present, would they? Without it, you can branch on 0 with DUP1 NOT JUMPI, without it it\u2019d be FLAGS PUSH (mask) JUMPI.  True for the zero flag without cmp and flag-conditional jumps, but not true for the sign one.     Arachnid:  I\u2019d be concerned about adding complexity to the VM with modal flags like this.   Not that much, It can be implemented as one if that pushes the address onto the stack + changes the instruction pointer to the trap handler, leaving the rest to the normal execution loop. More generally, performance requires specialization. Complex instructions, eg. for text parsing are still being added into cpus. The RISC approach is dead. There\u2019s also the adoption and safety aspect. On the vm side the operation is one check each time the overflow/carry flag is set, but reimplementing the behavior in the compiler requires changing the code generation for each arithmetic instruction. Much more work and more room for errors. Setting a trap flag at the beginning is trivial to add in comparison. For these reasons I think VM is the best abstraction level to tackle the overflow problem. That\u2019s a bit offtopic, but given the performance characteristics of EVM the CISC-like approach would imo yield much higher benefits than it does in physical cpus. Like the solidity method selector: all these pushes and comparisons at the beginning of almost every contract execution could be replaced by a switch instruction that jumps according to an array specified directly in code, additionally switch-like ifs in code could be optimized that way by a compiler. A small advantage multiplied by billions of executions. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.88558201058201
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "7",
                    "likes": "2",
                    "time": "09/05/2018-01:24:37",
                    "content": "One problem here is implementation difficulty.  Some libraries support checking directly, others don\u2019t.  If they don\u2019t every specified operation will be slowed down by an explicit comparison.  I\u2019d wager the libraries that support checking are in the minority (even in C++) so I\u2019d as soon let the code that cares about overflow handle it explicitly. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.861111111111111
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "8",
                    "likes": "1",
                    "time": "09/05/2018-10:32:22",
                    "content": "    nootropicat:  If any way to detect the carry flag exist it can be used to cheaply, compared to comparisons, implement an arbitrary precision arithmetic, by adding/subtracting the carry flag.   Fair enough - though this probably also depends on it being available as a separate bit for efficiency, no?     nootropicat:  Not that much, It can be implemented as one if that pushes the address onto the stack + changes the instruction pointer to the trap handler, leaving the rest to the normal execution loop.   Reasonable point. What do you see as the pros and cons of a trap handler vs a flag, then?     nootropicat:  On the vm side the operation is one check each time the overflow/carry flag is set, but reimplementing the behavior in the compiler requires changing the code generation for each arithmetic instruction. Much more work and more room for errors. Setting a trap flag at the beginning is trivial to add in comparison. For these reasons I think VM is the best abstraction level to tackle the overflow problem.   To be clear, either approach would require compiler changes. Solidity would have to allow you to specify when overflow is and isn\u2019t wanted, and either check the flag or set and clear the trap handler.     gcolvin:  One problem here is implementation difficulty.  Some libraries support checking directly, others don\u2019t.  If they don\u2019t every specified operation will be slowed down by an explicit comparison.  I\u2019d wager the libraries that support checking are in the minority (even in C++) so I\u2019d as soon let the code that cares about overflow handle it explicitly.   Surely capturing overflow in implementations isn\u2019t that hard? The underlying hardware already supports it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "3rd party or author is advertising proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.265522875816993
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "9",
                    "likes": "1",
                    "time": "09/05/2018-18:19:56",
                    "content": "The EVM\u2019s 256-bit registers are emulated using available libraries for arbitrary-precision arithmetic.  The hardware is far away.  Most algorithms don\u2019t overflow, they just produce a bigger result.  Try implementing your proposal in the Go VM and you may see the difficulty. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "10",
                    "likes": "1",
                    "time": "09/05/2018-18:26:17",
                    "content": "You might look at the IELE VM, which has registers that do just keep growing in size.  Like the natural numbers. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/nootropicat",
                    "index": "11",
                    "likes": "1",
                    "time": "09/05/2018-22:24:30",
                    "content": "    gcolvin:  If they don\u2019t every specified operation will be slowed down by an explicit comparison.   Why slowed down? The cost of simple comparison on data already in L1 is effectively zero. The cost of manual checking in safemath should be more expensive by orders of magnitude. Go\u2019s compiler optimization would have to be horrible for a comparison to be noticeable in any way.     gcolvin:  Try implementing your proposal in the Go VM and you may see the difficulty.   Go implements big math in assembly. https://golang.org/src/math/big/arith_amd64.s I don\u2019t know Go much, but according to this calling arbitrary native code in Go is easy and can offer big performance improvements:  name                 time/op GetBucket-8          17.4ns \u00b1 2% GetBucketNoInline-8  17.4ns \u00b1 2% GetBucketASM-8       12.8ns \u00b1 1%  in any case, I don\u2019t think it would be possible to observe the difference between a comparison in go (assuming reasonable optimizing compiler) vs checking carry/overflow in assembly/C/C++, but in the case that it is, external code in C/C++, optionally with intrinsics or inline asm could be used.     Arachnid:  What do you see as the pros and cons of a trap handler vs a flag, then?   Ah, I wasn\u2019t clear enough - I meant a flag AND an option to trap on it. For example, for a FLAGS register defined in the following way:  struct FLAGS { unsigned short int flags; unsigned short int trapMask; unsigned int trapHandler; //defaults to revert? }  with flags\u2019 bits defined as:  carryFlag | overFlowFlag | signFlag | zeroFlag | reserved | \u2026  trapMask as a bitmask for traps:  carryFlagTrap | overflowFlagTrap | signFlag | zeroFlag | reserved | \u2026  ie. when carryFlagTrap bit is set trap on setting carryFlag. After flags are set in EVM it\u2019s enough to:  if(FLAGS.flags&FLAGS.trapMask) { pushOnEvmStack(evmEip); evmEip = FLAGS.trapHandler; } //end current instruction  So this way, there are both flags, optional traps and everything is easily extensible. I guess in this construction arguments 0-31 for pushf/popf could refer to flags\u2019 and mask\u2019s bits, 255 for the whole register, 254 for flags, 253 for trapMask and 252 for trapHandler. Perhaps 251 for trapMask with trapHandler at once, as these two fields are likely to be set together.  To be clear, either approach would require compiler changes. Solidity would have to allow you to specify when overflow is and isn\u2019t wanted, and either check the flag or set and clear the trap handler.  Well yes, but enabling trapping on overflow could be implemented as a one dumb pushf added at the beginning, pure flags require changes in code generation for arithmetic expressions. A simple pushf could in principle be added manually after compiling, or as inline asm, with a compiler that doesn\u2019t know traps exist. ",
                    "links": [
                        "https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/",
                        "https://gcc.gnu.org/onlinedocs/gcc/Integer-Overflow-Builtins.html"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.132473544973545
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Arachnid",
                    "index": "12",
                    "likes": "1",
                    "time": "10/05/2018-14:03:28",
                    "content": "    nootropicat:  Ah, I wasn\u2019t clear enough - I meant a flag AND an option to trap on it.   Fair enough. I\u2019m concerned this pattern, while common in MCUs, isn\u2019t really idiomatic for the EVM, though. It introduces several new concepts that haven\u2019t previously featured. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.372053872053872
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maciej",
                    "index": "13",
                    "likes": "1",
                    "time": "11/05/2018-15:51:52",
                    "content": "    Arachnid:  Solidity would have to allow you to specify when overflow is and isn\u2019t wanted, and either check the flag or set and clear the trap handler.   Coming from Rust, integer overflows always panic by default. Doing any sort of math that requires overflowing as a feature is such a niche use case, we handle it with a specialized method: // Panic on runtime let x = u32::max_value() + 1;      // No panic, x = 0 let x = u32::max_value().wrapping_add(1);  I realize that making all arithmetic overflows be treated as errors by default would be a breaking change for Solidity, but I really cannot think of a reason why it should not be a default. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "14",
                    "likes": "2",
                    "time": "16/05/2018-02:20:17",
                    "content": "I don\u2019t know if I\u2019m confused or the discussion is, but I don\u2019t think the behavior of native ints is the issue here, or the fact that some big-integer libraries are written in assembly.  The issue is how to implement this in VMs that mostly are not written in assembly, and shouldn\u2019t need to be.  Not even C provides access to the carry bit, and neither do most big-integer libraries.  So the only way to test for overflow in most cases is to not let the result overflow, then test whether it\u2019s too big.  I\u2019m no longer sure whether this is a big performance hit, but measurements would good to have. As for making overflows throw, that would break not just Solidity, but every EVM program that counts on the EVM having unsigned values that don\u2019t overflow.  Better that Solidity use whatever mechanism is provided to detect overflow to introduce a new type that traps. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 6.3347107438016526
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maciej",
                    "index": "15",
                    "likes": "3",
                    "time": "17/05/2018-15:41:28",
                    "content": "I don\u2019t know about Geth or other implementations, but the big integer primitives in Parity (implemented both in inline assembly and pure rust depending on compilation target) already return a boolean for overflows:   github.com   paritytech/primitives/blob/dfb17048cba127e086d9105e5ef9ecea240575c2/uint/src/uint.rs#L868-L874  \t\t\t/// Checked multiplication. Returns `None` if overflow occurred. \t\t\tpub fn checked_mul(self, other: $name) -> Option<$name> { \t\t\t\tmatch self.overflowing_mul(other) { \t\t\t\t\t(_, true) => None, \t\t\t\t\t(val, _) => Some(val), \t\t\t\t} \t\t\t}       I\u2019d have to look deeper into how signed ops are performed to see if it\u2019s realistic to get SOVF flag on top, but right now it appears to me that the only performance cost for implementing this EIP in Parity EVM is just the cost of storing the flag instead of just throwing it away.     gcolvin:  As for making overflows throw, that would break not just Solidity, but every EVM program that counts on the EVM having unsigned values that don\u2019t overflow.   I was talking purely about changing the behavior on Solidity side by using the new opcodes, so it would be a breaking change for Solidity and hence require a semver bump to 0.5.x. No breaking changes to EVM. ",
                    "links": [
                        "https://github.com/paritytech/primitives/blob/dfb17048cba127e086d9105e5ef9ecea240575c2/uint/src/uint.rs#L868-L874"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.735143644234553
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maciej",
                    "index": "16",
                    "likes": "2",
                    "time": "23/05/2018-16:23:08",
                    "content": "Just to expand on this, I looked at the actual EVM interpreter and can confirm that all math is already checking for overflows and throws the flag away: in stack.push(a.overflowing_add(b).0); any overflowing_X operation returns a tuple of (result, overflow_flag), hence .0 just grabs the result. Since there were concerns raised during the dev call about the cost of multiplication in particular, I looked at how multiplication is done internally:  The pure Rust implementation uses 512bit (8 limbs) on stack which then checks if any of the top half of the integer is non-zero. The optimized Assembly code (x86_64 only) on the other hand uses only 5 registers for result (4 limbs in the array and separate register for overflow).  I also took the liberty of looking at how Geth handles things, apologies in advance if I\u2019m missing anything here and please correct me if I\u2019m wrong. It appears to me that all EVM math stuff is handled by arbitrary precision big.Int from math/big that gets it\u2019s results truncated with U256 (which just uses a binary and operation with 2^256-1), so while it doesn\u2019t return an overflow flag, it already does the expensive part of performing the multiplication with as many extra limbs as necessary, and getting the flag is just a single Cmp away. The library does expose access to limbs if a full Cmp would be excessive. TL;DR: Both Geth and Parity already do all the heavy lifting on math that is required to extract the overflow flag, I reckon the overhead of getting and storing the flag relatively speaking should be trivial, and can be well optimized with fixed-precision libraries if benchmarks disagree.  @Arachnid: one thing that\u2019s still not clear for me is the necessity of SOVF,  it\u2019s not mentioned in the rationale. ",
                    "links": [
                        "https://golang.org/pkg/math/big/#Int.Bits"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.901785714285714
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Nucnay3428",
                    "index": "17",
                    "likes": "0",
                    "time": "05/01/2019-00:05:42",
                    "content": "I\u2019m new to this well I\u2019ve been trying to take the plunge into something New but not had the confidence to be fully committed for nearly two years and I\u2019m struggling to understand reading is not a strong point but I\u2019m getting a lot of practice and am able to make more sense of the sites thanks to all of you that replied to this 3 Detailed discussion s which each had valid points and different problems solved this has really helped with my knowledge and understanding need more posts like these\ud83d\udc4f ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "None of the topics listed match."
                    ],
                    "Sentiment": 6.116391184573002
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "18",
                    "likes": "0",
                    "time": "06/01/2019-00:09:05",
                    "content": "@Arachnid I don\u2019t see Wasm in this discussion.  I don\u2019t think it provides access to the overflow bit. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/maciej",
                    "index": "19",
                    "likes": "0",
                    "time": "08/02/2019-15:41:06",
                    "content": "@gcolvin It doesn\u2019t have it AFAIK, but it\u2019s planned: https://github.com/WebAssembly/design/blob/master/FutureFeatures.md#integer-overflow-detection ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/gcolvin",
                    "index": "20",
                    "likes": "0",
                    "time": "14/03/2021-20:12:59",
                    "content": "@Arachnid yes - why the non-standard names?  And perhaps, more descriptive names e.g. ISCARRY and ISOVERFLOW to go with the existing ISZERO See The CARRY flag and OVERFLOW flag in binary arithmetic for a detailed discussion of when to set and how to use these flags. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 7.25
                }
            ]
        }
    ],
    "group_index": "684"
}