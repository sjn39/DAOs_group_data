{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/sharding-format-blob-carrying-transactions/8289",
            "title": "Sharding-format blob-carrying transactions ",
            "index": 8289,
            "category": [
                "Sharding"
            ],
            "tags": [
                "sharding"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/vbuterin",
                    "index": "1",
                    "likes": "6",
                    "time": "14/02/2022-16:41:27",
                    "content": "This thread is to discuss the sharding-format blob-carrying transactions pre-EIP:    HackMD    Sharding-format blob-carrying transactions - HackMD ## Simple Summary  Introduce a new transaction format for \"blob-carrying transactions\" which conta      ",
                    "links": [
                        "https://notes.ethereum.org/@vbuterin/blob_transactions",
                        "https://ethereum-magicians.org/t/eip-4844-shard-blob-transactions/8430"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.340909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/tynes",
                    "index": "2",
                    "likes": "0",
                    "time": "28/02/2022-04:19:11",
                    "content": "During ETHDenver, there was some good progress made on implementing this. See  twitter.com    proto.eth \ud83e\udd87 \ud83d\udd0a @protolambda  At @EthereumDenver we hacked together a full data-blob-transaction prototype! (a.k.a. mini-danksharding)  Data blobs are the first milestone towards full ethereum sharding, enabling rollups like @optimismPBC to grow 100x in capacity.  Here's a tweet thread about the prototype \ud83e\uddf5   3:18 PM - 20 Feb 2022           1.9K                409            The code contains a file that is responsible for creating a trusted setup, see go-ethereum/main.go at a922276f31f130a83493a0406bae345ec1e19324 \u00b7 protolambda/go-ethereum \u00b7 GitHub The implementation of the code that generates the trusted setup is here - _github.com/protolambda/go-kzg/blob/master/setup.go (can only post 2 links per post so evading the linking). Its not super complex code, but I am curious about how this trusted setup could be expanded to be multiparty and also have a 1 of n security model, where there only needs to be 1 participant that doesn\u2019t defect for the trusted setup to be secure. Is that possible and what does the math look like for that? ",
                    "links": [
                        "https://twitter.com/protolambda/status/1495538286332624898",
                        "https://twitter.com/protolambda/status/1495538286332624898",
                        "https://twitter.com/protolambda/status/1495538286332624898",
                        "https://github.com/protolambda/go-ethereum/blob/a922276f31f130a83493a0406bae345ec1e19324/cmd/kzg_dummy_setup/main.go"
                    ],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.737847222222222
                }
            ]
        }
    ],
    "group_index": "1601"
}