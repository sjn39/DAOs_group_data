{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://forum.makerdao.com/t/introducing-rwa-registry/19782",
            "title": "Introducing RWA Registry ",
            "index": 19782,
            "category": [
                "Core Units",
                "Collateral Engineering Services"
            ],
            "tags": [
                "ces-001"
            ],
            "content": [
                {
                    "author_link": "https://forum.makerdao.com/u/CES_CU",
                    "index": "#1",
                    "likes": "5",
                    "time": "10/02/2023-16:27:23",
                    "content": " What it is PR: Chore: Review Contracts by amusingaxl \u00b7 Pull Request #7 \u00b7 ces-core/mip21-registry \u00b7 GitHub The RWA Registry aims to be a flexible and extensible registry for all current and future components of the MIP21 architecture, without requiring features such as upgradeability, which bring more complexity. To prevent malicious updates, all non-view methods are permissioned.  Use cases  1.- Keeper bots For RWA deals onboarded which use the RWAJar design a permissionless function void() is required to be called in order to push the yield (DAI) into the surplus buffer. Likewise some InputConduits are permissionless and require push() to be called by an external actor.  Problem There is no single source of truth for keeper bots to fetch a list for RWAJars or InputConduits to iterate over in order to execute all required actions. Right now this list would need to be hardcoded and updated through new deployments.  2.- Trustworthiness Many MIP21 components are not included in the Maker chainlog. These components are wired in such a way that funds can only be routed to chainlog components or modified by governance.  Problem For expert technical users, figuring out if they can trust MIP21 components is trivial by looking at the code, but in RWA deals, many of the counterparties lack this expertise and their interaction with the blockchain is not more than using a crypto broker which can only send normal ERC20 transfers and won\u2019t interact or review contracts, hence, RWA deal counterparties need to trust what CES Devs or the Forum provides. Having a single source of truth RWA Registry controlled by governance which can easily review and validate the address before sending funds would mitigate this problem. Another problem is that as we deliver more RWAs, keeping track of all the components wired in a deal becomes not manageable by humans and depending on the forum as the single source of truth lacks redundancy. Conduit contracts are very varied, each has a slightly different implementation making it more difficult to keep track of all the different implementations, the registry\u2019s readme would be used to document the catalog of conduits available. One last problem is that not all RWA deals require a vault to be deployed, for example GUSD solution doesn\u2019t require an executive which means that the smart contracts don\u2019t follow the typical executive review and voting process, which makes it harder to define how legit a smart contract address is without looking at the code. Having such a contract into the registry would legitimize its existence.  3.- Emergency Shutdown During ES, funds can be stuck in conduits. This means that having a single contract which can pull funds and list all MIP21 components would ease the problem.  Maintenance  Governance owns the RWA Registry Permissioned functions on RWA Registry can only be accessed by governance through spells, hence maintaining the RWA Registry will require spell work and coordination. CES contributors will be responsible for maintaining the RWA Registry up-to-date.   Deployment In collaboration with @GovAlpha-Core-Unit and @Protocol-Engineering we are planning to deploy the RWA Registry, a similar UI as chainlog.makerdao.com and a new subdomain to make the registry available for consumption. The current chainlog registry contains many RWA contracts that will be moved to the RWA Registry and removed from the chainlog registry. Ilks and PIPs for RWAs will remain in the chainlog registry as they are referenced in the code at other core system functions. The outcome is that the chainlog registry will remain listing core modules in the protocol and ancillary RWA modules will be stored in the RWA Registry. Below you can see the scope of the deployment work for each contract.  Chainlog to RWA Registry migration Contracts will be removed from the chainlog and added to the RWA Registry     Name Contract Address     RWA001-A RWA001 0x10b2aA5D77Aa6484886d8e244f0686aB319a270d   RWA001-A RWA001_A_URN 0xa3342059bcdcfa57a13b12a35ed4bbe59b873005   RWA001-A RWA001_A_INPUT_CONDUIT 0x486c85e2bb9801d14f6a8fdb78f5108a0fd932f2   RWA001-A RWA001_A_OUTPUT_CONDUIT 0xb3efb912e1cbc0b26fc17388dd433cecd2206c3d   RWA002-A RWA002 0xaaa760c2027817169d7c8db0dc61a2fb4c19ac23   RWA002-A RWA002_A_URN 0x225b3da5be762ee52b182157e67bea0b31968163   RWA002-A RWA002_A_INPUT_CONDUIT 0x2474f297214e5d96ba4c81986a9f0e5c260f445d   RWA002-A RWA002_A_OUTPUT_CONDUIT 0x2474f297214e5d96ba4c81986a9f0e5c260f445d   RWA003-A RWA003 0x07f0a80ad7aeb7bfb7f139ea71b3c8f7e17156b9   RWA003-A RWA003_A_URN 0x7bf825718e7c388c3be16cfe9982539a7455540f   RWA003-A RWA003_A_INPUT_CONDUIT 0x2a9798c6f165b6d60cfb923fe5bfd6f338695d9b   RWA003-A RWA003_A_OUTPUT_CONDUIT 0x2a9798c6f165b6d60cfb923fe5bfd6f338695d9b   RWA004-A RWA004 0x873f2101047a62f84456e3b2b13df2287925d3f9   RWA004-A RWA004_A_URN 0xef1699548717aa4cf47ad738316280b56814c821   RWA004-A RWA004_A_INPUT_CONDUIT 0xe1ed3f588a98bf8a3744f4bf74fd8540e81ade3f   RWA004-A RWA004_A_OUTPUT_CONDUIT 0xe1ed3f588a98bf8a3744f4bf74fd8540e81ade3f   RWA005-A RWA005 0x6db236515e90fc831d146f5829407746eddc5296   RWA005-A RWA005_A_URN 0xc40907545c57db30f01a1c2acb242c7c7acb2b90   RWA005-A RWA005_A_INPUT_CONDUIT 0x5b702e1fef3f556cbe219ee697d7f170a236cc66   RWA005-A RWA005_A_OUTPUT_CONDUIT 0x5b702e1fef3f556cbe219ee697d7f170a236cc66   RWA006-A RWA006 0x4ee03cfbf6e784c462839f5954d60f7c2b60b113   RWA006-A RWA006_A_URN 0x0c185bf5388ddfdb288f4d875265d456d18fd9cb   RWA006-A RWA006_A_INPUT_CONDUIT 0x8fe38d1e4293181273e2e323e4c16e0d1d4861e3   RWA006-A RWA006_A_OUTPUT_CONDUIT 0x8fe38d1e4293181273e2e323e4c16e0d1d4861e3   RWA007-A RWA007 0x078fb926b041a816facced3614cf1e4bc3c723bd   RWA007-A RWA007_A_URN 0x481ba2d2e86a1c41427893899b5b0ceae41c6726   RWA007-A RWA007_A_JAR 0xef1b095f700be471981aae025f92b03091c3ad47   RWA007-A RWA007_A_JAR_INPUT_CONDUIT 0xc8bb4e2b249703640e89265e2ae7c9d5ea2af742   RWA007-A RWA007_A_INPUT_CONDUIT 0x58f5e979ef74b60a9e5f955553ab8e0e65ba89c9   RWA007-A RWA007_A_OUTPUT_CONDUIT 0x701c3a384c613157bf473152844f368f2d6ef191   RWA008-A RWA008 0xb9737098b50d7c536b6416daeb32879444f59fca   RWA008-A RWA008_A_URN 0x495215cabc630830071f80263a908e8826a66121   RWA008-A RWA008_A_INPUT_CONDUIT 0xa397a23dda051186f202c67148c90683c413383c   RWA008-A RWA008_A_OUTPUT_CONDUIT 0x21cf5ad1311788d762f9035829f81b9f54610f0c   RWA009-A RWA009 0x8b9734bbaa628bfc0c9f323ba08ed184e5b88da2   RWA009-A RWA009_A_URN 0x1818ee501cd28e01e058e7c283e178e9e04a1e79   RWA009-A RWA009_A_JAR 0x6c6d4be2223b5d202263515351034861dd9afdb6   RWA009-A RWA009_A_OUTPUT_CONDUIT 0x508d982e13263fc8e1b5a4e6bf59b335202e36b4   RWA010-A RWA010 0x20c72c1fdd589c4aaa8d9ff56a43f3b17ba129f8   RWA010-A RWA010_A_URN 0x4866d5d24cdc6cc094423717663b2d3343d4eff9   RWA010-A RWA010_A_INPUT_CONDUIT 0x1f5c294ef3ff2d2da30ea9edad490c28096c91df   RWA010-A RWA010_A_OUTPUT_CONDUIT 0x1f5c294ef3ff2d2da30ea9edad490c28096c91df   RWA011-A RWA011 0x0b126f85285d1786f52fc911affaaf0d9253e37a   RWA011-A RWA011_A_URN 0x32c9bba0841f2557c10d3f0d30092f138251afe6   RWA011-A RWA011_A_INPUT_CONDUIT 0x8e74e529049bb135cf72276c1845f5bd779749b0   RWA011-A RWA011_A_OUTPUT_CONDUIT 0x8e74e529049bb135cf72276c1845f5bd779749b0   RWA012-A RWA012 0x3c7f1379b5ac286eb3636668deae71eaa5f7518c   RWA012-A RWA012_A_URN 0xb22e9dbf60a5b47c8b2d0d6469548f3c2d036b7e   RWA012-A RWA012_A_INPUT_CONDUIT 0x795b917ebe0a812d406ae0f99d71caf36c307e21   RWA012-A RWA012_A_OUTPUT_CONDUIT 0x795b917ebe0a812d406ae0f99d71caf36c307e21   RWA013-A RWA013 0xd6c7fd4392d328e4a8f8bc50f4128b64f4db2d4c   RWA013-A RWA013_A_URN 0x9c170dd80ee2ca5bfddf00cbe93e8fab2d05ba6d   RWA013-A RWA013_A_INPUT_CONDUIT 0x615984f33604011fcd76e9b89803be3816276e61   RWA013-A RWA013_A_OUTPUT_CONDUIT 0x615984f33604011fcd76e9b89803be3816276e61     Contracts that will be added to the RWA Registry The below contracts are not included in any official registry, hence, adding them to the new RWA Registry will legitimize them.     Name Contract Address     GUSD-A GUSD_A_JAR 0xf2E7a5B83525c3017383dEEd19Bb05Fe34a62C27   GUSD-A GUSD_A_JAR_INPUT_CONDUIT 0x6934218d8B3E9ffCABEE8cd80F4c1C4167Afa638     ",
                    "links": [
                        "https://chainlog.makerdao.com/",
                        "https://github.com/ces-core/mip21-registry/blob/master/README.md",
                        "http://chainlog.makerdao.com",
                        "https://chainlog.makerdao.com/",
                        "https://forum.makerdao.com/t/ces-update-january-2023/19783"
                    ],
                    "GPT-summary": null,
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.546008554937126
                }
            ]
        }
    ]
}