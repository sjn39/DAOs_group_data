{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/fine-grained-erc721-approval-for-multiple-operators/12796",
            "title": "Fine-grained ERC721 approval for multiple operators ",
            "index": 12796,
            "category": [
                "Tokens"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/arrans",
                    "index": "1",
                    "likes": "3",
                    "time": "01/02/2023-14:17:54",
                    "content": "Before submitting an EIP I\u2019d like to get some feedback on an idea, please. Summary: ERC721 \u201capproval\u201d for a specific token is currently limited to a single operator via the approve() function. Holders wishing to list assets for sale on multiple marketplaces must therefore use setApprovalForAll(), which goes against the principle of least privilege. I would like to propose a per-token, multiple-operator approval mechanism as an extension to ERC721. Motivation: a number of phishing scams trick users into signing zero-ETH ask-side orders for fulfilment via marketplace contracts. A user wishing to legitimately sell only a single NFT therefore risks their entire portfolio of the respective contract. This is what happened to Kevin Rose, resulting in the theft of 25 Chromie Squiggles when he had legitimately intended to sell only one. I was on a call with him when it happened so am very familiar with the technical aspects of what happened. Additional requirements: a solution must require minimal effort for adoption by marketplaces. Introduction of a per-token alternative to isApprovedForAll() => setApprovalForAll() would follow their existing technical flows as outlined after the interface definition in the below proposal. The Head of Protocol at OpenSea has lent support. Alternatives considered: the majority of negative feedback I\u2019ve received (to the above-linked tweet) has been that approve() fulfils this requirement. It does not, however, allow for approval of more than one operator. NFT traders would therefore be limited to selling via  a single marketplace. Proposal: EDIT: add ApprovalFor event. An interface along the lines of: interface IERC721PerTokenApproval {     /**      * @notice Emitted when an operator is enabled or disabled for a token.      */     event ApprovalFor(         address indexed _operator,         uint256 indexed _tokenId,         bool _approved     );      /**      * @notice Approves the operator to manage the asset on behalf of its owner.      * @dev Throws if msg.sender is not the current NFT owner.      * @dev Approvals set via this method MUST be cleared upon transfer of the      *      token to a new owner.      */     function setApprovalFor(         address _operator,         uint256 _tokenId,         bool _approved     ) external;      /**      * @notice Returns true if any of the following criteria are met:      *         1. _operator was approved via setApprovalFor() on `_tokenId`      *            and the token has not since been transferred; OR      *         2. isApprovedForAll(ownerOf(_tokenId), _operator) == true; OR      *         3. getApproved(_tokenId) == _operator.      */     function isApprovedFor(address _operator, uint256 _tokenId)         external         view         returns (bool);      // ERC-165     function supportsInterface(bytes4 interfaceID) external view returns (bool); }  The requirement to clean up approvals on transfer can be done efficiently with an incrementing nonce, as described here. Marketplaces wishing to check approvals prior to listing assets would follow this pattern: if (nft.supportInterface(type(IERC721PerTokenApproval).interfaceId)) {   if (!nft.isApprovedFor(marketplace, tokenId)) {     // initiate user to setApprovalFor(marketplace, tokenId, true)   } } else {   // fallback to existing setApprovalForAll()   if (!nft.isApprovedForAll(nft.ownerOf(tokenId), marketplace)) {     // initiate user to setApprovalForAll(marketplace, true)   } }  For further consideration: should setApprovalFor(\u2026,false) override setApprovalForAll()? This complicates isApprovedFor(), which suggests that the 3 positive criteria may be too broad, or that there could be an isExplicitlyApprovedFor() that only returns true if criterion (1) is met. ",
                    "links": [
                        "https://twitter.com/dievardump/status/1620467635266920448?s=20&t=J0zIeOMFVYGuYV3LPl3rHw"
                    ],
                    "GPT-summary": "The author of the post is proposing a per-token, multiple-operator approval mechanism as an extension to ERC721. The proposal aims to address the issue of phishing scams that trick users into signing zero-ETH ask-side orders for fulfillment via marketplace contracts. The author is seeking feedback on the proposal and has outlined the technical aspects of the proposal, including the interface definition and the event that will be emitted when an operator is enabled or disabled for a token. The post also considers alternatives and additional requirements for the proposal.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.389560549100024
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/arrans",
                    "index": "2",
                    "likes": "2",
                    "time": "01/02/2023-14:19:35",
                    "content": "Hat tip to @crisgarner who I hadn\u2019t realised had posted about this a few days before me. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Slokh",
                    "index": "3",
                    "likes": "3",
                    "time": "01/02/2023-15:34:21",
                    "content": "In support of making this an EIP. At OpenSea we can easily support this vs other similar proposals and it addresses all the major issues at the moment (biggest concern is really just in-product UX for supporting both approval paths). Particularly a fan of \u201cApprovals set via this method MUST be cleared upon transfer of the token to a new owner.\u201d. Not often do people actually clean up their approvals and should just be done in the background.     arrans:  should setApprovalFor(\u2026,false) override setApprovalForAll()? This complicates isApprovedFor(), which suggests that the 3 positive criteria may be too broad, or that there could be an isExplicitlyApprovedFor() that only returns true if criterion (1) is met.   I actually don\u2019t think it should overrides because then it muddies the clarity of isApprovedForAll as well ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving entirely positive feedback on proposal",
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.760822510822511
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/crisgarner",
                    "index": "4",
                    "likes": "1",
                    "time": "01/02/2023-16:35:11",
                    "content": "To add more context for people not familiar with current implementations of the ERC721 token standard. ERC721 wasn\u2019t designed for the current environment of multiple marketplaces, signatures, and bidding. The approve function uses a mapping that saves only the id and the address of one approved contract, there is no way to approve two different contracts without replacing the previous approval, approving Open Sea, Blur, x2y2, and Looks Rare at the same time is currently impossible without using handler contracts and obfuscate the information to users. This is where setApprovalFor comes in handy. Here is the ERC721 Approve code for reference: // Mapping from token ID to approved address mapping(uint256 => address) private _tokenApprovals;  function approve(address to, uint256 tokenId){    _tokenApprovals[tokenId] = to; }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.126388888888888
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/0xInuarashi",
                    "index": "5",
                    "likes": "0",
                    "time": "01/02/2023-17:56:11",
                    "content": "nice methods for single-to-many approvals proposed by @dievardump and @cxkoda for revoking and transfers. also, i would like to suggest interfaces for quanitity-based approvals (non tokenid specific) for operators using sort of these other functions as well interface IERC721PerTokenApproval {     /**      * @notice Emited when a user approves an operator for an amount      */     event ApprovalForAmt(         address indexed _operator,         uint256 _amount     );      /**      * @notice Approves an operator for an amount of tokens      * @dev The amount should decrease each time the operator transfers the user's token      */     function setApprovalForAmt(         address _operator,         uint256 _amount     ) external; }  rationale being some folks may want to list ~10 NFTs and do not want to specifically approve each one, but also may be holding ~250 NFTs of the same contract. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.475
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/0xInuarashi",
                    "index": "6",
                    "likes": "0",
                    "time": "01/02/2023-18:15:07",
                    "content": " image1133\u00d7570 53.8 KB  A small visualization of the different methods ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/crisgarner",
                    "index": "7",
                    "likes": "2",
                    "time": "01/02/2023-18:50:56",
                    "content": "For ERC721 might be complicated as you would need to specify which tokens as the transfer function requires the Id. An array of ids could be passed as a parameter to fix this issue. interface IERC721PerTokenApproval {      /**      * @notice Approves an operator for an amount of tokens      * @dev The amount should decrease each time the operator transfers the user's token      */     function setApprovalForIds(         address _operator,         uint256[] memory _tokenIds,         bool _approved     ) external; }  While this solution fixes current issues, must be noted that in the future, with Account Abstraction and smart contract wallets, it\u2019s possible to batch setApprovalFor and execute it in one transaction. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 4.761904761904762
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/0xInuarashi",
                    "index": "8",
                    "likes": "0",
                    "time": "01/02/2023-18:51:46",
                    "content": "I know I\u2019m deviating a lot but gonna throw some more ideas out there: How about lists? For example, a user can store their own specified \u201clist\u201d in a mapping /**   * @notice: Example mapping  * owner -> list id -> operator -> approved  */  mapping(address =>  mapping(uint256 =>  mapping(address => bool))) ownerToListIdToApprovalList;  /**  * @notice Configures a list of approved operators for the user at ListID index  * @dev Throws if list ID is 0 as it should be the default \"empty\" list.  */ function setListApproval(     uint256 listId,      address operator,      bool approved) external;  They can specify their own list and then approve to it using an approve function /**  * @notice Example mapping  * token id -> approval list  *  * @note This example would look up to:   * ownerToListToApprovalList[ownerOf(tokenId)][tokenId][tokenIdToApprovalList[tokenId]][operatorAddress]  * to obtain an approved boolean  */ mapping(uint256 => uint256) tokenIdToApprovalList;  /** * @notice Approves a token to a user-specified list of pre-approved addresses. * @dev Throws if the msg.sender is not the NFT owner. */ function approveTokenToList(     uint256 tokenId,      uint256 listId) external;  On a transfer, the approved token list is set to 0. Although this may be a bit difficult to integrate with. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "None"
                    ],
                    "Sentiment": 5.7857142857142865
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/cxkoda",
                    "index": "9",
                    "likes": "1",
                    "time": "01/02/2023-22:08:57",
                    "content": "    0xInuarashi:  also, i would like to suggest interfaces for quanitity-based approvals (non tokenid specific) for operators using sort of these other functions as well   I like your ideas about quantity-based approvals. But I think they are a bit beside the goal of this proposal: making marketplace approvals safer by explicitly stating which tokens are transferable. This explicitness would be lost with quantities.  Also, it feels more like a marketplace feature to me than a token\u2019s core functionality.     crisgarner:  For ERC721 might be complicated as you would need to specify which tokens as the transfer function requires the Id. An array of ids could be passed as a parameter to fix this issue.   I like the extension to arrays of IDs. I think account abstraction is still far away, so this would be a good solution for the meantime. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.5625
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/arrans",
                    "index": "10",
                    "likes": "0",
                    "time": "02/02/2023-11:30:20",
                    "content": "    Slokh:  I actually don\u2019t think it should overrides because then it muddies the clarity of isApprovedForAll as well   Good point! We\u2019ll think more closely about the interplay between the two when we right a reference implementation.     0xInuarashi:  also, i would like to suggest interfaces for quanitity-based approvals (non tokenid specific) for operators using sort of these other functions as well   Hey @0xInuarashi  I agree with @cxkoda that quantities probably belong in a separate EIP. The goal of this one is for an owner to be able to be very precise in their granting of approvals. Lists are an interesting way of doing this\u2026 I\u2019ll get a repo set up soon and we can explore them in there.     crisgarner:  An array of ids could be passed as a parameter to fix this issue.   I think the setApprovalForIds() function should take a bool like the single-token equivalent. Again, we can explore this in the repo. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.697619047619048
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/0xInuarashi",
                    "index": "11",
                    "likes": "0",
                    "time": "02/02/2023-12:38:49",
                    "content": "    arrans:  Hey @0xInuarashi  I agree with @cxkoda that quantities probably belong in a separate EIP. The goal of this one is for an owner to be able to be very precise in their granting of approvals. Lists are an interesting way of doing this\u2026 I\u2019ll get a repo set up soon and we can explore them in there.       cxkoda:  I like your ideas about quantity-based approvals. But I think they are a bit beside the goal of this proposal: making marketplace approvals safer by explicitly stating which tokens are transferable. This explicitness would be lost with quantities. Also, it feels more like a marketplace feature to me than a token\u2019s core functionality.   Thats completely fine! Just firing my brain cannons hehe As for the functionality of such proposal I think whatever we have now seems very nice as PoC from @dievardump and @cxkoda It can get more complex with lists and delegations but I think that\u2019s also beyond-scope for this EIP     crisgarner:  interface IERC721PerTokenApproval {      /**      * @notice Approves an operator for an amount of tokens      * @dev The amount should decrease each time the operator transfers the user's token      */     function setApprovalForIds(         address _operator,         uint256[] memory _tokenIds     ) external; }    This is nice! Similarly, a single-to-many interface can also be added with interface IERC721PerTokenApproval {      /**      * @notice Approves a token to multiple operators      * @dev The token approvals should be cleared on a transfer      */     function setApprovalForOperators(         uint256 _tokenId,         address[] memory _operators,         bool approved     ) external; }  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.525297619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/arrans",
                    "index": "12",
                    "likes": "1",
                    "time": "02/02/2023-14:13:28",
                    "content": "Here\u2019s a fork of the EIPs repo; we will merge to erc721-per-token-approvals in this repo to collaborate and then I\u2019ll issue a PR to the original when ready. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 6.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/crisgarner",
                    "index": "13",
                    "likes": "2",
                    "time": "02/02/2023-14:20:24",
                    "content": "    arrans:  I think the setApprovalForIds() function should take a bool like the single-token equivalent. Again, we can explore this in the repo.   You are right! Fixed it. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Constructive criticism of proposal"
                    ],
                    "Sentiment": 6.142857142857143
                }
            ]
        }
    ],
    "group_index": "337"
}