{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/scheme-for-off-chain-signatures-and-encoding-for-on-chain-verification/999",
            "title": "Scheme for off-chain signatures and encoding for on-chain verification ",
            "index": 999,
            "category": [
                "Primordial Soup"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/dekz",
                    "index": "1",
                    "likes": "2",
                    "time": "09/08/2018-23:30:57",
                    "content": "Overview There are discrepancies and nuances to encoding signatures for usage and verification on-chain. ECDSA is the dominant form of proof and is comprised of v, r and s fields. Signers often return this v,r,s as an encoded hex string where the components are concatenated. In many EIPS and documentation the order is either v,r,s or r,s,v. In many signers the order is r,s,v. As the order of these components is ambiguous it is often difficult to predict the signer behaviour and this is usually checked/fixed in library wrappers. Formalising on a standard encoding will reduce library code bloat, reduce developer overhead and increase contract interoperability. The case for v,r,s  The Ethereum yellowpaper often describes these parameters in the order v,r,s. Ethereum Transactions signatures are encoded as v,r,s  ecrecover in solidity ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)  EIPs: 86, 155, 232 all use the order v,r,s. ethereumjs-utils returns {v,r,s} object to avoid ambiguity.  The case for r,s,v  JSONRPC eth_sign returns r,s,v. First occurence seems to be here with no justification. This has propagated to many signer implementations.  Proposals  Off-chain always use v,r,s, so transactions and signing is the same order. On-chain expect v,r,s. Return a v,r,s object from eth_sign so there is less ambiguity. On-chain expect v,r,s.  Future discussion:  v=v-27 vs v=27|28 A standard way to represent the signature type  ",
                    "links": [
                        "https://github.com/ethereum/EIPs/issues/86",
                        "https://github.com/ethereum/EIPs/issues/155",
                        "https://github.com/ethereum/EIPs/issues/232",
                        "https://github.com/ethereum/wiki/wiki/JSON-RPC/_compare/adb76c0d22f2626af097f24c78568fb45603d4c5...286c3db5ef6d6a819d1ddc2f30f3b4bbae4d1d7e"
                    ],
                    "GPT-summary": "The post discusses the discrepancies and nuances in encoding signatures for usage and verification on-chain. The author explains the dominant form of proof, ECDSA, and the components v, r, and s. The post proposes formalizing a standard encoding to reduce library code bloat, reduce developer overhead, and increase contract interoperability. The post also discusses the order of these components and the ambiguity it creates. The post ends with future discussion topics such as representing the signature type and the standard way to do it.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.378787878787879
                }
            ]
        }
    ],
    "group_index": "1833"
}