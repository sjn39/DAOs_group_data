{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-safe-erc20/11163",
            "title": "EIP: Safe ERC20 ",
            "index": 11163,
            "category": [
                "EIPs"
            ],
            "tags": [
                "NONE"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/BoxChen",
                    "index": "1",
                    "likes": "0",
                    "time": "03/10/2022-15:35:33",
                    "content": " Introduction This thread is for discussing a new, alternative Token protocol for ERC20.In light of the recent mass thefts, I have a new idea. I would like to build a Token protocol that works properly but also has security. It is a new protocol based on the combination of EIP-2612 and some features.  Detail According to the current requirements in common contracts. There are two main cases of user authorization:  call the contract after authorization to transfer tokens directly - UNISWAP, Masterchef, Lend. wait for other timing to transfer after authorization. \u2013 Seaport and other NFT markets.  Two solutions come to mind here.    force all Tokens must use permit and prohibit EOA account call approve, only allow the contract account calls. Also add a new function to force the user to set the nonce to achieve the role of a skip, used to act as a solution after the illegal permit. The problem with this is that the NFT market will not be able to transfer WETH directly, but only to pre-deposit, while not knowing their signature. But in practice, users can convert from ETH to WETH, and then Approve WETH transactions into Deposit ETH. and is very effective for most cases where a single token transfer is used.     add a deadline mechanism to approve, in the wallet plug-in, set a smaller deadline for approve by default, and can modify the function signature, the default setting for approve without deadline parameter is +10 minutes. to reduce the risk of legacy after the contract is breached. The advantage of the first solution is that the signature is used as it is signed, but the pitfall is that it is not compatible with DAPPs that are not used instantly, and the advantage of the second solution is that the original code is less modified, but the security improvement is also smaller.    Most of the cases of approve all token are about reducing the number of transactions and fees for users. Therefore, it may be a better way to solve the problem from the root. If the two solutions are combined, it can solve many problems, but whether it is necessary to do so needs to be discussed. ",
                    "links": [],
                    "GPT-summary": "The author of the post is introducing a new Token protocol for ERC20 that aims to improve security. The post discusses two solutions to address user authorization and proposes a combination of the two solutions to solve the problem. The post also invites discussion on the necessity of combining the solutions. A 3rd party could provide constructive criticism or ask questions about the proposal.",
                    "GPT-proposal-categories": [
                        "Token economics",
                        "Privacy, Security and risk management",
                        "Smart contract updates",
                        "Interoperability and Scaleability",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.671064541519087
                }
            ]
        }
    ],
    "group_index": "151"
}