{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/erc-4824-decentralized-autonomous-organizations/8362",
            "title": "ERC-4824 Decentralized Autonomous Organizations ",
            "index": 8362,
            "category": [
                "Governance"
            ],
            "tags": [
                "dao",
                "erc-4824"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "1",
                    "likes": "6",
                    "time": "18/02/2022-20:09:00",
                    "content": "    Authors Joshua Tan (@thelastjosh), Isaac Patka (@ipatka), Ido Gershtein (ido@daostack.io), Eyal Eithcowich (eyal@deepdao.io), Michael Zargham (@mzargham), Sam Furter (@nivida)     EIP Link Github   Discussions See  daostar.org, daostar.one, and original thread    Status Draft   Type Standards Track   Category ERC   Created 2022-02-17     Abstract A standard URI and JSON schema for decentralized autonomous organizations (DAOs), focusing on relating on-chain and off-chain representations of membership and proposals.  Motivation DAOs, since being invoked in the Ethereum whitepaper, have been vaguely defined. This has led to a wide range of patterns but little standardization or interoperability between the frameworks and tools that have emerged. Standardization and interoperability are necessary to support a variety of use-cases. In particular, a standard daoURI, similar to tokenURI in ERC-721, will enhance DAO search, discoverability, legibility, and proposal simulation. More consistent data across the ecosystem is also a prerequisite for future DAO standards.  Specification The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119. Every EIP-4824 compliant contract MUST implement the EIP4824 interface below: pragma solidity ^0.4.20;  /// @title EIP-4824 DAOs /// @dev See https://eips.ethereum.org/EIPS/eip-4824  interface EIP4824 {     /// @notice A distinct Uniform Resource Identifier (URI) pointing to a JSON object following the \"EIP-4824 DAO JSON-LD Schema\". This JSON file splits into four URIs: membersURI, proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a JSON file that conforms to the \"EIP-4824 Members JSON-LD Schema\". The proposalsURI should point to a JSON file that conforms to the \"EIP-4824 Proposals JSON-LD Schema\". The activityLogURI should point to a JSON file that conforms to the \"EIP-4824 Activity Log JSON-LD Schema\". The governanceURI should point to a flatfile, normatively a .md file. Each of the JSON files named above can be statically-hosted or dynamically-generated.     function daoURI() external view returns (string _daoURI); }  The EIP-4824 DAO JSON-LD Schema mentioned above. { \t\"@context\": \"http://www.daostar.org/schemas\", \t\"type\": \"DAO\", \t\"name\": \"<name of the DAO>\", \t\"description\": \"<description>\", \t\"membersURI\": \"<URI>\", \t\"proposalsURI\": \"<URI>\", \t\"activityLogURI\": \"<URI>\", \t\"governanceURI\": \"<URI>\" }   Members Members JSON-LD Schema. {   \"@context\": \"http://www.daostar.org/schemas\",   \"type\": \"DAO\",   \"name\": \"<name of the DAO>\",   \"members\": [     {       \"type\": \"EthereumAddress\",       \"address\": \"<address>\"     },     {       \"type\": \"EthereumAddress\",       \"address\": \"<address>\"     }   ] }   Proposals Proposals JSON-LD Schema. Every EIP-4824 contract should implement a proposalsURI pointing to a JSON object satisfying this schema. In particular, any on-chain proposal MUST be associated to an id of the form CAIP10_ADDRESS + \u201c?proposalId=\u201d + PROPOSAL_COUNTER, where CAIP10_ADDRESS is an address following the CAIP-10 standard and PROPOSAL_COUNTER is an arbitrary identifier such as a uint256 counter or a hash that is locally unique per CAIP-10 address. Off-chain proposals MAY use a similar id format where CAIP10_ADDRESS is replaced with an appropriate URI or URL. {   \"@context\": \"http://www.daostar.org/schemas\",   \"type\": \"DAO\",   \"name\": \"<name of the DAO>\",   \"proposals\": [     {       \"type\": \"proposal\",       \"id\": \"<proposal ID>\",       \"name\": \"<name or title of proposal>\",       \"contentURI\": \"<URI to content or discussion>\",       \"status\": \"<status of proposal>\",       \"calls\": [         {           \"type\": \"CallDataEVM\",           \"operation\": \"<call or delegate call>\",           \"from\": \"<EthereumAddress>\",           \"to\": \"<EthereumAddress>\",           \"value\": \"<value>\",           \"data\": \"<call data>\"         }       ]     }   ] }   Activity Log Activity Log JSON-LD Schema. {   \"@context\": \"http://www.daostar.org/schemas\",   \"type\": \"DAO\",   \"name\": \"<name of the DAO>\",   \"activities\": [     {       \"id\": \"<activity ID>\",       \"type\": \"activity\",       \"proposal\": {         \"id\": \"<proposal ID>\",         \"type\": \"proposal\"       },       \"member\": {         \"type\": \"EthereumAddress\",         \"address\": \"<address>\"       }     },     {       \"id\": \"<activity ID>\",       \"type\": \"activity\",       \"proposal\": {         \"id\": \"<proposal ID>\",         \"type\": \"proposal\"       },       \"member\": {         \"type\": \"EthereumAddress\",         \"address\": \"<address>\"       }     },   ] }   Rationale In this standard, we assume that all DAOs possess at least two primitives: membership and behavior. Membership is defined by a set of addresses. Behavior is defined by a set of possible contract actions, including calls to external contracts and calls to internal functions. Proposals relate membership and behavior; they are objects that members can interact with and which, if and when executed, become behaviors of the DAO.  URIs and off-chain data DAOs themselves have a number of existing and emerging use-cases. But almost all DAOs need to publish data off-chain for a number of reasons: communicating to and recruiting members, coordinating activities, powering user interfaces and governance applications such as Snapshot or Tally, or enabling search and discovery via platforms like DeepDAO or Messari. Having a standardized schema for this data, akin to an API specification, would strengthen existing use-cases for DAOs, help scale tooling and frameworks across the ecosystem, and build support for additional forms of interoperability. While we considered standardizing on-chain aspects of DAOs in this standard, particularly on-chain proposal objects and proposal IDs, we felt that this level of standardization was premature given (1) the relative immaturity of use-cases, such as multi-DAO proposals or master-minion contracts, that would benefit from such standardization, (2) the close linkage between proposal systems and governance, which we did not want to standardize (see \u201cgovernanceURI\u201d, below), and (3) the prevalence of off-chain and L2 voting and proposal systems in DAOs (see \u201cproposalsURI\u201d, below). Further, a standard URI interface is relatively easy to adopt and has been actively demanded by frameworks (see \u201cCommunity Consensus\u201d, below).  membersURI Approaches to membership vary widely in DAOs. Some DAOs and DAO frameworks (e.g. Gnosis Safe, Tribute), maintain an explicit, on-chain set of members, sometimes called owners or stewards. But many DAOs are structured so that membership status is based on the ownership of a token or tokens (e.g. Moloch, Compound, DAOstack, 1Hive Gardens). In these DAOs, computing the list of current members typically requires some form of off-chain indexing of events. In choosing to ask only for an (off-chain) JSON schema of members, we are trading off some on-chain functionality for more flexibility and efficiency. We expect different DAOs to use membersURI in different ways: to serve a static copy of on-chain membership data, to contextualize the on-chain data (e.g. many Gnosis Safe stewards would not say that they are the only members of the DAO), to serve consistent membership for a DAO composed of multiple contracts, or to point at an external service that computes the list, among many other possibilities. We also expect many DAO frameworks to offer a standard endpoint that computes this JSON file, and we provide a few examples of such endpoints in the implementation section. We encourage extensions of the Membership JSON-LD Schema, e.g. for DAOs that wish to create a state variable that captures active/inactive status or different membership levels.  proposalsURI Proposals have become a standard way for the members of a DAO to trigger on-chain actions, e.g. sending out tokens as part of grant or executing arbitrary code in an external contract. In practice, however, many DAOs are governed by off-chain decision-making systems on platforms such as Discourse, Discord, or Snapshot, where off-chain proposals may function as signaling mechanisms for an administrator or as a prerequisite for a later on-chain vote. (To be clear, on-chain votes may also serve as non-binding signaling mechanisms or as \u201cbinding\u201d signals leading to some sort of off-chain execution.) The schema we propose is intended to support both on-chain and off-chain proposals, though DAOs themselves may choose to report only on-chain, only off-chain, or some custom mix of proposal types. Proposal ID. Every unique on-chain proposal MUST be associated to a proposal ID of the form CAIP10_ADDRESS + \u201c?proposalId=\u201d + PROPOSAL_COUNTER, where PROPOSAL_COUNTER is an arbitrary string which is unique per CAIP10_ADDRESS. Note that PROPOSAL_COUNTER may not be the same as the on-chain representation of the proposal; however, each PROPOSAL_COUNTER should be unique per CAIP10_ADDRESS, such that the proposal ID is a globally unique identifier. We endorse the CAIP-10 standard to support multi-chain / layer 2 proposals and the \u201c?proposalId=\u201d query syntax to suggest off-chain usage. ContentURI. In many cases, a proposal will have some (off-chain) content such as a forum post or a description on a voting platform which predates or accompanies the actual proposal. Status. Almost all proposals have a status or state, but the actual status is tied to the governance system, and there is no clear consensus between existing DAOs about what those statuses should be (see table below). Therefore, we have defined a \u201cstatus\u201d property with a generic, free text description field.     Project Proposal Statuses     Aragon Not specified   Colony [\u2018Null\u2019, \u2018Staking\u2019, \u2018Submit\u2019, \u2018Reveal\u2019, \u2018Closed\u2019, \u2018Finalizable\u2019, \u2018Finalized\u2019, \u2018Failed\u2019]   Compound [\u2018Pending\u2019, \u2018Active\u2019, \u2018Canceled\u2019, \u2018Defeated\u2019, \u2018Succeeded\u2019, \u2018Queued\u2019, \u2018Expired\u2019, \u2018Executed\u2019]   DAOstack/ Alchemy [\u2018None\u2019, \u2018ExpiredInQueue\u2019, \u2018Executed\u2019, \u2018Queued\u2019, \u2018PreBoosted\u2019, \u2018Boosted\u2019, \u2018QuietEndingPeriod\u2019]   Moloch v2 [sponsored, processed, didPass, cancelled, whitelist, guildkick]   Tribute [\u2018EXISTS\u2019, \u2018SPONSORED\u2019, \u2018PROCESSED\u2019]    ExecutionData. For on-chain proposals with non-empty execution, we include an array field to expose the call data. The main use-case for this data is execution simulation of proposals.  activityLogURI The activity log JSON is intended to capture the interplay between a member of a DAO and a given proposal. Examples of activities include the creation/submission of a proposal, voting on a proposal, disputing a proposal, and so on. Alternatives we considered: history, interactions  governanceURI Membership, to be meaningful, usually implies rights and affordances of some sort, e.g. the right to vote on proposals, the right to ragequit, the right to veto proposals, and so on. But many rights and affordances of membership are realized off-chain (e.g. right to vote on a Snapshot, gated access to a Discord). Instead of trying to standardize these wide-ranging practices or forcing DAOs to locate descriptions of those rights on-chain, we believe that a flatfile represents the easiest and most widely-acceptable mechanism for communicating what membership means and how proposals work. These flatfiles can then be consumed by services such as Etherscan, supporting DAO discoverability and legibility. We chose the word \u201cgovernance\u201d as an appropriate word that reflects (1) the widespread use of the word in the DAO ecosystem and (2) the common practice of emitting a governance.md file in open-source software projects. Alternative names considered: description, readme, constitution  Why JSON-LD We chose to use JSON-LD rather than the more widespread and simpler JSON standard because (1) we want to support use-cases where a DAO wants to include members using some other form of identification than their Ethereum address and (2) we want this standard to be compatible with future multi-chain standards. Either use-case would require us to implement a context and type for addresses, which is already implemented in JSON-LD. Further, given the emergence of patterns such as subDAOs and DAOs of DAOs in large organizations such as Synthetix, as well as L2 and multi-chain use-cases, we expect some organizations will point multiple EIP-4824 DAOs to the same URI, which would then serve as a gateway to data from multiple contracts and services. The choice of JSON-LD allows for easier extension and management of that data.  Community Consensus  The initial draft standard was developed as part of the DAOstar One roundtable series, which included representatives from all major EVM-based DAO frameworks (Aragon, Compound, DAOstack, Gnosis, Moloch, OpenZeppelin, and Tribute), a wide selection of DAO tooling developers, as well as several major DAOs. Thank you to all the participants of the roundtable, the full list of which can be found here. We would especially like to thank Auryn Macmillan, Fabien of Snapshot, Selim Imoberdorf, Lucia Korpas, and Mehdi Salehi for their contributions. In-person events will be held at Schelling Point 2022 and at ETHDenver 2022, where we hope to receive more comments from the community. We also plan to schedule a series of community calls through early 2022.  Security Considerations This standard defines the interfaces for the DAO URIs but does not specify the rules under which the URIs are set, or how the data is prepared. Developers implementing this standard should consider how to update this data in a way aligned with the DAO\u2019s governance model, and keep the data fresh in a way that minimizes reliance on centralized service providers. Indexers that rely on the data returned by the URI should take caution if DAOs return executable code from the URIs. This executable code might be intended to get the freshest information on membership, proposals, and activity log, but it could also be used to run unrelated tasks.  Copyright Copyright and related rights waived via CC0.  edited March 6, 2022: updated to reflect most recent changes to PR  ",
                    "links": [
                        "https://daostar.org",
                        "https://daostar.one",
                        "https://ethereum-magicians.org/t/standardizing-daos/7400/4",
                        "https://eips.ethereum.org/EIPS/eip-721",
                        "https://daostar.one/",
                        "https://creativecommons.org/publicdomain/zero/1.0/",
                        "https://ethereum-magicians.org/t/welcome-please-readme-first/8/11"
                    ],
                    "GPT-summary": "The post introduces a new standard URI and JSON schema for decentralized autonomous organizations (DAOs) that focuses on relating on-chain and off-chain representations of membership and proposals. The post explains the motivation behind the standardization and the benefits it brings to the DAO ecosystem. The post also provides the technical specifications of the proposed standard and the rationale behind each component. The post invites feedback and collaboration from the community and provides a list of community events where the proposal will be discussed.",
                    "GPT-proposal-categories": null,
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "3rd party or author is advertising proposal"
                    ],
                    "Sentiment": 5.295217569786535
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "2",
                    "likes": "1",
                    "time": "19/02/2022-14:12:03",
                    "content": " Additional references  Dilger, W. (1997). Decentralized autonomous organization of the intelligent home according to the principle of the immune system\u2019. 1997 IEEE International Conference on Systems, Man, and Cybernetics. Computational Cybernetics and Simulation, 351\u2013356. https://doi.org/10.1109/ICSMC.1997.625775  Buterin, V. (2013a). Ethereum whitepaper: A next-generation smart contract and decentralized application platform [White Paper]. https://blockchainlab.com/pdf/Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf  JSON-LD Schema. https://json-ld.org/  CAIP-10. https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md   ",
                    "links": [
                        "https://blockchainlab.com/pdf/Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf",
                        "https://json-ld.org/",
                        "https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.414285714285715
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/toledoroy",
                    "index": "3",
                    "likes": "2",
                    "time": "16/03/2022-14:19:53",
                    "content": "Hi, Great idea! we should definitely add some standards for metadata. Though I think we could generalize this idea a bit and perhaps come up with something that could work for other contracts as well. First, I think it would probably make more sense to have different types/names for different JSON files, so we can tell them parts E.g. Members  \"type\": \"members\",  and Proposals  \"type\": \"proposals\",  It might be more correct to name that parameter as role, not type, as the type usually represents what a thing is and this represents what it is for (purpose). If you do that, you could just use the conventional contractURI() which would a JSON of \u201ctype\u201d: \u201cDAO\u201d or \u201crole\u201d: \u201cDAO\u201d. Which makes more sense semantically, doesn\u2019t require that you have prior knowledge regarding the contract type, and could be use as a general standard for all other types of contracts as well. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.719047619047619
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "4",
                    "likes": "0",
                    "time": "20/03/2022-12:24:56",
                    "content": "Hi @toledoroy ! First off, thank you for the suggestions  Re: associating types for the different JSON files being returned by membersURI and proposalsURI, we didn\u2019t really dig into this during the working group discussions, so maybe now is a good opportunity. My thoughts are:  First, notice that each individual member does have a type or typeclass, member, and it might get confusing for member and members to be separate types (e.g. in the schema.org ontology, member supersedes members, so there\u2019s no difference). Perhaps most saliently, the membersURI and proposalsURI are pointing to different JSON objects because we expect some DAOs might want to compute those using different services, and it allows for more modularity. You could imagine them getting replaced by properties members and proposals, and daoURI returning a giant nested JSON with all the metadata, members, proposals, activities, etc. In that case, the type of the JSONs returned by membersURI, proposalsURI, and activityLogURI would just be DAO, since members and proposals are properties intended to be evaluated in the DAO type/context. And you can see this in current type signatures of the JSONs returned by proposalsURI, membersURI, and activityLogURI. If I think about it from a data modeling standpoint, it feels like we should be able to just say that the type of the Members JSON should just be something like List(member) or [member].  Let me know if that makes sense; I\u2019ve tagged some of the other team members to get their thoughts @mzargham @nivida. Re: contractURI suggestion, I think you\u2019re right, but I\u2019m not familiar with uses of contractURI outside of the OpenSea context though for NFTs (essentially replacing/extending tokenURI). Do you see it getting more prominent usage elsewhere / has there been a standard emitted for it? I could see it being really useful to have a generic contractURI for every single contract that the daoURI schema could inherit from. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.760357142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "5",
                    "likes": "2",
                    "time": "21/03/2022-15:41:16",
                    "content": "Hi, I am liking this but something did bother me\u2026 That everything is shuffled off-chain to secondary storage. I\u2019m thinking that members can be a map of accounts on-chain (so can call member style functions). Proposals can each be an NFT, grounding the truth on-chain. Hence leveraging much more of the Ethereum eco system. Sure, variables such as descriptions, history logs etc. can be off-chain JSON type files. I\u2019m all for pushing wider use of NFTs beyond digital art. I see this proposal as an opportunity to do this, forgive me. What about gas fees might be a reaction? By the time if this goes to final stages, fees will be much lower anyway (hopefully). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.642857142857142
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "6",
                    "likes": "0",
                    "time": "23/03/2022-03:02:27",
                    "content": "Thanks for the comments @julesl23 ! Re: proposals as NFTs\u2014an idea like this did come up during the WG sessions, I think from @mzargham! We ended not going there because it\u2019s not a pattern that we currently see in the ecosystem, and we didn\u2019t want this first standard to push the envelope so much as organize and exemplify existing best-practices in observed DAOs and DAO frameworks. DAOs in other L1s with much lower costs do end up hosting more of their ops and data on-chain (and we\u2019re working to explore/cover those use-cases in a multi-chain working group), but for now that\u2019s not standard in Ethereum use-cases. But even with lower fees, there will always be a use-case for the off-chain data for the legibility and discoverability use-cases we mention. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.743055555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/toledoroy",
                    "index": "7",
                    "likes": "1",
                    "time": "23/03/2022-17:52:26",
                    "content": "Loving this! People are non-fungible too and there\u2019s no reason for each DAO member to have to maintain and update their data on different locations.  image1275\u00d7984 69.3 KB  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving positive feedback on proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Asgeir",
                    "index": "8",
                    "likes": "1",
                    "time": "24/03/2022-19:19:34",
                    "content": "Great initiative! I love how open it is (even while making the data more easily consumable); it does not force DAOs into some rigid standardization scheme! One thing that came to mind is that we could perhaps, instead of or in addition to the interface implementation requirement, have an event emitted with the daoURI. The event could, for instance, be emitted by:  A common contract with a function that takes a daoURI and emits it in an event, or It could be a standard event emitted by any contract, or It could use ERC-3722 (Poster) with a standard tag.  The rationale for proposing this:  The daoURI is not something that is consumable on-chain, and therefore does not need to be part of the chain state. It\u2019s easy to propose a transaction that will emit the event to any DAO that can execute arbitrary transactions. It will also be easy for preexisting DAOs to \u201cimplement the standard\u201d. Implementing a Subgraph for continuously indexing all DAOs that emit the event is trivial.  Basically, this could make it cheaper to implement the standard, make it easier to implement the standard (and in the future update the daoURI), and make it more easily indexable. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.231770833333333
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "9",
                    "likes": "0",
                    "time": "24/03/2022-20:59:35",
                    "content": "I second what @Asgeir says. I was going to say it but forgot as I wrote my other post. The other thing I noticed was lack of timestamps in any of the JSON files\u2026 Take an example where a DAO has thousands of members and the membership is tokenised with a secondary market so a lot of members joining and leaving. With current proposal it doesn\u2019t define if memberships list has to be up to date. In this use case, a single member leaving/joining and the whole list has to be written out again. I know there is the blurb on having endpoint to compute this real-time but unless I\u2019m mistaken that requires server and defeats purpose of decentralisation. Is there a way to get this list computed by smart contract directly? At least with a timestamp and a snapshot of members list, won\u2019t have to keep uploading the most up to date. On that point, wasn\u2019t clear to me in activates log if member is the proposer of the contract, or members\u2019 snapshot of voting and where would amounts/results go and so on? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.042207792207792
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "10",
                    "likes": "1",
                    "time": "28/03/2022-23:51:10",
                    "content": "Just wanted to say that I really like this idea. It would make adoption much easier for existing DAOs. One question is which of these methods (contract, event, poster) we should recommend, and/or whether we should support all of them. Small note, on some level no matter what method you use, daoURI has to be part of the chain state, it just doesn\u2019t have to be defined in the contract. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.25
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Asgeir",
                    "index": "11",
                    "likes": "0",
                    "time": "29/03/2022-10:26:52",
                    "content": "I like the event method option since it\u2019s the most flexible one. This will allow a more strict and backward-compatible standard to be developed using the contract method later (with additional checks and still emitting the event). Can we assume that all DAOs can execute arbitrary function calls from the \u201cavatar\u201d address (or the address that represents the DAO)? If so, we could use the message sender as the DAO address (when indexing). Also, if there is a new emit of the event, we can treat it as an overwrite of the old daoURI. Basically something like this: emit ERC4824(string daoUIR); // implicitly the message sender is the DAO  Perhaps we should also add an indexed address to the event. That can be useful later if a new standard builds on this one using the contract method (where this address can probably be trusted, which is not the case in this version). ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.696969696969697
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "12",
                    "likes": "0",
                    "time": "29/03/2022-13:42:55",
                    "content": "In the standard we don\u2019t actually assume that every standard has an avatar or canonical contract; in principle multiple contracts (on multiple chains / L2s!) associated to the same DAO can all pass to the same daoURI (~a company operating multiple storefronts or processes). But the event method still makes sense in that context. How would attaching an indexed address to the event be useful? Are you assuming this would be \u201cavatar\u201d address? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.166666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "13",
                    "likes": "1",
                    "time": "29/03/2022-20:58:34",
                    "content": "Okay, with so little use of the blockchain, what\u2019s stopping a malicious actor pointing e.g. proposalsURI to their centralised storage and changing the proposal before its execution? Will the community easily understand that this is not a trustless system? Given the context of its use, what are the checks and balances? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party auditing and reviewing proposal"
                    ],
                    "Sentiment": 6.243055555555555
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "14",
                    "likes": "1",
                    "time": "30/03/2022-07:27:39",
                    "content": "Having the URI addresses (such as hashes) come from the blockchain would be more secure. Something like this: emit ERC4824( string context, address indexed dao, string name, string description, string membersURI, string proposalsURI, string activityLogURI, string governanceURI ); ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Asgeir",
                    "index": "15",
                    "likes": "0",
                    "time": "30/03/2022-08:22:53",
                    "content": "Aha, that makes sense. My thinking was that in the initially proposed solution, using the EIP4824 interface, the daoURI would be associated with the address of the contract implementing it. If we were going to use an event instead, we need another way to associate an address with the daoURI (even if multiple addresses can point to the same daoURI). Also, we need to be able to trust that address (so that not anybody can register daoURIs for any address). Therefore, looking at it again now, I can\u2019t see how we can get an address that we can trust by only using an event (like I proposed above). I think we will need to use a contract that also emits the message sender (just like Poster does). Or could there be another solution here that I am not aware of? I think it could make sense to create a new contract almost identical to the Poster contract and deployment process (via singleton). As Poster seems to be intended for social media: \u201cA ridiculously simple general-purpose social media smart contract.\u201d. Also, it will be less resource-intensive to process the events. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.2406343656343655
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "16",
                    "likes": "2",
                    "time": "30/03/2022-23:50:01",
                    "content": "Yeah, I\u2019m liking it. Three different versions: v1 contract ERC4824v1 {     event DAOUpdate(         address indexed sender,         address[] indexed daos,         string name,         string description,         string membersURI,         string proposalsURI,         string activityLogURI,         string governanceURI     );      function dao(         address[] calldata daos,         string calldata name,         string calldata description,         string calldata membersURI,         string calldata proposalsURI,         string calldata activityLogURI,         string calldata governanceURI     ) public {         emit DAOUpdate(             msg.sender,             daos,             name,             description,             membersURI,             proposalsURI,             activityLogURI,             governanceURI         );     } }  v2 contract ERC4824v2 {     event DAOUpdate(address indexed sender, string uri);      function dao(string calldata uri) public {         emit DAOUpdate(msg.sender, uri);     } }  v3 contract ERC4824v3 {     event DAOUpdate(address indexed sender, address[] indexed daos, string uri);      function dao(address[] calldata daos, string calldata uri) public {         emit DAOUpdate(msg.sender, daos, uri);     } }  The last one can search by dao(s) address, whilst the second one can\u2019t. Both use less gas than the first. The first has the advantage of the last and the hashes of membersURI, proposalsURI and governanceURI come from the blockchain via events, more secure. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.513888888888889
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "17",
                    "likes": "0",
                    "time": "31/03/2022-19:05:00",
                    "content": "I still feel there is a lack of timestamps though. With events at least can get the block timestamp it was emitted from (to an accuracy between two blocks is probably good enough for most use cases). But anything in JSON-LD files cannot without timestamp fields in them, I feel is needed; considering that most data in these are conceptually snapshots. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 6.4
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "18",
                    "likes": "0",
                    "time": "31/03/2022-21:43:31",
                    "content": "Just wanted to say that @mzargham and I are working on a response to the event/poster idea; we had a long conversation about it at today\u2019s working group meeting and have some ideas! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party or author wants to collaborate on proposal",
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 4.6875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "19",
                    "likes": "0",
                    "time": "31/03/2022-21:46:25",
                    "content": "Re timestamps, I think this is more something that people could easily add to the data model / extend the standard with, rather than a truly necessary data field. We\u2019re working to add tooling, e.g. a schema manager / explorer, to allow easier and relatively permisionless extensions of the data model for extended use-cases. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.933333333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "20",
                    "likes": "0",
                    "time": "01/04/2022-00:34:14",
                    "content": "That\u2019s a shame @thelastjosh . So we are not able to search for any changes then? For example, how to filter for new proposals? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 4.715909090909091
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "21",
                    "likes": "0",
                    "time": "01/04/2022-00:41:58",
                    "content": "Also I\u2019m not sure what fields are considered required and which optional? For some use cases, the Members JSON-LD file is not possible as there is maybe no array list of members held by DAO contract, only total supply of governance tokens. This to save gas and storage, and maybe anonymity/security reasons too. When proposals are voted for, at that stage can get list of accounts that voted with their governance tokens. So only then can these subset of accounts be recorded in proposals/activity files. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal",
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 4.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/zelbazk",
                    "index": "22",
                    "likes": "1",
                    "time": "02/04/2022-01:46:14",
                    "content": "Hi all, Forgive me for not contributing to the technical discussion around this proposal. Re: mutli-DAO proposals and master-minion contracts, can someone link me to those discussion pages or (if they exist) proposals? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "23",
                    "likes": "0",
                    "time": "05/04/2022-20:15:10",
                    "content": "Hi, This works for my use cases for e-commerce and social media: I was concerned on two things; lack of any timestamps and the JSON-LD files lack of security as they can be stored on centralised storages then changed at will. I believe this helps bolster security by \u201cgrounding\u201d the JSON-LD to the blockchain a lot more, by ensuring that any updates have emitted together the msg.sender and uri (hashed) link.     event DAOUpdate(         address indexed sender,         address indexed dao,         string name,         string description,         string governanceURI     );      event MemberUpdate(         address indexed sender,         address indexed dao,         address indexed member,         string memberURI     );      event ProposalUpdate(         address indexed sender,         address indexed dao,         string indexed proposalId,         string proposalURI     );      event ActivityLogUpdate(         address indexed sender,         address indexed dao,         string indexed activityId,         string activityLogURI     );  This means breaking up the updates to their own JSON-LD files. So there is an individual Member JSON-LD Schema, Proposal JSON-LD Schema file, individual Activity Log JSON-LD Schema, rather than having them collected in bigger JSON-LD files. Every update is posted out by calling their corresponding singleton contract function; dao, memberUpdate, proposalUpdate, or activityLogUpdate with the msg.sender address and uri link.     function dao(         address calldata dao,         string calldata name,         string calldata description,         string calldata governanceURI     ) public {         emit DAOUpdate(msg.sender, daos, name, description, governanceURI);     }      function memberUpdate(         address calldata dao,         address member,         string calldata memberURI     ) public {         emit MemberUpdate(msg.sender, daos, member, memberURI);     }      function proposalUpdate(         address[] calldata daos,         string calldata proposalId,         string calldata proposalURI     ) public {         emit ProposalUpdate(msg.sender, daos, proposalId, proposalURI);     }      function activityLogUpdate(         address calldata dao,         string calldata activityId,         string calldata activityLogURI     ) public {         emit ActivityLogUpdate(msg.sender, daos, activityId, activityLogURI);     }  This solves my timestamp issue as every emitted event has a block number it came from. This can be retrieved and block numbers converted to timestamps using a web3 library. Can validate off-line too that the posted uri hash matches the content that it points to (depending on recognised link formats like ipfs). As mentioned, each posted uri link is emitted with the msg.sender address, thus we know what account made the change. Off-line processing can validate if that account is a DAO member etc. With the use of event filters from a web3 library, all proposals\u2019 updates for a DAO can be retrieved and sorted by block number, hence just the latest changes can be returned etc. Similarly, all or individual proposals, members and activity logs can be retrieved using any or combination of their event\u2019s indexed parameters. So now I have a fourth version: contract ERC4824v4 {     event SchemaUpdate(         address indexed sender,         string indexed indexedSchemaURI,         string name,         string description,         string schemaURI     );      event DAOUpdate(         address indexed sender,         address indexed dao,         string name,         string description,         string governanceURI     );      event MemberUpdate(         address indexed sender,         address indexed dao,         address indexed member,         string memberURI     );      event ProposalUpdate(         address indexed sender,         address indexed dao,         string indexed proposalId,         string proposalURI     );      event ActivityLogUpdate(         address indexed sender,         address indexed dao,         string indexed activityId,         string activityLogURI     );      function schemaUpdate(         string calldata name,         string calldata description,         string calldata schemaURI     ) public {         emit SchemaUpdate(msg.sender, schemaURI, name, description, schemaURI);     }      function daoUpdate(         address dao,         string calldata name,         string calldata description,         string calldata governanceURI     ) public {         emit DAOUpdate(msg.sender, dao, name, description, governanceURI);     }      function memberUpdate(         address dao,         address member,         string calldata memberURI     ) public {         emit MemberUpdate(msg.sender, dao, member, memberURI);     }      function proposalUpdate(         address dao,         string calldata proposalId,         string calldata proposalURI     ) public {         emit ProposalUpdate(msg.sender, dao, proposalId, proposalURI);     }      function activityLogUpdate(         address dao,         string calldata activityId,         string calldata activityLogURI     ) public {         emit ActivityLogUpdate(msg.sender, dao, activityId, activityLogURI);     } }  Edit: Addtional event to handle schema updates     event SchemaUpdate(         address indexed sender,         string indexed indexedSchemaURI,         string name,         string description,         string schemaURI     );  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.4298245614035086
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "24",
                    "likes": "0",
                    "time": "05/04/2022-21:59:34",
                    "content": "Another point I wish to make about v4 is that the amount of JSON-LD files to write out will be a lot less, as won\u2019t have to update a whole set of files ('cause they are linked) for one change. Only the JSON-LD file that has changed needs to be uploaded now. This makes memberships that change a lot more possible to keep up to date as just need to call the memberUpdate method of the singleton contract when a member joins, to emit the MemberUpdate event. If a member leaves then can indicate this by simply calling memberUpdate with an empty memberURI string. All this means that DAOs that don\u2019t explicitly keep a record of all members to save gas on storage or other reasons, don\u2019t have to store an array of members in their contract. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.192708333333334
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "25",
                    "likes": "0",
                    "time": "08/04/2022-12:48:05",
                    "content": "I have a little time over the weekend to implement this. That way can examine any potential pitfalls. E.g. do endpoints to blockchain do throttling if there is a lot of event requests? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.53125
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "26",
                    "likes": "4",
                    "time": "11/04/2022-21:18:40",
                    "content": "Hi, I tested out the concept and it met my requirements. I set up some dummy DAO details called DAO Charity.  I then called the DAO Caster (provisional name I gave to the smart contract that emits the DAO updates). Then I set up a dummy DAO discovery service that was able to retrieve the DAOUpdate event and its JSON-LD file. Noticed how the sender account address (msg.sender) is retrieved as it was sent out by the DAOUpdate. Additional information can be obtained from the event, such as the block number the event was emitted:  2022-04-11 20_35_37-localhost_3101_dao646\u00d7955 20.8 KB  Next, I set up a new proposal.  2022-04-11 20_36_52-localhost_3100_proposals_createProposal518\u00d71005 22.6 KB  With DAO discovery service, was able to retrieve the proposal details from the proposal event emitted by DAO Caster.  2022-04-11 20_39_07-localhost_3101_proposals645\u00d71132 25.8 KB  Noticed how the JSON-LD file got flagged with \u201cWarning Sender was not a member\u201d. This was achieved by using the sender account address sent out by the DAO Caster ProposalUpdate event to look for MemberUpdate events that had that sender account address. None were found for the block number the proposal was submitted in. I also added extra details, as seen in the ActivityLog JSON-LD file:  2022-04-11 20_40_03-localhost_3101_activityLogs559\u00d71022 20.7 KB  One extra property is the DAO address that is required for the security checks. Now that the JSON-LD files have sender details and the URI hashed links sent from the emitted events, the JSON-LD files can be checked and verified. I believe this makes the JSON-LD files in this web3 world much more secure and practical to use. Thus increases the security of other JSON-LD files that link to them. Code for DAO Caster and test apps here: https://github.com/julesl23/DAO-Caster ",
                    "links": [
                        "https://ethereum-magicians.org/uploads/default/original/2X/2/2b4622a546cc7142ad12439a7d794bd31e3f271e.png",
                        "https://ethereum-magicians.org/uploads/default/original/2X/9/9388ae8fc8bdf36f04a043865b85e5c5755fa244.png",
                        "https://ethereum-magicians.org/uploads/default/original/2X/8/8c7e24892f4171e7135535b50348660340f8fa93.png",
                        "https://github.com/julesl23/DAO-Caster"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.96620425029516
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/julesl23",
                    "index": "27",
                    "likes": "1",
                    "time": "11/04/2022-21:39:47",
                    "content": "A note, JSON-LD schemas in the web3 world, should be secured on immutable storage and hashed, just like the DAO updates. Hence, DAO Caster has an additional function called schemaUpdate that can be called for when a new or amended schema is uploaded for use. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal"
                    ],
                    "Sentiment": 5.681818181818182
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "28",
                    "likes": "1",
                    "time": "15/04/2022-13:34:30",
                    "content": "Hey @Asgeir and @julesl23 , sorry for the delay in responding! Some of the other co-authors (Zargham and Isaac) and I recently had a chance to work on this in-person during a conference last week. TL;DR: instead of asking DAOs to interact with the existing Poster contract in order to emit an event describing their daoURI, we will encourage DAOs to deploy a new, thin contract that contains functions to display and manage daoURI. This is similar to one of @Asgeir\u2019s recommendations to deploy a new Poster-like contract. The spec for that contract is written below. We will also deploy a factory contract to make it easier to deploy these contracts (so in practice the DAO just needs to emit a contract interaction, just as with Poster) and to take care of other \u201cconvenience\u201d things like detecting the DAO contract form & deploying an fully-functioning endpoint, but the factory contract will not be part of the specification. ALSO, in response to comments from one of the EIP editors, we are planning to rename the standard to \u201cEIP-4824 DAO API\u201d (this might help explain the repeated references to \u201cAPI\u201d in the rationale below).  Rationale Migrating or upgrading contracts is a nontrivial task, and asking DAOs to migrate contracts just in order to implement the daoURI interface presents a significant barrier to adoption. On the other hand, it is relatively straightforward to ask DAOs to (1) deploy a new \u201cAPI manager\u201d contract and then (2) verify ownership via a contract interaction with the manager contract. In cases where the new contract is deployed via a contract interaction with a factory contract, the two steps above can be condensed into a single contract interaction. We also considered allowing DAOs to \u201cpost\u201d their daoURI by interacting with an existing contract, e.g. one based on EIP-3772 Poster, in order to emit an event containing the daoURI address. The issue with this option is that daoURI is a key part of a DAO and we believe it should live in DAO\u2019s own contract space and be \u201cself-hosted\u201d rather than be tied to an external contract. Not having control over the daoURI contract also makes it harder to transfer ownership of the DAO\u2019s API due to contract migrations or other events. [side note: Zargham referred to this manager contract as a kind \u201cmutable NFT\u201d]  DAO API Manager Contract Specification Here\u2019s a complete specification of that contract; we will refine this spec into an actual contract specification that will go into the standard.  Goals  provide DAOs a means of \u201cowning\u201d the URI pointing to their metadata increase discoverability of the URI from a DAO\u2019s existing contract(s) allow DAOs the ability to update their metadata (in this case, just daoURI) provide on-chain transparency for updates to their data   Data Structure  Owner:  Offer: {ToBeOwner: , Deadline: } daoURI:    Restricted Methods (msg sender restriction) Offer Ownership (OwnerOnly)  assert msg sender is Owner input message has 1 argument  optionally we generate block height a \u201cDeadline\u201d after which the offer is timed out posterior state: ToBeOwner is changed to the argument  emit a proposed change of ownership event  Claim Ownership (unique state depended address)  assert msg sender is ToBeOwner ++ assert the blockheight is before the deadline (probably using Get Offer Status method below) input message has no argument posterior state: Owner is changed to ToBeOwner emit a change of Owner event  Update URI (OwnerOnly)  assert msg sender is Owner input message has 1 argument  posterior state: daoURI is changed to the argument  emit a change of URI event   Public methods Get Owner  no restrictions on who can call this method no arguments required returns Owner field intended to run off chain (since it doesn\u2019t mutate the contract state)  Get Offer Status  no restrictions on who can call this method no arguments required returns True if the deadline is not past, and false if it has intended to run off chain (since it doesn\u2019t mutate the contract state)  Get Candidate Owner  no restrictions on who can call this method no arguments required returns the 0x000 address (or the current Owner) if get offer status is False returns the ToBeOwner address if offer status is True intended to run off chain (since it doesn\u2019t mutate the contract state)  Get daoURI  no restrictions on who can call this method no arguments required returns daoURI field intended to run off chain (since it doesn\u2019t mutate the contract state)  ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "3rd party or author wants to collaborate on proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.139524948735476
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/brickpop",
                    "index": "29",
                    "likes": "1",
                    "time": "16/06/2022-13:55:29",
                    "content": "Hi there, This is my first contribution, apologies if I is is slightly out of scope. I was recently onboarded to the DAOStar initiative in the scope of the Aragon project (@nivida and Michael Heuer) and I found a couple of topics that I would like to gather your feedback from, as they may affect other DAO tooling as well.  Standardised Multi endpoint URL\u2019s Talking about a DAO API, it seems unavoidable to deal with centralized services. But at the same time, DAO\u2019s are also likely to pin static metadata through IPFS or similar. Centralized + decentralized. If the value behind daoURI() or any JSON URI field is interpreted at the will of the implementer, there\u2019s a risk that some DAO details can be browsed on one platform but not on another one. What\u2019s the common intuition about endpoints?   https://service.net/file.json (no integrity check) ipfs://ipns/<ipns-name>/meta.json ipfs://ipfs/<cid>/meta.json  I Vocdoni we went a bit further back in 2018 and drafted a simple solution that could inspire some standardisation on the DAO API side. Example of an on-chain URL: ipfs://ipns/<ipns-name>/meta.json,ipfs://ipfs/<cid>,https://server-fallback.net/meta.json!<expected-hash>  Split the URL by commas ,  Try to resolve from left to right If the https endpoint is fetched, hash the data and compare it to the value after the ! bang symbol (optional)  I would be glad to get your feedback.  Multiple types of membership Another topic where I\u2019d like your feedback is about the fact that some DAO\u2019s may have more than one membership model in parallel. Example:  A group of wallets on a multisig can approve Action 1 at any time A massive group of ERC20 (weighted) holders can approve Action 2 after a two-week vote People with a valid ZK proof based on off-chain data can vote to approve Action 3  There may be cases in which a flat list of members doesn\u2019t accurately represent de definition of the membership. In some cases it may not even be possible to generate a deterministic list of wallets. Does this scenario echo with someone else? Thank you! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.344322344322344
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "30",
                    "likes": "0",
                    "time": "20/06/2022-01:14:22",
                    "content": " I Vocdoni we went a bit further back in 2018 and drafted a simple solution  that could inspire some standardisation on the DAO API side. Example of an on-chain URL: ipfs://ipns/<ipns-name>/meta.json,ipfs://ipfs/<cid>,https://server-fallback.net/meta.json!<expected-hash>  This seems very sensible to me, and could be used to designate fallbacks even if we assume DAOs don\u2019t use IPFS. That said, I think this could be a separate standard from EIP-4824. We can, however, start playing around with something like this in our own internal implementations.  There may be cases in which a flat list of members doesn\u2019t accurately represent de definition of the membership. In some cases it may not even be possible to generate a deterministic list of wallets.  Agreed; however, EIP-4824 doesn\u2019t define how DAOs define membership internally, just a mechanism for publishing a list of records. They are free to define multiple membership categories, and then record them via some sort of \u201ccategory\u201d field in each member record. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.605769230769231
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/brickpop",
                    "index": "31",
                    "likes": "0",
                    "time": "22/06/2022-16:21:54",
                    "content": "Thank you for the response Josh,     thelastjosh:  This seems very sensible to me, and could be used to designate fallbacks even if we assume DAOs don\u2019t use IPFS. That said, I think this could be a separate standard from EIP-4824. We can, however, start playing around with something like this in our own internal implementations.    What would we need for an interim recommendation to eventually be part of the current draft? What\u2019s the procedure to start a separate EIP? A new post on the Ethereum Magicians forum?      thelastjosh:  They are free to define multiple membership categories, and then record them via some sort of \u201ccategory\u201d field in each member record    Then, may it be useful to propose a JSON schema for it and some recommended values? There is already a recommendation about proposal status enum\u2019s, where each DAO framework has its own values. Maybe there can be a similar thing with categories? Regarding endpoints tied to a backend (members, activity), would it make sense to suggest a pagination mechanism? The list of all USDC token holders may be quite large.   I\u2019d also like to ask about another topic regarding metadata contents, like a DAO\u2019s description. Is there consensus about how description texts should be interpreted?  Plain text, wrapped. Plain text, transforming line breaks Plain text, converting line breaks into paragraphs Markdown (restricted subset) Markdown HTML  Thank you! ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party extending to proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.58474025974026
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/crazyrabbitLTC",
                    "index": "32",
                    "likes": "0",
                    "time": "20/10/2022-20:30:06",
                    "content": "Hey folks! Wanting to check back in on this. As a comment, I think we probably shouldn\u2019t include offerOwnership or claimOwnership in the standard. This is a rather opinionated legacy way of defining ownership and not very future proof. It would be better if rather these kinds of update were instead guarded by roles such as OpenZeppelin Access Control. This way DAO\u2019s can create ownership sets rather than relying upon a singular master address. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.75
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "33",
                    "likes": "0",
                    "time": "24/10/2022-12:11:46",
                    "content": "Just checking, but by offerOwnership or claimOwnership you mean aspects of the on-chain registration contract for managing ownership of daoURI? ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 3.4375
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/parseb",
                    "index": "34",
                    "likes": "0",
                    "time": "31/10/2022-09:27:44",
                    "content": "Wrote a lot more; but I don\u2019t want to waste your time. In short: Please keep it assumption free. Source of worry: this seems to assume that DAOs necessarily have a proposal system and can only affect themselves and the world through it. While it is true that most DAO frameworks do so, one cannot dismiss the possibility that this common feature is nothing more than a skewmorphic and facile default. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.875
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "35",
                    "likes": "1",
                    "time": "31/10/2022-15:56:39",
                    "content": " Source of worry: this seems to assume that DAOs necessarily have a proposal system and can only affect themselves and the world through it. While it is true that most DAO frameworks do so, one cannot dismiss the possibility that this common feature is nothing more than a skewmorphic and facile default.  I very much agree with this @parseb ; in practice there are plenty of ways for a DAO to affect the real world / blockchain state without going through a formal proposal system (as we typically imagine it), e.g. depending on the contract, a behind-the-scenes administrator or multisig might execute actions without putting it to any kind of vote or approval process. In general, we expect DAOs adopting the standard to publish daoURI and deploy a registration contract. Those who don\u2019t have conventional proposals will certainly not maintain a proposalsURI endpoint, which is fine. It would be nice to standardize what it means to have a proposal system, so we can always and easily verify that when a contract action executes, it DID go through a formal proposal system rather than through some other execution authority. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is explaining proposal",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.833771929824562
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/thelastjosh",
                    "index": "36",
                    "likes": "1",
                    "time": "31/10/2022-15:56:51",
                    "content": "ALSO, @crazyrabbitLTC in response to your question @izkp and @mzargham are going to write a blog post answering the access control / roles question in more detail. Will post here once that\u2019s written. ",
                    "links": [],
                    "GPT-discussion-categories": [],
                    "Sentiment": 7.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/izkp",
                    "index": "37",
                    "likes": "1",
                    "time": "15/11/2022-14:45:20",
                    "content": "Just opened a PR on the EIP repo suggesting that we add a contract registry field. This would allow DAOs to tag other relevant contracts besides their main executor   GitHub    Comparing ethereum:master...ipatka:patch-1 \u00b7 ethereum/EIPs The Ethereum Improvement Proposal repository. Contribute to ethereum/EIPs development by creating an account on GitHub.      For example, a Nouns style DAO consists of the following contracts which should all be tagged:  ERC721 governance token Treasury Logic contract Upgradeable proxies Core team Veto committee  I am recommending we add this as another URI, contractsRegistryURI {     \"@context\": \"<http://www.daostar.org/schemas>\",     \"type\": \"DAO\",     \"name\": \"<name of the DAO>\",     \"contracts\": [         {             \"type\": \"EthereumAddress\",             \"id\": \"<address or other identifier>\", \t\t\t\t\t\t\"label\": \"Treasury\"         },         {             \"type\": \"EthereumAddress\",             \"id\": \"<address or other identifier>\", \t\t\t\t\t\t\"label\": \"Governance Token\"         }     ] }  ",
                    "links": [
                        "https://github.com/ethereum/EIPs/compare/master...ipatka:EIPs:patch-1"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party extending to proposal",
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 4.601190476190476
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/izkp",
                    "index": "38",
                    "likes": "0",
                    "time": "15/11/2022-16:28:48",
                    "content": "I updated it to use OZ access control. Thanks for the recommendation  github.com   metagov/daostar/blob/23e8fa6722217154ffb38a5ff0631f6342b30f2a/contracts/src/Registration.sol // SPDX-License-Identifier: MIT pragma solidity 0.8.13;  import {AccessControl} from \"openzeppelin/access/AccessControl.sol\"; import {Clones} from \"openzeppelin/proxy/Clones.sol\";  /// @title EIP-4824 DAOs /// @dev See <https://eips.ethereum.org/EIPS/eip-4824> interface EIP4824 {     /// @notice A distinct Uniform Resource Identifier (URI) pointing to a JSON object following the \"EIP-4824 DAO JSON-LD Schema\". This JSON file splits into four URIs: membersURI, proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a JSON file that conforms to the \"EIP-4824 Members JSON-LD Schema\". The proposalsURI should point to a JSON file that conforms to the \"EIP-4824 Proposals JSON-LD Schema\". The activityLogURI should point to a JSON file that conforms to the \"EIP-4824 Activity Log JSON-LD Schema\". The governanceURI should point to a flatfile, normatively a .md file. Each of the JSON files named above can be statically-hosted or dynamically-generated.     function daoURI() external view returns (string memory _daoURI); }  error NotDaoOrManager(); error NotDao(); error NotCandidate(); error AlreadyInitialized(); error OfferExpired();  /// @title EIP-4824: DAO Registration       This file has been truncated. show original      ",
                    "links": [
                        "https://github.com/metagov/daostar/blob/23e8fa6722217154ffb38a5ff0631f6342b30f2a/contracts/src/Registration.sol",
                        "https://github.com/metagov/daostar/blob/23e8fa6722217154ffb38a5ff0631f6342b30f2a/contracts/src/Registration.sol"
                    ],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "3rd party or author wants to collaborate on proposal"
                    ],
                    "Sentiment": 5.729166666666666
                }
            ]
        }
    ],
    "group_index": "1613"
}