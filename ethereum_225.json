{
    "poll_list": [],
    "discourse_list": [
        {
            "thread_link": "https://ethereum-magicians.org/t/eip-5987-permissionless-transfer-with-authorization/11771",
            "title": "EIP-5987 - Permissionless Transfer With Authorization ",
            "index": 11771,
            "category": [
                "EIPs"
            ],
            "tags": [
                "gas"
            ],
            "content": [
                {
                    "author_link": "https://ethereum-magicians.org/u/mgrant",
                    "index": "1",
                    "likes": "1",
                    "time": "17/11/2022-11:31:39",
                    "content": "Thread to discuss EIP-5987 ",
                    "links": [],
                    "GPT-summary": "The author of EIP-5987 is seeking feedback and initiating a discussion about the proposal.",
                    "GPT-proposal-categories": [
                        "Smart contract updates",
                        "Interoperability and Scalability",
                        "None",
                        "None",
                        "None"
                    ],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "Author of proposal is explaining proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "2",
                    "likes": "0",
                    "time": "20/11/2022-04:29:48",
                    "content": "I would like to see support for contract wallets added.  Perhaps something like a registry where a wallet can register a \u201csignature validator\u201d contract, and then an opaque set of bytes can be provided (instead of v,r,s) which is given to the signature validator contract to verify whether the provided data is sufficient to allow the proposed transfer. Generally speaking, we are trying to move away from EOA wallets, and this feels like it enshrines them a bit more (similar to permit) as it makes it so EOAs can do signed transfers while contract wallets have to follow the approve-send flow. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.916666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mgrant",
                    "index": "3",
                    "likes": "0",
                    "time": "20/11/2022-13:33:32",
                    "content": "@MicahZoltu thanks for the feedback. Contract support would be a separate, parallel EIP. It is not in scope of this EIP. ",
                    "links": [],
                    "GPT-discussion-categories": null,
                    "Sentiment": 5.5
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mgrant",
                    "index": "4",
                    "likes": "0",
                    "time": "20/11/2022-13:37:24",
                    "content": "@MicahZoltu also I don\u2019t know if I agree that we are trying to move away from EOAs. Both can and will live in parallel for different use-cases. I don\u2019t want to sidetrack this thread\u2026but I would love to have a side chat on the merits of EOA vs contracts. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 5.795454545454546
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "5",
                    "likes": "0",
                    "time": "20/11/2022-17:44:33",
                    "content": "    mgrant:  I don\u2019t know if I agree that we are trying to move away from EOAs   You may not agree with it, but the entire Ethereum ecosystem is trying to move away from them. EOAs have a strict subset of the functionality of contract accounts, which is why the vast majority of Ethereum developers support some form of AA. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal"
                    ],
                    "Sentiment": 5.0
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mgrant",
                    "index": "6",
                    "likes": "0",
                    "time": "20/11/2022-20:58:14",
                    "content": "@Pandapip1 no one person can speak for \u201cthe entire ecosystem\u201d. Account abstraction is not mutually exclusive with better EOAs. AA is to add functionality for contracts to behave similar to EOAs. Are we going to avoid any improvement to EOA UX in the years in-between now and when full AA is realized? Also, who is going to pay deployment cost for these AA contracts? If a new user wants to onboard into the system and they do not have ETH how do they get an AA contract\u2026they need to trust a third party? That does not align with the self custody model we must strive for. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.847402597402597
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mgrant",
                    "index": "7",
                    "likes": "0",
                    "time": "20/11/2022-21:32:23",
                    "content": "Side note: EIP-3009 already contains receiveWithAuthorization so contracts do not need to do approve/send flow. The limitation is that receiveWithAuthorization requires to address to be msg.sender to prevent frontrunning, which does not work with a permissionless relayer. EDIT: hmmm apparently receiveWithAuthorization never made it into the EIP-3009 PR (despite it being implemented in the USDC contract). The original discussion here does have more info. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback"
                    ],
                    "Sentiment": 6.541666666666667
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/Pandapip1",
                    "index": "8",
                    "likes": "0",
                    "time": "21/11/2022-01:25:52",
                    "content": "    mgrant:  no one person can speak for \u201cthe entire ecosystem\u201d.   You\u2019re right, but I challenge you to find a single core dev that doesn\u2019t support some form of account abstraction. Why not support EIP-1271? ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party asking questions about proposal"
                    ],
                    "Sentiment": 5.357142857142857
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/MicahZoltu",
                    "index": "9",
                    "likes": "0",
                    "time": "21/11/2022-06:43:26",
                    "content": "    mgrant:  also I don\u2019t know if I agree that we are trying to move away from EOAs. Both can and will live in parallel for different use-cases. I don\u2019t want to sidetrack this thread\u2026but I would love to have a side chat on the merits of EOA vs contracts.   The general form of the problem is that the more we improve EOAs (e.g., UX improvements) the harder it is to get people to switch to contract wallets, which provide significant security benefits.  A big part of the issue here is information asymmetry between users and developers, where the users often don\u2019t realize the risks they are taking when they use an EOA with a written down seed phrase (compared to say a social or time based recovery wallet). Note: I recognize that this is just another form of the argument that \u201cwe know better than the users, so we should build things that protect them even when they don\u2019t realize they need it\u2026 for their own good\u201d. Note 2: I would not block an EIP like this from being included, but I would like to see another EIP released at the same time and lobbied for integration in tandem with this EIP.  What I would really like to see avoided is tokens like USDC integrating this and not integrating a similar EIP that provides the same UX but for contract wallets. Already on Uniswap it is easier for users to securely swap USDC with an EOA than with a contract wallet, so this isn\u2019t some hypothetical problem, it is a real problem that exists today. ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "3rd party giving constructive criticism of proposal",
                        "3rd party asking questions about proposal",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 5.852405635300373
                },
                {
                    "author_link": "https://ethereum-magicians.org/u/mgrant",
                    "index": "10",
                    "likes": "0",
                    "time": "21/11/2022-10:28:14",
                    "content": "@MicahZoltu @Pandapip1 to be clear, I totally recognize that better account abstraction is going to be a huge value add. Certainly excited on that front! I think we can agree that there are two distinct bodies of work:  Add permissionless meta tx relay for externally owned accounts. Add permissionless meta tx relay for contract accounts.  This EIP is only addressing #1. However, I do understand that improvements to EOAs without similar improvements to contract accounts decrease the likelihood of contract account adoption, and I agree that #2 is important. But I do have a few concerns:  Difficulty. What I like about this EIP as it stands is that it is incredibly simple (just 13 additional lines when compared to original EIP-3009). I worry that building support for contract account permissionless relay will require a lot of new code and as you know established tokens such as USDC are quite risk averse, especially when thinking about potential on-chain changes. Standardization. There are a lot of ways to solve this, but what one is the best? What standard will be adopted? In the meantime, while consensus is being reached, a wrapper contract can handle all of this logic with some massaging from custodian / contract account deployers. Adoption. Are users even interested in permissionless relay of EOAs? Is it worth trudging through the above 2 challenges to get everything working for contract accounts or should we iterate and re-evaluate later if EOAs prove to be successful?  (Thank you both for all of the feedback and discussion, this is really helpful context!) ",
                    "links": [],
                    "GPT-discussion-categories": [
                        "Author of proposal is asking for feedback",
                        "None of the topics listed match",
                        "None of the topics listed match"
                    ],
                    "Sentiment": 6.006022727272727
                }
            ]
        }
    ],
    "group_index": "225"
}